{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":0},{"_id":"source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":0},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/1005. K 次取反后最大化的数组和.md","hash":"d741fd93425c4bb543504e5a37a5e9f68d02455d","modified":1640873976246},{"_id":"source/_posts/1122. 数组的相对排序.md","hash":"1ad7d9b9f815f121f35d25915f55a203620252ac","modified":1640874009913},{"_id":"source/_posts/1078. Bigram 分词.md","hash":"dceaf5bb1db03d482fc5cba9620aaadd4f4792e1","modified":1640873992501},{"_id":"source/_posts/1154. 一年中的第几天.md","hash":"d88ec8775e761a0fd8b8f5c540c885949613cbbd","modified":1640874065911},{"_id":"source/_posts/119. 杨辉三角.md","hash":"0a726c55cd81bec72469d6f10e5ca0ef25e20eeb","modified":1640876293071},{"_id":"source/_posts/118. 杨辉三角.md","hash":"7e7b96cadaed9abbf9e43a170a2246d2cbd9589b","modified":1640875102529},{"_id":"source/_posts/136. 只出现一次的数字.md","hash":"2a21a46b0c351a79bd2057ede4022cd7cbc519d5","modified":1640876337102},{"_id":"source/_posts/1446. 连续字符.md","hash":"d91f63816c450cc63feb87ddd8922c781621bb7a","modified":1640876348263},{"_id":"source/_posts/1518. 换酒问题.md","hash":"81f4901e80a9e517ed1ac6190a9d58af5ba9d2cc","modified":1640876359707},{"_id":"source/_posts/1816. 截断句子.md","hash":"9fb4baa5ce3a207b0a20253a97f1f51383e2ccf2","modified":1640876380912},{"_id":"source/_posts/189. 轮转数组.md","hash":"717f4d44a492caee29759139a3f06b10360dea33","modified":1640876390842},{"_id":"source/_posts/1995. 统计特殊四元组.md","hash":"be9f282ed9c616b0dfe4585f36f1215ef1d8b3e5","modified":1640876399608},{"_id":"source/_posts/167. 两数之和 II - 输入有序数组.md","hash":"ba1d050d3990f04ab6543a23cc683736c821441a","modified":1640876370837},{"_id":"source/_posts/242. 有效的字母异位词.md","hash":"b59dee1a4de940ee748d427de9ad41c039c51ab8","modified":1640876457186},{"_id":"source/_posts/217. 存在重复元素.md","hash":"5962d30137ddcc68882cd00641b74e2a5ed5245d","modified":1640876423407},{"_id":"source/_posts/202. 快乐数.md","hash":"8d46f299ec912d66a3f92aa486a8edadb7cebc08","modified":1640876408754},{"_id":"source/_posts/258. 各位相加 .md","hash":"7f59c132138a267300f6efbfac7c693d2bce0e91","modified":1640876466898},{"_id":"source/_posts/283. 移动零.md","hash":"f7035b294648fd78e7248f77011a75f808342b24","modified":1640876487143},{"_id":"source/_posts/278. 第一个错误的版本.md","hash":"9e49a3bae979b9a97664db3d308e11424cbc8946","modified":1640876476223},{"_id":"source/_posts/318. 最大单词长度乘积.md","hash":"5ff5803359eaed22b1f4954db2e64669f768f0f8","modified":1640876496685},{"_id":"source/_posts/344. 反转字符串.md","hash":"49cb60774ffe57dfef3823f4bfdc8a19f54faacc","modified":1640876506512},{"_id":"source/_posts/35. 搜索插入位置.md","hash":"d697455acc1fd9f39a1776e4a07cec3fa077b27e","modified":1640876516404},{"_id":"source/_posts/391. 完美矩形.md","hash":"69cebe882340d4c2d939b4bfeb965e039dd8293b","modified":1640876541988},{"_id":"source/_posts/383. 赎金信.md","hash":"7cdd80bbb0e66d20fd6a26c9702b65bcb9bf4dfa","modified":1640876528153},{"_id":"source/_posts/414. 第三大的数.md","hash":"f458ba6b1a26e699fdb097578499d790614ae7f4","modified":1640876558532},{"_id":"source/_posts/438. 找到字符串中所有字母异位词.md","hash":"360c41224e4b9878b707866644b7f076aea5d912","modified":1640876569648},{"_id":"source/_posts/48. 旋转图像.md","hash":"9195a95006df22730cbdcda52d67143bb3088b6c","modified":1640876579452},{"_id":"source/_posts/506. 相对名次 .md","hash":"5820118217f81c8603497926c49498e00fbd6179","modified":1640876613590},{"_id":"source/_posts/520. 检测大写字母.md","hash":"3f04a052a654666cef6f92027151a48cffdd2d8f","modified":1640876622086},{"_id":"source/_posts/563. 二叉树的坡度.md","hash":"595b3e0f13f332d4c6aa8ace4d09e5e646cfc3c7","modified":1640876640470},{"_id":"source/_posts/495.提莫攻击.md","hash":"ad69d1debb2644db7618f4f7ee0dc00043c2b13f","modified":1640876591660},{"_id":"source/_posts/557. 反转字符串中的单词 III.md","hash":"b1b1ba675357ba68af04745a53801d90182ac42a","modified":1640876630553},{"_id":"source/_posts/567. 字符串的排列.md","hash":"9d7c1c4526057e3cd2ef515b99c8f0fabc60b172","modified":1640876650038},{"_id":"source/_posts/594. 最长和谐子序列.md","hash":"9177c183340f96dd38f63dd8bd10030dd4a1de01","modified":1640876658330},{"_id":"source/_posts/748. 最短补全词.md","hash":"c7f3a4f16c7219e7972de82e61187d85e6c099c0","modified":1640876676337},{"_id":"source/_posts/704. 二分查找.md","hash":"3de2d280eed640e85b3dd7b3f1b59dcd488327e7","modified":1640876667591},{"_id":"source/_posts/876. 链表的中间结点.md","hash":"fd5e0497c147c3e445951bc44890ca41ff7953ff","modified":1640876707889},{"_id":"source/_posts/859. 亲密字符串.md","hash":"33b46dcddc1dcacade9c409f1ee4c22b684fda72","modified":1640876699075},{"_id":"source/_posts/794. 有效的井字游戏.md","hash":"77de0ca30372d45579944041bd9768e4acb2c043","modified":1640876685944},{"_id":"source/_posts/88. 合并两个有序数组.md","hash":"df4e5d6ba891414b91703e28d338f53b6ecb4365","modified":1640876717410},{"_id":"source/_posts/997. 找到小镇的法官.md","hash":"ee540ce2a97008d4cbffb339dd526038d7e953b0","modified":1640876728420},{"_id":"source/_posts/Oracle期末知识点总结.md","hash":"82758cb8f4bcfd1ba447f29bb1ec0b81259bb6ef","modified":1640876761732},{"_id":"source/_posts/网络编程期末知识点总结.md","hash":"f914e545f32dd82198c63281e4c53e69d89f1762","modified":1640876763138},{"_id":"source/archives/index.md","hash":"1ce8976c3e9cbce613ae32d95a89a8301145f61a","modified":1640840861013},{"_id":"source/about/index.md","hash":"783651a22d45a46783e2e9f0b5ed7f314c874450","modified":1640842867346},{"_id":"source/guestbook/index.md","hash":"22519d5b33f211e49c4b357b5be2a1057c554471","modified":1640844183229},{"_id":"source/categories/index.md","hash":"f32900b965c4560262988464d275f6cfe6a6d77d","modified":1640840808902},{"_id":"source/images/avatar.jpeg","hash":"fe71c33866e15093924e8662b6e032fb94d64e0b","modified":1628079188213},{"_id":"source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640837927604},{"_id":"source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640837927604},{"_id":"source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640837927729},{"_id":"source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640837927605},{"_id":"source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640837927730},{"_id":"source/tags/index.md","hash":"2cd52c36e08c491595882e1966ef0e5b5fd848c0","modified":1640841536580},{"_id":"source/sitemap/index.md","hash":"870960b65877131af483c17879f695768e7b059f","modified":1640843781987},{"_id":"source/_posts/Linux知识点总结.md","hash":"08e04a7213dd4b7169b81a3c06a04c730c1a906d","modified":1640876738864},{"_id":"source/images/favicon.ico","hash":"06fe12b8e4c30684672836c3b37544ad4464b292","modified":1640764254709},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1640849043632},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1640849043633},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1640849043633},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1640849043644},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1640849043643},{"_id":"themes/next/README.md","hash":"43fe29330352545446a532e6630866251129882a","modified":1640849043644},{"_id":"themes/next/_config.yml","hash":"d734b82f7dd862e9221df5de89792cbf2edbf4c3","modified":1640849043645},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1640849043644},{"_id":"themes/next/_vendors.yml","hash":"ba72c575e627697a050614411706cb20206d4b71","modified":1640849043646},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1640849043646},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1640849043693},{"_id":"themes/next/package.json","hash":"e527d094273cf3be4766630bbfe6cc8cf1eeb529","modified":1640849043692},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1640849043634},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1640849043636},{"_id":"themes/next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1640849043633},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1640849043635},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1640849043638},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1640849043639},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1640849043640},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1640849043638},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1640849043639},{"_id":"themes/next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1640849043640},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1640849043650},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1640849043651},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1640849043652},{"_id":"themes/next/languages/default.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1640849043653},{"_id":"themes/next/languages/es.yml","hash":"07955d78028cea2a590c63fdc2c01ca3ee05a727","modified":1640849043654},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1640849043653},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1640849043654},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1640849043655},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1640849043655},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1640849043656},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1640849043655},{"_id":"themes/next/languages/ko.yml","hash":"d6e2add7488065ec4f7d21cfcf7f0eaa877a84f4","modified":1640849043656},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1640849043656},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1640849043657},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1640849043657},{"_id":"themes/next/languages/ru.yml","hash":"7d13108f4a70ff6a162508a49678e4a477fa7b56","modified":1640849043657},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1640849043658},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1640849043658},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1640849043659},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1640849043659},{"_id":"themes/next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1640849043659},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1640849043647},{"_id":"themes/next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1640849043660},{"_id":"themes/next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1640849043660},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1640849043647},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1640849043648},{"_id":"themes/next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1640849043661},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1640849043690},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1640849043691},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1640849043691},{"_id":"themes/next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1640849043691},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1640849043692},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1640849043692},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1640849043761},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1640849043636},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1640849043637},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1640849043637},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1640849043638},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"7dec949b13131783e726facb2f4acde0945db1b8","modified":1640849043640},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"46d0b29dc561fe571d91fd06a7c8ef606b984c72","modified":1640849043641},{"_id":"themes/next/.github/workflows/linter.yml","hash":"b57d876c90d1645a52bbba8a52d47ad0b0c96140","modified":1640849043641},{"_id":"themes/next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1640849043641},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1640849043642},{"_id":"themes/next/.github/workflows/stale.yml","hash":"32e7dfb55ecf8af66aebfed471be09ef2eb10e18","modified":1640849043642},{"_id":"themes/next/.github/workflows/tester.yml","hash":"645bb69d0b6cc062c47fabb1ccb2297ccbcfa7f5","modified":1640849043643},{"_id":"themes/next/docs/ru/README.md","hash":"e1d6bf38cf34972ca2ee5331a727787fe14082a3","modified":1640849043648},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1640849043649},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1640849043649},{"_id":"themes/next/docs/zh-CN/README.md","hash":"354b0b0a24cbe97cccf2ec8bd97eb7d624fa0dea","modified":1640849043650},{"_id":"themes/next/layout/_macro/post.njk","hash":"367cafd3acc1c6a045d8a72de0479aabbf4a3559","modified":1640849043662},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1640849043662},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eec74e135d01948361020140c3798769e1e7363b","modified":1640849043663},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d6b7bb7764e3b471ed6b4e5715f6cbe2dd453f59","modified":1640849043663},{"_id":"themes/next/layout/_partials/footer.njk","hash":"65f0d69084e0e26a0153d3b8db610a15c4102691","modified":1640849043664},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1640849043671},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1640849043668},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1640849043676},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1640849043677},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1640849043677},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1640849043685},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1640849043685},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1640849043687},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1640849043687},{"_id":"themes/next/scripts/events/index.js","hash":"8bca7ae3cebb3857866d718a562c5d8820fcfbe5","modified":1640849043693},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1640849043687},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1640849043699},{"_id":"themes/next/scripts/filters/locals.js","hash":"8499b9c8c6cdae8aa7e4f5ec5b4b76037969db76","modified":1640849043700},{"_id":"themes/next/scripts/filters/minify.js","hash":"9789307212d729c8cb65e3541348938a1965ff6f","modified":1640849043700},{"_id":"themes/next/scripts/filters/post.js","hash":"5a132b7f9280a40b3d5fb40928c8cbbe071fe6f6","modified":1640849043701},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1640849043704},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1640849043704},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1640849043705},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1640849043704},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1640849043705},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1640849043705},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1640849043706},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1640849043707},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1640849043706},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1640849043707},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1640849043708},{"_id":"themes/next/scripts/helpers/engine.js","hash":"18cc82558e7a9f3b6086c41ce9de0c46e807a66c","modified":1640849043702},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1640849043707},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1640849043702},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"e73f43f1bcb46965e317285d6831e129a40ea59b","modified":1640849043702},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1640849043703},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1640849043703},{"_id":"themes/next/source/css/_mixins.styl","hash":"2ca820b221fb7458e6ef4fbcff826e1d1cf4b473","modified":1640849043732},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1640849043709},{"_id":"themes/next/source/css/noscript.styl","hash":"7dc97674c232f6ca71e48b95e3f66472cd8e9c05","modified":1640849043740},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1640849043740},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640849043741},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1640849043741},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640849043741},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640849043742},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1640849043744},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640849043743},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640849043742},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1640849043744},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1640849043744},{"_id":"themes/next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1640849043745},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1640849043745},{"_id":"themes/next/source/js/next-boot.js","hash":"b0bdb542a809932182cfbb8772328115142a0b77","modified":1640849043745},{"_id":"themes/next/source/js/schedule.js","hash":"6dade4388aa6579576a35758075134f573985d57","modified":1640849043747},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1640849043746},{"_id":"themes/next/source/js/utils.js","hash":"c13fa66aae52f59f88881738c00ebdcaf0209496","modified":1640849043758},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1640849043759},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1640849043759},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1640849043762},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1640849043760},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1640849043762},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1640849043761},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1640849043762},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1640849043763},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1640849043763},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1640849043764},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1640849043764},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1640849043763},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1640849043765},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1640849043765},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1640849043765},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1640849043766},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"bd87e3a877ebab4508fc2b48b41c96b45c4dd970","modified":1640849043664},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"abcc550cb14374fb7452d6edee63967ad9583d1c","modified":1640849043665},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1640849043667},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"f066390762faf6684a523e2eb943420023aac2b1","modified":1640849043667},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1640849043666},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"67372599fe025ebe442b73151e5bb56415758356","modified":1640849043667},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"940cad08a67e6c361214045096bd3cdffdf44fcf","modified":1640849043667},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"9c136edd2248e2d50c1f6110b75e2b75c299bbd7","modified":1640849043668},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1640849043669},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1640849043670},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"130e776575d634201d4f8ef3d78dc12624f19fde","modified":1640849043670},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1640849043669},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1640849043672},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1640849043671},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1640849043673},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1640849043673},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"80d3dac42740d2aef677e25165e31c05eb048887","modified":1640849043674},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1640849043674},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1640849043675},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1640849043676},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1640849043675},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1640849043675},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1640849043679},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c7cea42f6db2137c11ca1d83e43fcb7ad7ccfb89","modified":1640849043680},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1640849043682},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1640849043680},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1640849043682},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"465fcffd4216f8ca0ea2613fe9cf7308f71b9da5","modified":1640849043681},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1640849043683},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1640849043680},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1640849043683},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1640849043682},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1640849043683},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1640849043683},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1640849043684},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1640849043684},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"a84db8bc8804335f95609a221ac1746433dcdc89","modified":1640849043686},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1640849043684},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1640849043685},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1640849043686},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1640849043688},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1640849043690},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1640849043690},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1640849043688},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1640849043689},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1640849043688},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1640849043689},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1640849043689},{"_id":"themes/next/scripts/events/lib/config.js","hash":"a912944cae0d864458d365867b8a9c89f348e68a","modified":1640849043694},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1640849043694},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1640849043694},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"cfff8331fdaa2ede4ab08c58cfc6d98c7d2374d9","modified":1640849043696},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1640849043696},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"8508e96a5f883a5a57d8c1b8b5ea438fa29aafd3","modified":1640849043695},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1640849043697},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"2f7057a8d3fce08aa7e2a17d7b7a1f03ac3d8ed6","modified":1640849043695},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1640849043697},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1640849043698},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1640849043698},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1640849043697},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1640849043698},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1640849043699},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1640849043739},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1640849043739},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1640849043738},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1640849043739},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1640849043740},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1640849043752},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"539c5bb51244f7f4aa98884f3229d128c1cefc40","modified":1640849043754},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1640849043754},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1640849043754},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e1b4bf9aa47d14c790a0920d7dbb3e9812d4358b","modified":1640849043747},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1640849043709},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1640849043716},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1640849043710},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1640849043721},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1640849043721},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1640849043725},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1640849043726},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1640849043727},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1640849043725},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1640849043727},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1640849043727},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1640849043728},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1640849043733},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1640849043732},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1640849043733},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"c9a9e07b721bb2376e24753ae0a9452431439114","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1640849043735},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f337981f8f20944ed366694aea88146c7b0a13ab","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1640849043735},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"28030c61288cc0e1321b18373a5c79029fd76a53","modified":1640849043735},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1640849043736},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1640849043736},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1640849043736},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1640849043738},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1640849043738},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1640849043748},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1640849043748},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1640849043749},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1640849043748},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1640849043749},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b1dd519dc3b1153c9d2ba2d35f68ca8f73f33bae","modified":1640849043750},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1640849043750},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1640849043749},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1640849043750},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1640849043751},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1640849043751},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1640849043751},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1640849043753},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1640849043752},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ea94731438d8c518d946601f8f46a65b92381fac","modified":1640849043755},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1640849043753},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"dc2b0e89aa32afc7f7a7e2d7a277dadb7f96e06d","modified":1640849043755},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1640849043756},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"d0829fe41d2fe86b8499e2a896556c1275ea0066","modified":1640849043756},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1640849043757},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"2618135cbcee6bf228f6734767de1995e5eaaac6","modified":1640849043757},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1640849043710},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1640849043711},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1640849043711},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1640849043711},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1640849043712},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1640849043712},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"7a34d020877273dcf11c25fa481409300efb8659","modified":1640849043713},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1640849043713},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1640849043714},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1640849043714},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1640849043713},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1640849043714},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1640849043715},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1640849043715},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1640849043716},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1640849043715},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1640849043716},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"25ea9a0af888355b3a046db1100b5cb0e2d6ef6e","modified":1640849043717},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1640849043717},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1640849043717},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1640849043718},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1640849043717},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1640849043719},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1640849043719},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1640849043719},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"67fc7a1eb59c8451eec34e572cbb2fd1424757bc","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1640849043721},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1640849043722},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1640849043722},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1640849043723},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1640849043723},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1640849043724},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1640849043723},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1640849043724},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1640849043724},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"a4003e1408844568cb5102a5a111046cb19b2d31","modified":1640849043726},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1640849043724},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1640849043726},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1640849043730},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1640849043730},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1640849043731},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"40a38f2129617ffd4e8d5cd78e982fdfc9941acf","modified":1640849043732},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1640849043731},{"_id":"public/about/index.html","hash":"b630cf0f33c7aff0d133e320b8f7f02f4d50f38a","modified":1640939070070},{"_id":"public/guestbook/index.html","hash":"471f65e22c8a9072fdbefc65d1c16992ee59c9e4","modified":1640939070070},{"_id":"public/categories/index.html","hash":"be5302957475cdbb18e591b5b26a274bfeb235d7","modified":1640939070070},{"_id":"public/tags/index.html","hash":"c9b3fbb1fd63f6ce35209c070cd257214547ef79","modified":1640939070070},{"_id":"public/sitemap/index.html","hash":"8ef247a4aae2a93a1a14e8df68f272888c76715d","modified":1640939070070},{"_id":"public/archives/page/5/index.html","hash":"dd4f766745863ade2db5e564fee4826b4d50fe3e","modified":1640939070070},{"_id":"public/archives/2021/page/5/index.html","hash":"2f7f2f284d5c09f8f94e7ae8ef58a5a465d26dc1","modified":1640939070070},{"_id":"public/archives/2021/12/page/5/index.html","hash":"82b69572d563db0ef564d17f94d9e1bdd50bb9b7","modified":1640939070070},{"_id":"public/tags/js/page/5/index.html","hash":"569a409a3f67b8778f617289eb5d9dd41dfc3ddc","modified":1640939070070},{"_id":"public/tags/leetcode/page/5/index.html","hash":"a36f16110e26c768bc06e773e6b48afee4c2b9a4","modified":1640939070070},{"_id":"public/archives/index.html","hash":"a927b1505ec6374d60039cb3a2c872b9006fcdac","modified":1640939070070},{"_id":"public/2021/12/30/网络编程期末知识点总结/index.html","hash":"a9b6fee8a87b01ec632242d6bfcd3c44d7a14376","modified":1640939070070},{"_id":"public/2021/12/30/Oracle期末知识点总结/index.html","hash":"5eba63fdfdbe75fdd3b4daabf907461a4b6d132e","modified":1640939070070},{"_id":"public/2021/12/30/Linux知识点总结/index.html","hash":"0b39d45be4818226cb1b7d51c073a5610ba4b731","modified":1640939070070},{"_id":"public/2021/12/30/1005. K 次取反后最大化的数组和/index.html","hash":"1545c3f37124af29b84b5c4e7d3e372d974bddb0","modified":1640939070070},{"_id":"public/2021/12/30/1078. Bigram 分词/index.html","hash":"522b67d195757690a28e11260136fd33222da947","modified":1640939070070},{"_id":"public/2021/12/30/1122. 数组的相对排序/index.html","hash":"2cc4848fc42e9091cdbce977bcc1ab2af5c6d885","modified":1640939070070},{"_id":"public/2021/12/30/1154. 一年中的第几天/index.html","hash":"82e930e652ce104464aa043b53755358a01f5ce8","modified":1640939070070},{"_id":"public/2021/12/30/118. 杨辉三角/index.html","hash":"64ddacc27846fa1a1ccf20ec4df80fc1157f2bdf","modified":1640939070070},{"_id":"public/2021/12/30/136. 只出现一次的数字/index.html","hash":"e9c64e8e471c99654cdfeb8b05f8968f8ef13825","modified":1640939070070},{"_id":"public/2021/12/30/119. 杨辉三角/index.html","hash":"a2c3d7fadecc83a5a10b43abba1e8cb289c4c299","modified":1640939070070},{"_id":"public/2021/12/30/1446. 连续字符/index.html","hash":"22484efa3a469372856f4bac0f9b29398f66c205","modified":1640939070070},{"_id":"public/2021/12/30/1518. 换酒问题/index.html","hash":"fd5d37dfbd26fec9601ca1c54a6eabc84c6d1653","modified":1640939070070},{"_id":"public/2021/12/30/189. 轮转数组/index.html","hash":"2f11961ceaf82d8e21597dae35d888b5348ab5f0","modified":1640939070070},{"_id":"public/2021/12/30/167. 两数之和 II - 输入有序数组/index.html","hash":"d8fe1b38bf702a04c9b497a5a221675bfc015e08","modified":1640939070070},{"_id":"public/2021/12/30/1816. 截断句子/index.html","hash":"e2180e30117b84b6bc110dca6c52fa8858c73ab8","modified":1640939070070},{"_id":"public/2021/12/30/1995. 统计特殊四元组/index.html","hash":"1abf34c0e16d32537c49e02c62d868a193889fd0","modified":1640939070070},{"_id":"public/2021/12/30/242. 有效的字母异位词/index.html","hash":"4a44a77a156b272067f3f671ee9d9923fbbd0739","modified":1640939070070},{"_id":"public/2021/12/30/217. 存在重复元素/index.html","hash":"186579a1ce14587656704bb2ecb7b5addae8c5fc","modified":1640939070070},{"_id":"public/2021/12/30/202. 快乐数/index.html","hash":"dc9d17f810919cc32afe97651a4b2a5af011e49f","modified":1640939070070},{"_id":"public/2021/12/30/258. 各位相加 /index.html","hash":"77c4a7f21eeb28f9be135ca45362d74a9960b845","modified":1640939070070},{"_id":"public/2021/12/30/278. 第一个错误的版本/index.html","hash":"591d20c60bf5c6dd881e034a4df22980542e5c58","modified":1640939070070},{"_id":"public/2021/12/30/283. 移动零/index.html","hash":"9053cd2d4c51c711f4976fbb2502b06360200ef9","modified":1640939070070},{"_id":"public/2021/12/30/318. 最大单词长度乘积/index.html","hash":"0032b3079313c02cfc5f8ea384d3d2bb928a6a0f","modified":1640939070070},{"_id":"public/2021/12/30/344. 反转字符串/index.html","hash":"8e6eca3ea2cd88dc3596316fcecf1369d9be7e47","modified":1640939070070},{"_id":"public/2021/12/30/35. 搜索插入位置/index.html","hash":"e9a7e676c7b43b2e151afb3e24eb5f6ff5242304","modified":1640939070070},{"_id":"public/2021/12/30/391. 完美矩形/index.html","hash":"1865a4d287c509f47723924c160cf0b7e8202bfb","modified":1640939070070},{"_id":"public/2021/12/30/383. 赎金信/index.html","hash":"bacfc1c473a75918b158a172e1a1e2298d9ac7ca","modified":1640939070070},{"_id":"public/2021/12/30/414. 第三大的数/index.html","hash":"de46885a7652b4541f499c9053ce3faa7c57659d","modified":1640939070070},{"_id":"public/2021/12/30/438. 找到字符串中所有字母异位词/index.html","hash":"3217e2520da03693583a3ec5d1efc3bb19bb6e34","modified":1640939070070},{"_id":"public/2021/12/30/48. 旋转图像/index.html","hash":"7d575b618c0d11a725d38c1e40de3a6f7e2863eb","modified":1640939070070},{"_id":"public/2021/12/30/506. 相对名次 /index.html","hash":"70e27417121bffcf1db824018678b94b9975d62b","modified":1640939070070},{"_id":"public/2021/12/30/520. 检测大写字母/index.html","hash":"7717a1e5c524775a62412f6a44247426851f5100","modified":1640939070070},{"_id":"public/2021/12/30/495.提莫攻击/index.html","hash":"31ff2372af6c9391acd7f8fc300e3e61a3f0f0bc","modified":1640939070070},{"_id":"public/2021/12/30/563. 二叉树的坡度/index.html","hash":"ac5d49109dfda1c22f91f25b63144fe83cadb244","modified":1640939070070},{"_id":"public/2021/12/30/557. 反转字符串中的单词 III/index.html","hash":"ebbc4f085df216914297b1bac115817b83f6ce48","modified":1640939070070},{"_id":"public/2021/12/30/567. 字符串的排列/index.html","hash":"7f1d36a4b5d53b1bebc61eda2ad0d1f4fb8b76fe","modified":1640939070070},{"_id":"public/2021/12/30/594. 最长和谐子序列/index.html","hash":"fd93c7b1dfb1f5dde4ad229529bf3794fe482557","modified":1640939070070},{"_id":"public/2021/12/30/704. 二分查找/index.html","hash":"41bbc4d49fe8345a2667529f2e559242f1e5a3a0","modified":1640939070070},{"_id":"public/2021/12/30/748. 最短补全词/index.html","hash":"4b9661116b0b5cd157cc9af6240d2e18f6cebd34","modified":1640939070070},{"_id":"public/2021/12/30/859. 亲密字符串/index.html","hash":"e54b924234c74ba4a00339648d85035df80bbe8c","modified":1640939070070},{"_id":"public/2021/12/30/794. 有效的井字游戏/index.html","hash":"84e25b746350c1ff1aa4dcff02b5ecdf6d9eb321","modified":1640939070070},{"_id":"public/2021/12/30/876. 链表的中间结点/index.html","hash":"dabdb353ca729b1710e9fae9e6ef2cac34c47326","modified":1640939070070},{"_id":"public/2021/12/30/88. 合并两个有序数组/index.html","hash":"922836846c5aa662a34ca53390ab6190e1161fe8","modified":1640939070070},{"_id":"public/2021/12/30/997. 找到小镇的法官/index.html","hash":"f4063f5f559e4b8a7f7d1e0ec4e0b9a8b5254e94","modified":1640939070070},{"_id":"public/archives/page/2/index.html","hash":"c08f4aad6cb89854104b483638aca67354fed245","modified":1640939070070},{"_id":"public/archives/page/3/index.html","hash":"bf3fb4e977bd630f4a6a2caf278a8892dba11cdc","modified":1640939070070},{"_id":"public/archives/page/4/index.html","hash":"2c0310faacdb85a0fe5d0abffe8a9b8fcca4c2d2","modified":1640939070070},{"_id":"public/archives/2021/index.html","hash":"53c6b2506fdbe8b9361056606555ca8f125f2d65","modified":1640939070070},{"_id":"public/archives/2021/page/2/index.html","hash":"3abfd07d61b1adbe9aedad3f822ab2be6ebc0c96","modified":1640939070070},{"_id":"public/archives/2021/page/4/index.html","hash":"2f0f651ce086a8b224d262c7928a17eb6f3e9713","modified":1640939070070},{"_id":"public/archives/2021/page/3/index.html","hash":"25733244a57970c5e15df9f9a41b612ac2d990dc","modified":1640939070070},{"_id":"public/archives/2021/12/index.html","hash":"afff9d5f70865cee31a6db1d39cf23b5585501a3","modified":1640939070070},{"_id":"public/archives/2021/12/page/2/index.html","hash":"3d9200907e056ffe3fe7aa95ecf731bec7e04626","modified":1640939070070},{"_id":"public/archives/2021/12/page/3/index.html","hash":"2dcb481873f445d9293b4181b4c5fef5df2ece1a","modified":1640939070070},{"_id":"public/index.html","hash":"e086ee0847b6f5baf061c45c1ad4af15844f7169","modified":1640939070070},{"_id":"public/archives/2021/12/page/4/index.html","hash":"fccbe7bf3b093b52e85ee604a2a388a7aa1f7bc7","modified":1640939070070},{"_id":"public/page/3/index.html","hash":"980f988d6fa664a040ac3250ccaab12649ff73d1","modified":1640939070070},{"_id":"public/page/2/index.html","hash":"206ae302f0a35347ba84d16c180cf3b422a4e9a0","modified":1640939070070},{"_id":"public/page/4/index.html","hash":"12acf1b41ded9ea677026ac513d1e7dc75a35c4b","modified":1640939070070},{"_id":"public/page/5/index.html","hash":"813ae485cf34be08136a4715b16a075cd2efb32f","modified":1640939070070},{"_id":"public/tags/js/index.html","hash":"1fe4bed614bd4aae218d6f884a3c4a2f8b2ebe70","modified":1640939070070},{"_id":"public/tags/js/page/2/index.html","hash":"096fdfd8f708dce7beb438b0546d70ff64481ced","modified":1640939070070},{"_id":"public/tags/js/page/3/index.html","hash":"8d9a11e1501a6a26de324ad6a0ce6bfbff0a3b04","modified":1640939070070},{"_id":"public/tags/js/page/4/index.html","hash":"355b63bc39ab13b0633de610acec93b8e0cc0e49","modified":1640939070070},{"_id":"public/tags/leetcode/index.html","hash":"f5b9e61cb2f86cf57fc7066d0d07d92ce5251f6f","modified":1640939070070},{"_id":"public/tags/leetcode/page/2/index.html","hash":"fe2f67bd5edc22f3e9917c2097c84fc119c4fec3","modified":1640939070070},{"_id":"public/tags/leetcode/page/3/index.html","hash":"5bd4ff34bb433ef2ac472407d0cac0ff821ff5fa","modified":1640939070070},{"_id":"public/tags/leetcode/page/4/index.html","hash":"f087cd13ce556d944d0fab44172e69329854b0d2","modified":1640939070070},{"_id":"public/tags/算法/page/5/index.html","hash":"e0f72c19cb16cb2252e3b1a10181d2a57611345d","modified":1640939070070},{"_id":"public/tags/课程学习/index.html","hash":"32002a477aca54474882ce8ed3fbce5bba32539c","modified":1640939070070},{"_id":"public/tags/oracle/index.html","hash":"6084046887f6e6684b890915593f575f03593b93","modified":1640939070070},{"_id":"public/tags/Linux/index.html","hash":"92744478571ea39c2eb3f1def4e17a05af1505ac","modified":1640939070070},{"_id":"public/tags/网络编程/index.html","hash":"e3a35611654845568f05db90ec0ab5cbb99198eb","modified":1640939070070},{"_id":"public/categories/leetcode题解/page/5/index.html","hash":"108a86e1afb4a9be2a077f1eb6c681f7285f79e6","modified":1640939070070},{"_id":"public/categories/Oracle/index.html","hash":"d592af8578becb206116919070cecc2be33cef7c","modified":1640939070070},{"_id":"public/categories/Linux/index.html","hash":"06989254183567e00a22299183a2592330d18dab","modified":1640939070070},{"_id":"public/categories/网络编程/index.html","hash":"92e37063cbf287d725596ac203fcf9cef6113dd1","modified":1640939070070},{"_id":"public/tags/算法/page/2/index.html","hash":"35ace47e104a2af97f65e56aa46063ec9e910b46","modified":1640939070070},{"_id":"public/tags/算法/index.html","hash":"fa057154f9864939510b0ab9ac5edc1f68c8ebb1","modified":1640939070070},{"_id":"public/tags/算法/page/3/index.html","hash":"627bc906da1256356a6c9f49ac9674507eba9045","modified":1640939070070},{"_id":"public/tags/算法/page/4/index.html","hash":"c35b85557741430ee038f0cc94f98ac1307afa7e","modified":1640939070070},{"_id":"public/categories/leetcode题解/index.html","hash":"cf60adb0e92486f05aca5c11e940fa53b08e2405","modified":1640939070070},{"_id":"public/categories/leetcode题解/page/2/index.html","hash":"16a1a6955883d0fa2ee6607a048616d24c55fe0c","modified":1640939070070},{"_id":"public/categories/leetcode题解/page/4/index.html","hash":"b1618f1cf878a50e341682fa76c4dffa621b0960","modified":1640939070070},{"_id":"public/categories/leetcode题解/page/3/index.html","hash":"53dd9b6dce4f535d281d7276293b194ea905c21e","modified":1640939070070},{"_id":"public/images/avatar.jpeg","hash":"fe71c33866e15093924e8662b6e032fb94d64e0b","modified":1640876782780},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640876782780},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640876782780},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640876782780},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640876782780},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640876782780},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1640876782780},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1640876782780},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1640876782780},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1640876782780},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1640876782780},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1640876782780},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1640876782780},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1640876782780},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1640876782780},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1640876782780},{"_id":"public/css/main.css","hash":"b3de1adeb1665e17a8ec7240da9cfe7629028912","modified":1640876782780},{"_id":"public/images/favicon.ico","hash":"06fe12b8e4c30684672836c3b37544ad4464b292","modified":1640876782780},{"_id":"source/_posts/507. 完美数.md","hash":"b40ded0245992d386aa4ebf42300564fcbf55831","modified":1640939053499},{"_id":"public/2021/12/31/507. 完美数/index.html","hash":"de539d1bd89c26fb36c14c78cebd9286fb1cb63f","modified":1640939070070}],"Category":[{"name":"leetcode题解","_id":"ckxt3o5hh0004isax51b78un5"},{"name":"Oracle","_id":"ckxt3o5jg003uisax4vieahs0"},{"name":"Linux","_id":"ckxt3o5ji0042isaxffouey6s"},{"name":"网络编程","_id":"ckxt3o5jj0049isaxf3t47yxn"}],"Data":[],"Page":[{"title":"about","date":"2021-12-30T05:40:42.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-30 13:40:42\ntype: about\n---\n","updated":"2021-12-30T05:41:07.346Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckxt3o5h40000isaxbwl5bark","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"archives","date":"2021-12-30T05:07:14.000Z","type":"archives","comments":0,"sitemap":false,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-12-30 13:07:14\ntype: archives\ncomments: false\nsitemap: false\n---\n","updated":"2021-12-30T05:07:41.013Z","path":"archives/index.html","layout":"page","_id":"ckxt3o5hd0002isaxdjfydsgm","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"guestbook","date":"2021-12-30T05:29:24.000Z","type":"guestbook","comments":1,"sitemap":false,"_content":"","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2021-12-30 13:29:24\ntype: guestbook\ncomments: true\nsitemap: false\n---\n","updated":"2021-12-30T06:03:03.229Z","path":"guestbook/index.html","layout":"page","_id":"ckxt3o5hj0006isaxcgjhfrui","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类","date":"2021-12-30T05:05:14.000Z","type":"categories","comments":0,"sitemap":false,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-12-30 13:05:14\ntype: categories\ncomments: false\nsitemap: false\n---\n","updated":"2021-12-30T05:06:48.902Z","path":"categories/index.html","layout":"page","_id":"ckxt3o5hl0008isaxa2su1tua","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2021-12-30T05:18:19.000Z","type":"tags","comments":0,"sitemap":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-12-30 13:18:19\ntype: tags\ncomments: false\nsitemap: false\n---\n","updated":"2021-12-30T05:18:56.580Z","path":"tags/index.html","layout":"page","_id":"ckxt3o5hn000aisax3b1n9djs","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"sitemap","date":"2021-12-30T05:35:26.000Z","type":"sitemap.xml","comments":0,"sitemap":true,"_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2021-12-30 13:35:26\ntype: sitemap.xml\ncomments: false\nsitemap: true\n---\n","updated":"2021-12-30T05:56:21.987Z","path":"sitemap/index.html","layout":"page","_id":"ckxt3o5hq000eisaxc0yxcb3e","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"1005 K 次取反后最大化的数组和 找到负数个数，条件判断","date":"2021-12-30T10:24:47.000Z","description":"1005 K 次取反后最大化的数组和 找到负数个数，条件判断","comments":1,"toc":true,"_content":"\n# 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\n\n## [查看原题](https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/)\n\n## 解题思路\n\n主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。\n1. 先将数组排序，便于后续操作数组中的数据\n2. 找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中\n3. 开始判断变化的次数和负数个数的关系\n\t- 如果变化的次数小于等于负数的个数，k<=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍\n\t- 如果变化的次数大于负数的个数，继续判断负数的个数是否为0\n\t\t1. 为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]\n\t\t2. 不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数\n\t\t\t- temp为偶数，直接返回最大值\n\t\t\t- temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则 \t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。\n\n\t\t\t\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\n// 统计负数的个数\nvar largestSumAfterKNegations = function(nums, k) {\n\tlet count = 0;//负数的个数\n\tlet maxSum = 0;//可能的最大和\n\tlet sum = 0;//原来的\n\tnums.sort((a,b)=>a-b);\n\tnums.forEach(item=>{\n\t\tif(item < 0){\n\t\t\tcount ++;\n\t\t}\n\t\tsum += item;\n\t})\n\tif(k<=count){\n\t\tmaxSum = sum;\n\t\tfor(let i =0;i<k;i++){\n\t\t\tmaxSum+=(-nums[i]*2);\n\t\t}\n\t\treturn maxSum;\n\t}else if(k>count){\n\t\tif(!count){\n\t\t\tif(k%2===0){\n\t\t\t\treturn sum;\n\t\t\t}else{\n\t\t\t\treturn sum-2*nums[0];\n\t\t\t}\n\t\t}else{\n\t\t\tlet temp  = k-count;\n\t\t\tmaxSum = sum;\n\t\t\tfor(let i =0;i<count;i++){\n\t\t\t\tmaxSum+=(-nums[i]*2);\n\t\t\t}\n\t\t\tif(temp%2===0){\n\t\t\t\treturn maxSum;\n\t\t\t}else{\n\t\t\t\tif(count === nums.length){\n\t\t\t\t\treturn maxSum + 2*(nums[nums.length-1])\n\t\t\t\t}else{\n\t\t\t\t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n```","source":"_posts/1005. K 次取反后最大化的数组和.md","raw":"---\ntitle: 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\ndate: 2021-12-30 18:24:47\ndescription: 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\n\n## [查看原题](https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/)\n\n## 解题思路\n\n主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。\n1. 先将数组排序，便于后续操作数组中的数据\n2. 找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中\n3. 开始判断变化的次数和负数个数的关系\n\t- 如果变化的次数小于等于负数的个数，k<=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍\n\t- 如果变化的次数大于负数的个数，继续判断负数的个数是否为0\n\t\t1. 为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]\n\t\t2. 不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数\n\t\t\t- temp为偶数，直接返回最大值\n\t\t\t- temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则 \t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。\n\n\t\t\t\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\n// 统计负数的个数\nvar largestSumAfterKNegations = function(nums, k) {\n\tlet count = 0;//负数的个数\n\tlet maxSum = 0;//可能的最大和\n\tlet sum = 0;//原来的\n\tnums.sort((a,b)=>a-b);\n\tnums.forEach(item=>{\n\t\tif(item < 0){\n\t\t\tcount ++;\n\t\t}\n\t\tsum += item;\n\t})\n\tif(k<=count){\n\t\tmaxSum = sum;\n\t\tfor(let i =0;i<k;i++){\n\t\t\tmaxSum+=(-nums[i]*2);\n\t\t}\n\t\treturn maxSum;\n\t}else if(k>count){\n\t\tif(!count){\n\t\t\tif(k%2===0){\n\t\t\t\treturn sum;\n\t\t\t}else{\n\t\t\t\treturn sum-2*nums[0];\n\t\t\t}\n\t\t}else{\n\t\t\tlet temp  = k-count;\n\t\t\tmaxSum = sum;\n\t\t\tfor(let i =0;i<count;i++){\n\t\t\t\tmaxSum+=(-nums[i]*2);\n\t\t\t}\n\t\t\tif(temp%2===0){\n\t\t\t\treturn maxSum;\n\t\t\t}else{\n\t\t\t\tif(count === nums.length){\n\t\t\t\t\treturn maxSum + 2*(nums[nums.length-1])\n\t\t\t\t}else{\n\t\t\t\t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n```","slug":"1005. K 次取反后最大化的数组和","published":1,"updated":"2021-12-30T14:19:36.246Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5h80001isax3gqdboov","content":"<h1 id=\"1005-K-次取反后最大化的数组和-找到负数个数，条件判断\"><a href=\"#1005-K-次取反后最大化的数组和-找到负数个数，条件判断\" class=\"headerlink\" title=\"1005 K 次取反后最大化的数组和 找到负数个数，条件判断\"></a>1005 K 次取反后最大化的数组和 找到负数个数，条件判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。</p>\n<ol>\n<li>先将数组排序，便于后续操作数组中的数据</li>\n<li>找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中</li>\n<li>开始判断变化的次数和负数个数的关系<ul>\n<li>如果变化的次数小于等于负数的个数，k&lt;=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍</li>\n<li>如果变化的次数大于负数的个数，继续判断负数的个数是否为0<ol>\n<li>为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]</li>\n<li>不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数<ul>\n<li>temp为偶数，直接返回最大值</li>\n<li>temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则         return maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 统计负数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> largestSumAfterKNegations = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//负数的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> maxSum = <span class=\"number\">0</span>;<span class=\"comment\">//可能的最大和</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//原来的</span></span><br><span class=\"line\">\tnums.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</span><br><span class=\"line\">\tnums.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tcount ++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum += item;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;=count)&#123;</span><br><span class=\"line\">\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&gt;count)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!count)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum-<span class=\"number\">2</span>*nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp  = k-count;</span><br><span class=\"line\">\t\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">\t\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(count === nums.length)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum + <span class=\"number\">2</span>*(nums[nums.length-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum - <span class=\"number\">2</span>*<span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.abs(nums[count-<span class=\"number\">1</span>]),<span class=\"built_in\">Math</span>.abs(nums[count]))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1434,"excerpt":"","more":"<h1 id=\"1005-K-次取反后最大化的数组和-找到负数个数，条件判断\"><a href=\"#1005-K-次取反后最大化的数组和-找到负数个数，条件判断\" class=\"headerlink\" title=\"1005 K 次取反后最大化的数组和 找到负数个数，条件判断\"></a>1005 K 次取反后最大化的数组和 找到负数个数，条件判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。</p>\n<ol>\n<li>先将数组排序，便于后续操作数组中的数据</li>\n<li>找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中</li>\n<li>开始判断变化的次数和负数个数的关系<ul>\n<li>如果变化的次数小于等于负数的个数，k&lt;=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍</li>\n<li>如果变化的次数大于负数的个数，继续判断负数的个数是否为0<ol>\n<li>为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]</li>\n<li>不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数<ul>\n<li>temp为偶数，直接返回最大值</li>\n<li>temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则         return maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 统计负数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> largestSumAfterKNegations = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//负数的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> maxSum = <span class=\"number\">0</span>;<span class=\"comment\">//可能的最大和</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//原来的</span></span><br><span class=\"line\">\tnums.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</span><br><span class=\"line\">\tnums.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tcount ++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum += item;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;=count)&#123;</span><br><span class=\"line\">\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&gt;count)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!count)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum-<span class=\"number\">2</span>*nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp  = k-count;</span><br><span class=\"line\">\t\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">\t\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(count === nums.length)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum + <span class=\"number\">2</span>*(nums[nums.length-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum - <span class=\"number\">2</span>*<span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.abs(nums[count-<span class=\"number\">1</span>]),<span class=\"built_in\">Math</span>.abs(nums[count]))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1078. Bigram 分词","date":"2021-12-30T10:24:47.000Z","description":"1078. Bigram 分词","comments":1,"toc":true,"_content":"\n# 1078. Bigram 分词\n\n## [查看原题](https://leetcode-cn.com/problems/occurrences-after-bigram/)\n\n## 解题思路\n\n1. 将句子按空格分隔开\n2. 遍历寻找符合条件的就行\n\n## 代码\n\n```javascript\n/**\n * @param {string} text\n * @param {string} first\n * @param {string} second\n * @return {string[]}\n */\nvar findOcurrences = function(text, first, second) {\n\tlet thirdWord = [];//结果\n\t// 将字符串转为数组\n\tconst textArr = text.split(' ');\n\tfor(let i = 0 ;i<textArr.length-2;i++){\n\t\tif(textArr[i]===first &&textArr[i+1] === second){\n\t\t\tthirdWord.push(textArr[i+2])\n\t\t}\n\t}\n\treturn thirdWord;\n};\n```","source":"_posts/1078. Bigram 分词.md","raw":"---\ntitle: 1078. Bigram 分词\ndate: 2021-12-30 18:24:47\ndescription: 1078. Bigram 分词\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1078. Bigram 分词\n\n## [查看原题](https://leetcode-cn.com/problems/occurrences-after-bigram/)\n\n## 解题思路\n\n1. 将句子按空格分隔开\n2. 遍历寻找符合条件的就行\n\n## 代码\n\n```javascript\n/**\n * @param {string} text\n * @param {string} first\n * @param {string} second\n * @return {string[]}\n */\nvar findOcurrences = function(text, first, second) {\n\tlet thirdWord = [];//结果\n\t// 将字符串转为数组\n\tconst textArr = text.split(' ');\n\tfor(let i = 0 ;i<textArr.length-2;i++){\n\t\tif(textArr[i]===first &&textArr[i+1] === second){\n\t\t\tthirdWord.push(textArr[i+2])\n\t\t}\n\t}\n\treturn thirdWord;\n};\n```","slug":"1078. Bigram 分词","published":1,"updated":"2021-12-30T14:19:52.501Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5he0003isaxck8cazr7","content":"<h1 id=\"1078-Bigram-分词\"><a href=\"#1078-Bigram-分词\" class=\"headerlink\" title=\"1078. Bigram 分词\"></a>1078. Bigram 分词</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/occurrences-after-bigram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将句子按空格分隔开</li>\n<li>遍历寻找符合条件的就行</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">text</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">first</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">second</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findOcurrences = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, first, second</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> thirdWord = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> textArr = text.split(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ;i&lt;textArr.length-<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(textArr[i]===first &amp;&amp;textArr[i+<span class=\"number\">1</span>] === second)&#123;</span><br><span class=\"line\">\t\t\tthirdWord.push(textArr[i+<span class=\"number\">2</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> thirdWord;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":475,"excerpt":"","more":"<h1 id=\"1078-Bigram-分词\"><a href=\"#1078-Bigram-分词\" class=\"headerlink\" title=\"1078. Bigram 分词\"></a>1078. Bigram 分词</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/occurrences-after-bigram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将句子按空格分隔开</li>\n<li>遍历寻找符合条件的就行</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">text</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">first</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">second</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findOcurrences = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, first, second</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> thirdWord = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> textArr = text.split(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ;i&lt;textArr.length-<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(textArr[i]===first &amp;&amp;textArr[i+<span class=\"number\">1</span>] === second)&#123;</span><br><span class=\"line\">\t\t\tthirdWord.push(textArr[i+<span class=\"number\">2</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> thirdWord;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1122. 数组的相对排序 利用Map集合和数组排序","date":"2021-12-30T10:24:47.000Z","description":"1122. 数组的相对排序 利用Map集合和数组排序","comments":1,"toc":true,"_content":"\n# 1122. 数组的相对排序 利用Map集合和数组排序\n\n## [查看原题](https://leetcode-cn.com/problems/relative-sort-array/)\n\n## 解题思路\n1. 先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值\n2. 遍历arr2将map中的元素全部取出，顺序排列，注意要\n```\tjs\n\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t}\n```\n将每一项都取出，防止遗漏重复项，取出一项后记得删除\n3. 再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number[]}\n */\nvar relativeSortArray = function(arr1, arr2) {\n\t// 将arr1映射到Map集合中值为元素的个数\n\tconst map = new Map();\n\tarr1.forEach(item=>{\n\t\tif(map.has(item)){\n\t\t\tmap.set(item,map.get(item)+1);\n\t\t}else{\n\t\t\tmap.set(item,1);\n\t\t}\n\t});\n\tlet result  =[];\n\t//遍历数组arr2按顺序将map中的值push到result中\n\tarr2.forEach(item=>{\n\t\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t\t}\n\t\tmap.delete(item);\n\t});\n\tlet other = [];\n\tfor (const [key,value] of map){\n\t\tfor(let i = 0;i<value;i++){\n\t\t\tother.push(key);\n\t\t}\n\t}\n\tresult.push(...other.sort((a,b)=>a-b)) ;\n\treturn result;\n};\n\n```","source":"_posts/1122. 数组的相对排序.md","raw":"---\ntitle: 1122. 数组的相对排序 利用Map集合和数组排序\ndate: 2021-12-30 18:24:47\ndescription: 1122. 数组的相对排序 利用Map集合和数组排序\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1122. 数组的相对排序 利用Map集合和数组排序\n\n## [查看原题](https://leetcode-cn.com/problems/relative-sort-array/)\n\n## 解题思路\n1. 先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值\n2. 遍历arr2将map中的元素全部取出，顺序排列，注意要\n```\tjs\n\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t}\n```\n将每一项都取出，防止遗漏重复项，取出一项后记得删除\n3. 再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number[]}\n */\nvar relativeSortArray = function(arr1, arr2) {\n\t// 将arr1映射到Map集合中值为元素的个数\n\tconst map = new Map();\n\tarr1.forEach(item=>{\n\t\tif(map.has(item)){\n\t\t\tmap.set(item,map.get(item)+1);\n\t\t}else{\n\t\t\tmap.set(item,1);\n\t\t}\n\t});\n\tlet result  =[];\n\t//遍历数组arr2按顺序将map中的值push到result中\n\tarr2.forEach(item=>{\n\t\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t\t}\n\t\tmap.delete(item);\n\t});\n\tlet other = [];\n\tfor (const [key,value] of map){\n\t\tfor(let i = 0;i<value;i++){\n\t\t\tother.push(key);\n\t\t}\n\t}\n\tresult.push(...other.sort((a,b)=>a-b)) ;\n\treturn result;\n};\n\n```","slug":"1122. 数组的相对排序","published":1,"updated":"2021-12-30T14:20:09.913Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hk0007isax44lr5vf2","content":"<h1 id=\"1122-数组的相对排序-利用Map集合和数组排序\"><a href=\"#1122-数组的相对排序-利用Map集合和数组排序\" class=\"headerlink\" title=\"1122. 数组的相对排序 利用Map集合和数组排序\"></a>1122. 数组的相对排序 利用Map集合和数组排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-sort-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值</li>\n<li>遍历arr2将map中的元素全部取出，顺序排列，注意要<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\tresult.push(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n将每一项都取出，防止遗漏重复项，取出一项后记得删除</li>\n<li>再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> relativeSortArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将arr1映射到Map集合中值为元素的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\tarr1.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,map.get(item)+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result  =[];</span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组arr2按顺序将map中的值push到result中</span></span><br><span class=\"line\">\tarr2.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\t\tresult.push(item);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmap.delete(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> other = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;value;i++)&#123;</span><br><span class=\"line\">\t\t\tother.push(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresult.push(...other.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":918,"excerpt":"","more":"<h1 id=\"1122-数组的相对排序-利用Map集合和数组排序\"><a href=\"#1122-数组的相对排序-利用Map集合和数组排序\" class=\"headerlink\" title=\"1122. 数组的相对排序 利用Map集合和数组排序\"></a>1122. 数组的相对排序 利用Map集合和数组排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-sort-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值</li>\n<li>遍历arr2将map中的元素全部取出，顺序排列，注意要<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\tresult.push(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n将每一项都取出，防止遗漏重复项，取出一项后记得删除</li>\n<li>再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> relativeSortArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将arr1映射到Map集合中值为元素的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\tarr1.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,map.get(item)+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result  =[];</span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组arr2按顺序将map中的值push到result中</span></span><br><span class=\"line\">\tarr2.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\t\tresult.push(item);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmap.delete(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> other = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;value;i++)&#123;</span><br><span class=\"line\">\t\t\tother.push(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresult.push(...other.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"1154. 一年中的第几天 打表求解","date":"2021-12-30T10:24:47.000Z","description":"1154. 一年中的第几天 打表求解","comments":1,"toc":true,"_content":"\n# 1154. 一年中的第几天 打表求解\n\n## [查看原题](https://leetcode-cn.com/problems/day-of-the-year/)\n\n## 解题思路\n\n先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。\n\n## 代码\n\n```javascript\n\n/**\n * @param {string} date\n * @return {number}\n */\nvar dayOfYear = function(date) {\n\tlet count = 0;\n\tlet months = [31,28,31,30,31,30,31,31,30,31,30,31];\n\t// 年月日拆开\n\tconst nums = date.split('-');\n\n\tconst year = parseInt(nums[0]);\n\tconst month = parseInt(nums[1]);\n\tconst day = parseInt(nums[2])\n\t// 判断是不是闰年\n\tif((year % 4 === 0 && year % 100 !== 0)||year % 400 === 0){\n\t\tif(month > 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(let i = 1;i<month;i++){\n\t\tcount += months[i-1];\n\t}\n\tcount += day;\n\treturn count;\n```","source":"_posts/1154. 一年中的第几天.md","raw":"---\ntitle: 1154. 一年中的第几天 打表求解\ndate: 2021-12-30 18:24:47\ndescription: 1154. 一年中的第几天 打表求解\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1154. 一年中的第几天 打表求解\n\n## [查看原题](https://leetcode-cn.com/problems/day-of-the-year/)\n\n## 解题思路\n\n先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。\n\n## 代码\n\n```javascript\n\n/**\n * @param {string} date\n * @return {number}\n */\nvar dayOfYear = function(date) {\n\tlet count = 0;\n\tlet months = [31,28,31,30,31,30,31,31,30,31,30,31];\n\t// 年月日拆开\n\tconst nums = date.split('-');\n\n\tconst year = parseInt(nums[0]);\n\tconst month = parseInt(nums[1]);\n\tconst day = parseInt(nums[2])\n\t// 判断是不是闰年\n\tif((year % 4 === 0 && year % 100 !== 0)||year % 400 === 0){\n\t\tif(month > 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(let i = 1;i<month;i++){\n\t\tcount += months[i-1];\n\t}\n\tcount += day;\n\treturn count;\n```","slug":"1154. 一年中的第几天","published":1,"updated":"2021-12-30T14:21:05.911Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hm0009isax3lp3afrg","content":"<h1 id=\"1154-一年中的第几天-打表求解\"><a href=\"#1154-一年中的第几天-打表求解\" class=\"headerlink\" title=\"1154. 一年中的第几天 打表求解\"></a>1154. 一年中的第几天 打表求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/day-of-the-year/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">date</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dayOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">date</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> months = [<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 年月日拆开</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> nums = date.split(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> year = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> month = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> day = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"comment\">// 判断是不是闰年</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((year % <span class=\"number\">4</span> === <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> !== <span class=\"number\">0</span>)||year % <span class=\"number\">400</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(month &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;month;i++)&#123;</span><br><span class=\"line\">\t\tcount += months[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcount += day;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":569,"excerpt":"","more":"<h1 id=\"1154-一年中的第几天-打表求解\"><a href=\"#1154-一年中的第几天-打表求解\" class=\"headerlink\" title=\"1154. 一年中的第几天 打表求解\"></a>1154. 一年中的第几天 打表求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/day-of-the-year/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">date</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dayOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">date</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> months = [<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 年月日拆开</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> nums = date.split(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> year = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> month = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> day = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"comment\">// 判断是不是闰年</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((year % <span class=\"number\">4</span> === <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> !== <span class=\"number\">0</span>)||year % <span class=\"number\">400</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(month &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;month;i++)&#123;</span><br><span class=\"line\">\t\tcount += months[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcount += day;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br></pre></td></tr></table></figure>"},{"title":"118. 杨辉三角 循环遍历，一层一层计算","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"118. 杨辉三角 循环遍历，一层一层计算","_content":"\n# 118. 杨辉三角 循环遍历，一层一层计算\n## 解题思路\n1. 定义一个空数组result存放返回值\n2. 循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数\n    - 参数为1则不在temp最后一项push（1）\n    - 不为1则push（1）\n3. 将temp添加都result中\n\n## [原题](https://leetcode-cn.com/problems/pascals-triangle/)\n## 代码\n\n```javascript\n/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let result = [];\n    for (let i = 1; i <= numRows; i++) {\n        let temp = [1];\n        for (let j = 1; j < i - 1; j++) {\n            temp.push(result[i - 2][j - 1] + result[i - 2][j]);\n        }\n        if (i !== 1) {\n            temp.push(1);\n        }\n        result.push(temp);\n    }\n    return result;\n};\n```","source":"_posts/118. 杨辉三角.md","raw":"---\ntitle: 118. 杨辉三角 循环遍历，一层一层计算\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 118. 杨辉三角 循环遍历，一层一层计算\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 118. 杨辉三角 循环遍历，一层一层计算\n## 解题思路\n1. 定义一个空数组result存放返回值\n2. 循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数\n    - 参数为1则不在temp最后一项push（1）\n    - 不为1则push（1）\n3. 将temp添加都result中\n\n## [原题](https://leetcode-cn.com/problems/pascals-triangle/)\n## 代码\n\n```javascript\n/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let result = [];\n    for (let i = 1; i <= numRows; i++) {\n        let temp = [1];\n        for (let j = 1; j < i - 1; j++) {\n            temp.push(result[i - 2][j - 1] + result[i - 2][j]);\n        }\n        if (i !== 1) {\n            temp.push(1);\n        }\n        result.push(temp);\n    }\n    return result;\n};\n```","slug":"118. 杨辉三角","published":1,"updated":"2021-12-30T14:38:22.529Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hn000bisax4aw8h0x2","content":"<h1 id=\"118-杨辉三角-循环遍历，一层一层计算\"><a href=\"#118-杨辉三角-循环遍历，一层一层计算\" class=\"headerlink\" title=\"118. 杨辉三角 循环遍历，一层一层计算\"></a>118. 杨辉三角 循环遍历，一层一层计算</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个空数组result存放返回值</li>\n<li>循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数<ul>\n<li>参数为1则不在temp最后一项push（1）</li>\n<li>不为1则push（1）</li>\n</ul>\n</li>\n<li>将temp添加都result中</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/pascals-triangle/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= numRows; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = [<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            temp.push(result[i - <span class=\"number\">2</span>][j - <span class=\"number\">1</span>] + result[i - <span class=\"number\">2</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":477,"excerpt":"","more":"<h1 id=\"118-杨辉三角-循环遍历，一层一层计算\"><a href=\"#118-杨辉三角-循环遍历，一层一层计算\" class=\"headerlink\" title=\"118. 杨辉三角 循环遍历，一层一层计算\"></a>118. 杨辉三角 循环遍历，一层一层计算</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个空数组result存放返回值</li>\n<li>循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数<ul>\n<li>参数为1则不在temp最后一项push（1）</li>\n<li>不为1则push（1）</li>\n</ul>\n</li>\n<li>将temp添加都result中</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/pascals-triangle/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= numRows; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = [<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            temp.push(result[i - <span class=\"number\">2</span>][j - <span class=\"number\">1</span>] + result[i - <span class=\"number\">2</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"136. 只出现一次的数字 循环利用indexOf求解","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"136. 只出现一次的数字 循环利用indexOf求解","_content":"\n# 136. 只出现一次的数字 循环利用indexOf求解\n\n## [查看原题](https://leetcode-cn.com/problems/single-number/)\n\n## 解题思路\n这种方法时间复杂度较高\n利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums.indexOf(nums[i], i + 1) === -1 && nums.indexOf(nums[i]) === i) {\n            return nums[i]\n        }\n    }\n};\n```\n\n## 解题思路\n1. 将数组转为set集合，set集合没有重复项\n2. 对set集合每一项求和 sum1\n3. 对数组求和 sum2\n4. set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const set = new Set(nums); //将nums转为集合\n    let sum1 = 0; //求set集合各项的和\n    let sum2 = 0; //求数组的各项和\n    for (const item of set) {\n        sum1 += item;\n    }\n    nums.forEach(vaule => {\n        sum2 += vaule;\n    })\n    return (2 * sum1) - sum2;\n};\n```","source":"_posts/136. 只出现一次的数字.md","raw":"---\ntitle: 136. 只出现一次的数字 循环利用indexOf求解\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 136. 只出现一次的数字 循环利用indexOf求解\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 136. 只出现一次的数字 循环利用indexOf求解\n\n## [查看原题](https://leetcode-cn.com/problems/single-number/)\n\n## 解题思路\n这种方法时间复杂度较高\n利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums.indexOf(nums[i], i + 1) === -1 && nums.indexOf(nums[i]) === i) {\n            return nums[i]\n        }\n    }\n};\n```\n\n## 解题思路\n1. 将数组转为set集合，set集合没有重复项\n2. 对set集合每一项求和 sum1\n3. 对数组求和 sum2\n4. set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const set = new Set(nums); //将nums转为集合\n    let sum1 = 0; //求set集合各项的和\n    let sum2 = 0; //求数组的各项和\n    for (const item of set) {\n        sum1 += item;\n    }\n    nums.forEach(vaule => {\n        sum2 += vaule;\n    })\n    return (2 * sum1) - sum2;\n};\n```","slug":"136. 只出现一次的数字","published":1,"updated":"2021-12-30T14:58:57.102Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hq000fisaxh53g2spu","content":"<h1 id=\"136-只出现一次的数字-循环利用indexOf求解\"><a href=\"#136-只出现一次的数字-循环利用indexOf求解\" class=\"headerlink\" title=\"136. 只出现一次的数字 循环利用indexOf求解\"></a>136. 只出现一次的数字 循环利用indexOf求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法时间复杂度较高<br>利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.indexOf(nums[i], i + <span class=\"number\">1</span>) === -<span class=\"number\">1</span> &amp;&amp; nums.indexOf(nums[i]) === i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set集合，set集合没有重复项</li>\n<li>对set集合每一项求和 sum1</li>\n<li>对数组求和 sum2</li>\n<li>set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums); <span class=\"comment\">//将nums转为集合</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>; <span class=\"comment\">//求set集合各项的和</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum2 = <span class=\"number\">0</span>; <span class=\"comment\">//求数组的各项和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">        sum1 += item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums.forEach(<span class=\"function\"><span class=\"params\">vaule</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum2 += vaule;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * sum1) - sum2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":778,"excerpt":"","more":"<h1 id=\"136-只出现一次的数字-循环利用indexOf求解\"><a href=\"#136-只出现一次的数字-循环利用indexOf求解\" class=\"headerlink\" title=\"136. 只出现一次的数字 循环利用indexOf求解\"></a>136. 只出现一次的数字 循环利用indexOf求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法时间复杂度较高<br>利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.indexOf(nums[i], i + <span class=\"number\">1</span>) === -<span class=\"number\">1</span> &amp;&amp; nums.indexOf(nums[i]) === i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set集合，set集合没有重复项</li>\n<li>对set集合每一项求和 sum1</li>\n<li>对数组求和 sum2</li>\n<li>set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums); <span class=\"comment\">//将nums转为集合</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>; <span class=\"comment\">//求set集合各项的和</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum2 = <span class=\"number\">0</span>; <span class=\"comment\">//求数组的各项和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">        sum1 += item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums.forEach(<span class=\"function\"><span class=\"params\">vaule</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum2 += vaule;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * sum1) - sum2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"119. 杨辉三角 II 排列组合","date":"2021-12-30T10:24:47.000Z","comments":1,"description":"119. 杨辉三角 II 排列组合","toc":true,"_content":"\n# 119. 杨辉三角 II 排列组合\n## 解题思路\n找出排列组合关系题就写出来了\n\n[原题](https://leetcode-cn.com/problems/pascals-triangle-ii/)\n## 代码\n\n```javascript\n/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    const result = []; //存放结果\n\n    result.push(1); //第一个特殊处理\n    for (let i = 1; i <= rowIndex; i++) {\n        let t = 1; //分子\n        let b = 1; //分母\n        for (let j = 0; j < i; j++) {\n            t *= (rowIndex - j);\n        }\n        for (let j = 1; j <= i; j++) {\n            b *= j;\n        }\n\n\n        result.push(t / b);\n    }\n    return result;\n};\n```","source":"_posts/119. 杨辉三角.md","raw":"---\ntitle: 119. 杨辉三角 II 排列组合\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ndescription: 119. 杨辉三角 II 排列组合\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 119. 杨辉三角 II 排列组合\n## 解题思路\n找出排列组合关系题就写出来了\n\n[原题](https://leetcode-cn.com/problems/pascals-triangle-ii/)\n## 代码\n\n```javascript\n/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    const result = []; //存放结果\n\n    result.push(1); //第一个特殊处理\n    for (let i = 1; i <= rowIndex; i++) {\n        let t = 1; //分子\n        let b = 1; //分母\n        for (let j = 0; j < i; j++) {\n            t *= (rowIndex - j);\n        }\n        for (let j = 1; j <= i; j++) {\n            b *= j;\n        }\n\n\n        result.push(t / b);\n    }\n    return result;\n};\n```","slug":"119. 杨辉三角","published":1,"updated":"2021-12-30T14:58:13.071Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hs000gisax91ya17rl","content":"<h1 id=\"119-杨辉三角-II-排列组合\"><a href=\"#119-杨辉三角-II-排列组合\" class=\"headerlink\" title=\"119. 杨辉三角 II 排列组合\"></a>119. 杨辉三角 II 排列组合</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>找出排列组合关系题就写出来了</p>\n<p><a href=\"https://leetcode-cn.com/problems/pascals-triangle-ii/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">rowIndex</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []; <span class=\"comment\">//存放结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result.push(<span class=\"number\">1</span>); <span class=\"comment\">//第一个特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            t *= (rowIndex - j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">            b *= j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(t / b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":409,"excerpt":"","more":"<h1 id=\"119-杨辉三角-II-排列组合\"><a href=\"#119-杨辉三角-II-排列组合\" class=\"headerlink\" title=\"119. 杨辉三角 II 排列组合\"></a>119. 杨辉三角 II 排列组合</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>找出排列组合关系题就写出来了</p>\n<p><a href=\"https://leetcode-cn.com/problems/pascals-triangle-ii/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">rowIndex</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []; <span class=\"comment\">//存放结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result.push(<span class=\"number\">1</span>); <span class=\"comment\">//第一个特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            t *= (rowIndex - j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">            b *= j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(t / b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1446. 连续字符","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1446. 连续字符 滑动窗口","_content":"\n# 1446. 连续字符 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/consecutive-characters/)\n\n## 解题思路\n1. 定义一个总的最大值max = 1，一个局部最大值temp = 1；\n2. 循环字符串的每一项，判断当前项与前一项是否相等\n\t- 相等，则局部最大值temp++\n\t- 不相等，则说明要重新开始寻找相同的字符串了，将temp=1;\n3. 注意循环要从 1 开始\n4. 要不断判断temp 与max的大小，更新max\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar maxPower = function(s) {\n\tlet max = 1;\n\tlet temp = 1;\n\tlet i ;\n\t// 遍历字符串，遇到不是一样的字符据重新计算\n\tfor(i= 1;i<s.length;i++){\n\t\tif(s.charAt(i)===s.charAt(i-1)){\n\t\t\ttemp++;\n\t\t}else{\n\t\t\ttemp = 1;\n\t\t}\n\t\tif(temp > max){\n\t\t\tmax =  temp;\n\t\t}\n\n\t}\n\treturn max;\n};\n```","source":"_posts/1446. 连续字符.md","raw":"---\ntitle: 1446. 连续字符\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1446. 连续字符 滑动窗口\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 1446. 连续字符 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/consecutive-characters/)\n\n## 解题思路\n1. 定义一个总的最大值max = 1，一个局部最大值temp = 1；\n2. 循环字符串的每一项，判断当前项与前一项是否相等\n\t- 相等，则局部最大值temp++\n\t- 不相等，则说明要重新开始寻找相同的字符串了，将temp=1;\n3. 注意循环要从 1 开始\n4. 要不断判断temp 与max的大小，更新max\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar maxPower = function(s) {\n\tlet max = 1;\n\tlet temp = 1;\n\tlet i ;\n\t// 遍历字符串，遇到不是一样的字符据重新计算\n\tfor(i= 1;i<s.length;i++){\n\t\tif(s.charAt(i)===s.charAt(i-1)){\n\t\t\ttemp++;\n\t\t}else{\n\t\t\ttemp = 1;\n\t\t}\n\t\tif(temp > max){\n\t\t\tmax =  temp;\n\t\t}\n\n\t}\n\treturn max;\n};\n```","slug":"1446. 连续字符","published":1,"updated":"2021-12-30T14:59:08.263Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hv000kisax4djg4if4","content":"<h1 id=\"1446-连续字符-滑动窗口\"><a href=\"#1446-连续字符-滑动窗口\" class=\"headerlink\" title=\"1446. 连续字符 滑动窗口\"></a>1446. 连续字符 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/consecutive-characters/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个总的最大值max = 1，一个局部最大值temp = 1；</li>\n<li>循环字符串的每一项，判断当前项与前一项是否相等<ul>\n<li>相等，则局部最大值temp++</li>\n<li>不相等，则说明要重新开始寻找相同的字符串了，将temp=1;</li>\n</ul>\n</li>\n<li>注意循环要从 1 开始</li>\n<li>要不断判断temp 与max的大小，更新max</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxPower = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> max = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i ;</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历字符串，遇到不是一样的字符据重新计算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i= <span class=\"number\">1</span>;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.charAt(i)===s.charAt(i-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\ttemp++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\ttemp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp &gt; max)&#123;</span><br><span class=\"line\">\t\t\tmax =  temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":482,"excerpt":"","more":"<h1 id=\"1446-连续字符-滑动窗口\"><a href=\"#1446-连续字符-滑动窗口\" class=\"headerlink\" title=\"1446. 连续字符 滑动窗口\"></a>1446. 连续字符 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/consecutive-characters/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个总的最大值max = 1，一个局部最大值temp = 1；</li>\n<li>循环字符串的每一项，判断当前项与前一项是否相等<ul>\n<li>相等，则局部最大值temp++</li>\n<li>不相等，则说明要重新开始寻找相同的字符串了，将temp=1;</li>\n</ul>\n</li>\n<li>注意循环要从 1 开始</li>\n<li>要不断判断temp 与max的大小，更新max</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxPower = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> max = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i ;</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历字符串，遇到不是一样的字符据重新计算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i= <span class=\"number\">1</span>;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.charAt(i)===s.charAt(i-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\ttemp++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\ttemp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp &gt; max)&#123;</span><br><span class=\"line\">\t\t\tmax =  temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1518. 换酒问题","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1518. 换酒问题 不断更新当前瓶子的个数","_content":"# 1518. 换酒问题 不断更新当前瓶子的个数\n\n## [查看原题](https://leetcode-cn.com/problems/water-bottles/)\n\n## 解题思路\n1. 定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子\n2. 循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数\n3. 更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数\n4. 更新count的值\n\n## 代码\n\n```javascript\n/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar numWaterBottles = function(numBottles, numExchange) {\n\tlet count = numBottles;//可以喝多少瓶酒\n\tlet bottles = numBottles;//有多少瓶子\n\twhile (bottles >= numExchange){\n\t\tlet temp = Math.floor(bottles / numExchange);//当前的瓶子可以换多少瓶酒\n\t\tbottles = temp + (bottles - temp * numExchange);\n\t\tcount += temp;\n\t}\n\treturn count;\n};\n```","source":"_posts/1518. 换酒问题.md","raw":"---\ntitle: 1518. 换酒问题\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1518. 换酒问题 不断更新当前瓶子的个数\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n# 1518. 换酒问题 不断更新当前瓶子的个数\n\n## [查看原题](https://leetcode-cn.com/problems/water-bottles/)\n\n## 解题思路\n1. 定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子\n2. 循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数\n3. 更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数\n4. 更新count的值\n\n## 代码\n\n```javascript\n/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar numWaterBottles = function(numBottles, numExchange) {\n\tlet count = numBottles;//可以喝多少瓶酒\n\tlet bottles = numBottles;//有多少瓶子\n\twhile (bottles >= numExchange){\n\t\tlet temp = Math.floor(bottles / numExchange);//当前的瓶子可以换多少瓶酒\n\t\tbottles = temp + (bottles - temp * numExchange);\n\t\tcount += temp;\n\t}\n\treturn count;\n};\n```","slug":"1518. 换酒问题","published":1,"updated":"2021-12-30T14:59:19.707Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hw000misax38lv49tf","content":"<h1 id=\"1518-换酒问题-不断更新当前瓶子的个数\"><a href=\"#1518-换酒问题-不断更新当前瓶子的个数\" class=\"headerlink\" title=\"1518. 换酒问题 不断更新当前瓶子的个数\"></a>1518. 换酒问题 不断更新当前瓶子的个数</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/water-bottles/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子</li>\n<li>循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数</li>\n<li>更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数</li>\n<li>更新count的值</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numBottles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numExchange</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numWaterBottles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numBottles, numExchange</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = numBottles;<span class=\"comment\">//可以喝多少瓶酒</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> bottles = numBottles;<span class=\"comment\">//有多少瓶子</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (bottles &gt;= numExchange)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = <span class=\"built_in\">Math</span>.floor(bottles / numExchange);<span class=\"comment\">//当前的瓶子可以换多少瓶酒</span></span><br><span class=\"line\">\t\tbottles = temp + (bottles - temp * numExchange);</span><br><span class=\"line\">\t\tcount += temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":546,"excerpt":"","more":"<h1 id=\"1518-换酒问题-不断更新当前瓶子的个数\"><a href=\"#1518-换酒问题-不断更新当前瓶子的个数\" class=\"headerlink\" title=\"1518. 换酒问题 不断更新当前瓶子的个数\"></a>1518. 换酒问题 不断更新当前瓶子的个数</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/water-bottles/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子</li>\n<li>循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数</li>\n<li>更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数</li>\n<li>更新count的值</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numBottles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numExchange</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numWaterBottles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numBottles, numExchange</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = numBottles;<span class=\"comment\">//可以喝多少瓶酒</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> bottles = numBottles;<span class=\"comment\">//有多少瓶子</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (bottles &gt;= numExchange)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = <span class=\"built_in\">Math</span>.floor(bottles / numExchange);<span class=\"comment\">//当前的瓶子可以换多少瓶酒</span></span><br><span class=\"line\">\t\tbottles = temp + (bottles - temp * numExchange);</span><br><span class=\"line\">\t\tcount += temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"189. 轮转数组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"189. 轮转数组 利用数组内置方法splice和unshift","_content":"\n# 189. 轮转数组 利用数组内置方法splice和unshift\n## [查看原题](https://leetcode-cn.com/problems/rotate-array/)\n\n## 解题思路\n1. 判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度\n2. 找到第一个要轮转开始的地方 数组长度- 要轮转的长度\n3. 截取整个部分再用 unshift方法插入到数组的最前面就行\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\n var rotate = function(nums, k) {\n    let length = nums.length;\n    let k1 = k % length;\n    nums.unshift(...nums.splice(length - k1))\n    return nums\n};\n```","source":"_posts/189. 轮转数组.md","raw":"---\ntitle: 189. 轮转数组\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 189. 轮转数组 利用数组内置方法splice和unshift\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 189. 轮转数组 利用数组内置方法splice和unshift\n## [查看原题](https://leetcode-cn.com/problems/rotate-array/)\n\n## 解题思路\n1. 判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度\n2. 找到第一个要轮转开始的地方 数组长度- 要轮转的长度\n3. 截取整个部分再用 unshift方法插入到数组的最前面就行\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\n var rotate = function(nums, k) {\n    let length = nums.length;\n    let k1 = k % length;\n    nums.unshift(...nums.splice(length - k1))\n    return nums\n};\n```","slug":"189. 轮转数组","published":1,"updated":"2021-12-30T14:59:50.842Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hy000qisaxg7due5dd","content":"<h1 id=\"189-轮转数组-利用数组内置方法splice和unshift\"><a href=\"#189-轮转数组-利用数组内置方法splice和unshift\" class=\"headerlink\" title=\"189. 轮转数组 利用数组内置方法splice和unshift\"></a>189. 轮转数组 利用数组内置方法splice和unshift</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度</li>\n<li>找到第一个要轮转开始的地方 数组长度- 要轮转的长度</li>\n<li>截取整个部分再用 unshift方法插入到数组的最前面就行<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> k1 = k % length;</span><br><span class=\"line\">    nums.unshift(...nums.splice(length - k1))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":399,"excerpt":"","more":"<h1 id=\"189-轮转数组-利用数组内置方法splice和unshift\"><a href=\"#189-轮转数组-利用数组内置方法splice和unshift\" class=\"headerlink\" title=\"189. 轮转数组 利用数组内置方法splice和unshift\"></a>189. 轮转数组 利用数组内置方法splice和unshift</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度</li>\n<li>找到第一个要轮转开始的地方 数组长度- 要轮转的长度</li>\n<li>截取整个部分再用 unshift方法插入到数组的最前面就行<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> k1 = k % length;</span><br><span class=\"line\">    nums.unshift(...nums.splice(length - k1))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"167. 两数之和 II - 输入有序数组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解","_content":"\n# 167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解\n## 解题思路\n两层循环暴力求解\n\n##[原题](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if (numbers[j] + numbers[i] === target) {\n                result.push(i + 1, j + 1);\n                return result;\n            }\n        }\n    }\n\n};\n```\n\n## 解题思路\n二分法求解\n1. 循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，\n2. 在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回\n3. 这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let left = 0,\n        right = 0; //左右边界\n    for (let i = 0; i < length; i++) {\n        let target1 = target - numbers[i]; //另个数的大小\n        right = length - 1;\n        left = i + 1;\n        let mid = Math.floor((left + right) / 2);\n        while (left <= right) {\n            if (target1 < numbers[mid]) {\n                right = mid - 1;\n            } else if (target1 > numbers[mid]) {\n                left = mid + 1;\n            } else {\n                return [i + 1, mid + 1]\n            }\n            mid = Math.floor((left + right) / 2)\n        }\n    }\n\n};\n```","source":"_posts/167. 两数之和 II - 输入有序数组.md","raw":"---\ntitle: 167. 两数之和 II - 输入有序数组  \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解\n## 解题思路\n两层循环暴力求解\n\n##[原题](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if (numbers[j] + numbers[i] === target) {\n                result.push(i + 1, j + 1);\n                return result;\n            }\n        }\n    }\n\n};\n```\n\n## 解题思路\n二分法求解\n1. 循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，\n2. 在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回\n3. 这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let left = 0,\n        right = 0; //左右边界\n    for (let i = 0; i < length; i++) {\n        let target1 = target - numbers[i]; //另个数的大小\n        right = length - 1;\n        left = i + 1;\n        let mid = Math.floor((left + right) / 2);\n        while (left <= right) {\n            if (target1 < numbers[mid]) {\n                right = mid - 1;\n            } else if (target1 > numbers[mid]) {\n                left = mid + 1;\n            } else {\n                return [i + 1, mid + 1]\n            }\n            mid = Math.floor((left + right) / 2)\n        }\n    }\n\n};\n```","slug":"167. 两数之和 II - 输入有序数组","published":1,"updated":"2021-12-30T14:59:30.837Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i0000tisax74y7ehep","content":"<h1 id=\"167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\"><a href=\"#167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\" class=\"headerlink\" title=\"167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解\"></a>167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层循环暴力求解</p>\n<p>##<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[j] + numbers[i] === target) &#123;</span><br><span class=\"line\">                result.push(i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分法求解</p>\n<ol>\n<li>循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，</li>\n<li>在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回</li>\n<li>这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = <span class=\"number\">0</span>; <span class=\"comment\">//左右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target1 = target - numbers[i]; <span class=\"comment\">//另个数的大小</span></span><br><span class=\"line\">        right = length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target1 &lt; numbers[mid]) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target1 &gt; numbers[mid]) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i + <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1112,"excerpt":"","more":"<h1 id=\"167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\"><a href=\"#167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\" class=\"headerlink\" title=\"167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解\"></a>167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层循环暴力求解</p>\n<p>##<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[j] + numbers[i] === target) &#123;</span><br><span class=\"line\">                result.push(i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分法求解</p>\n<ol>\n<li>循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，</li>\n<li>在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回</li>\n<li>这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = <span class=\"number\">0</span>; <span class=\"comment\">//左右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target1 = target - numbers[i]; <span class=\"comment\">//另个数的大小</span></span><br><span class=\"line\">        right = length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target1 &lt; numbers[mid]) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target1 &gt; numbers[mid]) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i + <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"1816. 截断句子","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1816. 截断句子 split方法和循环判断","_content":"\n# 1816. 截断句子 split方法和循环判断\n\n## [查看原题](https://leetcode-cn.com/problems/truncate-sentence/)\n\n## 直接调用内置方法\n\n### 解题思路\n1. 先将字符串用split转为数组\n2. 用slice截取数组的0到k部分再用join连接\n\n### 代码\n```javascript\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    // 将字符串转为数组后截取\n    return s.split(' ').splice(0,k).join(' ')\n};\n\n```\n\n## 循环判断\n\n### 解题思路\n1. 新定义一个空字符result，定义count=0用来存储找到了几个空格\n2. 循环字符串，判断这一项是不是空格，如果是空格则count++\n3. 判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中\n\n\n### 代码\n```\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    const length = s.length;\n    let result = '';\n    let count = 0;\n    for(let i = 0;i<length;i++){\n        if(s.charAt(i)===' '){\n            count++;\n        }\n        if(count === k){\n            break;\n        }else{\n            result += s.charAt(i);\n        }\n        \n    }\n    return result;\n};\n```","source":"_posts/1816. 截断句子.md","raw":"---\ntitle: 1816. 截断句子\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1816. 截断句子 split方法和循环判断\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 1816. 截断句子 split方法和循环判断\n\n## [查看原题](https://leetcode-cn.com/problems/truncate-sentence/)\n\n## 直接调用内置方法\n\n### 解题思路\n1. 先将字符串用split转为数组\n2. 用slice截取数组的0到k部分再用join连接\n\n### 代码\n```javascript\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    // 将字符串转为数组后截取\n    return s.split(' ').splice(0,k).join(' ')\n};\n\n```\n\n## 循环判断\n\n### 解题思路\n1. 新定义一个空字符result，定义count=0用来存储找到了几个空格\n2. 循环字符串，判断这一项是不是空格，如果是空格则count++\n3. 判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中\n\n\n### 代码\n```\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    const length = s.length;\n    let result = '';\n    let count = 0;\n    for(let i = 0;i<length;i++){\n        if(s.charAt(i)===' '){\n            count++;\n        }\n        if(count === k){\n            break;\n        }else{\n            result += s.charAt(i);\n        }\n        \n    }\n    return result;\n};\n```","slug":"1816. 截断句子","published":1,"updated":"2021-12-30T14:59:40.912Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i1000xisax3kpe7d4x","content":"<h1 id=\"1816-截断句子-split方法和循环判断\"><a href=\"#1816-截断句子-split方法和循环判断\" class=\"headerlink\" title=\"1816. 截断句子 split方法和循环判断\"></a>1816. 截断句子 split方法和循环判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/truncate-sentence/\">查看原题</a></h2><h2 id=\"直接调用内置方法\"><a href=\"#直接调用内置方法\" class=\"headerlink\" title=\"直接调用内置方法\"></a>直接调用内置方法</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>先将字符串用split转为数组</li>\n<li>用slice截取数组的0到k部分再用join连接</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> truncateSentence = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组后截取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.split(<span class=\"string\">&#x27; &#x27;</span>).splice(<span class=\"number\">0</span>,k).join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环判断\"><a href=\"#循环判断\" class=\"headerlink\" title=\"循环判断\"></a>循环判断</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>新定义一个空字符result，定义count=0用来存储找到了几个空格</li>\n<li>循环字符串，判断这一项是不是空格，如果是空格则count++</li>\n<li>判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @param &#123;number&#125; k</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var truncateSentence = function(s, k) &#123;</span><br><span class=\"line\">    const length = s.length;</span><br><span class=\"line\">    let result = &#x27;&#x27;;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    for(let i = 0;i&lt;length;i++)&#123;</span><br><span class=\"line\">        if(s.charAt(i)===&#x27; &#x27;)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(count === k)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result += s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":813,"excerpt":"","more":"<h1 id=\"1816-截断句子-split方法和循环判断\"><a href=\"#1816-截断句子-split方法和循环判断\" class=\"headerlink\" title=\"1816. 截断句子 split方法和循环判断\"></a>1816. 截断句子 split方法和循环判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/truncate-sentence/\">查看原题</a></h2><h2 id=\"直接调用内置方法\"><a href=\"#直接调用内置方法\" class=\"headerlink\" title=\"直接调用内置方法\"></a>直接调用内置方法</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>先将字符串用split转为数组</li>\n<li>用slice截取数组的0到k部分再用join连接</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> truncateSentence = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组后截取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.split(<span class=\"string\">&#x27; &#x27;</span>).splice(<span class=\"number\">0</span>,k).join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环判断\"><a href=\"#循环判断\" class=\"headerlink\" title=\"循环判断\"></a>循环判断</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>新定义一个空字符result，定义count=0用来存储找到了几个空格</li>\n<li>循环字符串，判断这一项是不是空格，如果是空格则count++</li>\n<li>判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @param &#123;number&#125; k</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var truncateSentence = function(s, k) &#123;</span><br><span class=\"line\">    const length = s.length;</span><br><span class=\"line\">    let result = &#x27;&#x27;;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    for(let i = 0;i&lt;length;i++)&#123;</span><br><span class=\"line\">        if(s.charAt(i)===&#x27; &#x27;)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(count === k)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result += s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1995. 统计特殊四元组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1995. 统计特殊四元组","_content":"\n# 1995. 统计特殊四元组\n\n## [查看原题](https://leetcode-cn.com/problems/count-special-quadruplets/)\n\n## 解题思路\n\n四层循环直接判断\n\n## 代码\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countQuadruplets = function(nums) {\n\tlet count = 0;\n\n\tfor(let i = 0;i<nums.length-3;i++){\n\t\tfor(let j = i+1;j<nums.length-2;j++){\n\t\t\tfor(let t = j+1;t<nums.length-1;t++){\n\t\t\t\tfor(let l = t+1;l<nums.length;l++){\n\t\t\t\t\tif(nums[i] + nums[j] + nums[t] === nums[l]){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n};\n\n```","source":"_posts/1995. 统计特殊四元组.md","raw":"---\ntitle: 1995. 统计特殊四元组\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1995. 统计特殊四元组\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 1995. 统计特殊四元组\n\n## [查看原题](https://leetcode-cn.com/problems/count-special-quadruplets/)\n\n## 解题思路\n\n四层循环直接判断\n\n## 代码\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countQuadruplets = function(nums) {\n\tlet count = 0;\n\n\tfor(let i = 0;i<nums.length-3;i++){\n\t\tfor(let j = i+1;j<nums.length-2;j++){\n\t\t\tfor(let t = j+1;t<nums.length-1;t++){\n\t\t\t\tfor(let l = t+1;l<nums.length;l++){\n\t\t\t\t\tif(nums[i] + nums[j] + nums[t] === nums[l]){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n};\n\n```","slug":"1995. 统计特殊四元组","published":1,"updated":"2021-12-30T14:59:59.608Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i20010isaxffiq19uw","content":"<h1 id=\"1995-统计特殊四元组\"><a href=\"#1995-统计特殊四元组\" class=\"headerlink\" title=\"1995. 统计特殊四元组\"></a>1995. 统计特殊四元组</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/count-special-quadruplets/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>四层循环直接判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countQuadruplets = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;j&lt;nums.length-<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> t = j+<span class=\"number\">1</span>;t&lt;nums.length-<span class=\"number\">1</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> l = t+<span class=\"number\">1</span>;l&lt;nums.length;l++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(nums[i] + nums[j] + nums[t] === nums[l])&#123;</span><br><span class=\"line\">\t\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":440,"excerpt":"","more":"<h1 id=\"1995-统计特殊四元组\"><a href=\"#1995-统计特殊四元组\" class=\"headerlink\" title=\"1995. 统计特殊四元组\"></a>1995. 统计特殊四元组</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/count-special-quadruplets/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>四层循环直接判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countQuadruplets = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;j&lt;nums.length-<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> t = j+<span class=\"number\">1</span>;t&lt;nums.length-<span class=\"number\">1</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> l = t+<span class=\"number\">1</span>;l&lt;nums.length;l++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(nums[i] + nums[j] + nums[t] === nums[l])&#123;</span><br><span class=\"line\">\t\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"242. 有效的字母异位词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"242. 有效的字母异位词 转为数组排序后比较","_content":"\n# 242. 有效的字母异位词 转为数组排序后比较\n## [查看原题](https://leetcode-cn.com/problems/valid-anagram/)\n## 解题思路\n1. 先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false\n2. 执行这这以后说明字符串长度一样则将他们转为数组\n3. 可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用\n4. 循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    // 如果两个字符串长度不一样则不可能满足条件\n    if (s.length !== t.length) {\n        return false;\n    }\n    // 将字符串转为数组\n    const arr1 = Array.from(s);\n    const arr2 = Array.from(t);\n    arr1.sort();\n    arr2.sort();\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n```","source":"_posts/242. 有效的字母异位词.md","raw":"---\ntitle: 242. 有效的字母异位词\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 242. 有效的字母异位词 转为数组排序后比较\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 242. 有效的字母异位词 转为数组排序后比较\n## [查看原题](https://leetcode-cn.com/problems/valid-anagram/)\n## 解题思路\n1. 先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false\n2. 执行这这以后说明字符串长度一样则将他们转为数组\n3. 可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用\n4. 循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    // 如果两个字符串长度不一样则不可能满足条件\n    if (s.length !== t.length) {\n        return false;\n    }\n    // 将字符串转为数组\n    const arr1 = Array.from(s);\n    const arr2 = Array.from(t);\n    arr1.sort();\n    arr2.sort();\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n```","slug":"242. 有效的字母异位词","published":1,"updated":"2021-12-30T15:00:57.186Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i40014isax5txgcn2p","content":"<h1 id=\"242-有效的字母异位词-转为数组排序后比较\"><a href=\"#242-有效的字母异位词-转为数组排序后比较\" class=\"headerlink\" title=\"242. 有效的字母异位词 转为数组排序后比较\"></a>242. 有效的字母异位词 转为数组排序后比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-anagram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false</li>\n<li>执行这这以后说明字符串长度一样则将他们转为数组</li>\n<li>可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用</li>\n<li>循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">t</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不一样则不可能满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== t.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr1 = <span class=\"built_in\">Array</span>.from(s);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr2 = <span class=\"built_in\">Array</span>.from(t);</span><br><span class=\"line\">    arr1.sort();</span><br><span class=\"line\">    arr2.sort();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr1[i] !== arr2[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":587,"excerpt":"","more":"<h1 id=\"242-有效的字母异位词-转为数组排序后比较\"><a href=\"#242-有效的字母异位词-转为数组排序后比较\" class=\"headerlink\" title=\"242. 有效的字母异位词 转为数组排序后比较\"></a>242. 有效的字母异位词 转为数组排序后比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-anagram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false</li>\n<li>执行这这以后说明字符串长度一样则将他们转为数组</li>\n<li>可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用</li>\n<li>循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">t</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不一样则不可能满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== t.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr1 = <span class=\"built_in\">Array</span>.from(s);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr2 = <span class=\"built_in\">Array</span>.from(t);</span><br><span class=\"line\">    arr1.sort();</span><br><span class=\"line\">    arr2.sort();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr1[i] !== arr2[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"217. 存在重复元素","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"217. 存在重复元素 利用set来和数组长度比较&排序比较","_content":"\n# 217. 存在重复元素 利用set来和数组长度比较&排序比较\n\n## [查看原题](https://leetcode-cn.com/problems/contains-duplicate/)\n## 解题思路\n利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    const set = new Set(nums);\n    let sum1 = 0,\n        sum2 = 0;\n    if (set.size === nums.length) {\n        return false;\n    } else {\n        return true;\n    }\n};\n```\n\n## 解题思路\n1. 可以先讲数组从小到大排序，则重复的数字会相邻。\n2. 循环判断数组的当前项是否等于下一项\n    - 等于则直接返回\n    - 不等于就继续判断\n3. 循环结束return false，到此还没返回说明数组里面不会有重复值\n\n## 代码\n\n```javascript\n\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    nums.sort((a, b) => a - b); //将数组排序\n    // 如果数组中存在重复元素，则排序后应该相邻\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n```","source":"_posts/217. 存在重复元素.md","raw":"---\ntitle: 217. 存在重复元素\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 217. 存在重复元素 利用set来和数组长度比较&排序比较\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 217. 存在重复元素 利用set来和数组长度比较&排序比较\n\n## [查看原题](https://leetcode-cn.com/problems/contains-duplicate/)\n## 解题思路\n利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    const set = new Set(nums);\n    let sum1 = 0,\n        sum2 = 0;\n    if (set.size === nums.length) {\n        return false;\n    } else {\n        return true;\n    }\n};\n```\n\n## 解题思路\n1. 可以先讲数组从小到大排序，则重复的数字会相邻。\n2. 循环判断数组的当前项是否等于下一项\n    - 等于则直接返回\n    - 不等于就继续判断\n3. 循环结束return false，到此还没返回说明数组里面不会有重复值\n\n## 代码\n\n```javascript\n\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    nums.sort((a, b) => a - b); //将数组排序\n    // 如果数组中存在重复元素，则排序后应该相邻\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n```","slug":"217. 存在重复元素","published":1,"updated":"2021-12-30T15:00:23.407Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i50017isaxcznv8s09","content":"<h1 id=\"217-存在重复元素-利用set来和数组长度比较-amp-排序比较\"><a href=\"#217-存在重复元素-利用set来和数组长度比较-amp-排序比较\" class=\"headerlink\" title=\"217. 存在重复元素 利用set来和数组长度比较&amp;排序比较\"></a>217. 存在重复元素 利用set来和数组长度比较&amp;排序比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/contains-duplicate/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>,</span><br><span class=\"line\">        sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.size === nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>可以先讲数组从小到大排序，则重复的数字会相邻。</li>\n<li>循环判断数组的当前项是否等于下一项<ul>\n<li>等于则直接返回</li>\n<li>不等于就继续判断</li>\n</ul>\n</li>\n<li>循环结束return false，到此还没返回说明数组里面不会有重复值</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b); <span class=\"comment\">//将数组排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果数组中存在重复元素，则排序后应该相邻</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] === nums[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":765,"excerpt":"","more":"<h1 id=\"217-存在重复元素-利用set来和数组长度比较-amp-排序比较\"><a href=\"#217-存在重复元素-利用set来和数组长度比较-amp-排序比较\" class=\"headerlink\" title=\"217. 存在重复元素 利用set来和数组长度比较&amp;排序比较\"></a>217. 存在重复元素 利用set来和数组长度比较&amp;排序比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/contains-duplicate/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>,</span><br><span class=\"line\">        sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.size === nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>可以先讲数组从小到大排序，则重复的数字会相邻。</li>\n<li>循环判断数组的当前项是否等于下一项<ul>\n<li>等于则直接返回</li>\n<li>不等于就继续判断</li>\n</ul>\n</li>\n<li>循环结束return false，到此还没返回说明数组里面不会有重复值</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b); <span class=\"comment\">//将数组排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果数组中存在重复元素，则排序后应该相邻</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] === nums[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"202. 快乐数","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"202. 快乐数  while循环找到结束条件","_content":"\n# 202. 快乐数  while循环找到结束条件\n## [查看原题](https://leetcode-cn.com/problems/happy-number/)\n## 解题思路\n首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件\n1. 先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber\n2. 根据得到的数字每一项计算平方和，将其存放到一个数组中 temp\n3. 先判断结果是否为 1\n    - 为 1 则证明是快乐数，返回 true \n    - 不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）\n        - 如果出现了则返回false ，循环结束\n        - 没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n\n    let temp = []; //存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环\n    while (1) {\n        const nums = getEachNumber(n); //将数字每一项放在数组里;\n        let result = nums.map(item => item ** 2); //将数字每一项平方\n        let sum = 0; //每一次计算的各项平方和结果\n        result.forEach(item => sum += item);\n        if (sum === 1) {\n            return true;\n        }\n        if (temp.indexOf(sum) != -1) {\n            // 结果形成了循环不会再等于 1 了\n            return false;\n        }\n        temp.push(sum);\n        n = sum;\n    }\n};\n/**\n * 取出数字的每一项\n * @param {number} n 传入要处理的数字\n * @param {Array}\n */\nfunction getEachNumber(n) {\n    let nums = [];\n    while (n > 0) {\n        nums.push(Math.floor(n % 10))\n        n = Math.floor(n / 10)\n    }\n    return nums;\n}\n```","source":"_posts/202. 快乐数.md","raw":"---\ntitle: 202. 快乐数\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 202. 快乐数  while循环找到结束条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 202. 快乐数  while循环找到结束条件\n## [查看原题](https://leetcode-cn.com/problems/happy-number/)\n## 解题思路\n首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件\n1. 先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber\n2. 根据得到的数字每一项计算平方和，将其存放到一个数组中 temp\n3. 先判断结果是否为 1\n    - 为 1 则证明是快乐数，返回 true \n    - 不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）\n        - 如果出现了则返回false ，循环结束\n        - 没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n\n    let temp = []; //存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环\n    while (1) {\n        const nums = getEachNumber(n); //将数字每一项放在数组里;\n        let result = nums.map(item => item ** 2); //将数字每一项平方\n        let sum = 0; //每一次计算的各项平方和结果\n        result.forEach(item => sum += item);\n        if (sum === 1) {\n            return true;\n        }\n        if (temp.indexOf(sum) != -1) {\n            // 结果形成了循环不会再等于 1 了\n            return false;\n        }\n        temp.push(sum);\n        n = sum;\n    }\n};\n/**\n * 取出数字的每一项\n * @param {number} n 传入要处理的数字\n * @param {Array}\n */\nfunction getEachNumber(n) {\n    let nums = [];\n    while (n > 0) {\n        nums.push(Math.floor(n % 10))\n        n = Math.floor(n / 10)\n    }\n    return nums;\n}\n```","slug":"202. 快乐数","published":1,"updated":"2021-12-30T15:00:08.754Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i7001bisax450dhuqf","content":"<h1 id=\"202-快乐数-while循环找到结束条件\"><a href=\"#202-快乐数-while循环找到结束条件\" class=\"headerlink\" title=\"202. 快乐数  while循环找到结束条件\"></a>202. 快乐数  while循环找到结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/happy-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件</p>\n<ol>\n<li>先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber</li>\n<li>根据得到的数字每一项计算平方和，将其存放到一个数组中 temp</li>\n<li>先判断结果是否为 1<ul>\n<li>为 1 则证明是快乐数，返回 true </li>\n<li>不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）<ul>\n<li>如果出现了则返回false ，循环结束</li>\n<li>没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nums = getEachNumber(n); <span class=\"comment\">//将数字每一项放在数组里;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item ** <span class=\"number\">2</span>); <span class=\"comment\">//将数字每一项平方</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//每一次计算的各项平方和结果</span></span><br><span class=\"line\">        result.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> sum += item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.indexOf(sum) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 结果形成了循环不会再等于 1 了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.push(sum);</span><br><span class=\"line\">        n = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出数字的每一项</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> </span>n 传入要处理的数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEachNumber</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        nums.push(<span class=\"built_in\">Math</span>.floor(n % <span class=\"number\">10</span>))</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":933,"excerpt":"","more":"<h1 id=\"202-快乐数-while循环找到结束条件\"><a href=\"#202-快乐数-while循环找到结束条件\" class=\"headerlink\" title=\"202. 快乐数  while循环找到结束条件\"></a>202. 快乐数  while循环找到结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/happy-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件</p>\n<ol>\n<li>先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber</li>\n<li>根据得到的数字每一项计算平方和，将其存放到一个数组中 temp</li>\n<li>先判断结果是否为 1<ul>\n<li>为 1 则证明是快乐数，返回 true </li>\n<li>不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）<ul>\n<li>如果出现了则返回false ，循环结束</li>\n<li>没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nums = getEachNumber(n); <span class=\"comment\">//将数字每一项放在数组里;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item ** <span class=\"number\">2</span>); <span class=\"comment\">//将数字每一项平方</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//每一次计算的各项平方和结果</span></span><br><span class=\"line\">        result.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> sum += item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.indexOf(sum) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 结果形成了循环不会再等于 1 了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.push(sum);</span><br><span class=\"line\">        n = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出数字的每一项</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> </span>n 传入要处理的数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEachNumber</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        nums.push(<span class=\"built_in\">Math</span>.floor(n % <span class=\"number\">10</span>))</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"258. 各位相加","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"258. 各位相加  双层while循环","_content":"\n# 258. 各位相加  双层while循环\n## [查看原题](https://leetcode-cn.com/problems/add-digits/)\n## 解题思路\n两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；\n每次循环计算求和都更新外层的num 为数字各项计算总和sum。\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    while (num > 9) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10)\n        }\n        num = sum;\n    }\n    return num;\n};\n```","source":"_posts/258. 各位相加 .md","raw":"---\ntitle: 258. 各位相加\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 258. 各位相加  双层while循环\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 258. 各位相加  双层while循环\n## [查看原题](https://leetcode-cn.com/problems/add-digits/)\n## 解题思路\n两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；\n每次循环计算求和都更新外层的num 为数字各项计算总和sum。\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    while (num > 9) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10)\n        }\n        num = sum;\n    }\n    return num;\n};\n```","slug":"258. 各位相加 ","published":1,"updated":"2021-12-30T15:01:06.898Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i8001eisax57c05f60","content":"<h1 id=\"258-各位相加-双层while循环\"><a href=\"#258-各位相加-双层while循环\" class=\"headerlink\" title=\"258. 各位相加  双层while循环\"></a>258. 各位相加  双层while循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/add-digits/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；<br>每次循环计算求和都更新外层的num 为数字各项计算总和sum。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addDigits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">            num = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":334,"excerpt":"","more":"<h1 id=\"258-各位相加-双层while循环\"><a href=\"#258-各位相加-双层while循环\" class=\"headerlink\" title=\"258. 各位相加  双层while循环\"></a>258. 各位相加  双层while循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/add-digits/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；<br>每次循环计算求和都更新外层的num 为数字各项计算总和sum。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addDigits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">            num = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"278. 第一个错误的版本","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"278. 第一个错误的版本  二分法，注意判断结束条件","_content":"\n# 278. 第一个错误的版本  二分法，注意判断结束条件\n## [查看原题](https://leetcode-cn.com/problems/first-bad-version/)\n## 解题思路\n二分算法判断\n如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1\n如果当前是错误版本，则需要继续判断当前是不是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环\n\n## 代码\n\n```javascript\n/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        let left = 1;\n        let right = n;\n        while(left <= right) {\n            mid = Math.floor((left + right) / 2)\n            if(!isBadVersion(mid)){\n                left = mid+1;\n            }else if(isBadVersion(mid)){\n                if(isBadVersion(mid - 1)){\n                    right = mid-1;\n                }else{\n                    return mid;\n                }\n            }\n        }\n    };\n};\n```","source":"_posts/278. 第一个错误的版本.md","raw":"---\ntitle: 278. 第一个错误的版本\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 278. 第一个错误的版本  二分法，注意判断结束条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 278. 第一个错误的版本  二分法，注意判断结束条件\n## [查看原题](https://leetcode-cn.com/problems/first-bad-version/)\n## 解题思路\n二分算法判断\n如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1\n如果当前是错误版本，则需要继续判断当前是不是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环\n\n## 代码\n\n```javascript\n/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        let left = 1;\n        let right = n;\n        while(left <= right) {\n            mid = Math.floor((left + right) / 2)\n            if(!isBadVersion(mid)){\n                left = mid+1;\n            }else if(isBadVersion(mid)){\n                if(isBadVersion(mid - 1)){\n                    right = mid-1;\n                }else{\n                    return mid;\n                }\n            }\n        }\n    };\n};\n```","slug":"278. 第一个错误的版本","published":1,"updated":"2021-12-30T15:01:16.223Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ia001iisax9idr3ryi","content":"<h1 id=\"278-第一个错误的版本-二分法，注意判断结束条件\"><a href=\"#278-第一个错误的版本-二分法，注意判断结束条件\" class=\"headerlink\" title=\"278. 第一个错误的版本  二分法，注意判断结束条件\"></a>278. 第一个错误的版本  二分法，注意判断结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/first-bad-version/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法判断<br>如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1<br>如果当前是错误版本，则需要继续判断当前是不是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>version number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span> </span>whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;function&#125;</span> </span>isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;integer&#125;</span> </span>The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isBadVersion(mid))&#123;</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isBadVersion(mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isBadVersion(mid - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    right = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":883,"excerpt":"","more":"<h1 id=\"278-第一个错误的版本-二分法，注意判断结束条件\"><a href=\"#278-第一个错误的版本-二分法，注意判断结束条件\" class=\"headerlink\" title=\"278. 第一个错误的版本  二分法，注意判断结束条件\"></a>278. 第一个错误的版本  二分法，注意判断结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/first-bad-version/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法判断<br>如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1<br>如果当前是错误版本，则需要继续判断当前是不是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>version number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span> </span>whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;function&#125;</span> </span>isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;integer&#125;</span> </span>The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isBadVersion(mid))&#123;</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isBadVersion(mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isBadVersion(mid - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    right = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"283. 移动零","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"283. 移动零","_content":"\n# 283. 移动零 \n## [查看原题](https://leetcode-cn.com/problems/move-zeroes/)\n## 解题思路\n1. 将right赋值为nums.length-1,代表当前连续0开始的位置\n2. lef赋值为 0 表示当前数组扫描的位置\n3. 从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right-- ,不在更新left，防止有连续的0，再次回到这个位置\n4. 如果当前项不是0 则更新left++\n\n## 代码\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let left; //左指针，开始循环\n    let length = nums.length;\n    let right = length - 1; //右指针的最开始位置\n    for (left = 0; left <= right;) {\n        // 如果当前项是0则将当前项之后的数值向前移一位\n        if (nums[left] === 0) {\n            for (let j = left + 1; j <= right; j++) {\n                nums[j - 1] = nums[j]\n            }\n            nums[right] = 0;\n            right--;\n        } else {\n            left++;\n        }\n    }\n};\n```","source":"_posts/283. 移动零.md","raw":"---\ntitle: 283. 移动零 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 283. 移动零 \ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 283. 移动零 \n## [查看原题](https://leetcode-cn.com/problems/move-zeroes/)\n## 解题思路\n1. 将right赋值为nums.length-1,代表当前连续0开始的位置\n2. lef赋值为 0 表示当前数组扫描的位置\n3. 从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right-- ,不在更新left，防止有连续的0，再次回到这个位置\n4. 如果当前项不是0 则更新left++\n\n## 代码\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let left; //左指针，开始循环\n    let length = nums.length;\n    let right = length - 1; //右指针的最开始位置\n    for (left = 0; left <= right;) {\n        // 如果当前项是0则将当前项之后的数值向前移一位\n        if (nums[left] === 0) {\n            for (let j = left + 1; j <= right; j++) {\n                nums[j - 1] = nums[j]\n            }\n            nums[right] = 0;\n            right--;\n        } else {\n            left++;\n        }\n    }\n};\n```","slug":"283. 移动零","published":1,"updated":"2021-12-30T15:01:27.143Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ib001lisax9w00d5yr","content":"<h1 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283. 移动零\"></a>283. 移动零</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/move-zeroes/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将right赋值为nums.length-1,代表当前连续0开始的位置</li>\n<li>lef赋值为 0 表示当前数组扫描的位置</li>\n<li>从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right– ,不在更新left，防止有连续的0，再次回到这个位置</li>\n<li>如果当前项不是0 则更新left++</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left; <span class=\"comment\">//左指针，开始循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = length - <span class=\"number\">1</span>; <span class=\"comment\">//右指针的最开始位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (left = <span class=\"number\">0</span>; left &lt;= right;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前项是0则将当前项之后的数值向前移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[left] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = left + <span class=\"number\">1</span>; j &lt;= right; j++) &#123;</span><br><span class=\"line\">                nums[j - <span class=\"number\">1</span>] = nums[j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[right] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":625,"excerpt":"","more":"<h1 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283. 移动零\"></a>283. 移动零</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/move-zeroes/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将right赋值为nums.length-1,代表当前连续0开始的位置</li>\n<li>lef赋值为 0 表示当前数组扫描的位置</li>\n<li>从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right– ,不在更新left，防止有连续的0，再次回到这个位置</li>\n<li>如果当前项不是0 则更新left++</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left; <span class=\"comment\">//左指针，开始循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = length - <span class=\"number\">1</span>; <span class=\"comment\">//右指针的最开始位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (left = <span class=\"number\">0</span>; left &lt;= right;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前项是0则将当前项之后的数值向前移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[left] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = left + <span class=\"number\">1</span>; j &lt;= right; j++) &#123;</span><br><span class=\"line\">                nums[j - <span class=\"number\">1</span>] = nums[j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[right] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"318. 最大单词长度乘积","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"318. 最大单词长度乘积 暴力循环","_content":"\n# 318. 最大单词长度乘积 暴力循环\n## [查看原题](https://leetcode-cn.com/problems/maximum-product-of-word-lengths/)\n\n## 解题思路\n直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值\n## 代码\n```javascript\nfunction maxProduct(words) {\n    let i, j;\n    let max = 0;\n    for (i = 0; i < words.length; i++) {\n        for (j = i + 1; j < words.length; j++) {\n            let flag = 0; //表示有无重复\n            const set = new Set(words[i]);\n            const set1 = new Set(words[j]);\n            for (const item of set1) {\n                if (set.has(item)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (!flag) {\n                if ((words[i].length * words[j].length) > max) {\n                    max = words[i].length * words[j].length\n                }\n            }\n        }\n    }\n    return max;\n}\n```","source":"_posts/318. 最大单词长度乘积.md","raw":"---\ntitle: 318. 最大单词长度乘积 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 318. 最大单词长度乘积 暴力循环\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 318. 最大单词长度乘积 暴力循环\n## [查看原题](https://leetcode-cn.com/problems/maximum-product-of-word-lengths/)\n\n## 解题思路\n直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值\n## 代码\n```javascript\nfunction maxProduct(words) {\n    let i, j;\n    let max = 0;\n    for (i = 0; i < words.length; i++) {\n        for (j = i + 1; j < words.length; j++) {\n            let flag = 0; //表示有无重复\n            const set = new Set(words[i]);\n            const set1 = new Set(words[j]);\n            for (const item of set1) {\n                if (set.has(item)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (!flag) {\n                if ((words[i].length * words[j].length) > max) {\n                    max = words[i].length * words[j].length\n                }\n            }\n        }\n    }\n    return max;\n}\n```","slug":"318. 最大单词长度乘积","published":1,"updated":"2021-12-30T15:01:36.685Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5id001pisaxfltpbw66","content":"<h1 id=\"318-最大单词长度乘积-暴力循环\"><a href=\"#318-最大单词长度乘积-暴力循环\" class=\"headerlink\" title=\"318. 最大单词长度乘积 暴力循环\"></a>318. 最大单词长度乘积 暴力循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">words</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> flag = <span class=\"number\">0</span>; <span class=\"comment\">//表示有无重复</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[i]);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[j]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.has(item)) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((words[i].length * words[j].length) &gt; max) &#123;</span><br><span class=\"line\">                    max = words[i].length * words[j].length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":516,"excerpt":"","more":"<h1 id=\"318-最大单词长度乘积-暴力循环\"><a href=\"#318-最大单词长度乘积-暴力循环\" class=\"headerlink\" title=\"318. 最大单词长度乘积 暴力循环\"></a>318. 最大单词长度乘积 暴力循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">words</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> flag = <span class=\"number\">0</span>; <span class=\"comment\">//表示有无重复</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[i]);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[j]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.has(item)) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((words[i].length * words[j].length) &gt; max) &#123;</span><br><span class=\"line\">                    max = words[i].length * words[j].length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"344. 反转字符串","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"344. 反转字符串 reverse&双指针&splice","_content":"\n# 344. 反转字符串 reverse&双指针&splice\n# [查看原题](https://leetcode-cn.com/problems/reverse-string/)\n\n## 解题思路\n每次将数组最后一个pop再用splice插入到数组中\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < len; i++) {\n        s.splice(i, 0, s.pop());\n    }\n};\n```\n\n## 解题思路\n双指针，找出交换后的位置进行交换\n\n## 代码\n\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < Math.floor(len / 2); i++) {\n        let temp = s[i];\n        s[i] = s[len - 1 - i];\n        s[len - i - 1] = temp;\n    }\n};\n```\n\n## 解题思路\n使用reverse方法\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    s.reverse();\n};\n```","source":"_posts/344. 反转字符串.md","raw":"---\ntitle: 344. 反转字符串\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 344. 反转字符串 reverse&双指针&splice\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 344. 反转字符串 reverse&双指针&splice\n# [查看原题](https://leetcode-cn.com/problems/reverse-string/)\n\n## 解题思路\n每次将数组最后一个pop再用splice插入到数组中\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < len; i++) {\n        s.splice(i, 0, s.pop());\n    }\n};\n```\n\n## 解题思路\n双指针，找出交换后的位置进行交换\n\n## 代码\n\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < Math.floor(len / 2); i++) {\n        let temp = s[i];\n        s[i] = s[len - 1 - i];\n        s[len - i - 1] = temp;\n    }\n};\n```\n\n## 解题思路\n使用reverse方法\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    s.reverse();\n};\n```","slug":"344. 反转字符串","published":1,"updated":"2021-12-30T15:01:46.512Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ie001sisax25hv7tpc","content":"<h1 id=\"344-反转字符串-reverse-amp-双指针-amp-splice\"><a href=\"#344-反转字符串-reverse-amp-双指针-amp-splice\" class=\"headerlink\" title=\"344. 反转字符串 reverse&amp;双指针&amp;splice\"></a>344. 反转字符串 reverse&amp;双指针&amp;splice</h1><h1 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-string/\">查看原题</a></h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>每次将数组最后一个pop再用splice插入到数组中</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        s.splice(i, <span class=\"number\">0</span>, s.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>双指针，找出交换后的位置进行交换</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = s[i];</span><br><span class=\"line\">        s[i] = s[len - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">        s[len - i - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用reverse方法</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s.reverse();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":772,"excerpt":"","more":"<h1 id=\"344-反转字符串-reverse-amp-双指针-amp-splice\"><a href=\"#344-反转字符串-reverse-amp-双指针-amp-splice\" class=\"headerlink\" title=\"344. 反转字符串 reverse&amp;双指针&amp;splice\"></a>344. 反转字符串 reverse&amp;双指针&amp;splice</h1><h1 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-string/\">查看原题</a></h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>每次将数组最后一个pop再用splice插入到数组中</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        s.splice(i, <span class=\"number\">0</span>, s.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>双指针，找出交换后的位置进行交换</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = s[i];</span><br><span class=\"line\">        s[i] = s[len - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">        s[len - i - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用reverse方法</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s.reverse();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"35. 搜索插入位置","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"35. 搜索插入位置 二分注意细分判断条件","_content":"\n# 35. 搜索插入位置 二分注意细分判断条件\n## [查看原题](https://leetcode-cn.com/problems/search-insert-position/)\n## 解题思路\n二分算法，注意不同的判断条件\n1. left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1\n2. 注意while的循环条件为 left<= right ， mid = Math.floor((left + right) / 2);\n3. 开始判断nums[mid] 和target的关系\n    1. 如果nums[mid] > target \n        - 继续判断mid是否在数组的第一项了\n            1. 如果不是第一项则 right = mid - 1;\n            2. 如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位\n    2. 如果nums[mid] < target\n         - 继续判断mid是否在数组的最后一项了\n            1. 如果不是最后一项则 left = mid + 1;\n            2. 如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位\n    3. 如果nums[mid] === target \n        - 直接返回 mid\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    let left = 0,\n        right = nums.length - 1;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (nums[mid] > target) {\n            if (mid != 0) {\n                right = mid - 1;\n            } else {\n                return 0;\n            }\n        } else if (nums[mid] < target) {\n            if (nums[mid + 1] > target) {\n                return mid + 1;\n            } else {\n                if (mid != nums.length - 1) {\n                    left = mid + 1;\n                } else {\n                    return nums.length;\n                }\n            }\n        } else {\n            return mid;\n        }\n    }\n};\n\n```","source":"_posts/35. 搜索插入位置.md","raw":"---\ntitle: 35. 搜索插入位置\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 35. 搜索插入位置 二分注意细分判断条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 35. 搜索插入位置 二分注意细分判断条件\n## [查看原题](https://leetcode-cn.com/problems/search-insert-position/)\n## 解题思路\n二分算法，注意不同的判断条件\n1. left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1\n2. 注意while的循环条件为 left<= right ， mid = Math.floor((left + right) / 2);\n3. 开始判断nums[mid] 和target的关系\n    1. 如果nums[mid] > target \n        - 继续判断mid是否在数组的第一项了\n            1. 如果不是第一项则 right = mid - 1;\n            2. 如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位\n    2. 如果nums[mid] < target\n         - 继续判断mid是否在数组的最后一项了\n            1. 如果不是最后一项则 left = mid + 1;\n            2. 如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位\n    3. 如果nums[mid] === target \n        - 直接返回 mid\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    let left = 0,\n        right = nums.length - 1;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (nums[mid] > target) {\n            if (mid != 0) {\n                right = mid - 1;\n            } else {\n                return 0;\n            }\n        } else if (nums[mid] < target) {\n            if (nums[mid + 1] > target) {\n                return mid + 1;\n            } else {\n                if (mid != nums.length - 1) {\n                    left = mid + 1;\n                } else {\n                    return nums.length;\n                }\n            }\n        } else {\n            return mid;\n        }\n    }\n};\n\n```","slug":"35. 搜索插入位置","published":1,"updated":"2021-12-30T15:01:56.404Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ig001wisaxfqkhc66a","content":"<h1 id=\"35-搜索插入位置-二分注意细分判断条件\"><a href=\"#35-搜索插入位置-二分注意细分判断条件\" class=\"headerlink\" title=\"35. 搜索插入位置 二分注意细分判断条件\"></a>35. 搜索插入位置 二分注意细分判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/search-insert-position/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，注意不同的判断条件</p>\n<ol>\n<li>left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1</li>\n<li>注意while的循环条件为 left&lt;= right ， mid = Math.floor((left + right) / 2);</li>\n<li>开始判断nums[mid] 和target的关系<ol>\n<li>如果nums[mid] &gt; target <ul>\n<li>继续判断mid是否在数组的第一项了<ol>\n<li>如果不是第一项则 right = mid - 1;</li>\n<li>如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] &lt; target<ul>\n<li>继续判断mid是否在数组的最后一项了<ol>\n<li>如果不是最后一项则 left = mid + 1;</li>\n<li>如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] === target <ul>\n<li>直接返回 mid</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid + <span class=\"number\">1</span>] &gt; target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid != nums.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1022,"excerpt":"","more":"<h1 id=\"35-搜索插入位置-二分注意细分判断条件\"><a href=\"#35-搜索插入位置-二分注意细分判断条件\" class=\"headerlink\" title=\"35. 搜索插入位置 二分注意细分判断条件\"></a>35. 搜索插入位置 二分注意细分判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/search-insert-position/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，注意不同的判断条件</p>\n<ol>\n<li>left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1</li>\n<li>注意while的循环条件为 left&lt;= right ， mid = Math.floor((left + right) / 2);</li>\n<li>开始判断nums[mid] 和target的关系<ol>\n<li>如果nums[mid] &gt; target <ul>\n<li>继续判断mid是否在数组的第一项了<ol>\n<li>如果不是第一项则 right = mid - 1;</li>\n<li>如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] &lt; target<ul>\n<li>继续判断mid是否在数组的最后一项了<ol>\n<li>如果不是最后一项则 left = mid + 1;</li>\n<li>如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] === target <ul>\n<li>直接返回 mid</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid + <span class=\"number\">1</span>] &gt; target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid != nums.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"391. 完美矩形","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"391. 完美矩形 map哈希","_content":"\n\n# 391. 完美矩形 map哈希\n## [查看原题](https://leetcode-cn.com/problems/perfect-rectangle/)\n## 解题思路\n### 只要满足两个条件就是完美矩形：\n1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n\n### 判断矩形总面积是否等于围住所有矩形的大矩形的面积\n1. 先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标\n2. 找出大矩形的左下和右上坐标\n3. 求出大矩形的面积\n4. 求出每个小矩形的面积求和\n5. 判断是否相等，不相等直接返回 false 相等则进入下一判断\n\n### 判断是否有重叠\n1. 将每个小矩形的坐标存到一个大数组中\n2. 循环数组，用map哈希将每个坐标点的重复次数映射\n3.判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）\n3. 最后返回true ，此处返回说明前面的条件都满足\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\n\n//  只要满足两个条件就是完美矩形：\n// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n//  */\nvar isRectangleCover = function(rectangles) {\n    let nums1 = [],\n        nums2 = [],\n        nums3 = [],\n        nums4 = [];\n    for (let i = 0; i < rectangles.length; i++) {\n        nums1.push(rectangles[i][0]);\n        nums2.push(rectangles[i][1]);\n        nums3.push(rectangles[i][2]);\n        nums4.push(rectangles[i][3]);\n    }\n    const minNum1 = Math.min(...nums1);\n    const minNum2 = Math.min(...nums2);\n    const maxNum1 = Math.max(...nums3);\n    const maxNum2 = Math.max(...nums4);\n    const maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);\n    let sum = 0;\n    rectangles.forEach(item => {\n        sum += ((item[3] - item[1]) * (item[2] - item[0]));\n    })\n    let a = []; //存放每个坐标的字符串\n    if (sum === maxArear) {\n        for (let i = 0; i < rectangles.length; i++) {\n            // 将四个角的坐标加入\n            a.push(nums1[i] + \",\" + nums2[i]);\n            a.push(nums1[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums2[i]);\n        }\n        let map = new Map();\n        for (let i = 0; i < a.length; i++) {\n            if (map.has(a[i])) {\n                map.set(a[i], map.get(a[i]) + 1);\n            } else {\n                map.set(a[i], 1);\n            }\n        }\n        // 判断四个顶点是否重复一次\n        // 四个顶点\n        const leftBottom = minNum1 + ',' + minNum2;\n        const leftTop = minNum1 + ',' + maxNum2;\n        const rightBottom = maxNum1 + ',' + minNum2;\n        const rightTop = maxNum1 + ',' + maxNum2;\n        const four = [leftBottom, leftTop, rightBottom, rightTop];\n        //遍历map对象判断\n        for (const [key, value] of map) {\n            if (value == 1) {\n                if (four.indexOf(key) === -1) {\n                    return false;\n                }\n            } else if (value == 2) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else if (value == 4) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n```","source":"_posts/391. 完美矩形.md","raw":"---\ntitle: 391. 完美矩形\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 391. 完美矩形 map哈希\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 391. 完美矩形 map哈希\n## [查看原题](https://leetcode-cn.com/problems/perfect-rectangle/)\n## 解题思路\n### 只要满足两个条件就是完美矩形：\n1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n\n### 判断矩形总面积是否等于围住所有矩形的大矩形的面积\n1. 先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标\n2. 找出大矩形的左下和右上坐标\n3. 求出大矩形的面积\n4. 求出每个小矩形的面积求和\n5. 判断是否相等，不相等直接返回 false 相等则进入下一判断\n\n### 判断是否有重叠\n1. 将每个小矩形的坐标存到一个大数组中\n2. 循环数组，用map哈希将每个坐标点的重复次数映射\n3.判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）\n3. 最后返回true ，此处返回说明前面的条件都满足\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\n\n//  只要满足两个条件就是完美矩形：\n// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n//  */\nvar isRectangleCover = function(rectangles) {\n    let nums1 = [],\n        nums2 = [],\n        nums3 = [],\n        nums4 = [];\n    for (let i = 0; i < rectangles.length; i++) {\n        nums1.push(rectangles[i][0]);\n        nums2.push(rectangles[i][1]);\n        nums3.push(rectangles[i][2]);\n        nums4.push(rectangles[i][3]);\n    }\n    const minNum1 = Math.min(...nums1);\n    const minNum2 = Math.min(...nums2);\n    const maxNum1 = Math.max(...nums3);\n    const maxNum2 = Math.max(...nums4);\n    const maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);\n    let sum = 0;\n    rectangles.forEach(item => {\n        sum += ((item[3] - item[1]) * (item[2] - item[0]));\n    })\n    let a = []; //存放每个坐标的字符串\n    if (sum === maxArear) {\n        for (let i = 0; i < rectangles.length; i++) {\n            // 将四个角的坐标加入\n            a.push(nums1[i] + \",\" + nums2[i]);\n            a.push(nums1[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums2[i]);\n        }\n        let map = new Map();\n        for (let i = 0; i < a.length; i++) {\n            if (map.has(a[i])) {\n                map.set(a[i], map.get(a[i]) + 1);\n            } else {\n                map.set(a[i], 1);\n            }\n        }\n        // 判断四个顶点是否重复一次\n        // 四个顶点\n        const leftBottom = minNum1 + ',' + minNum2;\n        const leftTop = minNum1 + ',' + maxNum2;\n        const rightBottom = maxNum1 + ',' + minNum2;\n        const rightTop = maxNum1 + ',' + maxNum2;\n        const four = [leftBottom, leftTop, rightBottom, rightTop];\n        //遍历map对象判断\n        for (const [key, value] of map) {\n            if (value == 1) {\n                if (four.indexOf(key) === -1) {\n                    return false;\n                }\n            } else if (value == 2) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else if (value == 4) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n```","slug":"391. 完美矩形","published":1,"updated":"2021-12-30T15:02:21.988Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ih001zisaxdnufacc3","content":"<h1 id=\"391-完美矩形-map哈希\"><a href=\"#391-完美矩形-map哈希\" class=\"headerlink\" title=\"391. 完美矩形 map哈希\"></a>391. 完美矩形 map哈希</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-rectangle/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"只要满足两个条件就是完美矩形：\"><a href=\"#只要满足两个条件就是完美矩形：\" class=\"headerlink\" title=\"只要满足两个条件就是完美矩形：\"></a>只要满足两个条件就是完美矩形：</h3><p>1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积<br>2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</p>\n<h3 id=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"><a href=\"#判断矩形总面积是否等于围住所有矩形的大矩形的面积\" class=\"headerlink\" title=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"></a>判断矩形总面积是否等于围住所有矩形的大矩形的面积</h3><ol>\n<li>先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标</li>\n<li>找出大矩形的左下和右上坐标</li>\n<li>求出大矩形的面积</li>\n<li>求出每个小矩形的面积求和</li>\n<li>判断是否相等，不相等直接返回 false 相等则进入下一判断</li>\n</ol>\n<h3 id=\"判断是否有重叠\"><a href=\"#判断是否有重叠\" class=\"headerlink\" title=\"判断是否有重叠\"></a>判断是否有重叠</h3><ol>\n<li>将每个小矩形的坐标存到一个大数组中</li>\n<li>循环数组，用map哈希将每个坐标点的重复次数映射</li>\n<li>判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）</li>\n<li>最后返回true ，此处返回说明前面的条件都满足</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">rectangles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  只要满足两个条件就是完美矩形：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积</span></span><br><span class=\"line\"><span class=\"comment\">// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRectangleCover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rectangles</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums1 = [],</span><br><span class=\"line\">        nums2 = [],</span><br><span class=\"line\">        nums3 = [],</span><br><span class=\"line\">        nums4 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">        nums1.push(rectangles[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        nums2.push(rectangles[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        nums3.push(rectangles[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        nums4.push(rectangles[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum1 = <span class=\"built_in\">Math</span>.min(...nums1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum2 = <span class=\"built_in\">Math</span>.min(...nums2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum1 = <span class=\"built_in\">Math</span>.max(...nums3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum2 = <span class=\"built_in\">Math</span>.max(...nums4);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rectangles.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum += ((item[<span class=\"number\">3</span>] - item[<span class=\"number\">1</span>]) * (item[<span class=\"number\">2</span>] - item[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = []; <span class=\"comment\">//存放每个坐标的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === maxArear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将四个角的坐标加入</span></span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.has(a[i])) &#123;</span><br><span class=\"line\">                map.set(a[i], map.get(a[i]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.set(a[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断四个顶点是否重复一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 四个顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftBottom = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftTop = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightBottom = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightTop = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> four = [leftBottom, leftTop, rightBottom, rightTop];</span><br><span class=\"line\">        <span class=\"comment\">//遍历map对象判断</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2359,"excerpt":"","more":"<h1 id=\"391-完美矩形-map哈希\"><a href=\"#391-完美矩形-map哈希\" class=\"headerlink\" title=\"391. 完美矩形 map哈希\"></a>391. 完美矩形 map哈希</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-rectangle/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"只要满足两个条件就是完美矩形：\"><a href=\"#只要满足两个条件就是完美矩形：\" class=\"headerlink\" title=\"只要满足两个条件就是完美矩形：\"></a>只要满足两个条件就是完美矩形：</h3><p>1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积<br>2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</p>\n<h3 id=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"><a href=\"#判断矩形总面积是否等于围住所有矩形的大矩形的面积\" class=\"headerlink\" title=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"></a>判断矩形总面积是否等于围住所有矩形的大矩形的面积</h3><ol>\n<li>先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标</li>\n<li>找出大矩形的左下和右上坐标</li>\n<li>求出大矩形的面积</li>\n<li>求出每个小矩形的面积求和</li>\n<li>判断是否相等，不相等直接返回 false 相等则进入下一判断</li>\n</ol>\n<h3 id=\"判断是否有重叠\"><a href=\"#判断是否有重叠\" class=\"headerlink\" title=\"判断是否有重叠\"></a>判断是否有重叠</h3><ol>\n<li>将每个小矩形的坐标存到一个大数组中</li>\n<li>循环数组，用map哈希将每个坐标点的重复次数映射</li>\n<li>判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）</li>\n<li>最后返回true ，此处返回说明前面的条件都满足</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">rectangles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  只要满足两个条件就是完美矩形：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积</span></span><br><span class=\"line\"><span class=\"comment\">// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRectangleCover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rectangles</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums1 = [],</span><br><span class=\"line\">        nums2 = [],</span><br><span class=\"line\">        nums3 = [],</span><br><span class=\"line\">        nums4 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">        nums1.push(rectangles[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        nums2.push(rectangles[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        nums3.push(rectangles[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        nums4.push(rectangles[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum1 = <span class=\"built_in\">Math</span>.min(...nums1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum2 = <span class=\"built_in\">Math</span>.min(...nums2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum1 = <span class=\"built_in\">Math</span>.max(...nums3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum2 = <span class=\"built_in\">Math</span>.max(...nums4);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rectangles.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum += ((item[<span class=\"number\">3</span>] - item[<span class=\"number\">1</span>]) * (item[<span class=\"number\">2</span>] - item[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = []; <span class=\"comment\">//存放每个坐标的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === maxArear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将四个角的坐标加入</span></span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.has(a[i])) &#123;</span><br><span class=\"line\">                map.set(a[i], map.get(a[i]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.set(a[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断四个顶点是否重复一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 四个顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftBottom = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftTop = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightBottom = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightTop = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> four = [leftBottom, leftTop, rightBottom, rightTop];</span><br><span class=\"line\">        <span class=\"comment\">//遍历map对象判断</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"383. 赎金信","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"383. 赎金信 哈希表","_content":"\n\n# 383. 赎金信 哈希表\n\n## [查看原题](https://leetcode-cn.com/problems/ransom-note/)\n\n## 解题思路\n\n1. 将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；\n2. 将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；\n3. 遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。\n\n## 代码\n\n```javascript\n/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n\t// 将杂志字符串映射到map集合\n\tconst map = new Map();\n\tfor(let i = 0;i<magazine.length;i++){\n\t\tif(map.has(magazine.charAt(i))){\n\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+1);\n\t\t}else{\n\t\t\tmap.set(magazine[i],1);\n\t\t}\n\t}\n\t// 将赎金信映射到map1中\n\tconst map1 = new Map();\n\tfor(let i = 0;i<ransomNote.length;i++){\n\t\tif(map1.has(ransomNote.charAt(i))){\n\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+1);\n\t\t}else{\n\t\t\tmap1.set(ransomNote[i],1);\n\t\t}\n\t}\n\tfor (const [key,value] of map1){\n\t\tif(map.has(key) && map.get(key)>=value){\n\t\t\tcontinue;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\t\n};\n\n```","source":"_posts/383. 赎金信.md","raw":"---\ntitle: 383. 赎金信\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 383. 赎金信 哈希表\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 383. 赎金信 哈希表\n\n## [查看原题](https://leetcode-cn.com/problems/ransom-note/)\n\n## 解题思路\n\n1. 将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；\n2. 将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；\n3. 遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。\n\n## 代码\n\n```javascript\n/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n\t// 将杂志字符串映射到map集合\n\tconst map = new Map();\n\tfor(let i = 0;i<magazine.length;i++){\n\t\tif(map.has(magazine.charAt(i))){\n\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+1);\n\t\t}else{\n\t\t\tmap.set(magazine[i],1);\n\t\t}\n\t}\n\t// 将赎金信映射到map1中\n\tconst map1 = new Map();\n\tfor(let i = 0;i<ransomNote.length;i++){\n\t\tif(map1.has(ransomNote.charAt(i))){\n\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+1);\n\t\t}else{\n\t\t\tmap1.set(ransomNote[i],1);\n\t\t}\n\t}\n\tfor (const [key,value] of map1){\n\t\tif(map.has(key) && map.get(key)>=value){\n\t\t\tcontinue;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\t\n};\n\n```","slug":"383. 赎金信","published":1,"updated":"2021-12-30T15:02:08.153Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ii0023isaxejv15yj8","content":"<h1 id=\"383-赎金信-哈希表\"><a href=\"#383-赎金信-哈希表\" class=\"headerlink\" title=\"383. 赎金信 哈希表\"></a>383. 赎金信 哈希表</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/ransom-note/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；</li>\n<li>将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；</li>\n<li>遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">ransomNote</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">magazine</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canConstruct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ransomNote, magazine</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将杂志字符串映射到map集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;magazine.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(magazine.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将赎金信映射到map1中</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;ransomNote.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map1.has(ransomNote.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map1)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(key) &amp;&amp; map.get(key)&gt;=value)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":946,"excerpt":"","more":"<h1 id=\"383-赎金信-哈希表\"><a href=\"#383-赎金信-哈希表\" class=\"headerlink\" title=\"383. 赎金信 哈希表\"></a>383. 赎金信 哈希表</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/ransom-note/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；</li>\n<li>将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；</li>\n<li>遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">ransomNote</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">magazine</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canConstruct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ransomNote, magazine</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将杂志字符串映射到map集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;magazine.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(magazine.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将赎金信映射到map1中</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;ransomNote.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map1.has(ransomNote.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map1)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(key) &amp;&amp; map.get(key)&gt;=value)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"414. 第三大的数","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"414. 第三大的数  利用set数组去重和sort排序","_content":"\n\n# 414. 第三大的数  利用set数组去重和sort排序\n\n## [查看原题](https://leetcode-cn.com/problems/third-maximum-number/)\n## 解题思路\n1. 将数组转为set 集合去除重复值，再转为数组\n2. 将数组降序排序\n3. 判断数组的长度\n    - 长度大于 3 则直接返回数组的第3大的数\n    - 长度小于 3 直接返回数组的最大值即最大项\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar thirdMax = function(nums) {\n    //将数组去重\n    const newNums = [...new Set(nums)];\n    newNums.sort((a, b) => b - a);\n    if (newNums.length >= 3) {\n        return newNums[2];\n    } else {\n        return newNums[0]\n    }\n};\n\n```","source":"_posts/414. 第三大的数.md","raw":"---\ntitle: 414. 第三大的数\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 414. 第三大的数  利用set数组去重和sort排序\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 414. 第三大的数  利用set数组去重和sort排序\n\n## [查看原题](https://leetcode-cn.com/problems/third-maximum-number/)\n## 解题思路\n1. 将数组转为set 集合去除重复值，再转为数组\n2. 将数组降序排序\n3. 判断数组的长度\n    - 长度大于 3 则直接返回数组的第3大的数\n    - 长度小于 3 直接返回数组的最大值即最大项\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar thirdMax = function(nums) {\n    //将数组去重\n    const newNums = [...new Set(nums)];\n    newNums.sort((a, b) => b - a);\n    if (newNums.length >= 3) {\n        return newNums[2];\n    } else {\n        return newNums[0]\n    }\n};\n\n```","slug":"414. 第三大的数","published":1,"updated":"2021-12-30T15:02:38.532Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ij0026isax56q1gyxb","content":"<h1 id=\"414-第三大的数-利用set数组去重和sort排序\"><a href=\"#414-第三大的数-利用set数组去重和sort排序\" class=\"headerlink\" title=\"414. 第三大的数  利用set数组去重和sort排序\"></a>414. 第三大的数  利用set数组去重和sort排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/third-maximum-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set 集合去除重复值，再转为数组</li>\n<li>将数组降序排序</li>\n<li>判断数组的长度<ul>\n<li>长度大于 3 则直接返回数组的第3大的数</li>\n<li>长度小于 3 直接返回数组的最大值即最大项</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将数组去重</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNums = [...new <span class=\"built_in\">Set</span>(nums)];</span><br><span class=\"line\">    newNums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNums.length &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":380,"excerpt":"","more":"<h1 id=\"414-第三大的数-利用set数组去重和sort排序\"><a href=\"#414-第三大的数-利用set数组去重和sort排序\" class=\"headerlink\" title=\"414. 第三大的数  利用set数组去重和sort排序\"></a>414. 第三大的数  利用set数组去重和sort排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/third-maximum-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set 集合去除重复值，再转为数组</li>\n<li>将数组降序排序</li>\n<li>判断数组的长度<ul>\n<li>长度大于 3 则直接返回数组的第3大的数</li>\n<li>长度小于 3 直接返回数组的最大值即最大项</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将数组去重</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNums = [...new <span class=\"built_in\">Set</span>(nums)];</span><br><span class=\"line\">    newNums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNums.length &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"438. 找到字符串中所有字母异位词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"438. 找到字符串中所有字母异位词 滑动窗口","_content":"\n\n# 438. 找到字符串中所有字母异位词 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)\n\n## 解题思路\n这是最容易想到的，循环，无用功太多，结果自然是g了\n**超出时间限制**\n1. 先将p转为数组排序后再转为字符串\n2. 循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等\n3. 如果相等就push到结果数组中\n\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst arr = s.split('');\n\tconst p1 = p.split('').sort().join('');//将p转为数组排序后再转为字符串\n\tfor(let i = 0;i<=slength - plength;i++){\n\t\tlet temp = arr.slice(i,plength+i)\n\t\tif(temp.sort().join('') === p1)\n\t\tresult.push(i)\n\t}\n\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。\n1. 将字符串p中的字母和字母的个数映射到map集合中\n2. 循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0\n3. 每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建\n4. ```!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0```这是判断条件，为true则直接break，为false则更新temp集合```temp.set(s.charAt(j),temp.get(s.charAt(j))-1)```\n5. 判断```j===i+plength```，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。\n\n## 代码\n\n```javascript\n\n\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst pmap = new Map();\n\t// 将字符串p的单词和个数映射到map对象中\n\tfor(let i = 0;i<plength;i++){\n\t\tif(pmap.has(p.charAt(i))){\n\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+1)\n\t\t}else{\n\t\t\tpmap.set(p.charAt(i),1);\n\t\t}\n\t}\n\tfor(let i = 0;i<=slength-plength;i++){\n\t\tconst temp = new Map(pmap);\n\t\tlet j;\n\t\tfor( j = i;j<i+plength;j++){\n\t\t\n\t\t\tif(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0){\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-1);\n\t\t\t}\n\t\t}\n\t\tif(j===i+plength){\n\t\t\tresult.push(i)\n\t\t}\n\t}\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路效率就比较高了，当然是参考别人的了\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    if (!s || !p) return [];\n    let need = {}, window = {}, ans = [];\n    [...p].forEach(c => need[c] ? need[c]++ : need[c] = 1);\n    let l = 0, r = 0, cnt = 0, nkLen = Object.keys(need).length;\n    while (r < s.length) {\n        let c1 = s[r];\n        if (need[c1]) {\n            window[c1] ? window[c1]++ : window[c1] = 1;\n            if (window[c1] === need[c1]) cnt++;\n        }\n        r++;\n        while (cnt === nkLen) {\n            let c2 = s[l];\n            if ((r - l) == p.length) ans.push(l);\n            if (need[c2]) {\n                window[c2]--;\n                if (window[c2] < need[c2]) cnt--;\n            }\n            l++;\n        }\n    }\n    return ans;\n};\n```","source":"_posts/438. 找到字符串中所有字母异位词.md","raw":"---\ntitle: 438. 找到字符串中所有字母异位词\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 438. 找到字符串中所有字母异位词 滑动窗口\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 438. 找到字符串中所有字母异位词 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)\n\n## 解题思路\n这是最容易想到的，循环，无用功太多，结果自然是g了\n**超出时间限制**\n1. 先将p转为数组排序后再转为字符串\n2. 循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等\n3. 如果相等就push到结果数组中\n\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst arr = s.split('');\n\tconst p1 = p.split('').sort().join('');//将p转为数组排序后再转为字符串\n\tfor(let i = 0;i<=slength - plength;i++){\n\t\tlet temp = arr.slice(i,plength+i)\n\t\tif(temp.sort().join('') === p1)\n\t\tresult.push(i)\n\t}\n\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。\n1. 将字符串p中的字母和字母的个数映射到map集合中\n2. 循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0\n3. 每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建\n4. ```!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0```这是判断条件，为true则直接break，为false则更新temp集合```temp.set(s.charAt(j),temp.get(s.charAt(j))-1)```\n5. 判断```j===i+plength```，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。\n\n## 代码\n\n```javascript\n\n\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst pmap = new Map();\n\t// 将字符串p的单词和个数映射到map对象中\n\tfor(let i = 0;i<plength;i++){\n\t\tif(pmap.has(p.charAt(i))){\n\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+1)\n\t\t}else{\n\t\t\tpmap.set(p.charAt(i),1);\n\t\t}\n\t}\n\tfor(let i = 0;i<=slength-plength;i++){\n\t\tconst temp = new Map(pmap);\n\t\tlet j;\n\t\tfor( j = i;j<i+plength;j++){\n\t\t\n\t\t\tif(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0){\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-1);\n\t\t\t}\n\t\t}\n\t\tif(j===i+plength){\n\t\t\tresult.push(i)\n\t\t}\n\t}\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路效率就比较高了，当然是参考别人的了\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    if (!s || !p) return [];\n    let need = {}, window = {}, ans = [];\n    [...p].forEach(c => need[c] ? need[c]++ : need[c] = 1);\n    let l = 0, r = 0, cnt = 0, nkLen = Object.keys(need).length;\n    while (r < s.length) {\n        let c1 = s[r];\n        if (need[c1]) {\n            window[c1] ? window[c1]++ : window[c1] = 1;\n            if (window[c1] === need[c1]) cnt++;\n        }\n        r++;\n        while (cnt === nkLen) {\n            let c2 = s[l];\n            if ((r - l) == p.length) ans.push(l);\n            if (need[c2]) {\n                window[c2]--;\n                if (window[c2] < need[c2]) cnt--;\n            }\n            l++;\n        }\n    }\n    return ans;\n};\n```","slug":"438. 找到字符串中所有字母异位词","published":1,"updated":"2021-12-30T15:02:49.648Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5io002aisax4fdz66em","content":"<h1 id=\"438-找到字符串中所有字母异位词-滑动窗口\"><a href=\"#438-找到字符串中所有字母异位词-滑动窗口\" class=\"headerlink\" title=\"438. 找到字符串中所有字母异位词 滑动窗口\"></a>438. 找到字符串中所有字母异位词 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这是最容易想到的，循环，无用功太多，结果自然是g了<br><strong>超出时间限制</strong></p>\n<ol>\n<li>先将p转为数组排序后再转为字符串</li>\n<li>循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等</li>\n<li>如果相等就push到结果数组中</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> p1 = p.split(<span class=\"string\">&#x27;&#x27;</span>).sort().join(<span class=\"string\">&#x27;&#x27;</span>);<span class=\"comment\">//将p转为数组排序后再转为字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength - plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = arr.slice(i,plength+i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp.sort().join(<span class=\"string\">&#x27;&#x27;</span>) === p1)</span><br><span class=\"line\">\t\tresult.push(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。</p>\n<ol>\n<li>将字符串p中的字母和字母的个数映射到map集合中</li>\n<li>循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0</li>\n<li>每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建</li>\n<li><code>!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0</code>这是判断条件，为true则直接break，为false则更新temp集合<code>temp.set(s.charAt(j),temp.get(s.charAt(j))-1)</code></li>\n<li>判断<code>j===i+plength</code>，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> pmap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串p的单词和个数映射到map对象中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pmap.has(p.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength-plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(pmap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>( j = i;j&lt;i+plength;j++)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j===i+plength)&#123;</span><br><span class=\"line\">\t\t\tresult.push(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路效率就比较高了，当然是参考别人的了</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!s || !p) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> need = &#123;&#125;, <span class=\"built_in\">window</span> = &#123;&#125;, ans = [];</span><br><span class=\"line\">    [...p].forEach(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> need[c] ? need[c]++ : need[c] = <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, nkLen = <span class=\"built_in\">Object</span>.keys(need).length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r &lt; s.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c1 = s[r];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (need[c1]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>[c1] ? <span class=\"built_in\">window</span>[c1]++ : <span class=\"built_in\">window</span>[c1] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c1] === need[c1]) cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cnt === nkLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> c2 = s[l];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((r - l) == p.length) ans.push(l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (need[c2]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">window</span>[c2]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c2] &lt; need[c2]) cnt--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2386,"excerpt":"","more":"<h1 id=\"438-找到字符串中所有字母异位词-滑动窗口\"><a href=\"#438-找到字符串中所有字母异位词-滑动窗口\" class=\"headerlink\" title=\"438. 找到字符串中所有字母异位词 滑动窗口\"></a>438. 找到字符串中所有字母异位词 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这是最容易想到的，循环，无用功太多，结果自然是g了<br><strong>超出时间限制</strong></p>\n<ol>\n<li>先将p转为数组排序后再转为字符串</li>\n<li>循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等</li>\n<li>如果相等就push到结果数组中</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> p1 = p.split(<span class=\"string\">&#x27;&#x27;</span>).sort().join(<span class=\"string\">&#x27;&#x27;</span>);<span class=\"comment\">//将p转为数组排序后再转为字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength - plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = arr.slice(i,plength+i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp.sort().join(<span class=\"string\">&#x27;&#x27;</span>) === p1)</span><br><span class=\"line\">\t\tresult.push(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。</p>\n<ol>\n<li>将字符串p中的字母和字母的个数映射到map集合中</li>\n<li>循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0</li>\n<li>每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建</li>\n<li><code>!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0</code>这是判断条件，为true则直接break，为false则更新temp集合<code>temp.set(s.charAt(j),temp.get(s.charAt(j))-1)</code></li>\n<li>判断<code>j===i+plength</code>，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> pmap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串p的单词和个数映射到map对象中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pmap.has(p.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength-plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(pmap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>( j = i;j&lt;i+plength;j++)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j===i+plength)&#123;</span><br><span class=\"line\">\t\t\tresult.push(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路效率就比较高了，当然是参考别人的了</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!s || !p) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> need = &#123;&#125;, <span class=\"built_in\">window</span> = &#123;&#125;, ans = [];</span><br><span class=\"line\">    [...p].forEach(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> need[c] ? need[c]++ : need[c] = <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, nkLen = <span class=\"built_in\">Object</span>.keys(need).length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r &lt; s.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c1 = s[r];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (need[c1]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>[c1] ? <span class=\"built_in\">window</span>[c1]++ : <span class=\"built_in\">window</span>[c1] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c1] === need[c1]) cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cnt === nkLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> c2 = s[l];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((r - l) == p.length) ans.push(l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (need[c2]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">window</span>[c2]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c2] &lt; need[c2]) cnt--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"48. 旋转图像","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"48. 旋转图像 另开空间和直接旋转","_content":"\n\n# 48. 旋转图像 另开空间和直接旋转\n## [查看原题](https://leetcode-cn.com/problems/rotate-image/)\n\n## 解题思路\n1. 新开一个二维数组，存放交换后的数据\n2. 遍历原数组，将交换后的值存放到相应位置 ```temp[j][length-i-1] = matrix[i][j];```\n3. 将新数组的值再次赋给原数组\n4. 这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)\n\n## 代码\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tconst temp = (new Array(length).fill(0)).map(item=>new Array(length));\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\ttemp[j][length-i-1] = matrix[i][j];\n\t\t}\n\t}\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\tmatrix[i][j] = temp[i][j]\n\t\t}\n\t}\n};\n\n```\n\n## 解题思路\n1. 不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为```matrix[j][length-i-1] = matrix[i][j];```\n2. 但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。\n```javascript\n\tlet temp = matrix[i][j];\n\tmatrix[i][j] = matrix[length-1-j][i];\n\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\tmatrix[j][length-1-i] = temp;\n```\n3. 判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tfor(let i = 0;i<Math.floor(length/2);i++){\n\t\tfor(let j = 0;j<Math.floor((length+1)/2);j++){\n\t\t\tlet temp = matrix[i][j];\n\t\t\tmatrix[i][j] = matrix[length-1-j][i];\n\t\t\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\t\t\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\t\t\tmatrix[j][length-1-i] = temp;\n\t\t}\n\t}\n};\n```","source":"_posts/48. 旋转图像.md","raw":"---\ntitle: 48. 旋转图像\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 48. 旋转图像 另开空间和直接旋转\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 48. 旋转图像 另开空间和直接旋转\n## [查看原题](https://leetcode-cn.com/problems/rotate-image/)\n\n## 解题思路\n1. 新开一个二维数组，存放交换后的数据\n2. 遍历原数组，将交换后的值存放到相应位置 ```temp[j][length-i-1] = matrix[i][j];```\n3. 将新数组的值再次赋给原数组\n4. 这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)\n\n## 代码\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tconst temp = (new Array(length).fill(0)).map(item=>new Array(length));\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\ttemp[j][length-i-1] = matrix[i][j];\n\t\t}\n\t}\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\tmatrix[i][j] = temp[i][j]\n\t\t}\n\t}\n};\n\n```\n\n## 解题思路\n1. 不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为```matrix[j][length-i-1] = matrix[i][j];```\n2. 但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。\n```javascript\n\tlet temp = matrix[i][j];\n\tmatrix[i][j] = matrix[length-1-j][i];\n\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\tmatrix[j][length-1-i] = temp;\n```\n3. 判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tfor(let i = 0;i<Math.floor(length/2);i++){\n\t\tfor(let j = 0;j<Math.floor((length+1)/2);j++){\n\t\t\tlet temp = matrix[i][j];\n\t\t\tmatrix[i][j] = matrix[length-1-j][i];\n\t\t\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\t\t\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\t\t\tmatrix[j][length-1-i] = temp;\n\t\t}\n\t}\n};\n```","slug":"48. 旋转图像","published":1,"updated":"2021-12-30T15:02:59.452Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ip002disax6gi96cgq","content":"<h1 id=\"48-旋转图像-另开空间和直接旋转\"><a href=\"#48-旋转图像-另开空间和直接旋转\" class=\"headerlink\" title=\"48. 旋转图像 另开空间和直接旋转\"></a>48. 旋转图像 另开空间和直接旋转</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-image/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个二维数组，存放交换后的数据</li>\n<li>遍历原数组，将交换后的值存放到相应位置 <code>temp[j][length-i-1] = matrix[i][j];</code></li>\n<li>将新数组的值再次赋给原数组</li>\n<li>这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = (<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length).fill(<span class=\"number\">0</span>)).map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\ttemp[j][length-i-<span class=\"number\">1</span>] = matrix[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\tmatrix[i][j] = temp[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为<code>matrix[j][length-i-1] = matrix[i][j];</code></li>\n<li>但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">matrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">matrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br></pre></td></tr></table></figure></li>\n<li>判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"built_in\">Math</span>.floor(length/<span class=\"number\">2</span>);i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"built_in\">Math</span>.floor((length+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">\t\t\tmatrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">\t\t\tmatrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1546,"excerpt":"","more":"<h1 id=\"48-旋转图像-另开空间和直接旋转\"><a href=\"#48-旋转图像-另开空间和直接旋转\" class=\"headerlink\" title=\"48. 旋转图像 另开空间和直接旋转\"></a>48. 旋转图像 另开空间和直接旋转</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-image/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个二维数组，存放交换后的数据</li>\n<li>遍历原数组，将交换后的值存放到相应位置 <code>temp[j][length-i-1] = matrix[i][j];</code></li>\n<li>将新数组的值再次赋给原数组</li>\n<li>这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = (<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length).fill(<span class=\"number\">0</span>)).map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\ttemp[j][length-i-<span class=\"number\">1</span>] = matrix[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\tmatrix[i][j] = temp[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为<code>matrix[j][length-i-1] = matrix[i][j];</code></li>\n<li>但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">matrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">matrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br></pre></td></tr></table></figure></li>\n<li>判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"built_in\">Math</span>.floor(length/<span class=\"number\">2</span>);i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"built_in\">Math</span>.floor((length+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">\t\t\tmatrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">\t\t\tmatrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"506. 相对名次","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"506. 相对名次 排序后switch","_content":"\n\n# 506. 相对名次 排序后switch\n\n## [查看原题](https://leetcode-cn.com/problems/relative-ranks/)\n\n## 解题思路\n\n1. 深克隆一个数组temp，将temp降序排序；\n2. 遍历原数组，判断每一项，前三名特殊处理；\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n\tconst temp = [...score];//得到一个为新数组\n\ttemp.sort((a,b)=>b-a);//将数组降序排列，得到正确的名次\n\tlet result = [];\n\tscore.forEach(item=>{\n\t\tconst index = temp.indexOf(item);//得到当前元素的排名\n\t\tswitch (index){\n\t\t\tcase 0:\n\t\t\t\tresult.push('Gold Medal');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tresult.push('Silver Medal');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tresult.push('Bronze Medal');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult.push(`${index+1}`)\n\t\t}\n\t\t\n\t})\n\treturn result;\n\t\n};\n\nconsole.log(findRelativeRanks(score = [5,4,3,2,1]));\n```\n","source":"_posts/506. 相对名次 .md","raw":"---\ntitle: 506. 相对名次\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription:  506. 相对名次 排序后switch\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 506. 相对名次 排序后switch\n\n## [查看原题](https://leetcode-cn.com/problems/relative-ranks/)\n\n## 解题思路\n\n1. 深克隆一个数组temp，将temp降序排序；\n2. 遍历原数组，判断每一项，前三名特殊处理；\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n\tconst temp = [...score];//得到一个为新数组\n\ttemp.sort((a,b)=>b-a);//将数组降序排列，得到正确的名次\n\tlet result = [];\n\tscore.forEach(item=>{\n\t\tconst index = temp.indexOf(item);//得到当前元素的排名\n\t\tswitch (index){\n\t\t\tcase 0:\n\t\t\t\tresult.push('Gold Medal');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tresult.push('Silver Medal');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tresult.push('Bronze Medal');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult.push(`${index+1}`)\n\t\t}\n\t\t\n\t})\n\treturn result;\n\t\n};\n\nconsole.log(findRelativeRanks(score = [5,4,3,2,1]));\n```\n","slug":"506. 相对名次 ","published":1,"updated":"2021-12-30T15:03:33.590Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ir002hisax7hkbcffm","content":"<h1 id=\"506-相对名次-排序后switch\"><a href=\"#506-相对名次-排序后switch\" class=\"headerlink\" title=\"506. 相对名次 排序后switch\"></a>506. 相对名次 排序后switch</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-ranks/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>深克隆一个数组temp，将temp降序排序；</li>\n<li>遍历原数组，判断每一项，前三名特殊处理；</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">score</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRelativeRanks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">score</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = [...score];<span class=\"comment\">//得到一个为新数组</span></span><br><span class=\"line\">\ttemp.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a);<span class=\"comment\">//将数组降序排列，得到正确的名次</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tscore.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = temp.indexOf(item);<span class=\"comment\">//得到当前元素的排名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (index)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Gold Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Silver Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Bronze Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">`<span class=\"subst\">$&#123;index+<span class=\"number\">1</span>&#125;</span>`</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findRelativeRanks(score = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":673,"excerpt":"","more":"<h1 id=\"506-相对名次-排序后switch\"><a href=\"#506-相对名次-排序后switch\" class=\"headerlink\" title=\"506. 相对名次 排序后switch\"></a>506. 相对名次 排序后switch</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-ranks/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>深克隆一个数组temp，将temp降序排序；</li>\n<li>遍历原数组，判断每一项，前三名特殊处理；</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">score</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRelativeRanks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">score</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = [...score];<span class=\"comment\">//得到一个为新数组</span></span><br><span class=\"line\">\ttemp.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a);<span class=\"comment\">//将数组降序排列，得到正确的名次</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tscore.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = temp.indexOf(item);<span class=\"comment\">//得到当前元素的排名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (index)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Gold Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Silver Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Bronze Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">`<span class=\"subst\">$&#123;index+<span class=\"number\">1</span>&#125;</span>`</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findRelativeRanks(score = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n"},{"title":"520. 检测大写字母","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"520. 检测大写字母   求出大小写字母的个数","_content":"\n\n# 520. 检测大写字母   求出大小写字母的个数\n## 解题思路\n1. 统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) >= 'A' && word.charAt(i) <= 'Z'）判断是否是大写字母\n2. 根据大小写字母的数量判断是否合法\n    - 如果大写字母个数为0 或小写字母个数为0则合法\n    - 如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法\n    - 其他情况均为不合法\n\n## [原题](https://leetcode-cn.com/problems/detect-capital/)\n\n## 代码\n\n```javascript\n/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    const length = word.length;\n    let upper = 0; //计算有多少个大写字母\n    let lower = 0; //有多少小写字母\n    for (let i = 0; i < length; i++) {\n        if (word.charAt(i) >= 'A' && word.charAt(i) <= 'Z') {\n            upper++;\n        } else {\n            lower++;\n        }\n    }\n    if (lower === 0 || upper === 0) {\n        return true;\n    } else if (upper === 1 && (word.charAt(0) >= 'A' && word.charAt(0) <= 'Z')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","source":"_posts/520. 检测大写字母.md","raw":"---\ntitle: 520. 检测大写字母\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 520. 检测大写字母   求出大小写字母的个数\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 520. 检测大写字母   求出大小写字母的个数\n## 解题思路\n1. 统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) >= 'A' && word.charAt(i) <= 'Z'）判断是否是大写字母\n2. 根据大小写字母的数量判断是否合法\n    - 如果大写字母个数为0 或小写字母个数为0则合法\n    - 如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法\n    - 其他情况均为不合法\n\n## [原题](https://leetcode-cn.com/problems/detect-capital/)\n\n## 代码\n\n```javascript\n/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    const length = word.length;\n    let upper = 0; //计算有多少个大写字母\n    let lower = 0; //有多少小写字母\n    for (let i = 0; i < length; i++) {\n        if (word.charAt(i) >= 'A' && word.charAt(i) <= 'Z') {\n            upper++;\n        } else {\n            lower++;\n        }\n    }\n    if (lower === 0 || upper === 0) {\n        return true;\n    } else if (upper === 1 && (word.charAt(0) >= 'A' && word.charAt(0) <= 'Z')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","slug":"520. 检测大写字母","published":1,"updated":"2021-12-30T15:03:42.086Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5is002kisaxf79p0z1b","content":"<h1 id=\"520-检测大写字母-求出大小写字母的个数\"><a href=\"#520-检测大写字母-求出大小写字母的个数\" class=\"headerlink\" title=\"520. 检测大写字母   求出大小写字母的个数\"></a>520. 检测大写字母   求出大小写字母的个数</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) &gt;= ‘A’ &amp;&amp; word.charAt(i) &lt;= ‘Z’）判断是否是大写字母</li>\n<li>根据大小写字母的数量判断是否合法<ul>\n<li>如果大写字母个数为0 或小写字母个数为0则合法</li>\n<li>如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法</li>\n<li>其他情况均为不合法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/detect-capital/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">word</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> detectCapitalUse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = word.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> upper = <span class=\"number\">0</span>; <span class=\"comment\">//计算有多少个大写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lower = <span class=\"number\">0</span>; <span class=\"comment\">//有多少小写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (word.charAt(i) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(i) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            upper++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            lower++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lower === <span class=\"number\">0</span> || upper === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (upper === <span class=\"number\">1</span> &amp;&amp; (word.charAt(<span class=\"number\">0</span>) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(<span class=\"number\">0</span>) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":779,"excerpt":"","more":"<h1 id=\"520-检测大写字母-求出大小写字母的个数\"><a href=\"#520-检测大写字母-求出大小写字母的个数\" class=\"headerlink\" title=\"520. 检测大写字母   求出大小写字母的个数\"></a>520. 检测大写字母   求出大小写字母的个数</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) &gt;= ‘A’ &amp;&amp; word.charAt(i) &lt;= ‘Z’）判断是否是大写字母</li>\n<li>根据大小写字母的数量判断是否合法<ul>\n<li>如果大写字母个数为0 或小写字母个数为0则合法</li>\n<li>如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法</li>\n<li>其他情况均为不合法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/detect-capital/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">word</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> detectCapitalUse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = word.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> upper = <span class=\"number\">0</span>; <span class=\"comment\">//计算有多少个大写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lower = <span class=\"number\">0</span>; <span class=\"comment\">//有多少小写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (word.charAt(i) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(i) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            upper++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            lower++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lower === <span class=\"number\">0</span> || upper === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (upper === <span class=\"number\">1</span> &amp;&amp; (word.charAt(<span class=\"number\">0</span>) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(<span class=\"number\">0</span>) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"495.提莫攻击","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"495.提莫攻击","_content":"\n\n# 495.提莫攻击\n## 解题思路\n1. 根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；\n2. 循环数组判断当前项是不是数组的最后一项\n    - 如果是最后一项则不需要判断，直接加上中毒持续时间duration即可\n3. 如果不是最后则分两种情况判断\n    - 这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration\n    - 这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间\n\n## [原题](https://leetcode-cn.com/problems/teemo-attacking/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} timeSeries\n * @param {number} duration\n * @return {number}\n */\nvar findPoisonedDuration = function(timeSeries, duration) {\n    let sum = 0;\n    const length = timeSeries.length;\n    for (let i = 0; i < length; i++) {\n        if ((i !== length - 1) && ((timeSeries[i] + duration - 1) < timeSeries[i + 1])) {\n            sum += duration;\n        } else if ((i !== length - 1) && ((timeSeries[i] + duration - 1) >= timeSeries[i + 1])) {\n            sum += (timeSeries[i + 1] - timeSeries[i]);\n        } else if (i === length - 1) {\n            sum += duration;\n        }\n    }\n    return sum;\n};\n```","source":"_posts/495.提莫攻击.md","raw":"---\ntitle: 495.提莫攻击\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 495.提莫攻击\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 495.提莫攻击\n## 解题思路\n1. 根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；\n2. 循环数组判断当前项是不是数组的最后一项\n    - 如果是最后一项则不需要判断，直接加上中毒持续时间duration即可\n3. 如果不是最后则分两种情况判断\n    - 这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration\n    - 这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间\n\n## [原题](https://leetcode-cn.com/problems/teemo-attacking/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} timeSeries\n * @param {number} duration\n * @return {number}\n */\nvar findPoisonedDuration = function(timeSeries, duration) {\n    let sum = 0;\n    const length = timeSeries.length;\n    for (let i = 0; i < length; i++) {\n        if ((i !== length - 1) && ((timeSeries[i] + duration - 1) < timeSeries[i + 1])) {\n            sum += duration;\n        } else if ((i !== length - 1) && ((timeSeries[i] + duration - 1) >= timeSeries[i + 1])) {\n            sum += (timeSeries[i + 1] - timeSeries[i]);\n        } else if (i === length - 1) {\n            sum += duration;\n        }\n    }\n    return sum;\n};\n```","slug":"495.提莫攻击","published":1,"updated":"2021-12-30T15:03:11.660Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5iu002oisaxexre1qb0","content":"<h1 id=\"495-提莫攻击\"><a href=\"#495-提莫攻击\" class=\"headerlink\" title=\"495.提莫攻击\"></a>495.提莫攻击</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；</li>\n<li>循环数组判断当前项是不是数组的最后一项<ul>\n<li>如果是最后一项则不需要判断，直接加上中毒持续时间duration即可</li>\n</ul>\n</li>\n<li>如果不是最后则分两种情况判断<ul>\n<li>这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration</li>\n<li>这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/teemo-attacking/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">timeSeries</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">duration</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPoisonedDuration = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">timeSeries, duration</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = timeSeries.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &lt; timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &gt;= timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += (timeSeries[i + <span class=\"number\">1</span>] - timeSeries[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i === length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":758,"excerpt":"","more":"<h1 id=\"495-提莫攻击\"><a href=\"#495-提莫攻击\" class=\"headerlink\" title=\"495.提莫攻击\"></a>495.提莫攻击</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；</li>\n<li>循环数组判断当前项是不是数组的最后一项<ul>\n<li>如果是最后一项则不需要判断，直接加上中毒持续时间duration即可</li>\n</ul>\n</li>\n<li>如果不是最后则分两种情况判断<ul>\n<li>这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration</li>\n<li>这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/teemo-attacking/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">timeSeries</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">duration</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPoisonedDuration = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">timeSeries, duration</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = timeSeries.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &lt; timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &gt;= timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += (timeSeries[i + <span class=\"number\">1</span>] - timeSeries[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i === length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"563. 二叉树的坡度","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"563. 二叉树的坡度   树的深度优先搜索","_content":"\n\n# 563. 二叉树的坡度   树的深度优先搜索\n## [查看原题](https://leetcode-cn.com/problems/binary-tree-tilt/)\n## 解题思路\n树的深度优先搜索\n\n## 代码\n\n```javascript\nvar findTilt = function(root) {\n    let sum = 0;\n\n    function dfs(node) {\n        if (!node) {\n            return 0;\n        }\n        const leftNum = dfs(node.left);\n        const rightNum = dfs(node.right);\n        sum += Math.abs(leftNum - rightNum);\n        return leftNum + rightNum + node.val;\n    }\n    dfs(root);\n    return sum;\n};\n\n```","source":"_posts/563. 二叉树的坡度.md","raw":"---\ntitle: 563. 二叉树的坡度\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 563. 二叉树的坡度   树的深度优先搜索\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 563. 二叉树的坡度   树的深度优先搜索\n## [查看原题](https://leetcode-cn.com/problems/binary-tree-tilt/)\n## 解题思路\n树的深度优先搜索\n\n## 代码\n\n```javascript\nvar findTilt = function(root) {\n    let sum = 0;\n\n    function dfs(node) {\n        if (!node) {\n            return 0;\n        }\n        const leftNum = dfs(node.left);\n        const rightNum = dfs(node.right);\n        sum += Math.abs(leftNum - rightNum);\n        return leftNum + rightNum + node.val;\n    }\n    dfs(root);\n    return sum;\n};\n\n```","slug":"563. 二叉树的坡度","published":1,"updated":"2021-12-30T15:04:00.470Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5iv002risax39kv2jy8","content":"<h1 id=\"563-二叉树的坡度-树的深度优先搜索\"><a href=\"#563-二叉树的坡度-树的深度优先搜索\" class=\"headerlink\" title=\"563. 二叉树的坡度   树的深度优先搜索\"></a>563. 二叉树的坡度   树的深度优先搜索</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-tilt/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>树的深度优先搜索</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findTilt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftNum = dfs(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightNum = dfs(node.right);</span><br><span class=\"line\">        sum += <span class=\"built_in\">Math</span>.abs(leftNum - rightNum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftNum + rightNum + node.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":307,"excerpt":"","more":"<h1 id=\"563-二叉树的坡度-树的深度优先搜索\"><a href=\"#563-二叉树的坡度-树的深度优先搜索\" class=\"headerlink\" title=\"563. 二叉树的坡度   树的深度优先搜索\"></a>563. 二叉树的坡度   树的深度优先搜索</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-tilt/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>树的深度优先搜索</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findTilt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftNum = dfs(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightNum = dfs(node.right);</span><br><span class=\"line\">        sum += <span class=\"built_in\">Math</span>.abs(leftNum - rightNum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftNum + rightNum + node.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"557. 反转字符串中的单词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换","_content":"\n\n# 557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换\n## [查看原题](https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/)\n\n## 解题思路\n1. 将字符串按空格使用split分割为数组\n2. 遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串\n3. 将数组使用join(' ')转为字符串\n\n## 代码\n\n```javascript\n/**\n * @param {string} \n * @return {string}\n */\nvar reverseWords = function(s) {\n    const arr = s.split(' '); //将字符串转为数组\n    let result = arr.map(item => item.split('').reverse().join(''))\n    return result.join(' ')\n};\n```\n\n## 解题思路\n1. 新开一个数组，用来存放结果\n2. 遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ' '\n    - 是，则sum++（sum统计单词的长度）\n    - 不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个' ' ,\n    最后将大数组转为字符串，返回。\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    const length = s.length;\n    let result = [];\n    let sum = 0; //一个单词的长度\n    // 要多处理一个判断长度\n    for (let i = 0; i <= length; i++) {\n        // 如果不等于空格则说明是一个单词，统一处理\n        if (s[i] !== ' ' && i !== length) {\n            sum++;\n        } else {\n            // 将一个单词翻转\n            let temp = [];\n            for (let j = sum - 1; j >= 0; j--) {\n                temp.push(s[i - sum + j]);\n            }\n            sum = 0;\n            result.push(temp.join(''));\n            if (i !== length) {\n                result.push(' ')\n            }\n        }\n    }\n    return result.join('');\n};\n```\n","source":"_posts/557. 反转字符串中的单词 III.md","raw":"---\ntitle: 557. 反转字符串中的单词 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换\n## [查看原题](https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/)\n\n## 解题思路\n1. 将字符串按空格使用split分割为数组\n2. 遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串\n3. 将数组使用join(' ')转为字符串\n\n## 代码\n\n```javascript\n/**\n * @param {string} \n * @return {string}\n */\nvar reverseWords = function(s) {\n    const arr = s.split(' '); //将字符串转为数组\n    let result = arr.map(item => item.split('').reverse().join(''))\n    return result.join(' ')\n};\n```\n\n## 解题思路\n1. 新开一个数组，用来存放结果\n2. 遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ' '\n    - 是，则sum++（sum统计单词的长度）\n    - 不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个' ' ,\n    最后将大数组转为字符串，返回。\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    const length = s.length;\n    let result = [];\n    let sum = 0; //一个单词的长度\n    // 要多处理一个判断长度\n    for (let i = 0; i <= length; i++) {\n        // 如果不等于空格则说明是一个单词，统一处理\n        if (s[i] !== ' ' && i !== length) {\n            sum++;\n        } else {\n            // 将一个单词翻转\n            let temp = [];\n            for (let j = sum - 1; j >= 0; j--) {\n                temp.push(s[i - sum + j]);\n            }\n            sum = 0;\n            result.push(temp.join(''));\n            if (i !== length) {\n                result.push(' ')\n            }\n        }\n    }\n    return result.join('');\n};\n```\n","slug":"557. 反转字符串中的单词 III","published":1,"updated":"2021-12-30T15:03:50.553Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ix002visaxgj4j3flu","content":"<h1 id=\"557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\"><a href=\"#557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\" class=\"headerlink\" title=\"557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换\"></a>557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将字符串按空格使用split分割为数组</li>\n<li>遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串</li>\n<li>将数组使用join(‘ ‘)转为字符串</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">//将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个数组，用来存放结果</li>\n<li>遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ‘ ‘<ul>\n<li>是，则sum++（sum统计单词的长度）</li>\n<li>不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个’ ‘ ,<br>最后将大数组转为字符串，返回。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//一个单词的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 要多处理一个判断长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不等于空格则说明是一个单词，统一处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] !== <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; i !== length) &#123;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将一个单词翻转</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = sum - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                temp.push(s[i - sum + j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result.push(temp.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== length) &#123;</span><br><span class=\"line\">                result.push(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1127,"excerpt":"","more":"<h1 id=\"557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\"><a href=\"#557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\" class=\"headerlink\" title=\"557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换\"></a>557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将字符串按空格使用split分割为数组</li>\n<li>遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串</li>\n<li>将数组使用join(‘ ‘)转为字符串</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">//将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个数组，用来存放结果</li>\n<li>遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ‘ ‘<ul>\n<li>是，则sum++（sum统计单词的长度）</li>\n<li>不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个’ ‘ ,<br>最后将大数组转为字符串，返回。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//一个单词的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 要多处理一个判断长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不等于空格则说明是一个单词，统一处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] !== <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; i !== length) &#123;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将一个单词翻转</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = sum - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                temp.push(s[i - sum + j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result.push(temp.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== length) &#123;</span><br><span class=\"line\">                result.push(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"567. 字符串的排列","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"567. 字符串的排列","_content":"\n\n# 567. 字符串的排列\n\n## [查看原题](https://leetcode-cn.com/problems/permutation-in-string/)\n\n## 解题思路\n\n1. 先求出s1里面各个字符的个数存储到数组arr1中\n2. 再遍历数组s2注意结束条件是 ```let i = 0;i<=s2.length - s1.length;i++```,当个数少于```s2.length - s1.length```不会再有结果\n3. 统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true\n4. 直接返回false，说明前面没有符合条件的\n\n## 代码\n\n```javascript\n/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n\tlet arr1 = new Array(26).fill(0);\n\n\tfor (const item of s1){\n\t\tarr1[item.charCodeAt() - 97]++;\n\t}\n\t\n\tfor(let i = 0;i<=s2.length - s1.length;i++){\n\t\tlet arr2 = new Array(26).fill(0);\n\n\t\tfor(let j = 0;j<s1.length;j++){\n\t\t\tarr2[s2.charCodeAt(i+j) - 97]++;\n\t\t}\n\n\t\tlet t = 0;\n\t\tfor(t = 0;t<26;t++){\n\t\t\tif(arr2[t] !== arr1[t]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(t===26){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n```","source":"_posts/567. 字符串的排列.md","raw":"---\ntitle: 567. 字符串的排列\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 567. 字符串的排列\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 567. 字符串的排列\n\n## [查看原题](https://leetcode-cn.com/problems/permutation-in-string/)\n\n## 解题思路\n\n1. 先求出s1里面各个字符的个数存储到数组arr1中\n2. 再遍历数组s2注意结束条件是 ```let i = 0;i<=s2.length - s1.length;i++```,当个数少于```s2.length - s1.length```不会再有结果\n3. 统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true\n4. 直接返回false，说明前面没有符合条件的\n\n## 代码\n\n```javascript\n/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n\tlet arr1 = new Array(26).fill(0);\n\n\tfor (const item of s1){\n\t\tarr1[item.charCodeAt() - 97]++;\n\t}\n\t\n\tfor(let i = 0;i<=s2.length - s1.length;i++){\n\t\tlet arr2 = new Array(26).fill(0);\n\n\t\tfor(let j = 0;j<s1.length;j++){\n\t\t\tarr2[s2.charCodeAt(i+j) - 97]++;\n\t\t}\n\n\t\tlet t = 0;\n\t\tfor(t = 0;t<26;t++){\n\t\t\tif(arr2[t] !== arr1[t]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(t===26){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n```","slug":"567. 字符串的排列","published":1,"updated":"2021-12-30T15:04:10.038Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5iy002yisax7dbr0vrz","content":"<h1 id=\"567-字符串的排列\"><a href=\"#567-字符串的排列\" class=\"headerlink\" title=\"567. 字符串的排列\"></a>567. 字符串的排列</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/permutation-in-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先求出s1里面各个字符的个数存储到数组arr1中</li>\n<li>再遍历数组s2注意结束条件是 <code>let i = 0;i&lt;=s2.length - s1.length;i++</code>,当个数少于<code>s2.length - s1.length</code>不会再有结果</li>\n<li>统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true</li>\n<li>直接返回false，说明前面没有符合条件的</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkInclusion = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> s1)&#123;</span><br><span class=\"line\">\t\tarr1[item.charCodeAt() - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=s2.length - s1.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;s1.length;j++)&#123;</span><br><span class=\"line\">\t\t\tarr2[s2.charCodeAt(i+j) - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(t = <span class=\"number\">0</span>;t&lt;<span class=\"number\">26</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr2[t] !== arr1[t])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t===<span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":757,"excerpt":"","more":"<h1 id=\"567-字符串的排列\"><a href=\"#567-字符串的排列\" class=\"headerlink\" title=\"567. 字符串的排列\"></a>567. 字符串的排列</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/permutation-in-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先求出s1里面各个字符的个数存储到数组arr1中</li>\n<li>再遍历数组s2注意结束条件是 <code>let i = 0;i&lt;=s2.length - s1.length;i++</code>,当个数少于<code>s2.length - s1.length</code>不会再有结果</li>\n<li>统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true</li>\n<li>直接返回false，说明前面没有符合条件的</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkInclusion = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> s1)&#123;</span><br><span class=\"line\">\t\tarr1[item.charCodeAt() - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=s2.length - s1.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;s1.length;j++)&#123;</span><br><span class=\"line\">\t\t\tarr2[s2.charCodeAt(i+j) - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(t = <span class=\"number\">0</span>;t&lt;<span class=\"number\">26</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr2[t] !== arr1[t])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t===<span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"594. 最长和谐子序列","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"594. 最长和谐子序列 Map对象","_content":"\n\n# 594. 最长和谐子序列 Map对象\n\n## [查看原题](https://leetcode-cn.com/problems/longest-harmonious-subsequence/)\n\n## 解题思路\n1. 将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值\n2. 使用forof循环取出对象的每一项\n3. ```const right = map.get(key + 1) ? map.get(key + 1) : 0;```\n     ```const left = map.get(key - 1) ? map.get(key + 1) : 0;```\n    将当前项得左右两项做出判断\n4. 求出左右项得最大值\n5. 判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n    let result = 0; //返回结果\n    const map = new Map();\n    for (const num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1)\n        }\n    }\n    for (const [key, value] of map) {\n        const right = map.get(key + 1) ? map.get(key + 1) : 0;\n        const left = map.get(key - 1) ? map.get(key + 1) : 0;\n        let max = Math.max(left, right);\n        if ((max + value) > result && max > 0) {\n            result = max + value;\n        }\n    }\n    return result;\n};\n\n`\n``","source":"_posts/594. 最长和谐子序列.md","raw":"---\ntitle: 594. 最长和谐子序列\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 594. 最长和谐子序列 Map对象\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 594. 最长和谐子序列 Map对象\n\n## [查看原题](https://leetcode-cn.com/problems/longest-harmonious-subsequence/)\n\n## 解题思路\n1. 将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值\n2. 使用forof循环取出对象的每一项\n3. ```const right = map.get(key + 1) ? map.get(key + 1) : 0;```\n     ```const left = map.get(key - 1) ? map.get(key + 1) : 0;```\n    将当前项得左右两项做出判断\n4. 求出左右项得最大值\n5. 判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n    let result = 0; //返回结果\n    const map = new Map();\n    for (const num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1)\n        }\n    }\n    for (const [key, value] of map) {\n        const right = map.get(key + 1) ? map.get(key + 1) : 0;\n        const left = map.get(key - 1) ? map.get(key + 1) : 0;\n        let max = Math.max(left, right);\n        if ((max + value) > result && max > 0) {\n            result = max + value;\n        }\n    }\n    return result;\n};\n\n`\n``","slug":"594. 最长和谐子序列","published":1,"updated":"2021-12-30T15:04:18.330Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j10031isaxc2qpcj1f","content":"<h1 id=\"594-最长和谐子序列-Map对象\"><a href=\"#594-最长和谐子序列-Map对象\" class=\"headerlink\" title=\"594. 最长和谐子序列 Map对象\"></a>594. 最长和谐子序列 Map对象</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/longest-harmonious-subsequence/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值</li>\n<li>使用forof循环取出对象的每一项</li>\n<li><code>const right = map.get(key + 1) ? map.get(key + 1) : 0;</code><br>  <code>const left = map.get(key - 1) ? map.get(key + 1) : 0;</code><br> 将当前项得左右两项做出判断</li>\n<li>求出左右项得最大值</li>\n<li>判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>```javascript<br>/**</p>\n<ul>\n<li>@param {number[]} nums</li>\n<li>@return {number}</li>\n<li>/<br>var findLHS = function(nums) {<br>  let result = 0; //返回结果<br>  const map = new Map();<br>  for (const num of nums) {<pre><code>  if (map.has(num)) &#123;\n      map.set(num, map.get(num) + 1);\n  &#125; else &#123;\n      map.set(num, 1)\n  &#125;\n</code></pre>\n  }<br>  for (const [key, value] of map) {<pre><code>  const right = map.get(key + 1) ? map.get(key + 1) : 0;\n  const left = map.get(key - 1) ? map.get(key + 1) : 0;\n  let max = Math.max(left, right);\n  if ((max + value) &gt; result &amp;&amp; max &gt; 0) &#123;\n      result = max + value;\n  &#125;\n</code></pre>\n  }<br>  return result;<br>};</li>\n</ul>\n<p>`<br>``</p>\n","site":{"data":{}},"length":680,"excerpt":"","more":"<h1 id=\"594-最长和谐子序列-Map对象\"><a href=\"#594-最长和谐子序列-Map对象\" class=\"headerlink\" title=\"594. 最长和谐子序列 Map对象\"></a>594. 最长和谐子序列 Map对象</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/longest-harmonious-subsequence/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值</li>\n<li>使用forof循环取出对象的每一项</li>\n<li><code>const right = map.get(key + 1) ? map.get(key + 1) : 0;</code><br>  <code>const left = map.get(key - 1) ? map.get(key + 1) : 0;</code><br> 将当前项得左右两项做出判断</li>\n<li>求出左右项得最大值</li>\n<li>判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>```javascript<br>/**</p>\n<ul>\n<li>@param {number[]} nums</li>\n<li>@return {number}</li>\n<li>/<br>var findLHS = function(nums) {<br>  let result = 0; //返回结果<br>  const map = new Map();<br>  for (const num of nums) {<pre><code>  if (map.has(num)) &#123;\n      map.set(num, map.get(num) + 1);\n  &#125; else &#123;\n      map.set(num, 1)\n  &#125;\n</code></pre>\n  }<br>  for (const [key, value] of map) {<pre><code>  const right = map.get(key + 1) ? map.get(key + 1) : 0;\n  const left = map.get(key - 1) ? map.get(key + 1) : 0;\n  let max = Math.max(left, right);\n  if ((max + value) &gt; result &amp;&amp; max &gt; 0) &#123;\n      result = max + value;\n  &#125;\n</code></pre>\n  }<br>  return result;<br>};</li>\n</ul>\n<p>`<br>``</p>\n"},{"title":"704. 二分查找","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"704. 二分查找  二分","_content":"\n\n# 704. 二分查找  二分\n## 解题思路\n二分算法，\n1. 求左右边界left 和 right 的中间值mid\n2. 判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系\n    - 大，则更新右边界right = mid - 1\n    - 小，则更新左边界left = mid +1\n    - 相等，直接返回mid\n3. 循环判断直到 left<= right\n4. 直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标\n\n## [原题](https://leetcode-cn.com/problems/binary-search/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    let left = 0;\n    let right = nums.length-1;\n    while (left <= right) {\n        let mid = parseInt((left + right) / 2);\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n\n    }\n    return -1;\n};\n\n```","source":"_posts/704. 二分查找.md","raw":"---\ntitle: 704. 二分查找 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 704. 二分查找  二分\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 704. 二分查找  二分\n## 解题思路\n二分算法，\n1. 求左右边界left 和 right 的中间值mid\n2. 判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系\n    - 大，则更新右边界right = mid - 1\n    - 小，则更新左边界left = mid +1\n    - 相等，直接返回mid\n3. 循环判断直到 left<= right\n4. 直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标\n\n## [原题](https://leetcode-cn.com/problems/binary-search/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    let left = 0;\n    let right = nums.length-1;\n    while (left <= right) {\n        let mid = parseInt((left + right) / 2);\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n\n    }\n    return -1;\n};\n\n```","slug":"704. 二分查找","published":1,"updated":"2021-12-30T15:04:27.591Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j30034isax4mlmbtk7","content":"<h1 id=\"704-二分查找-二分\"><a href=\"#704-二分查找-二分\" class=\"headerlink\" title=\"704. 二分查找  二分\"></a>704. 二分查找  二分</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，</p>\n<ol>\n<li>求左右边界left 和 right 的中间值mid</li>\n<li>判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系<ul>\n<li>大，则更新右边界right = mid - 1</li>\n<li>小，则更新左边界left = mid +1</li>\n<li>相等，直接返回mid</li>\n</ul>\n</li>\n<li>循环判断直到 left&lt;= right</li>\n<li>直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-search/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":582,"excerpt":"","more":"<h1 id=\"704-二分查找-二分\"><a href=\"#704-二分查找-二分\" class=\"headerlink\" title=\"704. 二分查找  二分\"></a>704. 二分查找  二分</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，</p>\n<ol>\n<li>求左右边界left 和 right 的中间值mid</li>\n<li>判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系<ul>\n<li>大，则更新右边界right = mid - 1</li>\n<li>小，则更新左边界left = mid +1</li>\n<li>相等，直接返回mid</li>\n</ul>\n</li>\n<li>循环判断直到 left&lt;= right</li>\n<li>直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-search/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"748. 最短补全词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"748. 最短补全词 循环遍历每一个单词，比较是否符合","_content":"\n\n# 748. 最短补全词 循环遍历每一个单词，比较是否符合\n\n## [查看原题](https://leetcode-cn.com/problems/shortest-completing-word/)\n\n## 解题思路\n\n使用了map集合来判断\n\n1. 先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数\n2. 遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短\n\n## 代码\n\n```javascript\n/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n\t// 将字符串全转为小写字母\n\tconst temp = licensePlate.toLowerCase();\n\tlet map = new Map();//统计各个单词的个数\n\tfor (const item of temp){\n\t\t// 将小写字母过滤\n\t\tif(item>='a' && item<='z'){\n\t\t\tif(map.has(item)){\n\t\t\t\tmap.set(item,map.get(item) + 1)\n\t\t\t}else{\n\t\t\t\tmap.set(item,1);\n\t\t\t}\n\t\t}\n\t}\n\n\tlet index = null;//最短词的下标\n\tfor(let i =0 ;i<words.length;i++){\n\t\tconst temp = new Map(map);\n\t\tfor(const word of words[i]){\n\t\t\tif(temp.has(word)){\n\t\t\t\ttemp.set(word,temp.get(word) - 1 );\n\t\t\t}\n\t\t}\n\t\tlet flag = true;//为true说明该单词是补全词\n\t\tfor (const [key,value] of temp){\n\t\t\tif(value > 0){\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\n\t\t// 进入此if说明是补全词，接下来判断是否要更新最短的补全词\n\t\tif(flag){\n\t\t\tif(index===null || words[i].length < words[index].length){\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn words[index];\n};\n\n```\n\n\n\n","source":"_posts/748. 最短补全词.md","raw":"---\ntitle: 748. 最短补全词 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 748. 最短补全词 循环遍历每一个单词，比较是否符合\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 748. 最短补全词 循环遍历每一个单词，比较是否符合\n\n## [查看原题](https://leetcode-cn.com/problems/shortest-completing-word/)\n\n## 解题思路\n\n使用了map集合来判断\n\n1. 先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数\n2. 遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短\n\n## 代码\n\n```javascript\n/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n\t// 将字符串全转为小写字母\n\tconst temp = licensePlate.toLowerCase();\n\tlet map = new Map();//统计各个单词的个数\n\tfor (const item of temp){\n\t\t// 将小写字母过滤\n\t\tif(item>='a' && item<='z'){\n\t\t\tif(map.has(item)){\n\t\t\t\tmap.set(item,map.get(item) + 1)\n\t\t\t}else{\n\t\t\t\tmap.set(item,1);\n\t\t\t}\n\t\t}\n\t}\n\n\tlet index = null;//最短词的下标\n\tfor(let i =0 ;i<words.length;i++){\n\t\tconst temp = new Map(map);\n\t\tfor(const word of words[i]){\n\t\t\tif(temp.has(word)){\n\t\t\t\ttemp.set(word,temp.get(word) - 1 );\n\t\t\t}\n\t\t}\n\t\tlet flag = true;//为true说明该单词是补全词\n\t\tfor (const [key,value] of temp){\n\t\t\tif(value > 0){\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\n\t\t// 进入此if说明是补全词，接下来判断是否要更新最短的补全词\n\t\tif(flag){\n\t\t\tif(index===null || words[i].length < words[index].length){\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn words[index];\n};\n\n```\n\n\n\n","slug":"748. 最短补全词","published":1,"updated":"2021-12-30T15:04:36.337Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j60037isaxhdjh2jny","content":"<h1 id=\"748-最短补全词-循环遍历每一个单词，比较是否符合\"><a href=\"#748-最短补全词-循环遍历每一个单词，比较是否符合\" class=\"headerlink\" title=\"748. 最短补全词 循环遍历每一个单词，比较是否符合\"></a>748. 最短补全词 循环遍历每一个单词，比较是否符合</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/shortest-completing-word/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用了map集合来判断</p>\n<ol>\n<li>先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数</li>\n<li>遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">licensePlate</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shortestCompletingWord = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">licensePlate, words</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串全转为小写字母</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = licensePlate.toLowerCase();</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();<span class=\"comment\">//统计各个单词的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将小写字母过滤</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item&gt;=<span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; item&lt;=<span class=\"string\">&#x27;z&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,map.get(item) + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> index = <span class=\"literal\">null</span>;<span class=\"comment\">//最短词的下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i&lt;words.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(map);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> word <span class=\"keyword\">of</span> words[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.has(word))&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(word,temp.get(word) - <span class=\"number\">1</span> );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;<span class=\"comment\">//为true说明该单词是补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 进入此if说明是补全词，接下来判断是否要更新最短的补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(index===<span class=\"literal\">null</span> || words[i].length &lt; words[index].length)&#123;</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> words[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"length":1100,"excerpt":"","more":"<h1 id=\"748-最短补全词-循环遍历每一个单词，比较是否符合\"><a href=\"#748-最短补全词-循环遍历每一个单词，比较是否符合\" class=\"headerlink\" title=\"748. 最短补全词 循环遍历每一个单词，比较是否符合\"></a>748. 最短补全词 循环遍历每一个单词，比较是否符合</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/shortest-completing-word/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用了map集合来判断</p>\n<ol>\n<li>先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数</li>\n<li>遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">licensePlate</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shortestCompletingWord = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">licensePlate, words</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串全转为小写字母</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = licensePlate.toLowerCase();</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();<span class=\"comment\">//统计各个单词的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将小写字母过滤</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item&gt;=<span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; item&lt;=<span class=\"string\">&#x27;z&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,map.get(item) + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> index = <span class=\"literal\">null</span>;<span class=\"comment\">//最短词的下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i&lt;words.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(map);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> word <span class=\"keyword\">of</span> words[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.has(word))&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(word,temp.get(word) - <span class=\"number\">1</span> );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;<span class=\"comment\">//为true说明该单词是补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 进入此if说明是补全词，接下来判断是否要更新最短的补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(index===<span class=\"literal\">null</span> || words[i].length &lt; words[index].length)&#123;</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> words[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"859. 亲密字符串","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"859. 亲密字符串 遍历比较","_content":"\n\n# 859. 亲密字符串 遍历比较\n\n## [查看原题](https://leetcode-cn.com/problems/buddy-strings/)\n\n## 解题思路\n1. 先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false\n2. 遍历字符串求出每一项的差值存到数组temp中\n3. 先判断一下交换的数据是否相等\n4. 过滤出temp中值为0的项\n5. 判断比较temp的长度\n    - temp的长度为2，则比较temp[0] + temp[1] === 0\n    - temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1\n    - 以上情况返回true\n6. 其他情况返回false\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} goal\n * @return {boolean}\n */\n var buddyStrings = function(s, goal) {\n    // 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串\n    if (s.length !== goal.length || s.length === 1) {\n        return false;\n    }\n    let temp = []; //用来存放两个字符串的每一项的差值\n    for (let i = 0; i < s.length; i++) {\n        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));\n    }\n    let a = -1;\n    for (let i = 0; i < temp.length; i++) {\n        if (temp[i] !== 0 && a === -1) {\n            a = i;\n        } else if (temp[i] !== 0 && a !== -1) {\n            if (goal.charAt(a) !== s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    temp = temp.filter(item => item);\n    if (((temp.length === 2) && (temp[0] + temp[1] === 0)) || (temp.length === 0 && ((new Set(s.split('')).size === 1) || (new Set(s.split('')).size !== s.length)))) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","source":"_posts/859. 亲密字符串.md","raw":"---\ntitle: 859. 亲密字符串\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 859. 亲密字符串 遍历比较\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 859. 亲密字符串 遍历比较\n\n## [查看原题](https://leetcode-cn.com/problems/buddy-strings/)\n\n## 解题思路\n1. 先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false\n2. 遍历字符串求出每一项的差值存到数组temp中\n3. 先判断一下交换的数据是否相等\n4. 过滤出temp中值为0的项\n5. 判断比较temp的长度\n    - temp的长度为2，则比较temp[0] + temp[1] === 0\n    - temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1\n    - 以上情况返回true\n6. 其他情况返回false\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} goal\n * @return {boolean}\n */\n var buddyStrings = function(s, goal) {\n    // 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串\n    if (s.length !== goal.length || s.length === 1) {\n        return false;\n    }\n    let temp = []; //用来存放两个字符串的每一项的差值\n    for (let i = 0; i < s.length; i++) {\n        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));\n    }\n    let a = -1;\n    for (let i = 0; i < temp.length; i++) {\n        if (temp[i] !== 0 && a === -1) {\n            a = i;\n        } else if (temp[i] !== 0 && a !== -1) {\n            if (goal.charAt(a) !== s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    temp = temp.filter(item => item);\n    if (((temp.length === 2) && (temp[0] + temp[1] === 0)) || (temp.length === 0 && ((new Set(s.split('')).size === 1) || (new Set(s.split('')).size !== s.length)))) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","slug":"859. 亲密字符串","published":1,"updated":"2021-12-30T15:04:59.075Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j8003aisax4z32fpx7","content":"<h1 id=\"859-亲密字符串-遍历比较\"><a href=\"#859-亲密字符串-遍历比较\" class=\"headerlink\" title=\"859. 亲密字符串 遍历比较\"></a>859. 亲密字符串 遍历比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/buddy-strings/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false</li>\n<li>遍历字符串求出每一项的差值存到数组temp中</li>\n<li>先判断一下交换的数据是否相等</li>\n<li>过滤出temp中值为0的项</li>\n<li>判断比较temp的长度<ul>\n<li>temp的长度为2，则比较temp[0] + temp[1] === 0</li>\n<li>temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1</li>\n<li>以上情况返回true</li>\n</ul>\n</li>\n<li>其他情况返回false<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">goal</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> buddyStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, goal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== goal.length || s.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//用来存放两个字符串的每一项的差值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            a = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (goal.charAt(a) !== s.charAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp = temp.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((temp.length === <span class=\"number\">2</span>) &amp;&amp; (temp[<span class=\"number\">0</span>] + temp[<span class=\"number\">1</span>] === <span class=\"number\">0</span>)) || (temp.length === <span class=\"number\">0</span> &amp;&amp; ((<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size === <span class=\"number\">1</span>) || (<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size !== s.length)))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1081,"excerpt":"","more":"<h1 id=\"859-亲密字符串-遍历比较\"><a href=\"#859-亲密字符串-遍历比较\" class=\"headerlink\" title=\"859. 亲密字符串 遍历比较\"></a>859. 亲密字符串 遍历比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/buddy-strings/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false</li>\n<li>遍历字符串求出每一项的差值存到数组temp中</li>\n<li>先判断一下交换的数据是否相等</li>\n<li>过滤出temp中值为0的项</li>\n<li>判断比较temp的长度<ul>\n<li>temp的长度为2，则比较temp[0] + temp[1] === 0</li>\n<li>temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1</li>\n<li>以上情况返回true</li>\n</ul>\n</li>\n<li>其他情况返回false<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">goal</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> buddyStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, goal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== goal.length || s.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//用来存放两个字符串的每一项的差值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            a = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (goal.charAt(a) !== s.charAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp = temp.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((temp.length === <span class=\"number\">2</span>) &amp;&amp; (temp[<span class=\"number\">0</span>] + temp[<span class=\"number\">1</span>] === <span class=\"number\">0</span>)) || (temp.length === <span class=\"number\">0</span> &amp;&amp; ((<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size === <span class=\"number\">1</span>) || (<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size !== s.length)))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"794. 有效的井字游戏","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"794. 有效的井字游戏  找出判断条件","_content":"\n\n# 794. 有效的井字游戏  找出判断条件\n\n## [查看原题](https://leetcode-cn.com/problems/valid-tic-tac-toe-state/)\n\n## 解题思路\n\n### 棋盘可能达到的状态是：\n1. 玩家一下的 'X'个数 等于玩家二下的 ''O' 的个数或 'O'的个数加一\n2. 只能有一个玩家赢\n3. 当玩家一赢的时候，棋局上 'X'的个数等于'O'的个数加一\n4. 当玩家二赢的时候，棋局上'O'的个数等于'X'的个数\n\n### 关键步骤：\n1. 求出棋盘上'X'和'O'的个数\n2. 判断是否符合条件一\n3. 若符合条件一继续执行，不符合则直接```return false```\n4. 接下来判断是否有玩家获胜\n5. 当两个玩家都获胜则不符合条件\n6. 当只有玩家一获胜，判断棋局上 'X'的个数是否等于'O'的个数加一\n7. 当只有玩家二获胜，判断棋局上'O'的个数是否等于'X'的个数\n\n\n### 玩家获胜的情况\n\n1. 水平的三个字符都一样： ```board[i][0] === board[i][1] && board[i][1] === board[i][2]```\n2. 垂直的三个字符都一样：```board[0][i] === board[1][i] && board[1][i] === board[2][i]```\n3. 正对角线的三个字符一样：```board[0][0] === board[1][1] && board[1][1]=== board[2][2]```\n4. 反对角线的三个字符都一样:```board[0][2] === board[1][1] && board[1][1]=== board[2][0] ```\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {string[]} board\n * @return {boolean}\n */\nvar validTicTacToe = function(board) {\n\tlet XNumber = 0;//X的个数\n\tlet ONumber = 0;//O的个数\n\tlet player1Win = false;\n\tlet player2Win = false;\n\n\t// 统计X和O的个数\n\tfor(let i = 0;i<board.length;i++){\n\t\tfor(let j = 0;j<board[i].length;j++){\n\t\t\tif(board[i].charAt(j) === 'X'){\n\t\t\t\tXNumber++;\n\t\t\t}else if(board[i].charAt(j) === 'O'){\n\t\t\t\tONumber++;\n\t\t\t}\n\t\t}\n\t}\n\tif(XNumber === ONumber+1 || XNumber === ONumber){\n\t\t// 判读是否有玩家获胜\n\t\t//判断一行\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[i][0] === board[i][1] && board[i][1] === board[i][2]){\n\t\t\t\tif(board[i][0] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[i][0] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 判断一列\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[0][i] === board[1][i] && board[1][i] === board[2][i]){\n\t\t\t\tif(board[0][i] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[0][i] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 判断对角线\n\t\tif(board[0][0] === board[1][1] && board[1][1]=== board[2][2]){\n\t\t\tif(board[0][0] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][0] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\tif(board[0][2] === board[1][1] && board[1][1]=== board[2][0]){\n\t\t\tif(board[0][2] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][2] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家一玩家二都赢\n\t\tif(player1Win && player2Win){\n\t\t\treturn false;\n\t\t}\n\n\n\t\t// 玩家一赢，玩家二不赢\n\t\tif(player1Win && !player2Win){\n\t\t\tif(XNumber === ONumber + 1){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家二赢，玩家一不赢\n\t\tif(!player1Win && player2Win){\n\t\t\tif(XNumber === ONumber){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 都不赢\n\t\tif(!player1Win && !player2Win){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n```","source":"_posts/794. 有效的井字游戏.md","raw":"---\ntitle: 794. 有效的井字游戏\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 794. 有效的井字游戏  找出判断条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 794. 有效的井字游戏  找出判断条件\n\n## [查看原题](https://leetcode-cn.com/problems/valid-tic-tac-toe-state/)\n\n## 解题思路\n\n### 棋盘可能达到的状态是：\n1. 玩家一下的 'X'个数 等于玩家二下的 ''O' 的个数或 'O'的个数加一\n2. 只能有一个玩家赢\n3. 当玩家一赢的时候，棋局上 'X'的个数等于'O'的个数加一\n4. 当玩家二赢的时候，棋局上'O'的个数等于'X'的个数\n\n### 关键步骤：\n1. 求出棋盘上'X'和'O'的个数\n2. 判断是否符合条件一\n3. 若符合条件一继续执行，不符合则直接```return false```\n4. 接下来判断是否有玩家获胜\n5. 当两个玩家都获胜则不符合条件\n6. 当只有玩家一获胜，判断棋局上 'X'的个数是否等于'O'的个数加一\n7. 当只有玩家二获胜，判断棋局上'O'的个数是否等于'X'的个数\n\n\n### 玩家获胜的情况\n\n1. 水平的三个字符都一样： ```board[i][0] === board[i][1] && board[i][1] === board[i][2]```\n2. 垂直的三个字符都一样：```board[0][i] === board[1][i] && board[1][i] === board[2][i]```\n3. 正对角线的三个字符一样：```board[0][0] === board[1][1] && board[1][1]=== board[2][2]```\n4. 反对角线的三个字符都一样:```board[0][2] === board[1][1] && board[1][1]=== board[2][0] ```\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {string[]} board\n * @return {boolean}\n */\nvar validTicTacToe = function(board) {\n\tlet XNumber = 0;//X的个数\n\tlet ONumber = 0;//O的个数\n\tlet player1Win = false;\n\tlet player2Win = false;\n\n\t// 统计X和O的个数\n\tfor(let i = 0;i<board.length;i++){\n\t\tfor(let j = 0;j<board[i].length;j++){\n\t\t\tif(board[i].charAt(j) === 'X'){\n\t\t\t\tXNumber++;\n\t\t\t}else if(board[i].charAt(j) === 'O'){\n\t\t\t\tONumber++;\n\t\t\t}\n\t\t}\n\t}\n\tif(XNumber === ONumber+1 || XNumber === ONumber){\n\t\t// 判读是否有玩家获胜\n\t\t//判断一行\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[i][0] === board[i][1] && board[i][1] === board[i][2]){\n\t\t\t\tif(board[i][0] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[i][0] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 判断一列\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[0][i] === board[1][i] && board[1][i] === board[2][i]){\n\t\t\t\tif(board[0][i] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[0][i] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 判断对角线\n\t\tif(board[0][0] === board[1][1] && board[1][1]=== board[2][2]){\n\t\t\tif(board[0][0] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][0] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\tif(board[0][2] === board[1][1] && board[1][1]=== board[2][0]){\n\t\t\tif(board[0][2] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][2] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家一玩家二都赢\n\t\tif(player1Win && player2Win){\n\t\t\treturn false;\n\t\t}\n\n\n\t\t// 玩家一赢，玩家二不赢\n\t\tif(player1Win && !player2Win){\n\t\t\tif(XNumber === ONumber + 1){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家二赢，玩家一不赢\n\t\tif(!player1Win && player2Win){\n\t\t\tif(XNumber === ONumber){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 都不赢\n\t\tif(!player1Win && !player2Win){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n```","slug":"794. 有效的井字游戏","published":1,"updated":"2021-12-30T15:04:45.944Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ja003disaxbo3k7xfl","content":"<h1 id=\"794-有效的井字游戏-找出判断条件\"><a href=\"#794-有效的井字游戏-找出判断条件\" class=\"headerlink\" title=\"794. 有效的井字游戏  找出判断条件\"></a>794. 有效的井字游戏  找出判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-tic-tac-toe-state/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"棋盘可能达到的状态是：\"><a href=\"#棋盘可能达到的状态是：\" class=\"headerlink\" title=\"棋盘可能达到的状态是：\"></a>棋盘可能达到的状态是：</h3><ol>\n<li>玩家一下的 ‘X’个数 等于玩家二下的 ‘’O’ 的个数或 ‘O’的个数加一</li>\n<li>只能有一个玩家赢</li>\n<li>当玩家一赢的时候，棋局上 ‘X’的个数等于’O’的个数加一</li>\n<li>当玩家二赢的时候，棋局上’O’的个数等于’X’的个数</li>\n</ol>\n<h3 id=\"关键步骤：\"><a href=\"#关键步骤：\" class=\"headerlink\" title=\"关键步骤：\"></a>关键步骤：</h3><ol>\n<li>求出棋盘上’X’和’O’的个数</li>\n<li>判断是否符合条件一</li>\n<li>若符合条件一继续执行，不符合则直接<code>return false</code></li>\n<li>接下来判断是否有玩家获胜</li>\n<li>当两个玩家都获胜则不符合条件</li>\n<li>当只有玩家一获胜，判断棋局上 ‘X’的个数是否等于’O’的个数加一</li>\n<li>当只有玩家二获胜，判断棋局上’O’的个数是否等于’X’的个数</li>\n</ol>\n<h3 id=\"玩家获胜的情况\"><a href=\"#玩家获胜的情况\" class=\"headerlink\" title=\"玩家获胜的情况\"></a>玩家获胜的情况</h3><ol>\n<li>水平的三个字符都一样： <code>board[i][0] === board[i][1] &amp;&amp; board[i][1] === board[i][2]</code></li>\n<li>垂直的三个字符都一样：<code>board[0][i] === board[1][i] &amp;&amp; board[1][i] === board[2][i]</code></li>\n<li>正对角线的三个字符一样：<code>board[0][0] === board[1][1] &amp;&amp; board[1][1]=== board[2][2]</code></li>\n<li>反对角线的三个字符都一样:<code>board[0][2] === board[1][1] &amp;&amp; board[1][1]=== board[2][0] </code></li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">board</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validTicTacToe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">board</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> XNumber = <span class=\"number\">0</span>;<span class=\"comment\">//X的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ONumber = <span class=\"number\">0</span>;<span class=\"comment\">//O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player1Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player2Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 统计X和O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;board[i].length;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tXNumber++;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tONumber++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(XNumber === ONumber+<span class=\"number\">1</span> || XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判读是否有玩家获胜</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断一行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === board[i][<span class=\"number\">1</span>] &amp;&amp; board[i][<span class=\"number\">1</span>] === board[i][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断一列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === board[<span class=\"number\">1</span>][i] &amp;&amp; board[<span class=\"number\">1</span>][i] === board[<span class=\"number\">2</span>][i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断对角线</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一玩家二都赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一赢，玩家二不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家二赢，玩家一不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 都不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2538,"excerpt":"","more":"<h1 id=\"794-有效的井字游戏-找出判断条件\"><a href=\"#794-有效的井字游戏-找出判断条件\" class=\"headerlink\" title=\"794. 有效的井字游戏  找出判断条件\"></a>794. 有效的井字游戏  找出判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-tic-tac-toe-state/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"棋盘可能达到的状态是：\"><a href=\"#棋盘可能达到的状态是：\" class=\"headerlink\" title=\"棋盘可能达到的状态是：\"></a>棋盘可能达到的状态是：</h3><ol>\n<li>玩家一下的 ‘X’个数 等于玩家二下的 ‘’O’ 的个数或 ‘O’的个数加一</li>\n<li>只能有一个玩家赢</li>\n<li>当玩家一赢的时候，棋局上 ‘X’的个数等于’O’的个数加一</li>\n<li>当玩家二赢的时候，棋局上’O’的个数等于’X’的个数</li>\n</ol>\n<h3 id=\"关键步骤：\"><a href=\"#关键步骤：\" class=\"headerlink\" title=\"关键步骤：\"></a>关键步骤：</h3><ol>\n<li>求出棋盘上’X’和’O’的个数</li>\n<li>判断是否符合条件一</li>\n<li>若符合条件一继续执行，不符合则直接<code>return false</code></li>\n<li>接下来判断是否有玩家获胜</li>\n<li>当两个玩家都获胜则不符合条件</li>\n<li>当只有玩家一获胜，判断棋局上 ‘X’的个数是否等于’O’的个数加一</li>\n<li>当只有玩家二获胜，判断棋局上’O’的个数是否等于’X’的个数</li>\n</ol>\n<h3 id=\"玩家获胜的情况\"><a href=\"#玩家获胜的情况\" class=\"headerlink\" title=\"玩家获胜的情况\"></a>玩家获胜的情况</h3><ol>\n<li>水平的三个字符都一样： <code>board[i][0] === board[i][1] &amp;&amp; board[i][1] === board[i][2]</code></li>\n<li>垂直的三个字符都一样：<code>board[0][i] === board[1][i] &amp;&amp; board[1][i] === board[2][i]</code></li>\n<li>正对角线的三个字符一样：<code>board[0][0] === board[1][1] &amp;&amp; board[1][1]=== board[2][2]</code></li>\n<li>反对角线的三个字符都一样:<code>board[0][2] === board[1][1] &amp;&amp; board[1][1]=== board[2][0] </code></li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">board</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validTicTacToe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">board</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> XNumber = <span class=\"number\">0</span>;<span class=\"comment\">//X的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ONumber = <span class=\"number\">0</span>;<span class=\"comment\">//O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player1Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player2Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 统计X和O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;board[i].length;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tXNumber++;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tONumber++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(XNumber === ONumber+<span class=\"number\">1</span> || XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判读是否有玩家获胜</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断一行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === board[i][<span class=\"number\">1</span>] &amp;&amp; board[i][<span class=\"number\">1</span>] === board[i][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断一列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === board[<span class=\"number\">1</span>][i] &amp;&amp; board[<span class=\"number\">1</span>][i] === board[<span class=\"number\">2</span>][i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断对角线</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一玩家二都赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一赢，玩家二不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家二赢，玩家一不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 都不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"876. 链表的中间结点","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"876. 链表的中间结点 先找到链表的长度，再返回对应一半的值","_content":"\n\n# 876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\n\n## [查看原题](https://leetcode-cn.com/problems/middle-of-the-linked-list/)\n\n## 解题思路\n1. 遍历列表进行链表长度的统计\n2. 返回链表的一半长度后面的数据\n\n## 代码\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n    let count = 0; //链表的长度\n    let p = head;\n    let n = head;\n    while (p) {\n        count++;\n        p = p.next;\n    }\n    const mid = count % 2 ? Math.floor(count / 2) : Math.ceil(count / 2);\n    while (mid--) {\n        n = n.next;\n    }\n    return n;\n};\n\n```","source":"_posts/876. 链表的中间结点.md","raw":"---\ntitle: 876. 链表的中间结点\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\n\n## [查看原题](https://leetcode-cn.com/problems/middle-of-the-linked-list/)\n\n## 解题思路\n1. 遍历列表进行链表长度的统计\n2. 返回链表的一半长度后面的数据\n\n## 代码\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n    let count = 0; //链表的长度\n    let p = head;\n    let n = head;\n    while (p) {\n        count++;\n        p = p.next;\n    }\n    const mid = count % 2 ? Math.floor(count / 2) : Math.ceil(count / 2);\n    while (mid--) {\n        n = n.next;\n    }\n    return n;\n};\n\n```","slug":"876. 链表的中间结点","published":1,"updated":"2021-12-30T15:05:07.889Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5jb003gisaxh35wcajz","content":"<h1 id=\"876-链表的中间结点-先找到链表的长度，再返回对应一半的值\"><a href=\"#876-链表的中间结点-先找到链表的长度，再返回对应一半的值\" class=\"headerlink\" title=\"876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\"></a>876. 链表的中间结点 先找到链表的长度，再返回对应一半的值</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>遍历列表进行链表长度的统计</li>\n<li>返回链表的一半长度后面的数据</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">//链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = count % <span class=\"number\">2</span> ? <span class=\"built_in\">Math</span>.floor(count / <span class=\"number\">2</span>) : <span class=\"built_in\">Math</span>.ceil(count / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (mid--) &#123;</span><br><span class=\"line\">        n = n.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":535,"excerpt":"","more":"<h1 id=\"876-链表的中间结点-先找到链表的长度，再返回对应一半的值\"><a href=\"#876-链表的中间结点-先找到链表的长度，再返回对应一半的值\" class=\"headerlink\" title=\"876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\"></a>876. 链表的中间结点 先找到链表的长度，再返回对应一半的值</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>遍历列表进行链表长度的统计</li>\n<li>返回链表的一半长度后面的数据</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">//链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = count % <span class=\"number\">2</span> ? <span class=\"built_in\">Math</span>.floor(count / <span class=\"number\">2</span>) : <span class=\"built_in\">Math</span>.ceil(count / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (mid--) &#123;</span><br><span class=\"line\">        n = n.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"88. 合并两个有序数组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"88. 合并两个有序数组 循环替换后排序","_content":"\n\n# 88. 合并两个有序数组 循环替换后排序\n## 解题思路\n注意不能改变num1的长度，不能能用pop\n将nums2先插入到nums1的末尾，再用sort排序\n\n[原题](https://leetcode-cn.com/problems/merge-sorted-array/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    for (let i = m; i < m + n; i++) {\n        nums1[i] = nums2[i - m]\n    }\n    nums1 = nums1.sort(function(a, b) { return a - b });\n    // console.log(nums1)\n};\n```","source":"_posts/88. 合并两个有序数组.md","raw":"---\ntitle: 88. 合并两个有序数组\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 88. 合并两个有序数组 循环替换后排序\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 88. 合并两个有序数组 循环替换后排序\n## 解题思路\n注意不能改变num1的长度，不能能用pop\n将nums2先插入到nums1的末尾，再用sort排序\n\n[原题](https://leetcode-cn.com/problems/merge-sorted-array/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    for (let i = m; i < m + n; i++) {\n        nums1[i] = nums2[i - m]\n    }\n    nums1 = nums1.sort(function(a, b) { return a - b });\n    // console.log(nums1)\n};\n```","slug":"88. 合并两个有序数组","published":1,"updated":"2021-12-30T15:05:17.410Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5jc003jisax1z7nfofv","content":"<h1 id=\"88-合并两个有序数组-循环替换后排序\"><a href=\"#88-合并两个有序数组-循环替换后排序\" class=\"headerlink\" title=\"88. 合并两个有序数组 循环替换后排序\"></a>88. 合并两个有序数组 循环替换后排序</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>注意不能改变num1的长度，不能能用pop<br>将nums2先插入到nums1的末尾，再用sort排序</p>\n<p><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = m; i &lt; m + n; i++) &#123;</span><br><span class=\"line\">        nums1[i] = nums2[i - m]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums1 = nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a - b &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(nums1)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":460,"excerpt":"","more":"<h1 id=\"88-合并两个有序数组-循环替换后排序\"><a href=\"#88-合并两个有序数组-循环替换后排序\" class=\"headerlink\" title=\"88. 合并两个有序数组 循环替换后排序\"></a>88. 合并两个有序数组 循环替换后排序</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>注意不能改变num1的长度，不能能用pop<br>将nums2先插入到nums1的末尾，再用sort排序</p>\n<p><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = m; i &lt; m + n; i++) &#123;</span><br><span class=\"line\">        nums1[i] = nums2[i - m]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums1 = nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a - b &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(nums1)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"997. 找到小镇的法官","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"997. 找到小镇的法官 图的入度出度和普通方法运算","_content":"\n\n# 997. 找到小镇的法官 图的入度出度和普通方法运算\n\n## [查看原题](https://leetcode-cn.com/problems/find-the-town-judge/)\n\n## 解题思路\n\n这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。\n1. 利用map集合筛选出可能是法官的那些人\n2. 遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官\n3. 循环完毕返回-1，说明此时没有真正的法官\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet map = new Map();\n\tfor(let i = 1;i<=n;i++){\n\t\tmap.set(i,0);\n\t}\n\tfor(let i =0;i<trust.length;i++){\n\t\tif(map.has(trust[i][0])){\n\t\t\tmap.delete(trust[i][0])\n\t\t}\n\t}\n\tif(map.size === 0){\n\t\treturn -1;\n\t}else{\n\t\tfor (const key of map.keys()){\n\t\t\tlet count=0;\n\t\t\ttrust.forEach(item=>{\n\t\t\t\tif(item[1] === key){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t})\n\t\t\tconsole.log(count)\n\t\t\tif(count === n-1){\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n};\n\n```\n\n## 解题思路\n\n利用图论里面的出度和入度\n\n1. 循环trust 将每个人相信的个人的入度加一，自己的出度加一\n2. 循环判断一个人的出度=0，且入度=n-1，则这个人就是法官\n3. 返回-1，说明没有法官\n\n\n## 代码\n\n```js\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet input = new Array(n+1).fill(0);\n\tlet output= new Array(n+1).fill(0);\n\n\tfor(let i=0;i<trust.length;i++){\n\t\tinput[trust[i][1]]++;\n\t\toutput[trust[i][0]]++;\n\t}\n\tfor(let i =1;i<=n;i++){\n\t\tif(input[i] === n-1 && output[i] === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n```","source":"_posts/997. 找到小镇的法官.md","raw":"---\ntitle: 997. 找到小镇的法官\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 997. 找到小镇的法官 图的入度出度和普通方法运算\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 997. 找到小镇的法官 图的入度出度和普通方法运算\n\n## [查看原题](https://leetcode-cn.com/problems/find-the-town-judge/)\n\n## 解题思路\n\n这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。\n1. 利用map集合筛选出可能是法官的那些人\n2. 遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官\n3. 循环完毕返回-1，说明此时没有真正的法官\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet map = new Map();\n\tfor(let i = 1;i<=n;i++){\n\t\tmap.set(i,0);\n\t}\n\tfor(let i =0;i<trust.length;i++){\n\t\tif(map.has(trust[i][0])){\n\t\t\tmap.delete(trust[i][0])\n\t\t}\n\t}\n\tif(map.size === 0){\n\t\treturn -1;\n\t}else{\n\t\tfor (const key of map.keys()){\n\t\t\tlet count=0;\n\t\t\ttrust.forEach(item=>{\n\t\t\t\tif(item[1] === key){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t})\n\t\t\tconsole.log(count)\n\t\t\tif(count === n-1){\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n};\n\n```\n\n## 解题思路\n\n利用图论里面的出度和入度\n\n1. 循环trust 将每个人相信的个人的入度加一，自己的出度加一\n2. 循环判断一个人的出度=0，且入度=n-1，则这个人就是法官\n3. 返回-1，说明没有法官\n\n\n## 代码\n\n```js\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet input = new Array(n+1).fill(0);\n\tlet output= new Array(n+1).fill(0);\n\n\tfor(let i=0;i<trust.length;i++){\n\t\tinput[trust[i][1]]++;\n\t\toutput[trust[i][0]]++;\n\t}\n\tfor(let i =1;i<=n;i++){\n\t\tif(input[i] === n-1 && output[i] === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n```","slug":"997. 找到小镇的法官","published":1,"updated":"2021-12-30T15:05:28.420Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5jd003misax35a27iwf","content":"<h1 id=\"997-找到小镇的法官-图的入度出度和普通方法运算\"><a href=\"#997-找到小镇的法官-图的入度出度和普通方法运算\" class=\"headerlink\" title=\"997. 找到小镇的法官 图的入度出度和普通方法运算\"></a>997. 找到小镇的法官 图的入度出度和普通方法运算</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-the-town-judge/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。</p>\n<ol>\n<li>利用map集合筛选出可能是法官的那些人</li>\n<li>遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官</li>\n<li>循环完毕返回-1，说明此时没有真正的法官</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tmap.set(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(trust[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\tmap.delete(trust[i][<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.size === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> map.keys())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\ttrust.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(item[<span class=\"number\">1</span>] === key)&#123;</span><br><span class=\"line\">\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count === n-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> key;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用图论里面的出度和入度</p>\n<ol>\n<li>循环trust 将每个人相信的个人的入度加一，自己的出度加一</li>\n<li>循环判断一个人的出度=0，且入度=n-1，则这个人就是法官</li>\n<li>返回-1，说明没有法官</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> input = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> output= <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\tinput[trust[i][<span class=\"number\">1</span>]]++;</span><br><span class=\"line\">\t\toutput[trust[i][<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(input[i] === n-<span class=\"number\">1</span> &amp;&amp; output[i] === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1277,"excerpt":"","more":"<h1 id=\"997-找到小镇的法官-图的入度出度和普通方法运算\"><a href=\"#997-找到小镇的法官-图的入度出度和普通方法运算\" class=\"headerlink\" title=\"997. 找到小镇的法官 图的入度出度和普通方法运算\"></a>997. 找到小镇的法官 图的入度出度和普通方法运算</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-the-town-judge/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。</p>\n<ol>\n<li>利用map集合筛选出可能是法官的那些人</li>\n<li>遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官</li>\n<li>循环完毕返回-1，说明此时没有真正的法官</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tmap.set(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(trust[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\tmap.delete(trust[i][<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.size === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> map.keys())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\ttrust.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(item[<span class=\"number\">1</span>] === key)&#123;</span><br><span class=\"line\">\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count === n-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> key;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用图论里面的出度和入度</p>\n<ol>\n<li>循环trust 将每个人相信的个人的入度加一，自己的出度加一</li>\n<li>循环判断一个人的出度=0，且入度=n-1，则这个人就是法官</li>\n<li>返回-1，说明没有法官</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> input = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> output= <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\tinput[trust[i][<span class=\"number\">1</span>]]++;</span><br><span class=\"line\">\t\toutput[trust[i][<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(input[i] === n-<span class=\"number\">1</span> &amp;&amp; output[i] === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Oracle期末知识点总结","date":"2021-12-30T10:53:02.000Z","description":"Oracle知识点总结","_content":"# Oracle知识点总结\n\n\n## [索引](https://www.cnblogs.com/wishyouhappy/p/3681771.html)\n\n### 创建索引\n```plsql\nCREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引\nON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引\n[ASC|DESC],…] | [express])\n[TABLESPACE tablespace_name]\n[PCTFREE n1]                                 --指定索引在数据块中空闲空间\n[STORAGE (INITIAL n2)]\n[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用\n[NOLINE]\n[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用\n```\n\n\n\n```plsql\n为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。\ncreate index DX1_02 on student1(注册日期 desc);\n```\n\n### 删除索引\n\n```plsql\ndrop index index_sno;\n```\n### 查看索引\n\n```plsql\nselect index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name ='tablename';\n\n -- eg:    \ncreate index index_sno on student('name');\nselect * from all_indexes where table_name='student';\n```\n\n\n## [同义词](https://www.cnblogs.com/moonsoft/p/12364941.html)\n\nOracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似\n\n### 创建公共同义词\n```plsql\ncreate public synonym synonym_name for table_name;\n```\n\n### 创建普通的同义词\n```plsql\ncreate  synonym synonym_name for table_name;\n```\n\n### 删除同义词\n```plsql\ndrop synonym synonym_name;\n```\n## [序列](https://www.cnblogs.com/CandiceW/p/10062413.html)\n\n序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。\n\n### 创建序列\n创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：\n```plsql\n　　CREATE SEQUENCE 序列名\n　　[INCREMENT BY n]\n　　[START WITH n]\n　　[{MAXVALUE/ MINVALUE n| NOMAXVALUE}]\n　　[{CYCLE|NOCYCLE}]\n　　[{CACHE n| NOCACHE}];\n```\n#### 其中：\n\n1. > INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。\n\n2. > START WITH 定义序列的初始值(即产生的第一个值)，默认为1。\n\n3. > MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。\n\n4. > MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。\n\n5. > CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。\n\n6. > CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。\n\n7. > NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。\n\n8. > CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。\n\n\n 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。\n```plsql\ncreate sequence DX1_06 increment by 10 start with 50 nocache;\n```\n\n创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。\n```plsql\ncreate sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;\n```\n\n### 修改序列\n **alter**\n\n修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。\n```plsql\nalter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;\n````\n\n### 删除序列\n**drop**\n\n删除序列seq_1。\n```plsql\ndrop sequence seq_1;\n```\n\n### 一些常用函数\n\n#### [查询一张表，而且要按照业务排序](https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html)\n  ```rank() over(partition)```\n\n### [从右边对字符串使用指定的字符进行填充 ](https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html)\n```rpad(string,padded_length,[pad_string]) 　```\n-  string 表示：被填充的字符串 　　\n-  padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　\n- pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　\n\n\n## [存储过程](https://blog.csdn.net/qq_39443053/article/details/104044530)\n\n### 存储过程的定义\n#### 无参数\n```plsql\ncreate or replace procedure 存储过程名\nas\nbegin\n  ----------------------------\nend;\n```\n\n#### 有参数\n```plsql\ncreate or replace procedure myDemo02(name in varchar,age in int)\nas\nbegin\n  dbms_output.put_line('name='||name||', age='||age);\nend;\n```\n\n## 知识点\n1. 主键的创建有三种方法\n2. 视图上不能完成的操作：在视图上定义新的基本表\n3. 在sql中子查询是嵌入到另一个查询语句之中的查询语句\n4. 减少外键能实现实体的完整性\n5. 在全文的搜索的函数中，用于指定被搜索的列是match()\n6. 中间连接不属于连接种类\n7. 连接种类有：外连接、内连接、交叉连接\n8. union可以组合多条SQL查询语句，形成组合查询\n9. 分组：grouped by     ？？？\n10. delete语句的使用DELETE FROM Person WHERE LastName = 'Wilson' \n11. 返回当前日期的函数：curdate()\n12. 数据模型：网状模型、层次模型、网络模型\n13. 交叉连接又可以看成笛卡尔连接\n14. 为数据表创建索引的目的是提高查询的检索性能\n15. SQL语言中的视图view是数据库的外模式\n16. 查看数据库中的所有表：show tables\n17. start transaction 表示一个新的事物处理快的开始\n18. 格式化日期的函数：DATE_FORMAT()\n19. SQL语言是非过程化语言\n20. 在正则表达式中匹配任意一个字符的符号是' . '\n21. DML语句就是数据库操作语句。包括update、 delete、select\n22. DDL数据库定义语言。包括create、alter、drop、truncate\n23. declimal是可变精度浮点值\n24. 逻辑运算符优先级：not / and / or\n25. [limit](https://www.yiibai.com/sql/sql-limit.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 索引\n\n### 创建\n\n#### 单索引\n\n``````sql\ncreate  bitmap  index   索引名  on 表名( 变量名 desc );\n\ndesc 表示降序排序。  bitmap 为 位图索引 正常可不加\n``````\n\n#### 组合索引\n\n               ``````sql\n               create index 索引名 on 表名(列名1,列名2);              \n               \n               ``````\n\n### 查看索引\n\n\n\n```sql\nselect * from user_indexes/user_ind_columns ;\n```\n\n\n\n### 删除索引\n\n\n\n```sql\ndrop index 索引名;\n```\n\n## 同义词\n\n### 创建同义词\n\n```sql\ncreate synonym 同义词 for 目标\n```\n\n### 查看同义词\n\n```sql\nselect * from user_synonyms;\nselect * from all_synonyms;\n```\n\n### 删除同义词\n\n```sql\ndrop synonym 同义词;\n```\n\n## 序列\n\n### 创建序列\n\n```sql\ncreate sequence 序列名称\n\nstart with 开始数字\n\nincrement by 增长数字\n\nminvalue 最小值\n\nmaxvalue 最大值\n\ncycle\n\nnocache\n```\n\n**详细说明：**\n\nstart with 开始数字à从几开始\n\nincrement by 增长à步长，每次增长几个数\n\nminvalue 最小值\n\nmaxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大\n\ncycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长\n\nnocache 不设缓存\n\n### 查看序列\n\n```sql\nselect *  from user_SEQUENCES、all_SEQUENCES;\n```\n\n\n\n### 引用序列\n\n   xx.nextval      /  xx.curval \n\n```sql\ninsert into xx表 values (  )  ,\n\ninsert into dept values( DX1_06.nextval,'ss','CN','s',NULL,NULL );\n\n```\n\n\n\n### 修改序列\n\n```sql\n alter sequence student_id -- 序列名 也可以更改\n minvalue 1   \n maxvalue 99999  \n start with 1   \n increment by 1  \n cycle    -- 到99999后，从头开始\n nocache；  \n\n```\n\n## 用户\n\n### 修改密码\n\n```sql\nalter user 用户名 identified by 密码;\n```\n\n### 创建用户\n\n```sql\ncreate  (c##)user username identified by password;    // 创建普通用户 需要添加 c##\n```\n\n\n\n\n\n### 锁定用户\n\n```sql\nALTER USER username ACCOUNT LOCK; 锁定\n\nALTER USER username ACCOUNT UNLOCK; 解锁\n```\n\n\n\n### 删除用户\n\n```sql\ndrop user username ;\n```\n\n\n\n## 新技能学习 如排序等\n\n### 排序\n\n\n\n```sql\n(DENSE_)RANK( ) OVER ([ query_partition_clause ] order_by_clause)\nrank():跳跃式，两个第1，下一个就是第3\ndense_rank():非跳跃式,两个第1,下一个是第2\n```\n\n\n\n```\n分为：（1）连续或不连续：dense_rank,rank\n\n     （2）分区或不分区：使用partition，不使用partition\n```\n\n\n\n# PL/SQL\n\n## .和/ 的差别\n\n**在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。**\n1\n```plsql\n\n在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。\n\n\nset serveroutput on 命令是打开COMMAND命令窗口中的输出流。\n\n不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！\n\n```\n\n\n\n| 分隔符                 | 描述                       |\n| ---------------------- | -------------------------- |\n| `+`,`-`, `*`, `/`      | 加法，减法/负，乘法，除法  |\n| `%`                    | 属性绑定                   |\n| `'`                    | 字符串分隔符               |\n| `.`                    | 组件选择符                 |\n| `(,)`                  | 表达式或列表分隔符         |\n| `:`                    | 主机变量指示符             |\n| `,`                    | 项目分隔符                 |\n| `\"`                    | 引用标识符分隔符           |\n| `=`                    | 关系运算符                 |\n| `@`                    | 远程访问指示符             |\n| `;`                    | 声明或语句终止符           |\n| `:=`                   | 赋值运算符                 |\n| `=>`                   | 关联运算符                 |\n| ΙΙ                     | 连接运算符                 |\n| `**`                   | 指数运算符                 |\n| `<<`, `>>`             | 标签分隔符(开始和结束)     |\n| `/*`, `*/`             | 多行注释分隔符(开始和结束) |\n| `--`                   | 单行注释指示符             |\n| `..`                   | 范围运算符                 |\n| `<`, `>`, `<=`, `>=`   | 关系运算符                 |\n| `<>`, `'=`, `~=`, `^=` | 不同版本的”不等于”运算符   |\n\n## 程序\n\n3、put：将内容写到内存，**等到put_line时一起输出**\n4、put_line：不用多说了，输出字符\n\n\n\n\n\n### 输出 语句\n\n```plsql\ndbms_output.put_line(  );   //  line 为换行\n\ndbms_output.put()  正常输出\n```\n\n\n\n### 创建过程\n\n\n\n```sql\nCREATE [OR REPLACE] PROCEDURE procedure_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \n{IS | AS} \nBEGIN \n  < procedure_body > \nEND procedure_name;\nSQL\n```\n\n\n\n### 执行过程\n\n- 使用EXECUTE关键字\n\n```sql\nEXECUTE 过程名;\n```\n\n\n\n- 从PL/SQL块调用过程的名称\n\n\n\n```sql\nbegin \n 过程名;\nend;\n```\n\n## 函数\n\n\n### 创建函数\n\n```sql\nCREATE [OR REPLACE] FUNCTION function_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \nRETURN return_datatype \n{IS | AS} \nBEGIN \n   < function_body > \nEND [function_name];\nSQL\n```\n\n**其中，**\n\n- **function-name是指定要创建的函数的名称。**\n- **[OR REPLACE]选项指示是否允许修改现有的函数。**\n- **可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。**\n- **函数必须包含一个返回(RETURN)语句。**\n- **RETURN子句指定要从函数返回的数据类型。**\n- **function-body包含可执行部分。**\n- **使用AS关键字代替IS关键字，用来创建独立的函数。**\n\n\n\n### 查询函数\n\n\n\n\n\n\n\n## 游标\n\n# 1 概述\n\n```sql\n1. 游标是什么？\n   用来存储多条查询数据的一种数据结构（'结果集'），\n   它有一个 '指针'，从上往下移动（'fetch'），从而能够 '遍历每条记录'\n   \n2. 优缺点\n   (1) 提高 sql '执行效率'\n   (2) 牺牲 '内存'\n```\n\n\n\n\n\n\n\n### 隐式游标\n\n\n\n\n\n\n\n\n\n### 显示游标\n\n使用显式游标包括以下步骤 -\n\n- 声明游标初始化内存\n- 打开游标分配内存\n- 从游标获取数据\n- 关闭游标以释放分配的内存\n\n\n\n声明游标\n\n声明游标使用名称和相关的SELECT语句来定义游标。 例如 -\n\n```sql\nCURSOR c_customers IS \n   SELECT id, name, address FROM customers;\nSQL\n```\n\n打开游标\n\n打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：\n\n```sql\nOPEN c_customers;\nSQL\n```\n\n获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：\n\n```sql\nFETCH c_customers INTO c_id, c_name, c_addr;\nSQL\n```\n\n关闭游标\n\n关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：\n\n```sql\nCLOSE c_customers;\nSQL\n```\n\n\n\n\n\n## 异常处理\n\n\n\n| 异常                 | Oracle错误代码 | SQLCODE  | 描述                                                         |\n| -------------------- | -------------- | -------- | ------------------------------------------------------------ |\n| `ACCESS_INTO_NULL`   | 06530          | `-6530`  | 当一个空对象被自动分配一个值时会引发它。                     |\n| `CASE_NOT_FOUND`     | 06592          | `-6592`  | 当没有选择`CASE`语句的`WHEN`子句中的任何选项时，会引发这个错误，并且没有`ELSE`子句。 |\n| `COLLECTION_IS_NULL` | 06531          | `-6531`  | 当程序尝试将`EXISTS`以外的集合方法应用于未初始化的嵌套表或`varray`时，或程序尝试将值分配给未初始化的嵌套表或`varray`的元素时，会引发此问题。 |\n| `DUP_VAL_ON_INDEX`   | 00001          | `-1`     | 当尝试将重复值存储在具有唯一索引的列中时引发此错误。         |\n| `INVALID_CURSOR`     | 01001          | `-1001`  | 当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。 |\n| `INVALID_NUMBER`     | 01722          | `-1722`  | 当字符串转换为数字时失败，因为字符串不代表有效的数字。       |\n| `LOGIN_DENIED`       | 01017          | `-1017`  | 当程序尝试使用无效的用户名或密码登录到数据库时引发。         |\n| `NO_DATA_FOUND`      | 01403          | `+100`   | 当`SELECT INTO`语句不返回任何行时会引发它。                  |\n| `NOT_LOGGED_ON`      | 01012          | `-1012`  | 当数据库调用没有连接到数据库时引发。                         |\n| `PROGRAM_ERROR`      | 06501          | `-6501`  | 当PL/SQL遇到内部问题时会引发。                               |\n| `ROWTYPE_MISMATCH`   | 06504          | `-6504`  | 当游标在具有不兼容数据类型的变量中获取值时引发。             |\n| `SELF_IS_NULL`       | 30625          | `-30625` | 当调用成员方法时引发，但对象类型的实例未初始化。             |\n| `STORAGE_ERROR`      | 06500          | `-6500`  | 当PL/SQL用尽内存或内存已损坏时引发。                         |\n| `TOO_MANY_ROWS`      | 01422          | `-1422`  | 当`SELECT INTO`语句返回多行时引发。                          |\n| `VALUE_ERROR`        | 06502          | `-6502`  | 当发生算术，转换，截断或者`sizeconstraint`错误时引发。       |\n| `ZERO_DIVIDE`        | 01476          | `1476`   | 当尝试将数字除以零时引发。                                   |\n\n\n\n\n\n\n\n\n\n## 异常处理的语法\n\n异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN...THEN处理，如下语法所示 -\n\n```sql\nDECLARE \n   <declarations section> \nBEGIN \n   <executable command(s)> \nEXCEPTION \n   <exception handling goes here > \n   WHEN exception1 THEN  \n      exception1-handling-statements  \n   WHEN exception2  THEN  \n      exception2-handling-statements  \n   WHEN exception3 THEN  \n      exception3-handling-statements \n   ........ \n   WHEN others THEN \n      exception3-handling-statements \nEND;\n```\n\n**示例**\n\n```sql\nSET SERVEROUTPUT ON SIZE 99999;\nDECLARE \n   c_id customers.id%type := 100; \n   c_name  customerS.name%type; \n   c_addr customers.address%type; \nBEGIN \n   SELECT  name, address INTO  c_name, c_addr \n   FROM customers \n   WHERE id = c_id;  \n   DBMS_OUTPUT.PUT_LINE ('姓名: '||  c_name); \n   DBMS_OUTPUT.PUT_LINE ('地址: ' || c_addr); \n\nEXCEPTION \n   WHEN no_data_found THEN \n      dbms_output.put_line('没有找到符合条件的客户信息!'); \n   WHEN others THEN \n      dbms_output.put_line('Error!'); \nEND; \n/\n```\n\n\n\n\n\n\n\n## 填充默认值。\n\nNVL( xx  ,  0 )  默认为0      zero\n\n \n\n**语法**\n\n**NVL(eExpression1, eExpression2)**\n\n**参数**\n**eExpression1, eExpression2**\n\n**如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。**\n\n\n\n## 删除 delete\n\n```sql\ndelete from xx  where \n```\n\n## 插入 insert\n\n```sql\ninsert into 表名 values(值1，值2，......);\n\ninsert into 表名(列1，列2，......)values(值1，值2，......);\n\ninsert into 表名2(列1，列2，......)select 值1，值2，...... from 表名1;  （表2必须存在，列1，列2，......必须存在）\n\ninsert into 表2 select * from 表1;\n\nselect 值1，值2，...... into 表名2 from 表名1; （表2不存在，插入时会自动创建表名2）\n```\n\n\n\n# 触发器\n\n## old / new\n\n\n1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png)\n\n2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png)\n\n3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png)\n\n\n\n\n\n## RAISE_APPLICATION_ERROR\n\n可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理\n我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。\n其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)\n","source":"_posts/Oracle期末知识点总结.md","raw":"---\ntitle: Oracle期末知识点总结\ndate: 2021-12-30 18:53:02\ndescription: Oracle知识点总结\ncategories: \"Oracle\" #分类\ntags:   #标签\n    - oracle\n    - 课程学习\n---\n# Oracle知识点总结\n\n\n## [索引](https://www.cnblogs.com/wishyouhappy/p/3681771.html)\n\n### 创建索引\n```plsql\nCREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引\nON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引\n[ASC|DESC],…] | [express])\n[TABLESPACE tablespace_name]\n[PCTFREE n1]                                 --指定索引在数据块中空闲空间\n[STORAGE (INITIAL n2)]\n[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用\n[NOLINE]\n[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用\n```\n\n\n\n```plsql\n为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。\ncreate index DX1_02 on student1(注册日期 desc);\n```\n\n### 删除索引\n\n```plsql\ndrop index index_sno;\n```\n### 查看索引\n\n```plsql\nselect index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name ='tablename';\n\n -- eg:    \ncreate index index_sno on student('name');\nselect * from all_indexes where table_name='student';\n```\n\n\n## [同义词](https://www.cnblogs.com/moonsoft/p/12364941.html)\n\nOracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似\n\n### 创建公共同义词\n```plsql\ncreate public synonym synonym_name for table_name;\n```\n\n### 创建普通的同义词\n```plsql\ncreate  synonym synonym_name for table_name;\n```\n\n### 删除同义词\n```plsql\ndrop synonym synonym_name;\n```\n## [序列](https://www.cnblogs.com/CandiceW/p/10062413.html)\n\n序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。\n\n### 创建序列\n创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：\n```plsql\n　　CREATE SEQUENCE 序列名\n　　[INCREMENT BY n]\n　　[START WITH n]\n　　[{MAXVALUE/ MINVALUE n| NOMAXVALUE}]\n　　[{CYCLE|NOCYCLE}]\n　　[{CACHE n| NOCACHE}];\n```\n#### 其中：\n\n1. > INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。\n\n2. > START WITH 定义序列的初始值(即产生的第一个值)，默认为1。\n\n3. > MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。\n\n4. > MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。\n\n5. > CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。\n\n6. > CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。\n\n7. > NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。\n\n8. > CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。\n\n\n 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。\n```plsql\ncreate sequence DX1_06 increment by 10 start with 50 nocache;\n```\n\n创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。\n```plsql\ncreate sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;\n```\n\n### 修改序列\n **alter**\n\n修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。\n```plsql\nalter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;\n````\n\n### 删除序列\n**drop**\n\n删除序列seq_1。\n```plsql\ndrop sequence seq_1;\n```\n\n### 一些常用函数\n\n#### [查询一张表，而且要按照业务排序](https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html)\n  ```rank() over(partition)```\n\n### [从右边对字符串使用指定的字符进行填充 ](https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html)\n```rpad(string,padded_length,[pad_string]) 　```\n-  string 表示：被填充的字符串 　　\n-  padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　\n- pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　\n\n\n## [存储过程](https://blog.csdn.net/qq_39443053/article/details/104044530)\n\n### 存储过程的定义\n#### 无参数\n```plsql\ncreate or replace procedure 存储过程名\nas\nbegin\n  ----------------------------\nend;\n```\n\n#### 有参数\n```plsql\ncreate or replace procedure myDemo02(name in varchar,age in int)\nas\nbegin\n  dbms_output.put_line('name='||name||', age='||age);\nend;\n```\n\n## 知识点\n1. 主键的创建有三种方法\n2. 视图上不能完成的操作：在视图上定义新的基本表\n3. 在sql中子查询是嵌入到另一个查询语句之中的查询语句\n4. 减少外键能实现实体的完整性\n5. 在全文的搜索的函数中，用于指定被搜索的列是match()\n6. 中间连接不属于连接种类\n7. 连接种类有：外连接、内连接、交叉连接\n8. union可以组合多条SQL查询语句，形成组合查询\n9. 分组：grouped by     ？？？\n10. delete语句的使用DELETE FROM Person WHERE LastName = 'Wilson' \n11. 返回当前日期的函数：curdate()\n12. 数据模型：网状模型、层次模型、网络模型\n13. 交叉连接又可以看成笛卡尔连接\n14. 为数据表创建索引的目的是提高查询的检索性能\n15. SQL语言中的视图view是数据库的外模式\n16. 查看数据库中的所有表：show tables\n17. start transaction 表示一个新的事物处理快的开始\n18. 格式化日期的函数：DATE_FORMAT()\n19. SQL语言是非过程化语言\n20. 在正则表达式中匹配任意一个字符的符号是' . '\n21. DML语句就是数据库操作语句。包括update、 delete、select\n22. DDL数据库定义语言。包括create、alter、drop、truncate\n23. declimal是可变精度浮点值\n24. 逻辑运算符优先级：not / and / or\n25. [limit](https://www.yiibai.com/sql/sql-limit.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 索引\n\n### 创建\n\n#### 单索引\n\n``````sql\ncreate  bitmap  index   索引名  on 表名( 变量名 desc );\n\ndesc 表示降序排序。  bitmap 为 位图索引 正常可不加\n``````\n\n#### 组合索引\n\n               ``````sql\n               create index 索引名 on 表名(列名1,列名2);              \n               \n               ``````\n\n### 查看索引\n\n\n\n```sql\nselect * from user_indexes/user_ind_columns ;\n```\n\n\n\n### 删除索引\n\n\n\n```sql\ndrop index 索引名;\n```\n\n## 同义词\n\n### 创建同义词\n\n```sql\ncreate synonym 同义词 for 目标\n```\n\n### 查看同义词\n\n```sql\nselect * from user_synonyms;\nselect * from all_synonyms;\n```\n\n### 删除同义词\n\n```sql\ndrop synonym 同义词;\n```\n\n## 序列\n\n### 创建序列\n\n```sql\ncreate sequence 序列名称\n\nstart with 开始数字\n\nincrement by 增长数字\n\nminvalue 最小值\n\nmaxvalue 最大值\n\ncycle\n\nnocache\n```\n\n**详细说明：**\n\nstart with 开始数字à从几开始\n\nincrement by 增长à步长，每次增长几个数\n\nminvalue 最小值\n\nmaxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大\n\ncycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长\n\nnocache 不设缓存\n\n### 查看序列\n\n```sql\nselect *  from user_SEQUENCES、all_SEQUENCES;\n```\n\n\n\n### 引用序列\n\n   xx.nextval      /  xx.curval \n\n```sql\ninsert into xx表 values (  )  ,\n\ninsert into dept values( DX1_06.nextval,'ss','CN','s',NULL,NULL );\n\n```\n\n\n\n### 修改序列\n\n```sql\n alter sequence student_id -- 序列名 也可以更改\n minvalue 1   \n maxvalue 99999  \n start with 1   \n increment by 1  \n cycle    -- 到99999后，从头开始\n nocache；  \n\n```\n\n## 用户\n\n### 修改密码\n\n```sql\nalter user 用户名 identified by 密码;\n```\n\n### 创建用户\n\n```sql\ncreate  (c##)user username identified by password;    // 创建普通用户 需要添加 c##\n```\n\n\n\n\n\n### 锁定用户\n\n```sql\nALTER USER username ACCOUNT LOCK; 锁定\n\nALTER USER username ACCOUNT UNLOCK; 解锁\n```\n\n\n\n### 删除用户\n\n```sql\ndrop user username ;\n```\n\n\n\n## 新技能学习 如排序等\n\n### 排序\n\n\n\n```sql\n(DENSE_)RANK( ) OVER ([ query_partition_clause ] order_by_clause)\nrank():跳跃式，两个第1，下一个就是第3\ndense_rank():非跳跃式,两个第1,下一个是第2\n```\n\n\n\n```\n分为：（1）连续或不连续：dense_rank,rank\n\n     （2）分区或不分区：使用partition，不使用partition\n```\n\n\n\n# PL/SQL\n\n## .和/ 的差别\n\n**在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。**\n1\n```plsql\n\n在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。\n\n\nset serveroutput on 命令是打开COMMAND命令窗口中的输出流。\n\n不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！\n\n```\n\n\n\n| 分隔符                 | 描述                       |\n| ---------------------- | -------------------------- |\n| `+`,`-`, `*`, `/`      | 加法，减法/负，乘法，除法  |\n| `%`                    | 属性绑定                   |\n| `'`                    | 字符串分隔符               |\n| `.`                    | 组件选择符                 |\n| `(,)`                  | 表达式或列表分隔符         |\n| `:`                    | 主机变量指示符             |\n| `,`                    | 项目分隔符                 |\n| `\"`                    | 引用标识符分隔符           |\n| `=`                    | 关系运算符                 |\n| `@`                    | 远程访问指示符             |\n| `;`                    | 声明或语句终止符           |\n| `:=`                   | 赋值运算符                 |\n| `=>`                   | 关联运算符                 |\n| ΙΙ                     | 连接运算符                 |\n| `**`                   | 指数运算符                 |\n| `<<`, `>>`             | 标签分隔符(开始和结束)     |\n| `/*`, `*/`             | 多行注释分隔符(开始和结束) |\n| `--`                   | 单行注释指示符             |\n| `..`                   | 范围运算符                 |\n| `<`, `>`, `<=`, `>=`   | 关系运算符                 |\n| `<>`, `'=`, `~=`, `^=` | 不同版本的”不等于”运算符   |\n\n## 程序\n\n3、put：将内容写到内存，**等到put_line时一起输出**\n4、put_line：不用多说了，输出字符\n\n\n\n\n\n### 输出 语句\n\n```plsql\ndbms_output.put_line(  );   //  line 为换行\n\ndbms_output.put()  正常输出\n```\n\n\n\n### 创建过程\n\n\n\n```sql\nCREATE [OR REPLACE] PROCEDURE procedure_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \n{IS | AS} \nBEGIN \n  < procedure_body > \nEND procedure_name;\nSQL\n```\n\n\n\n### 执行过程\n\n- 使用EXECUTE关键字\n\n```sql\nEXECUTE 过程名;\n```\n\n\n\n- 从PL/SQL块调用过程的名称\n\n\n\n```sql\nbegin \n 过程名;\nend;\n```\n\n## 函数\n\n\n### 创建函数\n\n```sql\nCREATE [OR REPLACE] FUNCTION function_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \nRETURN return_datatype \n{IS | AS} \nBEGIN \n   < function_body > \nEND [function_name];\nSQL\n```\n\n**其中，**\n\n- **function-name是指定要创建的函数的名称。**\n- **[OR REPLACE]选项指示是否允许修改现有的函数。**\n- **可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。**\n- **函数必须包含一个返回(RETURN)语句。**\n- **RETURN子句指定要从函数返回的数据类型。**\n- **function-body包含可执行部分。**\n- **使用AS关键字代替IS关键字，用来创建独立的函数。**\n\n\n\n### 查询函数\n\n\n\n\n\n\n\n## 游标\n\n# 1 概述\n\n```sql\n1. 游标是什么？\n   用来存储多条查询数据的一种数据结构（'结果集'），\n   它有一个 '指针'，从上往下移动（'fetch'），从而能够 '遍历每条记录'\n   \n2. 优缺点\n   (1) 提高 sql '执行效率'\n   (2) 牺牲 '内存'\n```\n\n\n\n\n\n\n\n### 隐式游标\n\n\n\n\n\n\n\n\n\n### 显示游标\n\n使用显式游标包括以下步骤 -\n\n- 声明游标初始化内存\n- 打开游标分配内存\n- 从游标获取数据\n- 关闭游标以释放分配的内存\n\n\n\n声明游标\n\n声明游标使用名称和相关的SELECT语句来定义游标。 例如 -\n\n```sql\nCURSOR c_customers IS \n   SELECT id, name, address FROM customers;\nSQL\n```\n\n打开游标\n\n打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：\n\n```sql\nOPEN c_customers;\nSQL\n```\n\n获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：\n\n```sql\nFETCH c_customers INTO c_id, c_name, c_addr;\nSQL\n```\n\n关闭游标\n\n关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：\n\n```sql\nCLOSE c_customers;\nSQL\n```\n\n\n\n\n\n## 异常处理\n\n\n\n| 异常                 | Oracle错误代码 | SQLCODE  | 描述                                                         |\n| -------------------- | -------------- | -------- | ------------------------------------------------------------ |\n| `ACCESS_INTO_NULL`   | 06530          | `-6530`  | 当一个空对象被自动分配一个值时会引发它。                     |\n| `CASE_NOT_FOUND`     | 06592          | `-6592`  | 当没有选择`CASE`语句的`WHEN`子句中的任何选项时，会引发这个错误，并且没有`ELSE`子句。 |\n| `COLLECTION_IS_NULL` | 06531          | `-6531`  | 当程序尝试将`EXISTS`以外的集合方法应用于未初始化的嵌套表或`varray`时，或程序尝试将值分配给未初始化的嵌套表或`varray`的元素时，会引发此问题。 |\n| `DUP_VAL_ON_INDEX`   | 00001          | `-1`     | 当尝试将重复值存储在具有唯一索引的列中时引发此错误。         |\n| `INVALID_CURSOR`     | 01001          | `-1001`  | 当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。 |\n| `INVALID_NUMBER`     | 01722          | `-1722`  | 当字符串转换为数字时失败，因为字符串不代表有效的数字。       |\n| `LOGIN_DENIED`       | 01017          | `-1017`  | 当程序尝试使用无效的用户名或密码登录到数据库时引发。         |\n| `NO_DATA_FOUND`      | 01403          | `+100`   | 当`SELECT INTO`语句不返回任何行时会引发它。                  |\n| `NOT_LOGGED_ON`      | 01012          | `-1012`  | 当数据库调用没有连接到数据库时引发。                         |\n| `PROGRAM_ERROR`      | 06501          | `-6501`  | 当PL/SQL遇到内部问题时会引发。                               |\n| `ROWTYPE_MISMATCH`   | 06504          | `-6504`  | 当游标在具有不兼容数据类型的变量中获取值时引发。             |\n| `SELF_IS_NULL`       | 30625          | `-30625` | 当调用成员方法时引发，但对象类型的实例未初始化。             |\n| `STORAGE_ERROR`      | 06500          | `-6500`  | 当PL/SQL用尽内存或内存已损坏时引发。                         |\n| `TOO_MANY_ROWS`      | 01422          | `-1422`  | 当`SELECT INTO`语句返回多行时引发。                          |\n| `VALUE_ERROR`        | 06502          | `-6502`  | 当发生算术，转换，截断或者`sizeconstraint`错误时引发。       |\n| `ZERO_DIVIDE`        | 01476          | `1476`   | 当尝试将数字除以零时引发。                                   |\n\n\n\n\n\n\n\n\n\n## 异常处理的语法\n\n异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN...THEN处理，如下语法所示 -\n\n```sql\nDECLARE \n   <declarations section> \nBEGIN \n   <executable command(s)> \nEXCEPTION \n   <exception handling goes here > \n   WHEN exception1 THEN  \n      exception1-handling-statements  \n   WHEN exception2  THEN  \n      exception2-handling-statements  \n   WHEN exception3 THEN  \n      exception3-handling-statements \n   ........ \n   WHEN others THEN \n      exception3-handling-statements \nEND;\n```\n\n**示例**\n\n```sql\nSET SERVEROUTPUT ON SIZE 99999;\nDECLARE \n   c_id customers.id%type := 100; \n   c_name  customerS.name%type; \n   c_addr customers.address%type; \nBEGIN \n   SELECT  name, address INTO  c_name, c_addr \n   FROM customers \n   WHERE id = c_id;  \n   DBMS_OUTPUT.PUT_LINE ('姓名: '||  c_name); \n   DBMS_OUTPUT.PUT_LINE ('地址: ' || c_addr); \n\nEXCEPTION \n   WHEN no_data_found THEN \n      dbms_output.put_line('没有找到符合条件的客户信息!'); \n   WHEN others THEN \n      dbms_output.put_line('Error!'); \nEND; \n/\n```\n\n\n\n\n\n\n\n## 填充默认值。\n\nNVL( xx  ,  0 )  默认为0      zero\n\n \n\n**语法**\n\n**NVL(eExpression1, eExpression2)**\n\n**参数**\n**eExpression1, eExpression2**\n\n**如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。**\n\n\n\n## 删除 delete\n\n```sql\ndelete from xx  where \n```\n\n## 插入 insert\n\n```sql\ninsert into 表名 values(值1，值2，......);\n\ninsert into 表名(列1，列2，......)values(值1，值2，......);\n\ninsert into 表名2(列1，列2，......)select 值1，值2，...... from 表名1;  （表2必须存在，列1，列2，......必须存在）\n\ninsert into 表2 select * from 表1;\n\nselect 值1，值2，...... into 表名2 from 表名1; （表2不存在，插入时会自动创建表名2）\n```\n\n\n\n# 触发器\n\n## old / new\n\n\n1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png)\n\n2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png)\n\n3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png)\n\n\n\n\n\n## RAISE_APPLICATION_ERROR\n\n可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理\n我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。\n其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)\n","slug":"Oracle期末知识点总结","published":1,"updated":"2021-12-30T15:06:01.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxt3o5je003pisaxhgwlhx2s","content":"<h1 id=\"Oracle知识点总结\"><a href=\"#Oracle知识点总结\" class=\"headerlink\" title=\"Oracle知识点总结\"></a>Oracle知识点总结</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a><a href=\"https://www.cnblogs.com/wishyouhappy/p/3681771.html\">索引</a></h2><h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引</span><br><span class=\"line\">ON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引</span><br><span class=\"line\">[ASC|DESC],…] | [express])</span><br><span class=\"line\">[TABLESPACE tablespace_name]</span><br><span class=\"line\">[PCTFREE n1]                                 --指定索引在数据块中空闲空间</span><br><span class=\"line\">[STORAGE (INITIAL n2)]</span><br><span class=\"line\">[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用</span><br><span class=\"line\">[NOLINE]</span><br><span class=\"line\">[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。</span><br><span class=\"line\">create index DX1_02 on student1(注册日期 desc);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop index index_sno;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name =&#x27;tablename&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"> -- eg:    </span><br><span class=\"line\">create index index_sno on student(&#x27;name&#x27;);</span><br><span class=\"line\">select * from all_indexes where table_name=&#x27;student&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"同义词\"><a href=\"#同义词\" class=\"headerlink\" title=\"同义词\"></a><a href=\"https://www.cnblogs.com/moonsoft/p/12364941.html\">同义词</a></h2><p>Oracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似</p>\n<h3 id=\"创建公共同义词\"><a href=\"#创建公共同义词\" class=\"headerlink\" title=\"创建公共同义词\"></a>创建公共同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create public synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建普通的同义词\"><a href=\"#创建普通的同义词\" class=\"headerlink\" title=\"创建普通的同义词\"></a>创建普通的同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词\"><a href=\"#删除同义词\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop synonym synonym_name;</span><br></pre></td></tr></table></figure>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a><a href=\"https://www.cnblogs.com/CandiceW/p/10062413.html\">序列</a></h2><p>序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。</p>\n<h3 id=\"创建序列\"><a href=\"#创建序列\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><p>创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　CREATE SEQUENCE 序列名</span><br><span class=\"line\">　　[INCREMENT BY n]</span><br><span class=\"line\">　　[START WITH n]</span><br><span class=\"line\">　　[&#123;MAXVALUE/ MINVALUE n| NOMAXVALUE&#125;]</span><br><span class=\"line\">　　[&#123;CYCLE|NOCYCLE&#125;]</span><br><span class=\"line\">　　[&#123;CACHE n| NOCACHE&#125;];</span><br></pre></td></tr></table></figure>\n<h4 id=\"其中：\"><a href=\"#其中：\" class=\"headerlink\" title=\"其中：\"></a>其中：</h4><ol>\n<li><blockquote>\n<p>INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>START WITH 定义序列的初始值(即产生的第一个值)，默认为1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。</p>\n</blockquote>\n</li>\n</ol>\n<p> 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence DX1_06 increment by 10 start with 50 nocache;</span><br></pre></td></tr></table></figure>\n\n<p>创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改序列\"><a href=\"#修改序列\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><p> <strong>alter</strong></p>\n<p>修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">### 删除序列</span><br><span class=\"line\">**drop**</span><br><span class=\"line\"></span><br><span class=\"line\">删除序列seq_1。</span><br><span class=\"line\">```plsql</span><br><span class=\"line\">drop sequence seq_1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些常用函数\"><a href=\"#一些常用函数\" class=\"headerlink\" title=\"一些常用函数\"></a>一些常用函数</h3><h4 id=\"查询一张表，而且要按照业务排序\"><a href=\"#查询一张表，而且要按照业务排序\" class=\"headerlink\" title=\"查询一张表，而且要按照业务排序\"></a><a href=\"https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html\">查询一张表，而且要按照业务排序</a></h4><p>  <code>rank() over(partition)</code></p>\n<h3 id=\"从右边对字符串使用指定的字符进行填充\"><a href=\"#从右边对字符串使用指定的字符进行填充\" class=\"headerlink\" title=\"从右边对字符串使用指定的字符进行填充 \"></a><a href=\"https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html\">从右边对字符串使用指定的字符进行填充 </a></h3><p><code>rpad(string,padded_length,[pad_string]) 　</code></p>\n<ul>\n<li> string 表示：被填充的字符串 　　</li>\n<li> padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　</li>\n<li>pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　</li>\n</ul>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a><a href=\"https://blog.csdn.net/qq_39443053/article/details/104044530\">存储过程</a></h2><h3 id=\"存储过程的定义\"><a href=\"#存储过程的定义\" class=\"headerlink\" title=\"存储过程的定义\"></a>存储过程的定义</h3><h4 id=\"无参数\"><a href=\"#无参数\" class=\"headerlink\" title=\"无参数\"></a>无参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure 存储过程名</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  ----------------------------</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有参数\"><a href=\"#有参数\" class=\"headerlink\" title=\"有参数\"></a>有参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure myDemo02(name in varchar,age in int)</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  dbms_output.put_line(&#x27;name=&#x27;||name||&#x27;, age=&#x27;||age);</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li>主键的创建有三种方法</li>\n<li>视图上不能完成的操作：在视图上定义新的基本表</li>\n<li>在sql中子查询是嵌入到另一个查询语句之中的查询语句</li>\n<li>减少外键能实现实体的完整性</li>\n<li>在全文的搜索的函数中，用于指定被搜索的列是match()</li>\n<li>中间连接不属于连接种类</li>\n<li>连接种类有：外连接、内连接、交叉连接</li>\n<li>union可以组合多条SQL查询语句，形成组合查询</li>\n<li>分组：grouped by     ？？？</li>\n<li>delete语句的使用DELETE FROM Person WHERE LastName = ‘Wilson’ </li>\n<li>返回当前日期的函数：curdate()</li>\n<li>数据模型：网状模型、层次模型、网络模型</li>\n<li>交叉连接又可以看成笛卡尔连接</li>\n<li>为数据表创建索引的目的是提高查询的检索性能</li>\n<li>SQL语言中的视图view是数据库的外模式</li>\n<li>查看数据库中的所有表：show tables</li>\n<li>start transaction 表示一个新的事物处理快的开始</li>\n<li>格式化日期的函数：DATE_FORMAT()</li>\n<li>SQL语言是非过程化语言</li>\n<li>在正则表达式中匹配任意一个字符的符号是’ . ‘</li>\n<li>DML语句就是数据库操作语句。包括update、 delete、select</li>\n<li>DDL数据库定义语言。包括create、alter、drop、truncate</li>\n<li>declimal是可变精度浮点值</li>\n<li>逻辑运算符优先级：not / and / or</li>\n<li><a href=\"https://www.yiibai.com/sql/sql-limit.html\">limit</a></li>\n</ol>\n<h2 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"单索引\"><a href=\"#单索引\" class=\"headerlink\" title=\"单索引\"></a>单索引</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  bitmap  index   索引名  <span class=\"keyword\">on</span> 表名( 变量名 <span class=\"keyword\">desc</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">desc</span> 表示降序排序。  bitmap 为 位图索引 正常可不加</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合索引\"><a href=\"#组合索引\" class=\"headerlink\" title=\"组合索引\"></a>组合索引</h4><pre><code>           <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> index 索引名 <span class=\"keyword\">on</span> 表名(列名<span class=\"number\">1</span>,列名<span class=\"number\">2</span>);              </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"查看索引-1\"><a href=\"#查看索引-1\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_indexes<span class=\"operator\">/</span>user_ind_columns ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除索引-1\"><a href=\"#删除索引-1\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index 索引名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同义词-1\"><a href=\"#同义词-1\" class=\"headerlink\" title=\"同义词\"></a>同义词</h2><h3 id=\"创建同义词\"><a href=\"#创建同义词\" class=\"headerlink\" title=\"创建同义词\"></a>创建同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> synonym 同义词 <span class=\"keyword\">for</span> 目标</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看同义词\"><a href=\"#查看同义词\" class=\"headerlink\" title=\"查看同义词\"></a>查看同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_synonyms;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_synonyms;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词-1\"><a href=\"#删除同义词-1\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> synonym 同义词;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列-1\"><a href=\"#序列-1\" class=\"headerlink\" title=\"序列\"></a>序列</h2><h3 id=\"创建序列-1\"><a href=\"#创建序列-1\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> sequence 序列名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> 开始数字</span><br><span class=\"line\"></span><br><span class=\"line\">increment <span class=\"keyword\">by</span> 增长数字</span><br><span class=\"line\"></span><br><span class=\"line\">minvalue 最小值</span><br><span class=\"line\"></span><br><span class=\"line\">maxvalue 最大值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">nocache</span><br></pre></td></tr></table></figure>\n\n<p><strong>详细说明：</strong></p>\n<p>start with 开始数字à从几开始</p>\n<p>increment by 增长à步长，每次增长几个数</p>\n<p>minvalue 最小值</p>\n<p>maxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大</p>\n<p>cycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长</p>\n<p>nocache 不设缓存</p>\n<h3 id=\"查看序列\"><a href=\"#查看序列\" class=\"headerlink\" title=\"查看序列\"></a>查看序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span>  <span class=\"keyword\">from</span> user_SEQUENCES、all_SEQUENCES;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"引用序列\"><a href=\"#引用序列\" class=\"headerlink\" title=\"引用序列\"></a>引用序列</h3><p>   xx.nextval      /  xx.curval </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> xx表 <span class=\"keyword\">values</span> (  )  ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>( DX1_06.nextval,<span class=\"string\">&#x27;ss&#x27;</span>,<span class=\"string\">&#x27;CN&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>,<span class=\"keyword\">NULL</span>,<span class=\"keyword\">NULL</span> );</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改序列-1\"><a href=\"#修改序列-1\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> sequence student_id <span class=\"comment\">-- 序列名 也可以更改</span></span><br><span class=\"line\">minvalue <span class=\"number\">1</span>   </span><br><span class=\"line\">maxvalue <span class=\"number\">99999</span>  </span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> <span class=\"number\">1</span>   </span><br><span class=\"line\">increment <span class=\"keyword\">by</span> <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"keyword\">cycle</span>    <span class=\"comment\">-- 到99999后，从头开始</span></span><br><span class=\"line\">nocache；  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> 用户名 identified <span class=\"keyword\">by</span> 密码;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  (c##)<span class=\"keyword\">user</span> username identified <span class=\"keyword\">by</span> password;    <span class=\"operator\">/</span><span class=\"operator\">/</span> 创建普通用户 需要添加 c##</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"锁定用户\"><a href=\"#锁定用户\" class=\"headerlink\" title=\"锁定用户\"></a>锁定用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT LOCK; 锁定</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT UNLOCK; 解锁</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> username ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新技能学习-如排序等\"><a href=\"#新技能学习-如排序等\" class=\"headerlink\" title=\"新技能学习 如排序等\"></a>新技能学习 如排序等</h2><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(DENSE_)<span class=\"built_in\">RANK</span>( ) <span class=\"keyword\">OVER</span> ([ query_partition_clause ] order_by_clause)</span><br><span class=\"line\"><span class=\"built_in\">rank</span>():跳跃式，两个第<span class=\"number\">1</span>，下一个就是第<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">dense_rank</span>():非跳跃式,两个第<span class=\"number\">1</span>,下一个是第<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分为：（1）连续或不连续：dense_rank,rank</span><br><span class=\"line\"></span><br><span class=\"line\">     （2）分区或不分区：使用partition，不使用partition</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PL-SQL\"><a href=\"#PL-SQL\" class=\"headerlink\" title=\"PL/SQL\"></a>PL/SQL</h1><h2 id=\"和-的差别\"><a href=\"#和-的差别\" class=\"headerlink\" title=\".和/ 的差别\"></a>.和/ 的差别</h2><p><strong>在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</strong><br>1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set serveroutput on 命令是打开COMMAND命令窗口中的输出流。</span><br><span class=\"line\"></span><br><span class=\"line\">不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>分隔符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>+</code>,<code>-</code>, <code>*</code>, <code>/</code></td>\n<td>加法，减法/负，乘法，除法</td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td>属性绑定</td>\n</tr>\n<tr>\n<td><code>&#39;</code></td>\n<td>字符串分隔符</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>组件选择符</td>\n</tr>\n<tr>\n<td><code>(,)</code></td>\n<td>表达式或列表分隔符</td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td>主机变量指示符</td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td>项目分隔符</td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td>引用标识符分隔符</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>@</code></td>\n<td>远程访问指示符</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td>声明或语句终止符</td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td>赋值运算符</td>\n</tr>\n<tr>\n<td><code>=&gt;</code></td>\n<td>关联运算符</td>\n</tr>\n<tr>\n<td>ΙΙ</td>\n<td>连接运算符</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>\n<td>标签分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>/*</code>, <code>*/</code></td>\n<td>多行注释分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td>单行注释指示符</td>\n</tr>\n<tr>\n<td><code>..</code></td>\n<td>范围运算符</td>\n</tr>\n<tr>\n<td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code>, <code>&#39;=</code>, <code>~=</code>, <code>^=</code></td>\n<td>不同版本的”不等于”运算符</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>3、put：将内容写到内存，<strong>等到put_line时一起输出</strong><br>4、put_line：不用多说了，输出字符</p>\n<h3 id=\"输出-语句\"><a href=\"#输出-语句\" class=\"headerlink\" title=\"输出 语句\"></a>输出 语句</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbms_output.put_line(  );   //  line 为换行</span><br><span class=\"line\"></span><br><span class=\"line\">dbms_output.put()  正常输出</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建过程\"><a href=\"#创建过程\" class=\"headerlink\" title=\"创建过程\"></a>创建过程</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">PROCEDURE</span> procedure_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">  <span class=\"operator\">&lt;</span> procedure_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> procedure_name;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ul>\n<li>使用EXECUTE关键字</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> 过程名;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>从PL/SQL块调用过程的名称</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"> 过程名;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">FUNCTION</span> function_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> return_datatype </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span> function_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> [function_name];</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>其中，</strong></p>\n<ul>\n<li><strong>function-name是指定要创建的函数的名称。</strong></li>\n<li><strong>[OR REPLACE]选项指示是否允许修改现有的函数。</strong></li>\n<li><strong>可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。</strong></li>\n<li><strong>函数必须包含一个返回(RETURN)语句。</strong></li>\n<li><strong>RETURN子句指定要从函数返回的数据类型。</strong></li>\n<li><strong>function-body包含可执行部分。</strong></li>\n<li><strong>使用AS关键字代替IS关键字，用来创建独立的函数。</strong></li>\n</ul>\n<h3 id=\"查询函数\"><a href=\"#查询函数\" class=\"headerlink\" title=\"查询函数\"></a>查询函数</h3><h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 游标是什么？</span><br><span class=\"line\">   用来存储多条查询数据的一种数据结构（<span class=\"string\">&#x27;结果集&#x27;</span>），</span><br><span class=\"line\">   它有一个 <span class=\"string\">&#x27;指针&#x27;</span>，从上往下移动（<span class=\"string\">&#x27;fetch&#x27;</span>），从而能够 <span class=\"string\">&#x27;遍历每条记录&#x27;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"number\">2.</span> 优缺点</span><br><span class=\"line\">   (<span class=\"number\">1</span>) 提高 <span class=\"keyword\">sql</span> <span class=\"string\">&#x27;执行效率&#x27;</span></span><br><span class=\"line\">   (<span class=\"number\">2</span>) 牺牲 <span class=\"string\">&#x27;内存&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"隐式游标\"><a href=\"#隐式游标\" class=\"headerlink\" title=\"隐式游标\"></a>隐式游标</h3><h3 id=\"显示游标\"><a href=\"#显示游标\" class=\"headerlink\" title=\"显示游标\"></a>显示游标</h3><p>使用显式游标包括以下步骤 -</p>\n<ul>\n<li>声明游标初始化内存</li>\n<li>打开游标分配内存</li>\n<li>从游标获取数据</li>\n<li>关闭游标以释放分配的内存</li>\n</ul>\n<p>声明游标</p>\n<p>声明游标使用名称和相关的SELECT语句来定义游标。 例如 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CURSOR</span> c_customers <span class=\"keyword\">IS</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span> id, name, address <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>打开游标</p>\n<p>打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">OPEN</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FETCH</span> c_customers <span class=\"keyword\">INTO</span> c_id, c_name, c_addr;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭游标</p>\n<p>关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CLOSE</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>Oracle错误代码</th>\n<th>SQLCODE</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ACCESS_INTO_NULL</code></td>\n<td>06530</td>\n<td><code>-6530</code></td>\n<td>当一个空对象被自动分配一个值时会引发它。</td>\n</tr>\n<tr>\n<td><code>CASE_NOT_FOUND</code></td>\n<td>06592</td>\n<td><code>-6592</code></td>\n<td>当没有选择<code>CASE</code>语句的<code>WHEN</code>子句中的任何选项时，会引发这个错误，并且没有<code>ELSE</code>子句。</td>\n</tr>\n<tr>\n<td><code>COLLECTION_IS_NULL</code></td>\n<td>06531</td>\n<td><code>-6531</code></td>\n<td>当程序尝试将<code>EXISTS</code>以外的集合方法应用于未初始化的嵌套表或<code>varray</code>时，或程序尝试将值分配给未初始化的嵌套表或<code>varray</code>的元素时，会引发此问题。</td>\n</tr>\n<tr>\n<td><code>DUP_VAL_ON_INDEX</code></td>\n<td>00001</td>\n<td><code>-1</code></td>\n<td>当尝试将重复值存储在具有唯一索引的列中时引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_CURSOR</code></td>\n<td>01001</td>\n<td><code>-1001</code></td>\n<td>当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_NUMBER</code></td>\n<td>01722</td>\n<td><code>-1722</code></td>\n<td>当字符串转换为数字时失败，因为字符串不代表有效的数字。</td>\n</tr>\n<tr>\n<td><code>LOGIN_DENIED</code></td>\n<td>01017</td>\n<td><code>-1017</code></td>\n<td>当程序尝试使用无效的用户名或密码登录到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>NO_DATA_FOUND</code></td>\n<td>01403</td>\n<td><code>+100</code></td>\n<td>当<code>SELECT INTO</code>语句不返回任何行时会引发它。</td>\n</tr>\n<tr>\n<td><code>NOT_LOGGED_ON</code></td>\n<td>01012</td>\n<td><code>-1012</code></td>\n<td>当数据库调用没有连接到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>PROGRAM_ERROR</code></td>\n<td>06501</td>\n<td><code>-6501</code></td>\n<td>当PL/SQL遇到内部问题时会引发。</td>\n</tr>\n<tr>\n<td><code>ROWTYPE_MISMATCH</code></td>\n<td>06504</td>\n<td><code>-6504</code></td>\n<td>当游标在具有不兼容数据类型的变量中获取值时引发。</td>\n</tr>\n<tr>\n<td><code>SELF_IS_NULL</code></td>\n<td>30625</td>\n<td><code>-30625</code></td>\n<td>当调用成员方法时引发，但对象类型的实例未初始化。</td>\n</tr>\n<tr>\n<td><code>STORAGE_ERROR</code></td>\n<td>06500</td>\n<td><code>-6500</code></td>\n<td>当PL/SQL用尽内存或内存已损坏时引发。</td>\n</tr>\n<tr>\n<td><code>TOO_MANY_ROWS</code></td>\n<td>01422</td>\n<td><code>-1422</code></td>\n<td>当<code>SELECT INTO</code>语句返回多行时引发。</td>\n</tr>\n<tr>\n<td><code>VALUE_ERROR</code></td>\n<td>06502</td>\n<td><code>-6502</code></td>\n<td>当发生算术，转换，截断或者<code>sizeconstraint</code>错误时引发。</td>\n</tr>\n<tr>\n<td><code>ZERO_DIVIDE</code></td>\n<td>01476</td>\n<td><code>1476</code></td>\n<td>当尝试将数字除以零时引发。</td>\n</tr>\n</tbody></table>\n<h2 id=\"异常处理的语法\"><a href=\"#异常处理的语法\" class=\"headerlink\" title=\"异常处理的语法\"></a>异常处理的语法</h2><p>异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN…THEN处理，如下语法所示 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>declarations section<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>executable command(s)<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>exception handling goes here <span class=\"operator\">&gt;</span> </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception1 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception1<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception2  <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception2<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception3 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\">   ........ </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> SIZE <span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   c_id customers.id<span class=\"operator\">%</span>type :<span class=\"operator\">=</span> <span class=\"number\">100</span>; </span><br><span class=\"line\">   c_name  customerS.name<span class=\"operator\">%</span>type; </span><br><span class=\"line\">   c_addr customers.address<span class=\"operator\">%</span>type; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span>  name, address <span class=\"keyword\">INTO</span>  c_name, c_addr </span><br><span class=\"line\">   <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\">   <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> c_id;  </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;姓名: &#x27;</span><span class=\"operator\">||</span>  c_name); </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;地址: &#x27;</span> <span class=\"operator\">||</span> c_addr); </span><br><span class=\"line\"></span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> no_data_found <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;没有找到符合条件的客户信息!&#x27;</span>); </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;Error!&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">END</span>; </span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"填充默认值。\"><a href=\"#填充默认值。\" class=\"headerlink\" title=\"填充默认值。\"></a>填充默认值。</h2><p>NVL( xx  ,  0 )  默认为0      zero</p>\n<p><strong>语法</strong></p>\n<p><strong>NVL(eExpression1, eExpression2)</strong></p>\n<p><strong>参数</strong><br><strong>eExpression1, eExpression2</strong></p>\n<p><strong>如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。</strong></p>\n<h2 id=\"删除-delete\"><a href=\"#删除-delete\" class=\"headerlink\" title=\"删除 delete\"></a>删除 delete</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> xx  <span class=\"keyword\">where</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入-insert\"><a href=\"#插入-insert\" class=\"headerlink\" title=\"插入 insert\"></a>插入 insert</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 <span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span>(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>;  （表<span class=\"number\">2</span>必须存在，列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......必须存在）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表<span class=\"number\">2</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>; （表<span class=\"number\">2</span>不存在，插入时会自动创建表名<span class=\"number\">2</span>）</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><h2 id=\"old-new\"><a href=\"#old-new\" class=\"headerlink\" title=\"old / new\"></a>old / new</h2><p>1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png\" alt=\"img\"></p>\n<p>2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png\" alt=\"img\"></p>\n<p>3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png\" alt=\"img\"></p>\n<h2 id=\"RAISE-APPLICATION-ERROR\"><a href=\"#RAISE-APPLICATION-ERROR\" class=\"headerlink\" title=\"RAISE_APPLICATION_ERROR\"></a>RAISE_APPLICATION_ERROR</h2><p>可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理<br>我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。<br>其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)</p>\n","site":{"data":{}},"length":8729,"excerpt":"","more":"<h1 id=\"Oracle知识点总结\"><a href=\"#Oracle知识点总结\" class=\"headerlink\" title=\"Oracle知识点总结\"></a>Oracle知识点总结</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a><a href=\"https://www.cnblogs.com/wishyouhappy/p/3681771.html\">索引</a></h2><h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引</span><br><span class=\"line\">ON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引</span><br><span class=\"line\">[ASC|DESC],…] | [express])</span><br><span class=\"line\">[TABLESPACE tablespace_name]</span><br><span class=\"line\">[PCTFREE n1]                                 --指定索引在数据块中空闲空间</span><br><span class=\"line\">[STORAGE (INITIAL n2)]</span><br><span class=\"line\">[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用</span><br><span class=\"line\">[NOLINE]</span><br><span class=\"line\">[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。</span><br><span class=\"line\">create index DX1_02 on student1(注册日期 desc);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop index index_sno;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name =&#x27;tablename&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"> -- eg:    </span><br><span class=\"line\">create index index_sno on student(&#x27;name&#x27;);</span><br><span class=\"line\">select * from all_indexes where table_name=&#x27;student&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"同义词\"><a href=\"#同义词\" class=\"headerlink\" title=\"同义词\"></a><a href=\"https://www.cnblogs.com/moonsoft/p/12364941.html\">同义词</a></h2><p>Oracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似</p>\n<h3 id=\"创建公共同义词\"><a href=\"#创建公共同义词\" class=\"headerlink\" title=\"创建公共同义词\"></a>创建公共同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create public synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建普通的同义词\"><a href=\"#创建普通的同义词\" class=\"headerlink\" title=\"创建普通的同义词\"></a>创建普通的同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词\"><a href=\"#删除同义词\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop synonym synonym_name;</span><br></pre></td></tr></table></figure>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a><a href=\"https://www.cnblogs.com/CandiceW/p/10062413.html\">序列</a></h2><p>序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。</p>\n<h3 id=\"创建序列\"><a href=\"#创建序列\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><p>创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　CREATE SEQUENCE 序列名</span><br><span class=\"line\">　　[INCREMENT BY n]</span><br><span class=\"line\">　　[START WITH n]</span><br><span class=\"line\">　　[&#123;MAXVALUE/ MINVALUE n| NOMAXVALUE&#125;]</span><br><span class=\"line\">　　[&#123;CYCLE|NOCYCLE&#125;]</span><br><span class=\"line\">　　[&#123;CACHE n| NOCACHE&#125;];</span><br></pre></td></tr></table></figure>\n<h4 id=\"其中：\"><a href=\"#其中：\" class=\"headerlink\" title=\"其中：\"></a>其中：</h4><ol>\n<li><blockquote>\n<p>INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>START WITH 定义序列的初始值(即产生的第一个值)，默认为1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。</p>\n</blockquote>\n</li>\n</ol>\n<p> 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence DX1_06 increment by 10 start with 50 nocache;</span><br></pre></td></tr></table></figure>\n\n<p>创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改序列\"><a href=\"#修改序列\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><p> <strong>alter</strong></p>\n<p>修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">### 删除序列</span><br><span class=\"line\">**drop**</span><br><span class=\"line\"></span><br><span class=\"line\">删除序列seq_1。</span><br><span class=\"line\">```plsql</span><br><span class=\"line\">drop sequence seq_1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些常用函数\"><a href=\"#一些常用函数\" class=\"headerlink\" title=\"一些常用函数\"></a>一些常用函数</h3><h4 id=\"查询一张表，而且要按照业务排序\"><a href=\"#查询一张表，而且要按照业务排序\" class=\"headerlink\" title=\"查询一张表，而且要按照业务排序\"></a><a href=\"https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html\">查询一张表，而且要按照业务排序</a></h4><p>  <code>rank() over(partition)</code></p>\n<h3 id=\"从右边对字符串使用指定的字符进行填充\"><a href=\"#从右边对字符串使用指定的字符进行填充\" class=\"headerlink\" title=\"从右边对字符串使用指定的字符进行填充 \"></a><a href=\"https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html\">从右边对字符串使用指定的字符进行填充 </a></h3><p><code>rpad(string,padded_length,[pad_string]) 　</code></p>\n<ul>\n<li> string 表示：被填充的字符串 　　</li>\n<li> padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　</li>\n<li>pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　</li>\n</ul>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a><a href=\"https://blog.csdn.net/qq_39443053/article/details/104044530\">存储过程</a></h2><h3 id=\"存储过程的定义\"><a href=\"#存储过程的定义\" class=\"headerlink\" title=\"存储过程的定义\"></a>存储过程的定义</h3><h4 id=\"无参数\"><a href=\"#无参数\" class=\"headerlink\" title=\"无参数\"></a>无参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure 存储过程名</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  ----------------------------</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有参数\"><a href=\"#有参数\" class=\"headerlink\" title=\"有参数\"></a>有参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure myDemo02(name in varchar,age in int)</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  dbms_output.put_line(&#x27;name=&#x27;||name||&#x27;, age=&#x27;||age);</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li>主键的创建有三种方法</li>\n<li>视图上不能完成的操作：在视图上定义新的基本表</li>\n<li>在sql中子查询是嵌入到另一个查询语句之中的查询语句</li>\n<li>减少外键能实现实体的完整性</li>\n<li>在全文的搜索的函数中，用于指定被搜索的列是match()</li>\n<li>中间连接不属于连接种类</li>\n<li>连接种类有：外连接、内连接、交叉连接</li>\n<li>union可以组合多条SQL查询语句，形成组合查询</li>\n<li>分组：grouped by     ？？？</li>\n<li>delete语句的使用DELETE FROM Person WHERE LastName = ‘Wilson’ </li>\n<li>返回当前日期的函数：curdate()</li>\n<li>数据模型：网状模型、层次模型、网络模型</li>\n<li>交叉连接又可以看成笛卡尔连接</li>\n<li>为数据表创建索引的目的是提高查询的检索性能</li>\n<li>SQL语言中的视图view是数据库的外模式</li>\n<li>查看数据库中的所有表：show tables</li>\n<li>start transaction 表示一个新的事物处理快的开始</li>\n<li>格式化日期的函数：DATE_FORMAT()</li>\n<li>SQL语言是非过程化语言</li>\n<li>在正则表达式中匹配任意一个字符的符号是’ . ‘</li>\n<li>DML语句就是数据库操作语句。包括update、 delete、select</li>\n<li>DDL数据库定义语言。包括create、alter、drop、truncate</li>\n<li>declimal是可变精度浮点值</li>\n<li>逻辑运算符优先级：not / and / or</li>\n<li><a href=\"https://www.yiibai.com/sql/sql-limit.html\">limit</a></li>\n</ol>\n<h2 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"单索引\"><a href=\"#单索引\" class=\"headerlink\" title=\"单索引\"></a>单索引</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  bitmap  index   索引名  <span class=\"keyword\">on</span> 表名( 变量名 <span class=\"keyword\">desc</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">desc</span> 表示降序排序。  bitmap 为 位图索引 正常可不加</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合索引\"><a href=\"#组合索引\" class=\"headerlink\" title=\"组合索引\"></a>组合索引</h4><pre><code>           <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> index 索引名 <span class=\"keyword\">on</span> 表名(列名<span class=\"number\">1</span>,列名<span class=\"number\">2</span>);              </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"查看索引-1\"><a href=\"#查看索引-1\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_indexes<span class=\"operator\">/</span>user_ind_columns ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除索引-1\"><a href=\"#删除索引-1\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index 索引名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同义词-1\"><a href=\"#同义词-1\" class=\"headerlink\" title=\"同义词\"></a>同义词</h2><h3 id=\"创建同义词\"><a href=\"#创建同义词\" class=\"headerlink\" title=\"创建同义词\"></a>创建同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> synonym 同义词 <span class=\"keyword\">for</span> 目标</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看同义词\"><a href=\"#查看同义词\" class=\"headerlink\" title=\"查看同义词\"></a>查看同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_synonyms;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_synonyms;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词-1\"><a href=\"#删除同义词-1\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> synonym 同义词;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列-1\"><a href=\"#序列-1\" class=\"headerlink\" title=\"序列\"></a>序列</h2><h3 id=\"创建序列-1\"><a href=\"#创建序列-1\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> sequence 序列名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> 开始数字</span><br><span class=\"line\"></span><br><span class=\"line\">increment <span class=\"keyword\">by</span> 增长数字</span><br><span class=\"line\"></span><br><span class=\"line\">minvalue 最小值</span><br><span class=\"line\"></span><br><span class=\"line\">maxvalue 最大值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">nocache</span><br></pre></td></tr></table></figure>\n\n<p><strong>详细说明：</strong></p>\n<p>start with 开始数字à从几开始</p>\n<p>increment by 增长à步长，每次增长几个数</p>\n<p>minvalue 最小值</p>\n<p>maxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大</p>\n<p>cycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长</p>\n<p>nocache 不设缓存</p>\n<h3 id=\"查看序列\"><a href=\"#查看序列\" class=\"headerlink\" title=\"查看序列\"></a>查看序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span>  <span class=\"keyword\">from</span> user_SEQUENCES、all_SEQUENCES;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"引用序列\"><a href=\"#引用序列\" class=\"headerlink\" title=\"引用序列\"></a>引用序列</h3><p>   xx.nextval      /  xx.curval </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> xx表 <span class=\"keyword\">values</span> (  )  ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>( DX1_06.nextval,<span class=\"string\">&#x27;ss&#x27;</span>,<span class=\"string\">&#x27;CN&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>,<span class=\"keyword\">NULL</span>,<span class=\"keyword\">NULL</span> );</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改序列-1\"><a href=\"#修改序列-1\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> sequence student_id <span class=\"comment\">-- 序列名 也可以更改</span></span><br><span class=\"line\">minvalue <span class=\"number\">1</span>   </span><br><span class=\"line\">maxvalue <span class=\"number\">99999</span>  </span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> <span class=\"number\">1</span>   </span><br><span class=\"line\">increment <span class=\"keyword\">by</span> <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"keyword\">cycle</span>    <span class=\"comment\">-- 到99999后，从头开始</span></span><br><span class=\"line\">nocache；  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> 用户名 identified <span class=\"keyword\">by</span> 密码;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  (c##)<span class=\"keyword\">user</span> username identified <span class=\"keyword\">by</span> password;    <span class=\"operator\">/</span><span class=\"operator\">/</span> 创建普通用户 需要添加 c##</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"锁定用户\"><a href=\"#锁定用户\" class=\"headerlink\" title=\"锁定用户\"></a>锁定用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT LOCK; 锁定</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT UNLOCK; 解锁</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> username ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新技能学习-如排序等\"><a href=\"#新技能学习-如排序等\" class=\"headerlink\" title=\"新技能学习 如排序等\"></a>新技能学习 如排序等</h2><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(DENSE_)<span class=\"built_in\">RANK</span>( ) <span class=\"keyword\">OVER</span> ([ query_partition_clause ] order_by_clause)</span><br><span class=\"line\"><span class=\"built_in\">rank</span>():跳跃式，两个第<span class=\"number\">1</span>，下一个就是第<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">dense_rank</span>():非跳跃式,两个第<span class=\"number\">1</span>,下一个是第<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分为：（1）连续或不连续：dense_rank,rank</span><br><span class=\"line\"></span><br><span class=\"line\">     （2）分区或不分区：使用partition，不使用partition</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PL-SQL\"><a href=\"#PL-SQL\" class=\"headerlink\" title=\"PL/SQL\"></a>PL/SQL</h1><h2 id=\"和-的差别\"><a href=\"#和-的差别\" class=\"headerlink\" title=\".和/ 的差别\"></a>.和/ 的差别</h2><p><strong>在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</strong><br>1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set serveroutput on 命令是打开COMMAND命令窗口中的输出流。</span><br><span class=\"line\"></span><br><span class=\"line\">不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>分隔符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>+</code>,<code>-</code>, <code>*</code>, <code>/</code></td>\n<td>加法，减法/负，乘法，除法</td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td>属性绑定</td>\n</tr>\n<tr>\n<td><code>&#39;</code></td>\n<td>字符串分隔符</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>组件选择符</td>\n</tr>\n<tr>\n<td><code>(,)</code></td>\n<td>表达式或列表分隔符</td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td>主机变量指示符</td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td>项目分隔符</td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td>引用标识符分隔符</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>@</code></td>\n<td>远程访问指示符</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td>声明或语句终止符</td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td>赋值运算符</td>\n</tr>\n<tr>\n<td><code>=&gt;</code></td>\n<td>关联运算符</td>\n</tr>\n<tr>\n<td>ΙΙ</td>\n<td>连接运算符</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>\n<td>标签分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>/*</code>, <code>*/</code></td>\n<td>多行注释分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td>单行注释指示符</td>\n</tr>\n<tr>\n<td><code>..</code></td>\n<td>范围运算符</td>\n</tr>\n<tr>\n<td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code>, <code>&#39;=</code>, <code>~=</code>, <code>^=</code></td>\n<td>不同版本的”不等于”运算符</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>3、put：将内容写到内存，<strong>等到put_line时一起输出</strong><br>4、put_line：不用多说了，输出字符</p>\n<h3 id=\"输出-语句\"><a href=\"#输出-语句\" class=\"headerlink\" title=\"输出 语句\"></a>输出 语句</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbms_output.put_line(  );   //  line 为换行</span><br><span class=\"line\"></span><br><span class=\"line\">dbms_output.put()  正常输出</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建过程\"><a href=\"#创建过程\" class=\"headerlink\" title=\"创建过程\"></a>创建过程</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">PROCEDURE</span> procedure_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">  <span class=\"operator\">&lt;</span> procedure_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> procedure_name;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ul>\n<li>使用EXECUTE关键字</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> 过程名;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>从PL/SQL块调用过程的名称</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"> 过程名;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">FUNCTION</span> function_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> return_datatype </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span> function_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> [function_name];</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>其中，</strong></p>\n<ul>\n<li><strong>function-name是指定要创建的函数的名称。</strong></li>\n<li><strong>[OR REPLACE]选项指示是否允许修改现有的函数。</strong></li>\n<li><strong>可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。</strong></li>\n<li><strong>函数必须包含一个返回(RETURN)语句。</strong></li>\n<li><strong>RETURN子句指定要从函数返回的数据类型。</strong></li>\n<li><strong>function-body包含可执行部分。</strong></li>\n<li><strong>使用AS关键字代替IS关键字，用来创建独立的函数。</strong></li>\n</ul>\n<h3 id=\"查询函数\"><a href=\"#查询函数\" class=\"headerlink\" title=\"查询函数\"></a>查询函数</h3><h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 游标是什么？</span><br><span class=\"line\">   用来存储多条查询数据的一种数据结构（<span class=\"string\">&#x27;结果集&#x27;</span>），</span><br><span class=\"line\">   它有一个 <span class=\"string\">&#x27;指针&#x27;</span>，从上往下移动（<span class=\"string\">&#x27;fetch&#x27;</span>），从而能够 <span class=\"string\">&#x27;遍历每条记录&#x27;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"number\">2.</span> 优缺点</span><br><span class=\"line\">   (<span class=\"number\">1</span>) 提高 <span class=\"keyword\">sql</span> <span class=\"string\">&#x27;执行效率&#x27;</span></span><br><span class=\"line\">   (<span class=\"number\">2</span>) 牺牲 <span class=\"string\">&#x27;内存&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"隐式游标\"><a href=\"#隐式游标\" class=\"headerlink\" title=\"隐式游标\"></a>隐式游标</h3><h3 id=\"显示游标\"><a href=\"#显示游标\" class=\"headerlink\" title=\"显示游标\"></a>显示游标</h3><p>使用显式游标包括以下步骤 -</p>\n<ul>\n<li>声明游标初始化内存</li>\n<li>打开游标分配内存</li>\n<li>从游标获取数据</li>\n<li>关闭游标以释放分配的内存</li>\n</ul>\n<p>声明游标</p>\n<p>声明游标使用名称和相关的SELECT语句来定义游标。 例如 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CURSOR</span> c_customers <span class=\"keyword\">IS</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span> id, name, address <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>打开游标</p>\n<p>打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">OPEN</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FETCH</span> c_customers <span class=\"keyword\">INTO</span> c_id, c_name, c_addr;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭游标</p>\n<p>关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CLOSE</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>Oracle错误代码</th>\n<th>SQLCODE</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ACCESS_INTO_NULL</code></td>\n<td>06530</td>\n<td><code>-6530</code></td>\n<td>当一个空对象被自动分配一个值时会引发它。</td>\n</tr>\n<tr>\n<td><code>CASE_NOT_FOUND</code></td>\n<td>06592</td>\n<td><code>-6592</code></td>\n<td>当没有选择<code>CASE</code>语句的<code>WHEN</code>子句中的任何选项时，会引发这个错误，并且没有<code>ELSE</code>子句。</td>\n</tr>\n<tr>\n<td><code>COLLECTION_IS_NULL</code></td>\n<td>06531</td>\n<td><code>-6531</code></td>\n<td>当程序尝试将<code>EXISTS</code>以外的集合方法应用于未初始化的嵌套表或<code>varray</code>时，或程序尝试将值分配给未初始化的嵌套表或<code>varray</code>的元素时，会引发此问题。</td>\n</tr>\n<tr>\n<td><code>DUP_VAL_ON_INDEX</code></td>\n<td>00001</td>\n<td><code>-1</code></td>\n<td>当尝试将重复值存储在具有唯一索引的列中时引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_CURSOR</code></td>\n<td>01001</td>\n<td><code>-1001</code></td>\n<td>当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_NUMBER</code></td>\n<td>01722</td>\n<td><code>-1722</code></td>\n<td>当字符串转换为数字时失败，因为字符串不代表有效的数字。</td>\n</tr>\n<tr>\n<td><code>LOGIN_DENIED</code></td>\n<td>01017</td>\n<td><code>-1017</code></td>\n<td>当程序尝试使用无效的用户名或密码登录到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>NO_DATA_FOUND</code></td>\n<td>01403</td>\n<td><code>+100</code></td>\n<td>当<code>SELECT INTO</code>语句不返回任何行时会引发它。</td>\n</tr>\n<tr>\n<td><code>NOT_LOGGED_ON</code></td>\n<td>01012</td>\n<td><code>-1012</code></td>\n<td>当数据库调用没有连接到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>PROGRAM_ERROR</code></td>\n<td>06501</td>\n<td><code>-6501</code></td>\n<td>当PL/SQL遇到内部问题时会引发。</td>\n</tr>\n<tr>\n<td><code>ROWTYPE_MISMATCH</code></td>\n<td>06504</td>\n<td><code>-6504</code></td>\n<td>当游标在具有不兼容数据类型的变量中获取值时引发。</td>\n</tr>\n<tr>\n<td><code>SELF_IS_NULL</code></td>\n<td>30625</td>\n<td><code>-30625</code></td>\n<td>当调用成员方法时引发，但对象类型的实例未初始化。</td>\n</tr>\n<tr>\n<td><code>STORAGE_ERROR</code></td>\n<td>06500</td>\n<td><code>-6500</code></td>\n<td>当PL/SQL用尽内存或内存已损坏时引发。</td>\n</tr>\n<tr>\n<td><code>TOO_MANY_ROWS</code></td>\n<td>01422</td>\n<td><code>-1422</code></td>\n<td>当<code>SELECT INTO</code>语句返回多行时引发。</td>\n</tr>\n<tr>\n<td><code>VALUE_ERROR</code></td>\n<td>06502</td>\n<td><code>-6502</code></td>\n<td>当发生算术，转换，截断或者<code>sizeconstraint</code>错误时引发。</td>\n</tr>\n<tr>\n<td><code>ZERO_DIVIDE</code></td>\n<td>01476</td>\n<td><code>1476</code></td>\n<td>当尝试将数字除以零时引发。</td>\n</tr>\n</tbody></table>\n<h2 id=\"异常处理的语法\"><a href=\"#异常处理的语法\" class=\"headerlink\" title=\"异常处理的语法\"></a>异常处理的语法</h2><p>异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN…THEN处理，如下语法所示 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>declarations section<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>executable command(s)<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>exception handling goes here <span class=\"operator\">&gt;</span> </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception1 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception1<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception2  <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception2<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception3 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\">   ........ </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> SIZE <span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   c_id customers.id<span class=\"operator\">%</span>type :<span class=\"operator\">=</span> <span class=\"number\">100</span>; </span><br><span class=\"line\">   c_name  customerS.name<span class=\"operator\">%</span>type; </span><br><span class=\"line\">   c_addr customers.address<span class=\"operator\">%</span>type; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span>  name, address <span class=\"keyword\">INTO</span>  c_name, c_addr </span><br><span class=\"line\">   <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\">   <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> c_id;  </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;姓名: &#x27;</span><span class=\"operator\">||</span>  c_name); </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;地址: &#x27;</span> <span class=\"operator\">||</span> c_addr); </span><br><span class=\"line\"></span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> no_data_found <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;没有找到符合条件的客户信息!&#x27;</span>); </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;Error!&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">END</span>; </span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"填充默认值。\"><a href=\"#填充默认值。\" class=\"headerlink\" title=\"填充默认值。\"></a>填充默认值。</h2><p>NVL( xx  ,  0 )  默认为0      zero</p>\n<p><strong>语法</strong></p>\n<p><strong>NVL(eExpression1, eExpression2)</strong></p>\n<p><strong>参数</strong><br><strong>eExpression1, eExpression2</strong></p>\n<p><strong>如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。</strong></p>\n<h2 id=\"删除-delete\"><a href=\"#删除-delete\" class=\"headerlink\" title=\"删除 delete\"></a>删除 delete</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> xx  <span class=\"keyword\">where</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入-insert\"><a href=\"#插入-insert\" class=\"headerlink\" title=\"插入 insert\"></a>插入 insert</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 <span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span>(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>;  （表<span class=\"number\">2</span>必须存在，列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......必须存在）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表<span class=\"number\">2</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>; （表<span class=\"number\">2</span>不存在，插入时会自动创建表名<span class=\"number\">2</span>）</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><h2 id=\"old-new\"><a href=\"#old-new\" class=\"headerlink\" title=\"old / new\"></a>old / new</h2><p>1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png\" alt=\"img\"></p>\n<p>2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png\" alt=\"img\"></p>\n<p>3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png\" alt=\"img\"></p>\n<h2 id=\"RAISE-APPLICATION-ERROR\"><a href=\"#RAISE-APPLICATION-ERROR\" class=\"headerlink\" title=\"RAISE_APPLICATION_ERROR\"></a>RAISE_APPLICATION_ERROR</h2><p>可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理<br>我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。<br>其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)</p>\n"},{"title":"Linux期末知识点总结","date":"2021-12-30T10:50:45.000Z","description":"Linux知识点总结","_content":"\n\n# Linux知识点总结\n\n## Linux概述\n\n### Linux系统的优缺点\n\n1. 优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；\n2. 缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。\n\n### Linux系统的特点\n\n1. 一切皆文件\n2. 完全兼容可移植操作系统接口POSIX1.0标准\n3. 多用户、多任务\n4. 完全免费\n\n### Linux的含义\n\nLinux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。\n通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。\nLinux是类UNIX操作系统。\n\n### Linux的诞生、发展和成长过程依赖五个重要支柱\n\n1. UXIX操作系统\n2. MINIX操作系统\n3. GNU计划\n4. POSIX标准\n5. Internet\n\n\n### Linux内核的组成\n\n1. 内存管理器：对内存资源的访问控制。\n2. 进程管理器：对CPU的访问控制。\n3. 设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。\n4. 虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。\n5. 网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。\n\n### shell 分为\n\n1. GLI命令行界面\n2. GUI图用户界面\n\n### Linux文件系统\n\nLinux一切皆文件；\n文件系统是指文件存放在磁盘等存储设备上的组织方法。\n\n## Linux基本操作\n\n### 基本命令\n\n**命令格式**： command [options] [arguments]  ，命令名：[选项]：[参数]\n\n### 获取帮助\n\n```shell \nman [option] filename\n```\n\n```shell\n--help |more\n```\n### 日志\n\nLinux 日志文件存放在 /var/log目录下\n\n日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。\n\n## 文件系统和文件管理\n\n### Linux文件类型\n\n1. 普通文件\n2. 目录文件\n3. 链接文件\n4. 设备文件\n5. 管道文件\n\n\n#### 普通文件\n\n- 普通文件是指以**字节**为单位的**数据流**类型文件，其特点是不包含文件系统的结构信息。\n- 通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。\n- 按其内部结构分为文本文件和二进制文件。\n\n#### 目录文件\n\n- 目录文件不存放常规数据，它是用来**组织**、**访问**其他文件的，是内核组织文件系统的基本节点。\n- 目录文件可以包含下一级目录文件或普通文件。\n- 目录文件是一种文件，是Linux文件中的一种\n\n\n#### 链接文件\n\n- 链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。\n- 根据链接文件的不同，分为**硬链接**（Hard Link）文件和**符号链接**（Symbolic Link，又称为软链接）文件\n\n\n#### 设备文件\n- 设备文件是Linux中最特殊的文件，可以方便地访问外部设备。\n- Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。\n- 设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。\n- 根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。\n\n#### 管道文件\n- 管道文件是一种很特殊的文件，主要用于不同进程的信息传递。\n- 当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。\n\n### 文件类型判断\n```shell\nfile [option] filename\n```\n\n### 查看文件的详细属性\n\n使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等\n\n```shell\nstate [option] filename\n```\n\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 绝对路径和相对路径\n\n- 绝对路径是以根目录“/”开始，递归每级目录直到目标路径。\n- 相对路径是以当前目录为起点，到达目标的路径。\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -a\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n\nfind:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。\n\n```shell\nfind [pathname] [option] filename\n```\n\n\n### linux 文件链接\n\n#### 硬链接\n\n- 默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。\n- 创建一个硬链接时，也为这个文件创建了一个额外的目录条目。\n\n##### 硬链接的局限性\n（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。\n（2）硬链接无法引用目录。\n\n当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了\n\n#### 符号链接（软链接）\n\n符号链接指向的文件与符号链接自身几乎没有区别。\n\n### 文件时间\n\n在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。\n\n\n#### 1.访问时间（Access time）\n\n对文件内容进行一次读操作时间。\n\n#### 2.修改时间（Change time）\n\n文件内容被最后一次修改的时间。\n\nls -l 命令显示出来的文件时间就是这个时间\n\n#### 3.状态时间（Modify time）\n\n当文件的状态被改变时，状态时间就会改变\n\n## Linux用户管理\n\n超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。\n\nLinux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID\n\nid命令可以查看当前用户登录信息。\n- UID(User Identification)为用户的ID。\n- GID(Group Identification)为用户所属组的ID。\n- groups为用户属于的所有组的ID。\n\n\nps aux | less命令查看进程\n\n\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n#### 查看用户的分组\n1. groups命令查看。命令：\n```shell\ngroups\ngroups user1 user2\n```\n2. 查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。\n3. id命令法，只执行id命令就可以查看。命令：\n```shell\nid\nid user2\n```\n\n### 和用户相关的一些系统文件\n1. /etc/passwd文件保存用户信息。\n2. /etc/shadow文件保存加密的用户密码。\n3. /etc/group文件保存用户组信息。\n4. /etc/login.defs配置文件。\n\n**su root**可以返回root \n\n\n## 文件权限\n\n权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。\n\n### U G O\n\nU: owner为属主，文件所有者。\nG：group为属组，同组用户。\nO：other为其他用户。\n\n### UGO方式每组的3个字符具体意义如下：\n\nr:read，数字设定值为4\nw:write,数字设定值为2\nx:execute,数字设定值为1\n\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\n\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n\n## linux编程基础\n\nmake可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，\n\nmake通过makefile文件描述的内容自动维护编译工作。\n\n\n\n\n## shell编程\n\nShell脚本是一个包含一系列命令的文件。 \nShell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。\n\n### 用Shell脚本的原因：\n1. 效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 \n2. 简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。\n3. 可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。\n4. 开发容易：可以在短时间内完成一个功能强大又好用的脚本。\n\n### Shell分类：\n1. 用于用户交互接口的Shell称为交互式Shell。\n2. 作为命令解析器的Shell称为非交互式Shell。\n\n### ```#!/bin/bash```\n脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，\n\n\nShell的注释以“#”开头，注释的内容不会执行。\n\n\n给文件helloxiangtian.sh增加可执行权限\n```shell\nchomd +x helloxiangtan.sh\n```\n\n### Shell变量命名规则：\n\n变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 \n\n### shell变量分类\n\nShell变量分为自定义变量、环境变量、位置变量和预定义变量。\n\n根据工作要求临时定义的变量称为自定义变量。\n环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。\n从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。\n预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$\\*等。\n\nShell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。\n\n#### 自定义变量\n| | |\n|:---:|:---:|\n|定义自定义变量| 变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。|\n|使用自定义变量| $变量名|\n|查看自定义变量| echo $变量名 set（所有变量：自定义变量和环境变量）|\n|取消自定义变量| unset 变量名|\n|自定义变量作用范围|   仅在当前shell中有效|\n\n#### 环境变量\n\n在各种编程语言中会提及全局变量概念。\n全局变量可以在程序的任何地方使用。\n在Shell编程中该功能由环境变量实现。\n系统中的所有进程都可以使用环境变量。\n环境变量与全局变量区别：\n子进程对环境变量的修改不会传递到父进程中。\n\n|||\n|:---:|:---:|\n定义环境变量  |使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。|\n|使用环境变量  |$变量名或$｛变量名｝|\n|查看环境变量  |echo $变量名 或env，如env |grep back_dir|\n|取消环境变量  |unset 变量名|\n|环境变量作用范围   | 仅在当前shell和子shell中有效|\n\n#### 位置变量\n\n位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。\n执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。\n\n```shell\n$0代表命令本身，$1-$9代表接收的第1~9个参数，$10以上需要用{}括起来，如${20}代表接收的第20个参数。\n```\n\n#### 预定义变量\n\n预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。\n\n|预定义变量 |  说明|\n|:---:|:---|\n|$0|  脚本名|\n|$*|  所有的参数|\n|$@|  所有的参数|\n|$#|  参数的个数|\n|$$|  当前进程的PID|\n|$!|  上一个后台进程的PID|\n|$?|  上一个命令的返回值，0表示成功。|\n\n\n### 变量的操作\n变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。\n\n变量创建好后，可以用$变量名的方式获取变量的值。\n\n\n可以使用$符号获取变量的值。\n\n用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。\n\n#### 变量的删除\n\n|格式 | 说明|\n|:---:|:---:|\n|${变量名#关键字符} |变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名##关键字符}|    变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。|\n|${变量名%关键字符} |变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名%%关键字符}|    变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。|\n\n#### 变量的替换\n\n|格式  |说明|\n|:---:|：---：|\n|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|\n|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|\n\n#### 变量的替代\n\n```shell\n${变量名-新的变量名}\n```\n\n\n在Shell中，变量值的类型默认是字符串，不直接进行运算。\n\n用于整数运算的方法有expr、(())和$[]。\n\n\n### 运算\n```shell\nexpr expression\n例：\nn1 + n2\nexpr $n1 + $n2\n```\n运算符及用于计算的数字两边必须有空格，否则会执行失败。\n用expr进行乘法运算时，必须在*前用反斜线转义（Shell可能误解为*号）。\n\n\n\n“（（））”或“[ ]”数值运算命令\n双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符\n格式：\n“ ((expression))”，或“ [expression]”\n括号内部两侧可以有空格，也可省空格。\n需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符\n```shell\nn1+n2\n$(($n1+$n2))\n$[$n1+$n2]\n```\n\nlet数值运算命令\n\n```shell\nlet expression\n\n例：\nlet sum = n1+n2;\n```\n\nlet数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量\n\n### shell中的特殊符号\n\n#### 1. “#”表示注释。\n- 行首为#（#!是个例外）表示此行是注释。\n- 注释也可以放在本行命令的后面，需要注意的是#两边有空格。\n- 释也可以放在本行行首空白的后面。\n\n#### 2. \" ; \"\n\n- “;”在同一行中分隔两个或者两个以上的命令。\n- “;”也适用于循环语句\n\n#### 3. “;;”\n\n- 用于终止case语句\n\n#### 4. “:”\n\n- 空命令“:”和true命令作用相同。\n- 在while死循环和if/then中也可使用这个命令。\n\n\n#### 5. “.”\n\n- “.”等价于source命令，是bash中的一个内建命令。\n- “.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。\n- 当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。\n\n### 输入输出\n\n#### 输出\n\n##### echo\necho命令是最常用的，其功能是将字符串输出到屏幕\n\n```shell\necho [-ne] [string]\n```\n其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符\n\n##### printf\n\n输出命令printf的功能是格式化输出数据\n```shell\nprintf format [arguments...]\n```\n\nformat为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。\narguments为要输出的数据。\n\n#### 输入\n\n##### 1. 直接给变量赋值\n\n例如，name=liming\n\n##### 2. 从键盘读入赋值\n\n- read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。\n```shell\nread  [options] [variable…]\n```\n\n##### 3. 使用命令行参数赋值\n\n使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数......，这种赋值方法适用于参数经常变化且不需要交互的情况。\n\n##### 4. 利用命令的输出结果赋值\n\n- 在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。\n- 把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名\n\n##### 5. 从文件中读入数据赋值\n\n这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。\n\n#### 引用\n```\n1. 转义字符：用于引用任意的单个字符。\n2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。\n3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。\n```\n\n### 条件测试\n\n#### 文件测试\n1. test\n```shell\n“test  <expression>”\n```\n2. “<测试表达式>”\n\n也可以使用“<测试表达式>”，就是使用中括号。\n语法格式：\n“ [  <expression> ]”\n注意：[]与expression之间必须有空格。 \n通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。\n\n#### 整数测试\n\n整数测试通常用于数值之间的运算。\n```shell\n语法格式：\n       [ 整数1 操作符 整数2 ]\n或   test 整数1 操作符 整数2。\n```\n\n|操作符1  |  操作符2(部分能用)  意义|\n|:---:|:---:|\n|-eq ==|  等于（Equal）|\n|-ge >=|  大于等于（Greater or Equal）|\n|-gt > |  大于（Greater Than-le）|\n|-le <=|  小于等于（Lesser or Equal）|\n|-lt   |  <   小于（Lesser Than）|\n|-ne !=|  不等于（Not Equal）|\n\n#### 字符串测试\n\n字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。\n\n```shell\n[ 字符串1 = 字符串2 ]\n[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]\n```\n\n#### 逻辑运算符\n\n```shell\n[ expression1 op expression2 ]\nor       command1 op commnad2\n\n```\n\n|Operator |   意义|\n|:---:|:---:|\n|! expr | 如果表达式评估为假，则为真|\n|expr1 -a expr2 | 如果 expr1 和 expr2 都为真，则结果为真，&&|\n|expr1 -o expr2  |如果 expr1 或 expr2 为真，则结果为真，|||\n\n### if语句格式\n\n```shell\n语句格式：\nif [ expression ];then  code\nfi\n\n\nif [ expression ]  \nthen code\nfi\n```\n\n\n```shell\nif [ expression ];then  code1\nelse code2\nfi\n\n\nif [ expression ]  \nthen   code1\nelse  code2\n```\n\n```shell\nif expression; then\n command…\n[elif expression; then\n command…]\n[else\n command…]\nfi\n```\n\n### case\n```shell\ncase value in\n    [ expression1) code1\n    ;;\n    expression2) code2\n    ;;\n    …\n    *）code\n    ]\nesac\n```\n\n\n### 循环\n\n#### while 命令\n\n```shell\nwhile expression; do\n       command…\ndone   \n```\n#### until命令\n\n```shell\nuntil expression; do\n     command…\ndone\n```\n\n#### for循环\n```shell\nfor  variable in [in sequence]\ndo\n    code\ndone \n\n```\n```shell\nfor  变量名 in 取值列表；do     循环体 done\n\n```\n```shell\nfor variable [in sequence]; do\n          command…\n     done\n```\n```shell\nfor ((expression1; expression2; expression3;));do\n           command…\n     done\n```\n\n\n在循环后面加个 & 符号表示在后台执行\n\n\n### 数组\n\n#### 数组分为普通数组和关联数组。\n普通数组中的索引（下标）都是整数。\n关联数组的数组索引可以用任意的文本。\n\n两者最大区别：\n- 关联数组使用之前需要声明。\n- 关联数组是由特定格式的键值对组成\n\n#### 普通数组\n定义：\n```shell\narrayname=（value_table）\n```\n\nvalue_table中值之间用空格隔开。\n\n\n#### 关联数组\n定义：\n```shell\narrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)\n```\n其中：\nindexei可以用标识符表示。\n\n\n声明普通数组方法：\n#declare -a arrayname\n声明关联数组方法：\n#declare -A arrayname\n\n#### 数组定义方法\n\n- 直接定义数组\n- \n```shell\narrayname=(value1 value2 value3 ... valuen)\n```\n\n- 下标定义数组\n- \n```shell\narray_name=([index1]=value1 [index2]=value2 ...)\n```\n\n- 间接定义数组\n\n```shell\narray[0]=value1;array[1]=value2;....\n```\n\n- 从文件中读入定义数组。\n\n```shell\narray_name=($(command))\narray_name=($(`variable`))\n\nor \n\narray_name=(`command`)\narray_name=(`variable`)\n\n```\n\n#### 访问数组表达式\n\n\n\n| 语法                 | 描述                         |\n| -------------------- | ---------------------------- |\n| echo ${!array[*]}    | 访问数组所有索引             |\n| echo ${!array[@]}    | 访问数组所有索引             |\n| echo ${array[*]}     | 访问数组所有值               |\n| echo ${array[@]}     | 访问数组所有值               |\n| echo ${#array[@]}    | 统计数组元素个数             |\n| echo ${array[0]}     | 访问数组第0个元素            |\n| echo ${array[@]:1}   | 从数组下标1开始              |\n| echo ${array[@]:1:2} | 从数组下标1开始，访问2个元素 |\n| echo ${#array[#]}    | 第#个元素的字符个数          |\n| echo ${#array}       | 第0个元素的字符个数          |\n| echo ${array[#]}     | 显示第#个元素                |\n| echo ${array}        | 显示第0个元素                |\n\n\n#### 数组删除\n\n删除数组命令格式：\n```shell\nunset array\n```\n删除数组中指定元素命令格式：\n```shell\nunset array[subscript]\n```\n\n#### 数组的截取和替换\n\n- 通过${数组名[@或*]:起始位置:长度}切片原先数组，返回的是字符串，中间用空格分开。\n- 如果加上“()”，就可以得到切片数组。\n\n### 函数\n\n函数定义：\n\n```shell\nfunction name{\n     command…\n      [return]\n}\n\nor\n\nname(){\n   command…\n   [return]\n}\n```\n\nreturn只能用于函数中，表示将返回值提供给函数的调用命令。 \nexit可以用于程序的任意位置，表示退出当前程序并将退出状态返回到父进程。\n\n## Linux多命令协作(I/O重定向与管道）\n\n### 命令行shell数据流定义为\n\n1. 标准输入STDIN(standard input)：是用来采集信息的，命令是通过STDIN接收参数或数据，默认情况下，标准输入就是从键盘读入数据。\n\n2. 标准输出STDOUT(standard out)：是用来输出结果的。\n3. 标准错误STDERR(standard error)：是输出状态或错误信息等。\n\n\n### 重定向\n\n输入ls命令，会显示出当前目录下的文件和目录。如果在ls命令后加入“>”，并指向ls1.txt文件，那么结果就会写入ls1.txt文件中。\n\n\n#### 文件描述符\n\n每一个进程在运行中都会打开一些文件，每一个文件都会有一个指定的数字标识，这个标识就叫做文件描述符。\n\n- 0表示为标准输入，可以理解为键盘输入。\n- 1表示为标准输出，输出到终端。\n- 2表示为标准错误，输出到终端。\n- 3及以上为常规文件的描述符\n- \n#### 重定向标准输出\n\n默认情况下，标准输出在屏幕上显示，而重定向标准输出可以重新定义输出内容到文件。\n\n##### 重定向标准输出格式:\n\n- 重定向符“>”是把标准输出重定向到文件，即将标准输出内容保存到文件中，是覆盖操作。\n如果目标文件不存在，则创建文件并将标准输出内容保存进去；如果目标文件存在，则覆盖其中的内容。\n- 重定向符号“>>（中间没有空格）”是追加操作，实现连续保存文件中的内容。\n即原来的文本内容不会被覆盖，而是在文件尾部添加标准输出的内容。如果文件不存在，也会自动创建。\n\n\n#### 重定向标准输入\n\n默认情况下，标准输入就是从键盘读入数据，每次一行。\n重定向标准输入可以重新定义从文件中读入数据。\n\n通过重定向符“<”，可以把标准输入重定向到文件，即从文件中读入数据作为某条命令的输入数据。\n\n#### 重定向标准错误\n\n默认情况下，标准错误在屏幕上显示，而重定向标准错误可以重新定义输出错误内容到文件\n\n###### 重定向标准错误格式：\n通过重定向符“2>”把标准错误内容保存到文件中，是覆盖操作。\n\n- 如果目标文件不存在，则创建文件并将标准错误内容保存进去。\n- 如果目标文件存在，则覆盖其中的内容。\n- 此命令用于日志中，执行一条指令可能有很多步操作。如果只想保存报错信息，就可用此命令。\n重定向符号“2>&1（中间没有空格）”是将标准输出和标准错误结合在一起输出到文件，即将正确结果及错误全部输出到文件。\n\n#### Subshell\n\n- Subshell是指括在圆括号里的命令会在另外的进程中执行。\n- 当需要让一组命令在不同的目录下执行时，采用这种方法可以不修改主脚本的目录。\n- 对比不加圆括号的命令与加圆括号的命令。\n\n### 管道\n\n管道实际上也是一种重定向，重定向字符控制输出到文件，管道控制输出到其他程序。\n\n管道的作用是把上一个进程的输出作为下一个进程的输入，利用管道可以把若干个命令连接在一起。\n\n\n#### 统计字数命令wc\n\n```shell\nwc [option] [file]\n```\n\n| option | explanation                                                  |\n| ------ | ------------------------------------------------------------ |\n| 缺省   | 统计每个文件的行数、字数、字节数及其汇总。                   |\n| -c     | 统计字节数。                                                 |\n| -l     | 统计行数。                                                   |\n| -m     | 统计字符数。这个标志不能与 -c 标志一起使用。                 |\n| -w     | 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。 |\n| -L     | 打印最长行的长度。                                           |\n\n\n##### 行、单词、字符的定义如下：\n1. 行：以新行字符（如 Enter 键）结尾的一串字符。\n2. 单词：是一串连续的字符，用空格、制表符或新行字符分隔。\n3. 字符：字母、数字、标点符合、空格、制表符或新行字符。\n\n\n#### 管道线分流命令tee\n\ntee命令的作用是从标准输入读取数据，并向标准输出和一个或更多的文件发送数据\n\n```shell\ntee [-ai] [file...]\n```\n\n| option | explanation  |\n| ------ | ------------ |\n| 缺省   | 覆盖         |\n| -a     | 追加         |\n| -i     | 忽略中断信号 |\n\n\n#### 查找重复行命令uniq\n\n消除重复行、选取重复行、选取唯一行和统计重复行的数量。\n\n```shell\nuniq [option] [input [output]]\nuniq [选项]... [文件]\n```\n\ninput是输入文件，若指定了该参数，uniq命令从该文件读入数据。\noutput是输出文件，若指定了该参数，则uniq命令将输出结果保存到该文件中。\n\n| option                                          | explanation                                |\n| ----------------------------------------------- | ------------------------------------------ |\n| 缺省                                            | 匹配行将在首次出现处被合并。               |\n| -c, --count                                     | 在每行前加上表示相应行目出现次数的前缀编号 |\n| -d, --repeated                                  | 只输出重复的行                             |\n| -D, --all-repeated[=delimit-method              | 显示所有重复的行                           |\n| delimit-method={none(default),prepend,separate} | 以空行为界限                               |\n| -f, --skip-fields=N                             | 比较时跳过前N 列                           |\n| -i, --ignore-case                               | 在比较的时候不区分大小写                   |\n| -s, --skip-chars=N                              | 比较时跳过前N个字符                        |\n| -u, --unique                                    | 只显示唯一的行                             |\n| -z, --zero-terminated                           | 使用'\\0'作为行结束符，而不是新换行         |\n| -w, --check-chars=N                             | 对每行第N 个字符以后的内容不作对照         |\n\n\n\n\n## linux文本处理\n\n### 文本处理\n\n#### Vim有3种工作模式：\n命令模式、插入模式、末行模式\n\n##### 命令描述\n\nVim启动后，默认进入命令模式\n\n在任何模式下，都可以按Esc键返回到命令模\n\n在命令模式下，可以键入不同的命令完成选择、复制、粘贴、删除等操作，及进入Insert mode下，或者到 last line mode。\n\n##### 插入模式(Insert mode)\n只有在Insert mode下，才可以编辑文本内容，按ESC键可回到命令行模式。\n在命令行模式下按o、i、a等键可以进入插入模式。\n\n##### 末行模式（last line mode）\n在命令模式下按：键进入末行模式。\n光标会移到屏幕底部，将文件保存或退出Vim，也可以\n\n| Command    | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| h,j,k,l    | 光标上下左右移动。也可以用键盘自带方向键。                   |\n| 0和$       | 光标移动到行首、行尾。                                       |\n| gg和G      | 光标移动到第一行首个字符的位置和光标移动到最后一行首个字符的位置。 |\n| [:]/字符串 | 快速定位到字符所在的行。如果第一次找的关键字不是您想要的，可以一直按n会往后寻找到您要的关键字为止。 |\n| /^d        | 定位首字母为d的行。                                          |\n| /txt$      | 定位结尾为txt的行。                                          |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| yy      | 复制光标所在行到缓冲区。                                     |\n| #yy     | [6yy]表示拷贝从光标所在的该行\"往下数\"6行文字。               |\n| dd      | 删除当前行。                                                 |\n| 4dd     | 从光标所在行开始删除4行。                                    |\n| p       | 将缓冲区内的字符贴到光标所在位置。注意：所有与\"y\"有关的复制命令都必须与\"p\"配合才能完成复制与粘贴功能。 |\n| x       | 每按一次，删除光标所在的字符。                               |\n| D       | 从光标处删除到行尾。                                         |\n| u       | 取消操作。                                                   |\n| ^r      | 重做。                                                       |\n| r       | 可以用来修改一个字符。                                       |\n| yw      | 将光标所在之处到字尾的字符复制到缓冲区中。                   |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| i       | 切换进入插入模式，按\"i\"进入插入模式后是从光标当前位置开始输入文件。 |\n| a       | 进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字。 |\n| o       | 进入插入模式后，是插入新的一行，从行首开始输入文字。         |\n| :       | 进入「Last line mode」。                                     |\n| Esc     | 转到「命令行模式（command mode）」。                         |\n| V       | 进入可视模式。                                               |\n| v       | 进入可视模式。                                               |\n| ^v      | 进入可视块模式。                                             |\n| R       | 进入替换模式。                                               |\n\n| Command        | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| : w filename   | 将文章以指定的文件名filename保存                             |\n| : wq           | 存盘并退出vi                                                 |\n| : q!           | 不存盘强制退出vi(!为强制退出，可以与w合用)                   |\n| :w             | 存盘                                                         |\n| :q             | 退出                                                         |\n| :set nu        | 在文件中的每一行前面列出行号                                 |\n| :set nonu      | 在文件中的每一行前面不列出行号                               |\n| :15            | 跳到文章的第15行                                             |\n| :?关键字       | 查找，如果第一次找的关键字不是您想要的，可以一直按n会往前寻找到您要的关键字为止。 |\n| :1,10s/abc/def | 在第1行到第10行之间进行查找到每1行的第1个abc，并将其过分替换成def。 |\n\n\n### 文本切片和切块\n\n#### 剪切命令cut\n\ncut命令是用于在数据中提取需要的部分。\n注意：cut命令是以行为对象来进行操作的。\n\n```shell\ncut option [file]\n```\n\n在执行cut命令时，必须指定-b、-c、-f标志之一。\n\n\n#### 粘贴命令paste\n\npaste命令的作用与cut命令相反，是向文本中添加信息。\n\n```shell\npaste [option] [file1] [file2]\n```\n\n若使用paste命令的参数-s，则可以将一个文件中的多行数据合并成一行。\n注意：**“-s”只是将文件的内容调整了显示方式，并不会改变原文件的内容形式。**\n\n\n####  连接命令join\n\njoin命令的作用与paste类似，也就是向文本中添加信息\n\n```shell\njoin [option] filename1 filename2\n```\n\n其中option选项可以省略，filename1和filename2必须是有序的，且包含相同的列。\n\n| Option     | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| -a<1或2>   | 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行 |\n| -e<字符串> | 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串 |\n| -i         | 比较栏位内容时，忽略大小写的差异                             |\n| -o<格式>   | 按照指定的格式来显示结果                                     |\n| -t<字符>   | 使用栏位的分割字符                                           |\n| -v<1或2>   | 与-a相同，但是只显示文件中没有相同栏位的行                   |\n| -1<栏位>   | 连接[文件1]指定的栏位                                        |\n| -2<栏位>   | 连接[文件2]指定的栏位                                        |\n\n\n### 文本比较\n\n#### 有序文件逐行比较命令comm\n\ncomm功能是选择或拒绝两个已排序的文本文件的公共的行，是按行进行比较\n\n```shell\ncomm [option] filename1 filename2\n```\n其中option选项可以省略，其中-1、-2、-3分别针对comm输出结果中的第1、第2、第3列不显示。\n\n#### 逐行比较命令diff\n\n文件可以是无序的，可以是大的文件集比较，尤其是在程序开发过程中，修改过后，利用 diff可以很方便地查找版本之间的不同之处。\n\n```shell\ndiff [option] file\n```\n\n| Option                                                  | Explanation                                                  |\n| ------------------------------------------------------- | ------------------------------------------------------------ |\n| 缺省                                                    | 比较文件的异同                                               |\n| -<行数>                                                 | 指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。     |\n| -a或--text                                              | diff预设只会逐行比较文本文件。                               |\n| -b或--ignore-space-change                               | 不检查空格字符的不同。                                       |\n| -B或--ignore-blank-lines                                | 不检查空白行。                                               |\n| -c                                                      | 显示全部内容，并标出不同之处。                               |\n| -C<行数>或--context<行数>                               | 与执行“-c-<行数>”指令相同。                                  |\n| -d或--minimal                                           | 使用不同的演算法，以小的单位来做比较。                       |\n| -D<巨集名称>或ifdef<巨集名称>                           | 此参数的输出格式可用于前置处理器巨集。                       |\n| -e或--ed                                                | 此参数的输出格式可用于ed的script文件。                       |\n| -f或-forward-ed                                         | 输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。 |\n| -H或--speed-large-files                                 | 比较大文件时，可加快速度。                                   |\n| -l<字符或字符串>或--ignore-matching-lines<字符或字符串> | 若两个文件在某几行有所不同，而之际航同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。 |\n| -i或--ignore-case                                       | 不检查大小写的不同。                                         |\n| -l或--paginate                                          | 将结果交由pr程序来分页。                                     |\n| -n或——rcs                                               | 将比较结果以RCS的格式来显示。                                |\n| -N或--new-file                                          | 在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录，文件A 若使用-N参数，则diff会将文件A 与一个空白的文件比较。 |\n| -p                                                      | 若比较的文件为C语言的程序码文件时，显示差异所在的函数名称    |\n| -P或--unidirectional-new-file                           | 与-N类似，但只有当第二个目录包含了第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。 |\n| -q或--brief                                             | 仅显示有无差异，不显示详细的信息。                           |\n| -r或--recursive                                         | 比较子目录中的文件。                                         |\n| -s或--report-identical-files                            | 若没有发现任何差异，仍然显示信息。                           |\n| -S<文件>或--starting-file<文件>                         | 在比较目录时，从指定的文件开始比较。                         |\n| -t或--expand-tabs                                       | 在输出时，将tab字符展开。                                    |\n| -T或--initial-tab                                       | 在每行前面加上tab字符以便对齐。                              |\n| -u，-U<列数>或--unified=<列数>                          | 以合并的方式来显示文件内容的不同。                           |\n| -w或--ignore-all-space                                  | 忽略全部的空格字符。                                         |\n| -W<宽度>或--width<宽度>                                 | 在使用-y参数时，指定栏宽                                     |\n| -x<文件名或目录>或--exclude<文件名或目录>               | 不比较选项中所指定的文件或目录                               |\n| -X<文件>或--exclude-from<文件>                          | 可以将文件或目录类型存成文本文件，然后在=<文件>中指定此文本文件。 |\n| -y或--side-by-side                                      | 以并列的方式显示文件的异同之处。                             |\n| --left-column                                           | 在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。 |\n| --suppress-common-lines                                 | 在使用-y参数时，仅显示不同之处。                             |\n\n\n#### 格式化输出printf\n\n```shell\nprintf format [argument]\n```\n\n##### 参数选项表\n\n| Option | Explanation                           |\n| ------ | ------------------------------------- |\n| %s     | 字符串                                |\n| %f     | 浮点格式                              |\n| %c     | ASCII字符，即显示对应参数的第一个字符 |\n| %d,%i  | 十进制整数                            |\n| %o     | 八进制值                              |\n| %u     | 不带正负号的十进制值                  |\n| %x     | 十六进制值（a-f）                     |\n| %X     | 十六进制值（A-F）                     |\n| %%     | 表示%本身                             |\n\n##### 常用转义字符\n\n| 转义字符 | Explanation                                      |\n| -------- | ------------------------------------------------ |\n| \\a       | 警告字符，通常为ASCII的BEL字符。                 |\n| \\b       | 后退                                             |\n| \\f       | 换页                                             |\n| \\n       | 换行                                             |\n| \\r       | 回车                                             |\n| \\t       | 水平制表符                                       |\n| \\v       | 垂直制表符                                       |\n| \\\\       | 表示\\本身                                        |\n| \\ddd     | 表示1到3位数八进制值的字符。仅在格式字符串中有效 |\n| \\0ddd    | 表示1到3位的八进制值字符                         |\n\n\n\n#### 格式化段落fmt\n\nfmt命令的作用是格式化段落，使文本看上去更加整齐。\n\n```shell\nfmt [option] [filename]\n```\n\n#### 行标命令nl\n\nnl命令的功能是为文本创建行号，如果不保存，nl只会在输出中加入行号，阅读起来更加方便，不会影响原文件的文本内容。\n\n```shell\nnl [option] [filename]\n```\n\n\n#### 指定行长度命令fold\n\nfold命令是对行进行操作，将文本行进行折叠，长行分解成短行。\n\n```shell\nflod [option] [filename]\n```\n\n\n### 文本分析工具\n\n#### awk\nawk是一个文本处理工具，完成字符串查找、替换、加工等操作，还包含可以进行模式装入、流控制、数学运算、进程控制等语句。\n```shell\nawk ‘pattern {action}’ file\n```\nawk扫描file中的每一行，对符合模式 pattern的行执行操作action。也可以只有pattern或者action，\n\n\n## 进程管理\n\n### 进程基础\n\n#### 进程概念\n\n-Linux可以同时执行多个用户的多个程序。为了保证程序能够并发执行，需要对程序的执行过程进行动态控制。\n- 进程就是用来描述这一控制过程的，组织安排不同程序等待CPU的调度。\n- 进程是一个具有一定独立功能的程序或程序段在一组数据集合上的一次动态执行过程，同时也是程序能够并发执行的基础机制。\n- 各种资源的分配和管理都是以进程为单位\n\n\n#### 进程的基本组成结构\n\n- 进程控制块PCB(Processing Control Block)是进程动态特征的反映，主要包括进程的描述信息、控制信息、进程使用资源情况等。用于跟踪管理程序状态。\n- 程序段是该进程需要完成功能的程序代码。\n- 数据结构集是进程执行时需要访问的工作区和数据对象，即执行进程时需要的系统资源\n\n\n\n进程在创建时，会被内核赋予一个PID(非负整数)作为进程**唯一标识号。**\n进程PID可以重用，当进程终止后，Linux一般通过延迟重用算法，使得赋予新进程的PID不同于最近终止进程的PID\n\n#### 根据进程的特点和属性，将进程分为\n\n1. 交互进程：由Shell启动的进程，既可以在前台运行，也可以在后台运行，且必须由用户给出某些参数或者信息，进程才能继续执行。\n2. 批处理进程：与终端没有联系，是一个进程序列，负责按照顺序启动其他进程。\n3. 守护进程：执行系统特定功能或者执行系统相关任务的进程，并在后台运行。\n守护进程是一个特殊进程，不是内核的组成部分。\n大部分守护进程是在系统启动时启动，直到系统关闭时才停止运行。 \n\n\n#### 进程运行环境\n\n进程运行环境是由它的程序代码、程序运行所需的数据结构和硬件环境组成的\n\n\n##### 进程运行环境主要包括：\n\n1. 进程空间中的代码和数据、各种数据结构、进程堆栈和共享内存区等。\n2. 环境变量：提供进程运行所需的环境信息。\n3. 系统数据：进程空间中的对进程进行管理和控制所需的信息，包括进程任务结构体以及内核堆栈等。\n4. 进程访问设备或者文件时的权限。\n5. 各种硬件寄存器。\n6. 地址转换信息。\n\n\n进程的运行环境是动态变化的。\n\n在Linux中把系统提供给进程的处于动态变化的运行环境总和称为进程上下文。\n\n\n### 进程管理\n\n#### Linux进程状态\n\n运行状态、就绪状态、阻塞状态（睡眠状态、暂停状态、僵死状态）\n\n进程之间相互独立，一个进程不能改变另一个进程的状态\n\n\n##### 运行状态\n\n它是在run_queue队列里的状态，占有CPU处理进程任务，一个进程只能出现在一个CPU的可执行队列里。同一时刻允许有多个进程处于运行状态，但运行状态的进程总数应小于或等于处理器的个数。\n运行状态分为**用户运行态**和**内核运行态**两种，在内核态下运行的进程不能被其他进程抢占。\n\n##### 就绪状态\n\n就绪状态。该状态的进程已经拥有除CPU以外的所有请求资源，只等待被核心程序调度。\n只要被分配到CPU就可执行，在队列中按照进程优先级进行排队。\n\n##### 睡眠状态\n\n睡眠状态。处于该状态的进程需要被某一事件触发才可继续执行，分为可中断的睡眠状态和不可中断的睡眠状态。\n处于可中断的睡眠状态的进程，是在等待资源被释放，一旦得到资源，进程就会被唤醒进入就绪态。\n由于CPU数量有限，而进程数量众多，所以很多请求无法及时得到响应，因此大部分进程都处于可中断的睡眠状态。\n处于不可中断睡眠状态的进程，只能通过 wake_up( )函数唤醒。 \n\n##### 暂停状态\n\n暂停状态（跟踪状态）。是指进程从内核返回用户时，被核心程序抢先调度了另一个进程，该进程就处于暂停状态。\n处于暂停状态的进程只有等待下次调度，才能返回用户态。当进程收到信号SIGSTOP时会进入暂停状态，发送SIGCONT信号，进程可转换到运行状态。\n\n##### 僵死状态\n\n僵死状态。处于该状态的进程已经终止运行，等待父进程询问其状态，收集它的进程控制块所占资源。\n\n#### 三种基本状态\n\n![image-20211207104316412](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211207104316412.png)\n\n\n（1）运行态：已经分配到CPU，正在处理器上执行。\n（2）就绪态：已经具备运行条件，但所需 CPU资源被其他进程占用，需等待分配CPU。\n（3）阻塞态：尚不具备运行条件，需要等待某种事件的发生，即使CPU空闲，也无法使用。\n\n\n#### 查看进程\n\nps命令可以查看系统中正在运行的进程信息以及进程的状态\n\n```shell\nps [option]\n```\n\n| Option(part)   | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| a              | 显示现行终端机下的所有程序，包括其他用户的程序。             |\n| -A or -e       | 列出所有的行程                                               |\n| -w             | 显示加宽可以显示较多的资讯                                   |\n| -au            | 显示较详细的资讯                                             |\n| -aux           | 显示所有包含其他使用者的行程                                 |\n| c              | 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。 |\n| e              | 列出程序时，显示每个程序所使用的环境变量。                   |\n| f              | 用ASCII字符显示树状结构，表达程序间的相互关系。              |\n| -H             | 显示树状结构，表示程序间的相互关系。                         |\n| -N             | 显示所有的程序，除了执行ps指令终端机下的程序之外。           |\n| s              | 采用程序信号的格式显示程序状况。                             |\n| S              | 列出程序时，包括已中断的子程序资料。                         |\n| -t<终端机编号> | 指定终端机编号，并列出属于该终端机的程序的状况。             |\n| u              | 以用户为主的格式来显示程序状况。                             |\n| x              | 显示所有程序，不以终端机来区分。                             |\n| j              | BSD（Berkeley Software Distribution） job contorl format     |\n| -j             | BSD jobs format                                              |\n\n输出信息的意义\n\n| 名称    | 说明                                                         |\n| ------- | ------------------------------------------------------------ |\n| USER    | 行程拥有者                                                   |\n| PID     | pid                                                          |\n| %CPU    | 占用的CPU使用率                                              |\n| %MEM    | 占用的存储器使用率                                           |\n| VSZ     | 占用的虚拟记忆体大小                                         |\n| RSS     | 占用的存储器大小                                             |\n| TTY     | 终端的次要装置号码 (minor device number of tty)              |\n| STAT    | 该行程的状态                                                 |\n| START   | 行程开始时间                                                 |\n| TIME    | 执行的时间                                                   |\n| COMMAND | 所执行的指令                                                 |\n| PPID    | 父进程的ID                                                   |\n| PRI     | 指进程的执行优先权(Priority的简写)，其值越小越早被执行；     |\n| NI      | 这个进程的nice值，其表示进程可被执行的优先级的修正数值。     |\n| ADDR    | 这个是内核函数，指出该程序在内存的那个部分。如果是个执行 的程序，一般就是『 - 』。 |\n| SZ      | 使用掉的内存大小。                                           |\n| WCHAN   | 目前这个程序是否正在运作当中，若为 - 表示正在运作。          |\n\n| STAT | 该行程的状态说明               |\n| ---- | ------------------------------ |\n| D    | 不可中断的静止                 |\n| R    | 正在执行中                     |\n| S    | 静止状态                       |\n| T    | 暂停执行                       |\n| Z    | 不存在但暂时无法消除           |\n| W    | 没有足够的记忆体分页可分配     |\n| <    | 高优先序的行程                 |\n| N    | 低优先序的行程                 |\n| L    | 有记忆体分页分配并锁在记忆体内 |\n\n\n#### 查看指定进程PID的方法\n\n1. 使用cat命令\n ```shell\ncat /run/sshd.pid\n ```\n2. 使用pidof命令\n```shell\npidof sshd\n```\n3. 使用pgrep命令\n```shell\npgrep sshd\n```\n\n#### 实时动态显示进程信息命令top\n\ntop命令将按照进程活动顺序，持续更新显示当前系统进程的信息。\n\n\n#### kill命令\n\nkill命令用来终止指定进程的运行。\n首先使用ps/pidof/top等工具获取进程PID，然后使用kill命令来杀死该进程。\nkill命令是通过向进程发送指定的信号来结束相应的进程。\n在默认情况下，采用编号为15的TERM信号。\n\n常用信号\n\n| 信号编号 | 名称    | 特性及意义                                                   |\n| -------- | ------- | ------------------------------------------------------------ |\n| 1        | SIGHUP  | 启动被终止的进程，重新加载，PID不会发生变化。                |\n| 9        | SIGKILL | 强制终止进程，使用此信号可能导致进程无法再次启动。           |\n| 15       | SIGTERM | 默认信号，以正常流程终止进程，允许进程释放资源。若进程已经出现问题，无响应，此信号不起作用。 |\n| 18       | SIGCONT | 恢复进程。                                                   |\n| 19       | SIGSTOP | 暂停进程。                                                   |\n\n进程优先级是一个整数，动态优先级和静态优先级决定了进程被CPU处理的顺序。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 指令\n\n### 文件类型判断\n\n```shell\nfile [option] filename\n```\n|第一个字符|\t文件类型|\n|:---:|:---:|\n|-\t|普通文件（如文本文件、二进制文件、压缩文件、图片等）|\n|d\t|目录文件（蓝色）|\n|b\t|设备文件（块设备），存储设备硬盘、U盘、/dev/sda等|\n|c\t|设备文件（字符设备），打印机、终端、/dev/tty1、/dev/zero|\n|s\t|套接字文件|\n|p\t|管道文件|\n|l\t|链接文件（淡蓝色）|\n\n\n### 查看文件的详细属性\n\n```shell\nstate [option] filename\n```\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -[[a]]\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n```shell\nfind [pathname] [option] filename\n```\n\n### 查看用户登录信息\n\n```shell\nid [option][username]\n```\n\n### 查看进程\n\n```shell\nps aux | less命令查看进程\n```\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n","source":"_posts/Linux知识点总结.md","raw":"---\ntitle: Linux期末知识点总结\ndate: 2021-12-30 18:50:45\ndescription: Linux知识点总结\ncategories: \"Linux\" #分类\ntags:   #标签\n    - 课程学习\n    - Linux\n---\n\n\n# Linux知识点总结\n\n## Linux概述\n\n### Linux系统的优缺点\n\n1. 优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；\n2. 缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。\n\n### Linux系统的特点\n\n1. 一切皆文件\n2. 完全兼容可移植操作系统接口POSIX1.0标准\n3. 多用户、多任务\n4. 完全免费\n\n### Linux的含义\n\nLinux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。\n通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。\nLinux是类UNIX操作系统。\n\n### Linux的诞生、发展和成长过程依赖五个重要支柱\n\n1. UXIX操作系统\n2. MINIX操作系统\n3. GNU计划\n4. POSIX标准\n5. Internet\n\n\n### Linux内核的组成\n\n1. 内存管理器：对内存资源的访问控制。\n2. 进程管理器：对CPU的访问控制。\n3. 设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。\n4. 虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。\n5. 网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。\n\n### shell 分为\n\n1. GLI命令行界面\n2. GUI图用户界面\n\n### Linux文件系统\n\nLinux一切皆文件；\n文件系统是指文件存放在磁盘等存储设备上的组织方法。\n\n## Linux基本操作\n\n### 基本命令\n\n**命令格式**： command [options] [arguments]  ，命令名：[选项]：[参数]\n\n### 获取帮助\n\n```shell \nman [option] filename\n```\n\n```shell\n--help |more\n```\n### 日志\n\nLinux 日志文件存放在 /var/log目录下\n\n日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。\n\n## 文件系统和文件管理\n\n### Linux文件类型\n\n1. 普通文件\n2. 目录文件\n3. 链接文件\n4. 设备文件\n5. 管道文件\n\n\n#### 普通文件\n\n- 普通文件是指以**字节**为单位的**数据流**类型文件，其特点是不包含文件系统的结构信息。\n- 通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。\n- 按其内部结构分为文本文件和二进制文件。\n\n#### 目录文件\n\n- 目录文件不存放常规数据，它是用来**组织**、**访问**其他文件的，是内核组织文件系统的基本节点。\n- 目录文件可以包含下一级目录文件或普通文件。\n- 目录文件是一种文件，是Linux文件中的一种\n\n\n#### 链接文件\n\n- 链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。\n- 根据链接文件的不同，分为**硬链接**（Hard Link）文件和**符号链接**（Symbolic Link，又称为软链接）文件\n\n\n#### 设备文件\n- 设备文件是Linux中最特殊的文件，可以方便地访问外部设备。\n- Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。\n- 设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。\n- 根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。\n\n#### 管道文件\n- 管道文件是一种很特殊的文件，主要用于不同进程的信息传递。\n- 当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。\n\n### 文件类型判断\n```shell\nfile [option] filename\n```\n\n### 查看文件的详细属性\n\n使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等\n\n```shell\nstate [option] filename\n```\n\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 绝对路径和相对路径\n\n- 绝对路径是以根目录“/”开始，递归每级目录直到目标路径。\n- 相对路径是以当前目录为起点，到达目标的路径。\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -a\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n\nfind:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。\n\n```shell\nfind [pathname] [option] filename\n```\n\n\n### linux 文件链接\n\n#### 硬链接\n\n- 默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。\n- 创建一个硬链接时，也为这个文件创建了一个额外的目录条目。\n\n##### 硬链接的局限性\n（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。\n（2）硬链接无法引用目录。\n\n当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了\n\n#### 符号链接（软链接）\n\n符号链接指向的文件与符号链接自身几乎没有区别。\n\n### 文件时间\n\n在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。\n\n\n#### 1.访问时间（Access time）\n\n对文件内容进行一次读操作时间。\n\n#### 2.修改时间（Change time）\n\n文件内容被最后一次修改的时间。\n\nls -l 命令显示出来的文件时间就是这个时间\n\n#### 3.状态时间（Modify time）\n\n当文件的状态被改变时，状态时间就会改变\n\n## Linux用户管理\n\n超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。\n\nLinux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID\n\nid命令可以查看当前用户登录信息。\n- UID(User Identification)为用户的ID。\n- GID(Group Identification)为用户所属组的ID。\n- groups为用户属于的所有组的ID。\n\n\nps aux | less命令查看进程\n\n\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n#### 查看用户的分组\n1. groups命令查看。命令：\n```shell\ngroups\ngroups user1 user2\n```\n2. 查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。\n3. id命令法，只执行id命令就可以查看。命令：\n```shell\nid\nid user2\n```\n\n### 和用户相关的一些系统文件\n1. /etc/passwd文件保存用户信息。\n2. /etc/shadow文件保存加密的用户密码。\n3. /etc/group文件保存用户组信息。\n4. /etc/login.defs配置文件。\n\n**su root**可以返回root \n\n\n## 文件权限\n\n权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。\n\n### U G O\n\nU: owner为属主，文件所有者。\nG：group为属组，同组用户。\nO：other为其他用户。\n\n### UGO方式每组的3个字符具体意义如下：\n\nr:read，数字设定值为4\nw:write,数字设定值为2\nx:execute,数字设定值为1\n\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\n\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n\n## linux编程基础\n\nmake可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，\n\nmake通过makefile文件描述的内容自动维护编译工作。\n\n\n\n\n## shell编程\n\nShell脚本是一个包含一系列命令的文件。 \nShell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。\n\n### 用Shell脚本的原因：\n1. 效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 \n2. 简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。\n3. 可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。\n4. 开发容易：可以在短时间内完成一个功能强大又好用的脚本。\n\n### Shell分类：\n1. 用于用户交互接口的Shell称为交互式Shell。\n2. 作为命令解析器的Shell称为非交互式Shell。\n\n### ```#!/bin/bash```\n脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，\n\n\nShell的注释以“#”开头，注释的内容不会执行。\n\n\n给文件helloxiangtian.sh增加可执行权限\n```shell\nchomd +x helloxiangtan.sh\n```\n\n### Shell变量命名规则：\n\n变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 \n\n### shell变量分类\n\nShell变量分为自定义变量、环境变量、位置变量和预定义变量。\n\n根据工作要求临时定义的变量称为自定义变量。\n环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。\n从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。\n预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$\\*等。\n\nShell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。\n\n#### 自定义变量\n| | |\n|:---:|:---:|\n|定义自定义变量| 变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。|\n|使用自定义变量| $变量名|\n|查看自定义变量| echo $变量名 set（所有变量：自定义变量和环境变量）|\n|取消自定义变量| unset 变量名|\n|自定义变量作用范围|   仅在当前shell中有效|\n\n#### 环境变量\n\n在各种编程语言中会提及全局变量概念。\n全局变量可以在程序的任何地方使用。\n在Shell编程中该功能由环境变量实现。\n系统中的所有进程都可以使用环境变量。\n环境变量与全局变量区别：\n子进程对环境变量的修改不会传递到父进程中。\n\n|||\n|:---:|:---:|\n定义环境变量  |使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。|\n|使用环境变量  |$变量名或$｛变量名｝|\n|查看环境变量  |echo $变量名 或env，如env |grep back_dir|\n|取消环境变量  |unset 变量名|\n|环境变量作用范围   | 仅在当前shell和子shell中有效|\n\n#### 位置变量\n\n位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。\n执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。\n\n```shell\n$0代表命令本身，$1-$9代表接收的第1~9个参数，$10以上需要用{}括起来，如${20}代表接收的第20个参数。\n```\n\n#### 预定义变量\n\n预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。\n\n|预定义变量 |  说明|\n|:---:|:---|\n|$0|  脚本名|\n|$*|  所有的参数|\n|$@|  所有的参数|\n|$#|  参数的个数|\n|$$|  当前进程的PID|\n|$!|  上一个后台进程的PID|\n|$?|  上一个命令的返回值，0表示成功。|\n\n\n### 变量的操作\n变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。\n\n变量创建好后，可以用$变量名的方式获取变量的值。\n\n\n可以使用$符号获取变量的值。\n\n用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。\n\n#### 变量的删除\n\n|格式 | 说明|\n|:---:|:---:|\n|${变量名#关键字符} |变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名##关键字符}|    变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。|\n|${变量名%关键字符} |变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名%%关键字符}|    变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。|\n\n#### 变量的替换\n\n|格式  |说明|\n|:---:|：---：|\n|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|\n|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|\n\n#### 变量的替代\n\n```shell\n${变量名-新的变量名}\n```\n\n\n在Shell中，变量值的类型默认是字符串，不直接进行运算。\n\n用于整数运算的方法有expr、(())和$[]。\n\n\n### 运算\n```shell\nexpr expression\n例：\nn1 + n2\nexpr $n1 + $n2\n```\n运算符及用于计算的数字两边必须有空格，否则会执行失败。\n用expr进行乘法运算时，必须在*前用反斜线转义（Shell可能误解为*号）。\n\n\n\n“（（））”或“[ ]”数值运算命令\n双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符\n格式：\n“ ((expression))”，或“ [expression]”\n括号内部两侧可以有空格，也可省空格。\n需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符\n```shell\nn1+n2\n$(($n1+$n2))\n$[$n1+$n2]\n```\n\nlet数值运算命令\n\n```shell\nlet expression\n\n例：\nlet sum = n1+n2;\n```\n\nlet数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量\n\n### shell中的特殊符号\n\n#### 1. “#”表示注释。\n- 行首为#（#!是个例外）表示此行是注释。\n- 注释也可以放在本行命令的后面，需要注意的是#两边有空格。\n- 释也可以放在本行行首空白的后面。\n\n#### 2. \" ; \"\n\n- “;”在同一行中分隔两个或者两个以上的命令。\n- “;”也适用于循环语句\n\n#### 3. “;;”\n\n- 用于终止case语句\n\n#### 4. “:”\n\n- 空命令“:”和true命令作用相同。\n- 在while死循环和if/then中也可使用这个命令。\n\n\n#### 5. “.”\n\n- “.”等价于source命令，是bash中的一个内建命令。\n- “.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。\n- 当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。\n\n### 输入输出\n\n#### 输出\n\n##### echo\necho命令是最常用的，其功能是将字符串输出到屏幕\n\n```shell\necho [-ne] [string]\n```\n其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符\n\n##### printf\n\n输出命令printf的功能是格式化输出数据\n```shell\nprintf format [arguments...]\n```\n\nformat为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。\narguments为要输出的数据。\n\n#### 输入\n\n##### 1. 直接给变量赋值\n\n例如，name=liming\n\n##### 2. 从键盘读入赋值\n\n- read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。\n```shell\nread  [options] [variable…]\n```\n\n##### 3. 使用命令行参数赋值\n\n使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数......，这种赋值方法适用于参数经常变化且不需要交互的情况。\n\n##### 4. 利用命令的输出结果赋值\n\n- 在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。\n- 把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名\n\n##### 5. 从文件中读入数据赋值\n\n这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。\n\n#### 引用\n```\n1. 转义字符：用于引用任意的单个字符。\n2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。\n3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。\n```\n\n### 条件测试\n\n#### 文件测试\n1. test\n```shell\n“test  <expression>”\n```\n2. “<测试表达式>”\n\n也可以使用“<测试表达式>”，就是使用中括号。\n语法格式：\n“ [  <expression> ]”\n注意：[]与expression之间必须有空格。 \n通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。\n\n#### 整数测试\n\n整数测试通常用于数值之间的运算。\n```shell\n语法格式：\n       [ 整数1 操作符 整数2 ]\n或   test 整数1 操作符 整数2。\n```\n\n|操作符1  |  操作符2(部分能用)  意义|\n|:---:|:---:|\n|-eq ==|  等于（Equal）|\n|-ge >=|  大于等于（Greater or Equal）|\n|-gt > |  大于（Greater Than-le）|\n|-le <=|  小于等于（Lesser or Equal）|\n|-lt   |  <   小于（Lesser Than）|\n|-ne !=|  不等于（Not Equal）|\n\n#### 字符串测试\n\n字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。\n\n```shell\n[ 字符串1 = 字符串2 ]\n[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]\n```\n\n#### 逻辑运算符\n\n```shell\n[ expression1 op expression2 ]\nor       command1 op commnad2\n\n```\n\n|Operator |   意义|\n|:---:|:---:|\n|! expr | 如果表达式评估为假，则为真|\n|expr1 -a expr2 | 如果 expr1 和 expr2 都为真，则结果为真，&&|\n|expr1 -o expr2  |如果 expr1 或 expr2 为真，则结果为真，|||\n\n### if语句格式\n\n```shell\n语句格式：\nif [ expression ];then  code\nfi\n\n\nif [ expression ]  \nthen code\nfi\n```\n\n\n```shell\nif [ expression ];then  code1\nelse code2\nfi\n\n\nif [ expression ]  \nthen   code1\nelse  code2\n```\n\n```shell\nif expression; then\n command…\n[elif expression; then\n command…]\n[else\n command…]\nfi\n```\n\n### case\n```shell\ncase value in\n    [ expression1) code1\n    ;;\n    expression2) code2\n    ;;\n    …\n    *）code\n    ]\nesac\n```\n\n\n### 循环\n\n#### while 命令\n\n```shell\nwhile expression; do\n       command…\ndone   \n```\n#### until命令\n\n```shell\nuntil expression; do\n     command…\ndone\n```\n\n#### for循环\n```shell\nfor  variable in [in sequence]\ndo\n    code\ndone \n\n```\n```shell\nfor  变量名 in 取值列表；do     循环体 done\n\n```\n```shell\nfor variable [in sequence]; do\n          command…\n     done\n```\n```shell\nfor ((expression1; expression2; expression3;));do\n           command…\n     done\n```\n\n\n在循环后面加个 & 符号表示在后台执行\n\n\n### 数组\n\n#### 数组分为普通数组和关联数组。\n普通数组中的索引（下标）都是整数。\n关联数组的数组索引可以用任意的文本。\n\n两者最大区别：\n- 关联数组使用之前需要声明。\n- 关联数组是由特定格式的键值对组成\n\n#### 普通数组\n定义：\n```shell\narrayname=（value_table）\n```\n\nvalue_table中值之间用空格隔开。\n\n\n#### 关联数组\n定义：\n```shell\narrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)\n```\n其中：\nindexei可以用标识符表示。\n\n\n声明普通数组方法：\n#declare -a arrayname\n声明关联数组方法：\n#declare -A arrayname\n\n#### 数组定义方法\n\n- 直接定义数组\n- \n```shell\narrayname=(value1 value2 value3 ... valuen)\n```\n\n- 下标定义数组\n- \n```shell\narray_name=([index1]=value1 [index2]=value2 ...)\n```\n\n- 间接定义数组\n\n```shell\narray[0]=value1;array[1]=value2;....\n```\n\n- 从文件中读入定义数组。\n\n```shell\narray_name=($(command))\narray_name=($(`variable`))\n\nor \n\narray_name=(`command`)\narray_name=(`variable`)\n\n```\n\n#### 访问数组表达式\n\n\n\n| 语法                 | 描述                         |\n| -------------------- | ---------------------------- |\n| echo ${!array[*]}    | 访问数组所有索引             |\n| echo ${!array[@]}    | 访问数组所有索引             |\n| echo ${array[*]}     | 访问数组所有值               |\n| echo ${array[@]}     | 访问数组所有值               |\n| echo ${#array[@]}    | 统计数组元素个数             |\n| echo ${array[0]}     | 访问数组第0个元素            |\n| echo ${array[@]:1}   | 从数组下标1开始              |\n| echo ${array[@]:1:2} | 从数组下标1开始，访问2个元素 |\n| echo ${#array[#]}    | 第#个元素的字符个数          |\n| echo ${#array}       | 第0个元素的字符个数          |\n| echo ${array[#]}     | 显示第#个元素                |\n| echo ${array}        | 显示第0个元素                |\n\n\n#### 数组删除\n\n删除数组命令格式：\n```shell\nunset array\n```\n删除数组中指定元素命令格式：\n```shell\nunset array[subscript]\n```\n\n#### 数组的截取和替换\n\n- 通过${数组名[@或*]:起始位置:长度}切片原先数组，返回的是字符串，中间用空格分开。\n- 如果加上“()”，就可以得到切片数组。\n\n### 函数\n\n函数定义：\n\n```shell\nfunction name{\n     command…\n      [return]\n}\n\nor\n\nname(){\n   command…\n   [return]\n}\n```\n\nreturn只能用于函数中，表示将返回值提供给函数的调用命令。 \nexit可以用于程序的任意位置，表示退出当前程序并将退出状态返回到父进程。\n\n## Linux多命令协作(I/O重定向与管道）\n\n### 命令行shell数据流定义为\n\n1. 标准输入STDIN(standard input)：是用来采集信息的，命令是通过STDIN接收参数或数据，默认情况下，标准输入就是从键盘读入数据。\n\n2. 标准输出STDOUT(standard out)：是用来输出结果的。\n3. 标准错误STDERR(standard error)：是输出状态或错误信息等。\n\n\n### 重定向\n\n输入ls命令，会显示出当前目录下的文件和目录。如果在ls命令后加入“>”，并指向ls1.txt文件，那么结果就会写入ls1.txt文件中。\n\n\n#### 文件描述符\n\n每一个进程在运行中都会打开一些文件，每一个文件都会有一个指定的数字标识，这个标识就叫做文件描述符。\n\n- 0表示为标准输入，可以理解为键盘输入。\n- 1表示为标准输出，输出到终端。\n- 2表示为标准错误，输出到终端。\n- 3及以上为常规文件的描述符\n- \n#### 重定向标准输出\n\n默认情况下，标准输出在屏幕上显示，而重定向标准输出可以重新定义输出内容到文件。\n\n##### 重定向标准输出格式:\n\n- 重定向符“>”是把标准输出重定向到文件，即将标准输出内容保存到文件中，是覆盖操作。\n如果目标文件不存在，则创建文件并将标准输出内容保存进去；如果目标文件存在，则覆盖其中的内容。\n- 重定向符号“>>（中间没有空格）”是追加操作，实现连续保存文件中的内容。\n即原来的文本内容不会被覆盖，而是在文件尾部添加标准输出的内容。如果文件不存在，也会自动创建。\n\n\n#### 重定向标准输入\n\n默认情况下，标准输入就是从键盘读入数据，每次一行。\n重定向标准输入可以重新定义从文件中读入数据。\n\n通过重定向符“<”，可以把标准输入重定向到文件，即从文件中读入数据作为某条命令的输入数据。\n\n#### 重定向标准错误\n\n默认情况下，标准错误在屏幕上显示，而重定向标准错误可以重新定义输出错误内容到文件\n\n###### 重定向标准错误格式：\n通过重定向符“2>”把标准错误内容保存到文件中，是覆盖操作。\n\n- 如果目标文件不存在，则创建文件并将标准错误内容保存进去。\n- 如果目标文件存在，则覆盖其中的内容。\n- 此命令用于日志中，执行一条指令可能有很多步操作。如果只想保存报错信息，就可用此命令。\n重定向符号“2>&1（中间没有空格）”是将标准输出和标准错误结合在一起输出到文件，即将正确结果及错误全部输出到文件。\n\n#### Subshell\n\n- Subshell是指括在圆括号里的命令会在另外的进程中执行。\n- 当需要让一组命令在不同的目录下执行时，采用这种方法可以不修改主脚本的目录。\n- 对比不加圆括号的命令与加圆括号的命令。\n\n### 管道\n\n管道实际上也是一种重定向，重定向字符控制输出到文件，管道控制输出到其他程序。\n\n管道的作用是把上一个进程的输出作为下一个进程的输入，利用管道可以把若干个命令连接在一起。\n\n\n#### 统计字数命令wc\n\n```shell\nwc [option] [file]\n```\n\n| option | explanation                                                  |\n| ------ | ------------------------------------------------------------ |\n| 缺省   | 统计每个文件的行数、字数、字节数及其汇总。                   |\n| -c     | 统计字节数。                                                 |\n| -l     | 统计行数。                                                   |\n| -m     | 统计字符数。这个标志不能与 -c 标志一起使用。                 |\n| -w     | 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。 |\n| -L     | 打印最长行的长度。                                           |\n\n\n##### 行、单词、字符的定义如下：\n1. 行：以新行字符（如 Enter 键）结尾的一串字符。\n2. 单词：是一串连续的字符，用空格、制表符或新行字符分隔。\n3. 字符：字母、数字、标点符合、空格、制表符或新行字符。\n\n\n#### 管道线分流命令tee\n\ntee命令的作用是从标准输入读取数据，并向标准输出和一个或更多的文件发送数据\n\n```shell\ntee [-ai] [file...]\n```\n\n| option | explanation  |\n| ------ | ------------ |\n| 缺省   | 覆盖         |\n| -a     | 追加         |\n| -i     | 忽略中断信号 |\n\n\n#### 查找重复行命令uniq\n\n消除重复行、选取重复行、选取唯一行和统计重复行的数量。\n\n```shell\nuniq [option] [input [output]]\nuniq [选项]... [文件]\n```\n\ninput是输入文件，若指定了该参数，uniq命令从该文件读入数据。\noutput是输出文件，若指定了该参数，则uniq命令将输出结果保存到该文件中。\n\n| option                                          | explanation                                |\n| ----------------------------------------------- | ------------------------------------------ |\n| 缺省                                            | 匹配行将在首次出现处被合并。               |\n| -c, --count                                     | 在每行前加上表示相应行目出现次数的前缀编号 |\n| -d, --repeated                                  | 只输出重复的行                             |\n| -D, --all-repeated[=delimit-method              | 显示所有重复的行                           |\n| delimit-method={none(default),prepend,separate} | 以空行为界限                               |\n| -f, --skip-fields=N                             | 比较时跳过前N 列                           |\n| -i, --ignore-case                               | 在比较的时候不区分大小写                   |\n| -s, --skip-chars=N                              | 比较时跳过前N个字符                        |\n| -u, --unique                                    | 只显示唯一的行                             |\n| -z, --zero-terminated                           | 使用'\\0'作为行结束符，而不是新换行         |\n| -w, --check-chars=N                             | 对每行第N 个字符以后的内容不作对照         |\n\n\n\n\n## linux文本处理\n\n### 文本处理\n\n#### Vim有3种工作模式：\n命令模式、插入模式、末行模式\n\n##### 命令描述\n\nVim启动后，默认进入命令模式\n\n在任何模式下，都可以按Esc键返回到命令模\n\n在命令模式下，可以键入不同的命令完成选择、复制、粘贴、删除等操作，及进入Insert mode下，或者到 last line mode。\n\n##### 插入模式(Insert mode)\n只有在Insert mode下，才可以编辑文本内容，按ESC键可回到命令行模式。\n在命令行模式下按o、i、a等键可以进入插入模式。\n\n##### 末行模式（last line mode）\n在命令模式下按：键进入末行模式。\n光标会移到屏幕底部，将文件保存或退出Vim，也可以\n\n| Command    | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| h,j,k,l    | 光标上下左右移动。也可以用键盘自带方向键。                   |\n| 0和$       | 光标移动到行首、行尾。                                       |\n| gg和G      | 光标移动到第一行首个字符的位置和光标移动到最后一行首个字符的位置。 |\n| [:]/字符串 | 快速定位到字符所在的行。如果第一次找的关键字不是您想要的，可以一直按n会往后寻找到您要的关键字为止。 |\n| /^d        | 定位首字母为d的行。                                          |\n| /txt$      | 定位结尾为txt的行。                                          |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| yy      | 复制光标所在行到缓冲区。                                     |\n| #yy     | [6yy]表示拷贝从光标所在的该行\"往下数\"6行文字。               |\n| dd      | 删除当前行。                                                 |\n| 4dd     | 从光标所在行开始删除4行。                                    |\n| p       | 将缓冲区内的字符贴到光标所在位置。注意：所有与\"y\"有关的复制命令都必须与\"p\"配合才能完成复制与粘贴功能。 |\n| x       | 每按一次，删除光标所在的字符。                               |\n| D       | 从光标处删除到行尾。                                         |\n| u       | 取消操作。                                                   |\n| ^r      | 重做。                                                       |\n| r       | 可以用来修改一个字符。                                       |\n| yw      | 将光标所在之处到字尾的字符复制到缓冲区中。                   |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| i       | 切换进入插入模式，按\"i\"进入插入模式后是从光标当前位置开始输入文件。 |\n| a       | 进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字。 |\n| o       | 进入插入模式后，是插入新的一行，从行首开始输入文字。         |\n| :       | 进入「Last line mode」。                                     |\n| Esc     | 转到「命令行模式（command mode）」。                         |\n| V       | 进入可视模式。                                               |\n| v       | 进入可视模式。                                               |\n| ^v      | 进入可视块模式。                                             |\n| R       | 进入替换模式。                                               |\n\n| Command        | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| : w filename   | 将文章以指定的文件名filename保存                             |\n| : wq           | 存盘并退出vi                                                 |\n| : q!           | 不存盘强制退出vi(!为强制退出，可以与w合用)                   |\n| :w             | 存盘                                                         |\n| :q             | 退出                                                         |\n| :set nu        | 在文件中的每一行前面列出行号                                 |\n| :set nonu      | 在文件中的每一行前面不列出行号                               |\n| :15            | 跳到文章的第15行                                             |\n| :?关键字       | 查找，如果第一次找的关键字不是您想要的，可以一直按n会往前寻找到您要的关键字为止。 |\n| :1,10s/abc/def | 在第1行到第10行之间进行查找到每1行的第1个abc，并将其过分替换成def。 |\n\n\n### 文本切片和切块\n\n#### 剪切命令cut\n\ncut命令是用于在数据中提取需要的部分。\n注意：cut命令是以行为对象来进行操作的。\n\n```shell\ncut option [file]\n```\n\n在执行cut命令时，必须指定-b、-c、-f标志之一。\n\n\n#### 粘贴命令paste\n\npaste命令的作用与cut命令相反，是向文本中添加信息。\n\n```shell\npaste [option] [file1] [file2]\n```\n\n若使用paste命令的参数-s，则可以将一个文件中的多行数据合并成一行。\n注意：**“-s”只是将文件的内容调整了显示方式，并不会改变原文件的内容形式。**\n\n\n####  连接命令join\n\njoin命令的作用与paste类似，也就是向文本中添加信息\n\n```shell\njoin [option] filename1 filename2\n```\n\n其中option选项可以省略，filename1和filename2必须是有序的，且包含相同的列。\n\n| Option     | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| -a<1或2>   | 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行 |\n| -e<字符串> | 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串 |\n| -i         | 比较栏位内容时，忽略大小写的差异                             |\n| -o<格式>   | 按照指定的格式来显示结果                                     |\n| -t<字符>   | 使用栏位的分割字符                                           |\n| -v<1或2>   | 与-a相同，但是只显示文件中没有相同栏位的行                   |\n| -1<栏位>   | 连接[文件1]指定的栏位                                        |\n| -2<栏位>   | 连接[文件2]指定的栏位                                        |\n\n\n### 文本比较\n\n#### 有序文件逐行比较命令comm\n\ncomm功能是选择或拒绝两个已排序的文本文件的公共的行，是按行进行比较\n\n```shell\ncomm [option] filename1 filename2\n```\n其中option选项可以省略，其中-1、-2、-3分别针对comm输出结果中的第1、第2、第3列不显示。\n\n#### 逐行比较命令diff\n\n文件可以是无序的，可以是大的文件集比较，尤其是在程序开发过程中，修改过后，利用 diff可以很方便地查找版本之间的不同之处。\n\n```shell\ndiff [option] file\n```\n\n| Option                                                  | Explanation                                                  |\n| ------------------------------------------------------- | ------------------------------------------------------------ |\n| 缺省                                                    | 比较文件的异同                                               |\n| -<行数>                                                 | 指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。     |\n| -a或--text                                              | diff预设只会逐行比较文本文件。                               |\n| -b或--ignore-space-change                               | 不检查空格字符的不同。                                       |\n| -B或--ignore-blank-lines                                | 不检查空白行。                                               |\n| -c                                                      | 显示全部内容，并标出不同之处。                               |\n| -C<行数>或--context<行数>                               | 与执行“-c-<行数>”指令相同。                                  |\n| -d或--minimal                                           | 使用不同的演算法，以小的单位来做比较。                       |\n| -D<巨集名称>或ifdef<巨集名称>                           | 此参数的输出格式可用于前置处理器巨集。                       |\n| -e或--ed                                                | 此参数的输出格式可用于ed的script文件。                       |\n| -f或-forward-ed                                         | 输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。 |\n| -H或--speed-large-files                                 | 比较大文件时，可加快速度。                                   |\n| -l<字符或字符串>或--ignore-matching-lines<字符或字符串> | 若两个文件在某几行有所不同，而之际航同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。 |\n| -i或--ignore-case                                       | 不检查大小写的不同。                                         |\n| -l或--paginate                                          | 将结果交由pr程序来分页。                                     |\n| -n或——rcs                                               | 将比较结果以RCS的格式来显示。                                |\n| -N或--new-file                                          | 在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录，文件A 若使用-N参数，则diff会将文件A 与一个空白的文件比较。 |\n| -p                                                      | 若比较的文件为C语言的程序码文件时，显示差异所在的函数名称    |\n| -P或--unidirectional-new-file                           | 与-N类似，但只有当第二个目录包含了第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。 |\n| -q或--brief                                             | 仅显示有无差异，不显示详细的信息。                           |\n| -r或--recursive                                         | 比较子目录中的文件。                                         |\n| -s或--report-identical-files                            | 若没有发现任何差异，仍然显示信息。                           |\n| -S<文件>或--starting-file<文件>                         | 在比较目录时，从指定的文件开始比较。                         |\n| -t或--expand-tabs                                       | 在输出时，将tab字符展开。                                    |\n| -T或--initial-tab                                       | 在每行前面加上tab字符以便对齐。                              |\n| -u，-U<列数>或--unified=<列数>                          | 以合并的方式来显示文件内容的不同。                           |\n| -w或--ignore-all-space                                  | 忽略全部的空格字符。                                         |\n| -W<宽度>或--width<宽度>                                 | 在使用-y参数时，指定栏宽                                     |\n| -x<文件名或目录>或--exclude<文件名或目录>               | 不比较选项中所指定的文件或目录                               |\n| -X<文件>或--exclude-from<文件>                          | 可以将文件或目录类型存成文本文件，然后在=<文件>中指定此文本文件。 |\n| -y或--side-by-side                                      | 以并列的方式显示文件的异同之处。                             |\n| --left-column                                           | 在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。 |\n| --suppress-common-lines                                 | 在使用-y参数时，仅显示不同之处。                             |\n\n\n#### 格式化输出printf\n\n```shell\nprintf format [argument]\n```\n\n##### 参数选项表\n\n| Option | Explanation                           |\n| ------ | ------------------------------------- |\n| %s     | 字符串                                |\n| %f     | 浮点格式                              |\n| %c     | ASCII字符，即显示对应参数的第一个字符 |\n| %d,%i  | 十进制整数                            |\n| %o     | 八进制值                              |\n| %u     | 不带正负号的十进制值                  |\n| %x     | 十六进制值（a-f）                     |\n| %X     | 十六进制值（A-F）                     |\n| %%     | 表示%本身                             |\n\n##### 常用转义字符\n\n| 转义字符 | Explanation                                      |\n| -------- | ------------------------------------------------ |\n| \\a       | 警告字符，通常为ASCII的BEL字符。                 |\n| \\b       | 后退                                             |\n| \\f       | 换页                                             |\n| \\n       | 换行                                             |\n| \\r       | 回车                                             |\n| \\t       | 水平制表符                                       |\n| \\v       | 垂直制表符                                       |\n| \\\\       | 表示\\本身                                        |\n| \\ddd     | 表示1到3位数八进制值的字符。仅在格式字符串中有效 |\n| \\0ddd    | 表示1到3位的八进制值字符                         |\n\n\n\n#### 格式化段落fmt\n\nfmt命令的作用是格式化段落，使文本看上去更加整齐。\n\n```shell\nfmt [option] [filename]\n```\n\n#### 行标命令nl\n\nnl命令的功能是为文本创建行号，如果不保存，nl只会在输出中加入行号，阅读起来更加方便，不会影响原文件的文本内容。\n\n```shell\nnl [option] [filename]\n```\n\n\n#### 指定行长度命令fold\n\nfold命令是对行进行操作，将文本行进行折叠，长行分解成短行。\n\n```shell\nflod [option] [filename]\n```\n\n\n### 文本分析工具\n\n#### awk\nawk是一个文本处理工具，完成字符串查找、替换、加工等操作，还包含可以进行模式装入、流控制、数学运算、进程控制等语句。\n```shell\nawk ‘pattern {action}’ file\n```\nawk扫描file中的每一行，对符合模式 pattern的行执行操作action。也可以只有pattern或者action，\n\n\n## 进程管理\n\n### 进程基础\n\n#### 进程概念\n\n-Linux可以同时执行多个用户的多个程序。为了保证程序能够并发执行，需要对程序的执行过程进行动态控制。\n- 进程就是用来描述这一控制过程的，组织安排不同程序等待CPU的调度。\n- 进程是一个具有一定独立功能的程序或程序段在一组数据集合上的一次动态执行过程，同时也是程序能够并发执行的基础机制。\n- 各种资源的分配和管理都是以进程为单位\n\n\n#### 进程的基本组成结构\n\n- 进程控制块PCB(Processing Control Block)是进程动态特征的反映，主要包括进程的描述信息、控制信息、进程使用资源情况等。用于跟踪管理程序状态。\n- 程序段是该进程需要完成功能的程序代码。\n- 数据结构集是进程执行时需要访问的工作区和数据对象，即执行进程时需要的系统资源\n\n\n\n进程在创建时，会被内核赋予一个PID(非负整数)作为进程**唯一标识号。**\n进程PID可以重用，当进程终止后，Linux一般通过延迟重用算法，使得赋予新进程的PID不同于最近终止进程的PID\n\n#### 根据进程的特点和属性，将进程分为\n\n1. 交互进程：由Shell启动的进程，既可以在前台运行，也可以在后台运行，且必须由用户给出某些参数或者信息，进程才能继续执行。\n2. 批处理进程：与终端没有联系，是一个进程序列，负责按照顺序启动其他进程。\n3. 守护进程：执行系统特定功能或者执行系统相关任务的进程，并在后台运行。\n守护进程是一个特殊进程，不是内核的组成部分。\n大部分守护进程是在系统启动时启动，直到系统关闭时才停止运行。 \n\n\n#### 进程运行环境\n\n进程运行环境是由它的程序代码、程序运行所需的数据结构和硬件环境组成的\n\n\n##### 进程运行环境主要包括：\n\n1. 进程空间中的代码和数据、各种数据结构、进程堆栈和共享内存区等。\n2. 环境变量：提供进程运行所需的环境信息。\n3. 系统数据：进程空间中的对进程进行管理和控制所需的信息，包括进程任务结构体以及内核堆栈等。\n4. 进程访问设备或者文件时的权限。\n5. 各种硬件寄存器。\n6. 地址转换信息。\n\n\n进程的运行环境是动态变化的。\n\n在Linux中把系统提供给进程的处于动态变化的运行环境总和称为进程上下文。\n\n\n### 进程管理\n\n#### Linux进程状态\n\n运行状态、就绪状态、阻塞状态（睡眠状态、暂停状态、僵死状态）\n\n进程之间相互独立，一个进程不能改变另一个进程的状态\n\n\n##### 运行状态\n\n它是在run_queue队列里的状态，占有CPU处理进程任务，一个进程只能出现在一个CPU的可执行队列里。同一时刻允许有多个进程处于运行状态，但运行状态的进程总数应小于或等于处理器的个数。\n运行状态分为**用户运行态**和**内核运行态**两种，在内核态下运行的进程不能被其他进程抢占。\n\n##### 就绪状态\n\n就绪状态。该状态的进程已经拥有除CPU以外的所有请求资源，只等待被核心程序调度。\n只要被分配到CPU就可执行，在队列中按照进程优先级进行排队。\n\n##### 睡眠状态\n\n睡眠状态。处于该状态的进程需要被某一事件触发才可继续执行，分为可中断的睡眠状态和不可中断的睡眠状态。\n处于可中断的睡眠状态的进程，是在等待资源被释放，一旦得到资源，进程就会被唤醒进入就绪态。\n由于CPU数量有限，而进程数量众多，所以很多请求无法及时得到响应，因此大部分进程都处于可中断的睡眠状态。\n处于不可中断睡眠状态的进程，只能通过 wake_up( )函数唤醒。 \n\n##### 暂停状态\n\n暂停状态（跟踪状态）。是指进程从内核返回用户时，被核心程序抢先调度了另一个进程，该进程就处于暂停状态。\n处于暂停状态的进程只有等待下次调度，才能返回用户态。当进程收到信号SIGSTOP时会进入暂停状态，发送SIGCONT信号，进程可转换到运行状态。\n\n##### 僵死状态\n\n僵死状态。处于该状态的进程已经终止运行，等待父进程询问其状态，收集它的进程控制块所占资源。\n\n#### 三种基本状态\n\n![image-20211207104316412](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211207104316412.png)\n\n\n（1）运行态：已经分配到CPU，正在处理器上执行。\n（2）就绪态：已经具备运行条件，但所需 CPU资源被其他进程占用，需等待分配CPU。\n（3）阻塞态：尚不具备运行条件，需要等待某种事件的发生，即使CPU空闲，也无法使用。\n\n\n#### 查看进程\n\nps命令可以查看系统中正在运行的进程信息以及进程的状态\n\n```shell\nps [option]\n```\n\n| Option(part)   | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| a              | 显示现行终端机下的所有程序，包括其他用户的程序。             |\n| -A or -e       | 列出所有的行程                                               |\n| -w             | 显示加宽可以显示较多的资讯                                   |\n| -au            | 显示较详细的资讯                                             |\n| -aux           | 显示所有包含其他使用者的行程                                 |\n| c              | 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。 |\n| e              | 列出程序时，显示每个程序所使用的环境变量。                   |\n| f              | 用ASCII字符显示树状结构，表达程序间的相互关系。              |\n| -H             | 显示树状结构，表示程序间的相互关系。                         |\n| -N             | 显示所有的程序，除了执行ps指令终端机下的程序之外。           |\n| s              | 采用程序信号的格式显示程序状况。                             |\n| S              | 列出程序时，包括已中断的子程序资料。                         |\n| -t<终端机编号> | 指定终端机编号，并列出属于该终端机的程序的状况。             |\n| u              | 以用户为主的格式来显示程序状况。                             |\n| x              | 显示所有程序，不以终端机来区分。                             |\n| j              | BSD（Berkeley Software Distribution） job contorl format     |\n| -j             | BSD jobs format                                              |\n\n输出信息的意义\n\n| 名称    | 说明                                                         |\n| ------- | ------------------------------------------------------------ |\n| USER    | 行程拥有者                                                   |\n| PID     | pid                                                          |\n| %CPU    | 占用的CPU使用率                                              |\n| %MEM    | 占用的存储器使用率                                           |\n| VSZ     | 占用的虚拟记忆体大小                                         |\n| RSS     | 占用的存储器大小                                             |\n| TTY     | 终端的次要装置号码 (minor device number of tty)              |\n| STAT    | 该行程的状态                                                 |\n| START   | 行程开始时间                                                 |\n| TIME    | 执行的时间                                                   |\n| COMMAND | 所执行的指令                                                 |\n| PPID    | 父进程的ID                                                   |\n| PRI     | 指进程的执行优先权(Priority的简写)，其值越小越早被执行；     |\n| NI      | 这个进程的nice值，其表示进程可被执行的优先级的修正数值。     |\n| ADDR    | 这个是内核函数，指出该程序在内存的那个部分。如果是个执行 的程序，一般就是『 - 』。 |\n| SZ      | 使用掉的内存大小。                                           |\n| WCHAN   | 目前这个程序是否正在运作当中，若为 - 表示正在运作。          |\n\n| STAT | 该行程的状态说明               |\n| ---- | ------------------------------ |\n| D    | 不可中断的静止                 |\n| R    | 正在执行中                     |\n| S    | 静止状态                       |\n| T    | 暂停执行                       |\n| Z    | 不存在但暂时无法消除           |\n| W    | 没有足够的记忆体分页可分配     |\n| <    | 高优先序的行程                 |\n| N    | 低优先序的行程                 |\n| L    | 有记忆体分页分配并锁在记忆体内 |\n\n\n#### 查看指定进程PID的方法\n\n1. 使用cat命令\n ```shell\ncat /run/sshd.pid\n ```\n2. 使用pidof命令\n```shell\npidof sshd\n```\n3. 使用pgrep命令\n```shell\npgrep sshd\n```\n\n#### 实时动态显示进程信息命令top\n\ntop命令将按照进程活动顺序，持续更新显示当前系统进程的信息。\n\n\n#### kill命令\n\nkill命令用来终止指定进程的运行。\n首先使用ps/pidof/top等工具获取进程PID，然后使用kill命令来杀死该进程。\nkill命令是通过向进程发送指定的信号来结束相应的进程。\n在默认情况下，采用编号为15的TERM信号。\n\n常用信号\n\n| 信号编号 | 名称    | 特性及意义                                                   |\n| -------- | ------- | ------------------------------------------------------------ |\n| 1        | SIGHUP  | 启动被终止的进程，重新加载，PID不会发生变化。                |\n| 9        | SIGKILL | 强制终止进程，使用此信号可能导致进程无法再次启动。           |\n| 15       | SIGTERM | 默认信号，以正常流程终止进程，允许进程释放资源。若进程已经出现问题，无响应，此信号不起作用。 |\n| 18       | SIGCONT | 恢复进程。                                                   |\n| 19       | SIGSTOP | 暂停进程。                                                   |\n\n进程优先级是一个整数，动态优先级和静态优先级决定了进程被CPU处理的顺序。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 指令\n\n### 文件类型判断\n\n```shell\nfile [option] filename\n```\n|第一个字符|\t文件类型|\n|:---:|:---:|\n|-\t|普通文件（如文本文件、二进制文件、压缩文件、图片等）|\n|d\t|目录文件（蓝色）|\n|b\t|设备文件（块设备），存储设备硬盘、U盘、/dev/sda等|\n|c\t|设备文件（字符设备），打印机、终端、/dev/tty1、/dev/zero|\n|s\t|套接字文件|\n|p\t|管道文件|\n|l\t|链接文件（淡蓝色）|\n\n\n### 查看文件的详细属性\n\n```shell\nstate [option] filename\n```\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -[[a]]\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n```shell\nfind [pathname] [option] filename\n```\n\n### 查看用户登录信息\n\n```shell\nid [option][username]\n```\n\n### 查看进程\n\n```shell\nps aux | less命令查看进程\n```\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n","slug":"Linux知识点总结","published":1,"updated":"2021-12-30T15:05:38.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxt3o5jf003sisaxfa6yc5xl","content":"<h1 id=\"Linux知识点总结\"><a href=\"#Linux知识点总结\" class=\"headerlink\" title=\"Linux知识点总结\"></a>Linux知识点总结</h1><h2 id=\"Linux概述\"><a href=\"#Linux概述\" class=\"headerlink\" title=\"Linux概述\"></a>Linux概述</h2><h3 id=\"Linux系统的优缺点\"><a href=\"#Linux系统的优缺点\" class=\"headerlink\" title=\"Linux系统的优缺点\"></a>Linux系统的优缺点</h3><ol>\n<li>优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；</li>\n<li>缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。</li>\n</ol>\n<h3 id=\"Linux系统的特点\"><a href=\"#Linux系统的特点\" class=\"headerlink\" title=\"Linux系统的特点\"></a>Linux系统的特点</h3><ol>\n<li>一切皆文件</li>\n<li>完全兼容可移植操作系统接口POSIX1.0标准</li>\n<li>多用户、多任务</li>\n<li>完全免费</li>\n</ol>\n<h3 id=\"Linux的含义\"><a href=\"#Linux的含义\" class=\"headerlink\" title=\"Linux的含义\"></a>Linux的含义</h3><p>Linux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。<br>通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。<br>Linux是类UNIX操作系统。</p>\n<h3 id=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"><a href=\"#Linux的诞生、发展和成长过程依赖五个重要支柱\" class=\"headerlink\" title=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"></a>Linux的诞生、发展和成长过程依赖五个重要支柱</h3><ol>\n<li>UXIX操作系统</li>\n<li>MINIX操作系统</li>\n<li>GNU计划</li>\n<li>POSIX标准</li>\n<li>Internet</li>\n</ol>\n<h3 id=\"Linux内核的组成\"><a href=\"#Linux内核的组成\" class=\"headerlink\" title=\"Linux内核的组成\"></a>Linux内核的组成</h3><ol>\n<li>内存管理器：对内存资源的访问控制。</li>\n<li>进程管理器：对CPU的访问控制。</li>\n<li>设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。</li>\n<li>虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。</li>\n<li>网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。</li>\n</ol>\n<h3 id=\"shell-分为\"><a href=\"#shell-分为\" class=\"headerlink\" title=\"shell 分为\"></a>shell 分为</h3><ol>\n<li>GLI命令行界面</li>\n<li>GUI图用户界面</li>\n</ol>\n<h3 id=\"Linux文件系统\"><a href=\"#Linux文件系统\" class=\"headerlink\" title=\"Linux文件系统\"></a>Linux文件系统</h3><p>Linux一切皆文件；<br>文件系统是指文件存放在磁盘等存储设备上的组织方法。</p>\n<h2 id=\"Linux基本操作\"><a href=\"#Linux基本操作\" class=\"headerlink\" title=\"Linux基本操作\"></a>Linux基本操作</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><p><strong>命令格式</strong>： command [options] [arguments]  ，命令名：[选项]：[参数]</p>\n<h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man [option] filename</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--help |more</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>Linux 日志文件存放在 /var/log目录下</p>\n<p>日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。</p>\n<h2 id=\"文件系统和文件管理\"><a href=\"#文件系统和文件管理\" class=\"headerlink\" title=\"文件系统和文件管理\"></a>文件系统和文件管理</h2><h3 id=\"Linux文件类型\"><a href=\"#Linux文件类型\" class=\"headerlink\" title=\"Linux文件类型\"></a>Linux文件类型</h3><ol>\n<li>普通文件</li>\n<li>目录文件</li>\n<li>链接文件</li>\n<li>设备文件</li>\n<li>管道文件</li>\n</ol>\n<h4 id=\"普通文件\"><a href=\"#普通文件\" class=\"headerlink\" title=\"普通文件\"></a>普通文件</h4><ul>\n<li>普通文件是指以<strong>字节</strong>为单位的<strong>数据流</strong>类型文件，其特点是不包含文件系统的结构信息。</li>\n<li>通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。</li>\n<li>按其内部结构分为文本文件和二进制文件。</li>\n</ul>\n<h4 id=\"目录文件\"><a href=\"#目录文件\" class=\"headerlink\" title=\"目录文件\"></a>目录文件</h4><ul>\n<li>目录文件不存放常规数据，它是用来<strong>组织</strong>、<strong>访问</strong>其他文件的，是内核组织文件系统的基本节点。</li>\n<li>目录文件可以包含下一级目录文件或普通文件。</li>\n<li>目录文件是一种文件，是Linux文件中的一种</li>\n</ul>\n<h4 id=\"链接文件\"><a href=\"#链接文件\" class=\"headerlink\" title=\"链接文件\"></a>链接文件</h4><ul>\n<li>链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。</li>\n<li>根据链接文件的不同，分为<strong>硬链接</strong>（Hard Link）文件和<strong>符号链接</strong>（Symbolic Link，又称为软链接）文件</li>\n</ul>\n<h4 id=\"设备文件\"><a href=\"#设备文件\" class=\"headerlink\" title=\"设备文件\"></a>设备文件</h4><ul>\n<li>设备文件是Linux中最特殊的文件，可以方便地访问外部设备。</li>\n<li>Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。</li>\n<li>设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。</li>\n<li>根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。</li>\n</ul>\n<h4 id=\"管道文件\"><a href=\"#管道文件\" class=\"headerlink\" title=\"管道文件\"></a>管道文件</h4><ul>\n<li>管道文件是一种很特殊的文件，主要用于不同进程的信息传递。</li>\n<li>当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。</li>\n</ul>\n<h3 id=\"文件类型判断\"><a href=\"#文件类型判断\" class=\"headerlink\" title=\"文件类型判断\"></a>文件类型判断</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件的详细属性\"><a href=\"#查看文件的详细属性\" class=\"headerlink\" title=\"查看文件的详细属性\"></a>查看文件的详细属性</h3><p>使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"显示当前工作目录\"><a href=\"#显示当前工作目录\" class=\"headerlink\" title=\"显示当前工作目录\"></a>显示当前工作目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绝对路径和相对路径\"><a href=\"#绝对路径和相对路径\" class=\"headerlink\" title=\"绝对路径和相对路径\"></a>绝对路径和相对路径</h3><ul>\n<li>绝对路径是以根目录“/”开始，递归每级目录直到目标路径。</li>\n<li>相对路径是以当前目录为起点，到达目标的路径。</li>\n</ul>\n<h3 id=\"显示目录下的文件结构\"><a href=\"#显示目录下的文件结构\" class=\"headerlink\" title=\"显示目录下的文件结构\"></a>显示目录下的文件结构</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree filename</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换目录\"><a href=\"#切换目录\" class=\"headerlink\" title=\"切换目录\"></a>切换目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [directory]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>- ```表示返回到上次目录。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cd ..```表示返回到上一级目录</span><br><span class=\"line\"></span><br><span class=\"line\">### ls命令</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">ls [option] [names]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示所有隐藏文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br></pre></td></tr></table></figure></li>\n<li>显示所有以a开头的文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls a*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"目录的创建和删除\"><a href=\"#目录的创建和删除\" class=\"headerlink\" title=\"目录的创建和删除\"></a>目录的创建和删除</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称<br>参数：-p :创建多层目录，-v：显示创建过程信息</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p><strong>rmdir命令只能用来删除空目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称</p>\n<h3 id=\"文件的创建、查看、复制、移动、删除、排序\"><a href=\"#文件的创建、查看、复制、移动、删除、排序\" class=\"headerlink\" title=\"文件的创建、查看、复制、移动、删除、排序\"></a>文件的创建、查看、复制、移动、删除、排序</h3><h4 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [option] filename</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。</li>\n<li>能够用来连接两个或者多个文件，形成新文件。</li>\n</ul>\n<p>more命令以逐页的方式显示文件的内容.<br>less命令也是对文件或其他输出进行分页显示。<br>head命令可以查看文件的前几行的内容。<br>tail命令查看文件的后几行的内容</p>\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [option] source  dest</span><br></pre></td></tr></table></figure>\n<p>source表示需要复制的文件，dest 表示需要复制到的目录。</p>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv [option] source dest</span><br></pre></td></tr></table></figure>\n<p>为文件或目录改名或者将文件由一个目录移动到另一个目录中</p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除一个目录中的一个或者多个文件。</li>\n<li>将某个目录及其下的所有文件及子目录均删除。</li>\n<li>对于链接文件，只是删除了链接，原有文件均保持不变</li>\n</ul>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>对文件中的各行进行排序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件查找\"><a href=\"#文件查找\" class=\"headerlink\" title=\"文件查找\"></a>文件查找</h3><p>以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][–help][范本样式][文件或目录…]</span><br></pre></td></tr></table></figure>\n\n\n<p>find:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [pathname] [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"linux-文件链接\"><a href=\"#linux-文件链接\" class=\"headerlink\" title=\"linux 文件链接\"></a>linux 文件链接</h3><h4 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h4><ul>\n<li>默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。</li>\n<li>创建一个硬链接时，也为这个文件创建了一个额外的目录条目。</li>\n</ul>\n<h5 id=\"硬链接的局限性\"><a href=\"#硬链接的局限性\" class=\"headerlink\" title=\"硬链接的局限性\"></a>硬链接的局限性</h5><p>（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。<br>（2）硬链接无法引用目录。</p>\n<p>当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了</p>\n<h4 id=\"符号链接（软链接）\"><a href=\"#符号链接（软链接）\" class=\"headerlink\" title=\"符号链接（软链接）\"></a>符号链接（软链接）</h4><p>符号链接指向的文件与符号链接自身几乎没有区别。</p>\n<h3 id=\"文件时间\"><a href=\"#文件时间\" class=\"headerlink\" title=\"文件时间\"></a>文件时间</h3><p>在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。</p>\n<h4 id=\"1-访问时间（Access-time）\"><a href=\"#1-访问时间（Access-time）\" class=\"headerlink\" title=\"1.访问时间（Access time）\"></a>1.访问时间（Access time）</h4><p>对文件内容进行一次读操作时间。</p>\n<h4 id=\"2-修改时间（Change-time）\"><a href=\"#2-修改时间（Change-time）\" class=\"headerlink\" title=\"2.修改时间（Change time）\"></a>2.修改时间（Change time）</h4><p>文件内容被最后一次修改的时间。</p>\n<p>ls -l 命令显示出来的文件时间就是这个时间</p>\n<h4 id=\"3-状态时间（Modify-time）\"><a href=\"#3-状态时间（Modify-time）\" class=\"headerlink\" title=\"3.状态时间（Modify time）\"></a>3.状态时间（Modify time）</h4><p>当文件的状态被改变时，状态时间就会改变</p>\n<h2 id=\"Linux用户管理\"><a href=\"#Linux用户管理\" class=\"headerlink\" title=\"Linux用户管理\"></a>Linux用户管理</h2><p>超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。</p>\n<p>Linux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID</p>\n<p>id命令可以查看当前用户登录信息。</p>\n<ul>\n<li>UID(User Identification)为用户的ID。</li>\n<li>GID(Group Identification)为用户所属组的ID。</li>\n<li>groups为用户属于的所有组的ID。</li>\n</ul>\n<p>ps aux | less命令查看进程</p>\n<h3 id=\"用户分类\"><a href=\"#用户分类\" class=\"headerlink\" title=\"用户分类\"></a>用户分类</h3><ol>\n<li>root用户：拥有最高权限，ID为0。</li>\n<li>普通用户：可以登录，由管理员创建，使用权限有限。</li>\n<li>系统用户：不具有登录的能力，但是系统运行不可或缺的。</li>\n</ol>\n<h3 id=\"管理用户组\"><a href=\"#管理用户组\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><ul>\n<li>useradd用来添加用户。</li>\n<li>passwd修改用户口令。</li>\n<li>usermod修改用户信息。</li>\n<li>userdel删除用户。</li>\n</ul>\n<h4 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h4><p>添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd [option] username</span><br></pre></td></tr></table></figure>\n<p>username表示新账号的登录名</p>\n<h4 id=\"修改用户口令\"><a href=\"#修改用户口令\" class=\"headerlink\" title=\"修改用户口令\"></a>修改用户口令</h4><p>用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd [option] [username]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>username参数没有指定时，表示修改当前用户的口令。</li>\n<li>如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限</li>\n</ul>\n<h4 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h4><p>删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel [option] username</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户信息\"><a href=\"#修改用户信息\" class=\"headerlink\" title=\"修改用户信息\"></a>修改用户信息</h4><p>修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod [option] username</span><br></pre></td></tr></table></figure>\n\n<p>gpasswd命令–从用户组中移出一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"管理用户组-1\"><a href=\"#管理用户组-1\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><p>用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户</p>\n<h4 id=\"添加用户组\"><a href=\"#添加用户组\" class=\"headerlink\" title=\"添加用户组\"></a>添加用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd [option] group_name</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"删除用户组\"><a href=\"#删除用户组\" class=\"headerlink\" title=\"删除用户组\"></a>删除用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户组\"><a href=\"#修改用户组\" class=\"headerlink\" title=\"修改用户组\"></a>修改用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod [option] group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看用户的分组\"><a href=\"#查看用户的分组\" class=\"headerlink\" title=\"查看用户的分组\"></a>查看用户的分组</h4><ol>\n<li>groups命令查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups</span><br><span class=\"line\">groups user1 user2</span><br></pre></td></tr></table></figure></li>\n<li>查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。</li>\n<li>id命令法，只执行id命令就可以查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br><span class=\"line\">id user2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"和用户相关的一些系统文件\"><a href=\"#和用户相关的一些系统文件\" class=\"headerlink\" title=\"和用户相关的一些系统文件\"></a>和用户相关的一些系统文件</h3><ol>\n<li>/etc/passwd文件保存用户信息。</li>\n<li>/etc/shadow文件保存加密的用户密码。</li>\n<li>/etc/group文件保存用户组信息。</li>\n<li>/etc/login.defs配置文件。</li>\n</ol>\n<p><strong>su root</strong>可以返回root </p>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><p>权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。</p>\n<h3 id=\"U-G-O\"><a href=\"#U-G-O\" class=\"headerlink\" title=\"U G O\"></a>U G O</h3><p>U: owner为属主，文件所有者。<br>G：group为属组，同组用户。<br>O：other为其他用户。</p>\n<h3 id=\"UGO方式每组的3个字符具体意义如下：\"><a href=\"#UGO方式每组的3个字符具体意义如下：\" class=\"headerlink\" title=\"UGO方式每组的3个字符具体意义如下：\"></a>UGO方式每组的3个字符具体意义如下：</h3><p>r:read，数字设定值为4<br>w:write,数字设定值为2<br>x:execute,数字设定值为1</p>\n<h3 id=\"设置文件属性和权限\"><a href=\"#设置文件属性和权限\" class=\"headerlink\" title=\"设置文件属性和权限\"></a>设置文件属性和权限</h3><h4 id=\"改变文件所属用户命令chown\"><a href=\"#改变文件所属用户命令chown\" class=\"headerlink\" title=\"改变文件所属用户命令chown\"></a>改变文件所属用户命令chown</h4><p>文件所有者修改为指定的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">显示更改的部分的信息</td>\n</tr>\n<tr>\n<td align=\"center\">-f</td>\n<td align=\"center\">忽略错误信息</td>\n</tr>\n<tr>\n<td align=\"center\">-h</td>\n<td align=\"center\">修复符号链接</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"center\">显示详细的处理信息</td>\n</tr>\n<tr>\n<td align=\"center\">-R</td>\n<td align=\"center\">处理指定目录以及其子目录下的所有文件</td>\n</tr>\n<tr>\n<td align=\"center\">–help</td>\n<td align=\"center\">显示辅助说明</td>\n</tr>\n<tr>\n<td align=\"center\">–version</td>\n<td align=\"center\">显示版本</td>\n</tr>\n</tbody></table>\n<h4 id=\"改变文件所在组命令chgrp\"><a href=\"#改变文件所在组命令chgrp\" class=\"headerlink\" title=\"改变文件所在组命令chgrp\"></a>改变文件所在组命令chgrp</h4><p>变更目录和文件的所属组，只有超级用户才拥有此权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp [option] group file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c或–changes</td>\n<td align=\"center\">效果类似”-v”参数，但仅回报更改部分。</td>\n</tr>\n<tr>\n<td align=\"center\">-f或–quiet或–silent</td>\n<td align=\"center\">不显示错误信息。</td>\n</tr>\n<tr>\n<td align=\"center\">-h或–no-dereference</td>\n<td align=\"center\">只对符号连接的文件作修改，而不更动其他任何相关文件。</td>\n</tr>\n<tr>\n<td align=\"center\">-R或–recursive</td>\n<td align=\"center\">递归处理，将指定目录下的所有文件及子目录一并处理。</td>\n</tr>\n<tr>\n<td align=\"center\">-v或–verbose</td>\n<td align=\"center\">显示指令执行过程。</td>\n</tr>\n<tr>\n<td align=\"center\">–reference=&amp;lt</td>\n<td align=\"center\">参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</td>\n</tr>\n</tbody></table>\n<h4 id=\"修改文件或目录的权限chmod\"><a href=\"#修改文件或目录的权限chmod\" class=\"headerlink\" title=\"修改文件或目录的权限chmod\"></a>修改文件或目录的权限chmod</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure>\n<p>u表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。<br>+表示增加权限、-表示取消权限、=表示唯一设定权限。<br>r表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p>\n<h5 id=\"修改文件权限的方法有2种\"><a href=\"#修改文件权限的方法有2种\" class=\"headerlink\" title=\"修改文件权限的方法有2种\"></a>修改文件权限的方法有2种</h5><ol>\n<li>符号法（表达式法）<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [who] [operator] [mode] file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>who指定用户身份，若此参数省略，则表示对所有用户进行操作。</li>\n<li>operator表示添加或取消某个权限，取值为“+”或“-”。</li>\n<li>mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。</li>\n</ul>\n<ol start=\"2\">\n<li>数字法<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 数字 file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"><a href=\"#存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\" class=\"headerlink\" title=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"></a>存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。</h3><h3 id=\"基础权限ACL\"><a href=\"#基础权限ACL\" class=\"headerlink\" title=\"基础权限ACL\"></a>基础权限ACL</h3><p>主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。</p>\n<h4 id=\"getfacl命令\"><a href=\"#getfacl命令\" class=\"headerlink\" title=\"getfacl命令\"></a>getfacl命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl [-aceEsRLPtpndvh] file ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"setfacl命令可以设置ACL权限\"><a href=\"#setfacl命令可以设置ACL权限\" class=\"headerlink\" title=\"setfacl命令可以设置ACL权限\"></a>setfacl命令可以设置ACL权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux编程基础\"><a href=\"#linux编程基础\" class=\"headerlink\" title=\"linux编程基础\"></a>linux编程基础</h2><p>make可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，</p>\n<p>make通过makefile文件描述的内容自动维护编译工作。</p>\n<h2 id=\"shell编程\"><a href=\"#shell编程\" class=\"headerlink\" title=\"shell编程\"></a>shell编程</h2><p>Shell脚本是一个包含一系列命令的文件。<br>Shell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。</p>\n<h3 id=\"用Shell脚本的原因：\"><a href=\"#用Shell脚本的原因：\" class=\"headerlink\" title=\"用Shell脚本的原因：\"></a>用Shell脚本的原因：</h3><ol>\n<li>效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 </li>\n<li>简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。</li>\n<li>可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。</li>\n<li>开发容易：可以在短时间内完成一个功能强大又好用的脚本。</li>\n</ol>\n<h3 id=\"Shell分类：\"><a href=\"#Shell分类：\" class=\"headerlink\" title=\"Shell分类：\"></a>Shell分类：</h3><ol>\n<li>用于用户交互接口的Shell称为交互式Shell。</li>\n<li>作为命令解析器的Shell称为非交互式Shell。</li>\n</ol>\n<h3 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h3><p>脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，</p>\n<p>Shell的注释以“#”开头，注释的内容不会执行。</p>\n<p>给文件helloxiangtian.sh增加可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chomd +x helloxiangtan.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shell变量命名规则：\"><a href=\"#Shell变量命名规则：\" class=\"headerlink\" title=\"Shell变量命名规则：\"></a>Shell变量命名规则：</h3><p>变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 </p>\n<h3 id=\"shell变量分类\"><a href=\"#shell变量分类\" class=\"headerlink\" title=\"shell变量分类\"></a>shell变量分类</h3><p>Shell变量分为自定义变量、环境变量、位置变量和预定义变量。</p>\n<p>根据工作要求临时定义的变量称为自定义变量。<br>环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。<br>从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。<br>预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$*等。</p>\n<p>Shell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。</p>\n<h4 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义自定义变量</td>\n<td align=\"center\">变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。</td>\n</tr>\n<tr>\n<td align=\"center\">使用自定义变量</td>\n<td align=\"center\">$变量名</td>\n</tr>\n<tr>\n<td align=\"center\">查看自定义变量</td>\n<td align=\"center\">echo $变量名 set（所有变量：自定义变量和环境变量）</td>\n</tr>\n<tr>\n<td align=\"center\">取消自定义变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">自定义变量作用范围</td>\n<td align=\"center\">仅在当前shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>在各种编程语言中会提及全局变量概念。<br>全局变量可以在程序的任何地方使用。<br>在Shell编程中该功能由环境变量实现。<br>系统中的所有进程都可以使用环境变量。<br>环境变量与全局变量区别：<br>子进程对环境变量的修改不会传递到父进程中。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义环境变量</td>\n<td align=\"center\">使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。</td>\n</tr>\n<tr>\n<td align=\"center\">使用环境变量</td>\n<td align=\"center\">$变量名或$｛变量名｝</td>\n</tr>\n<tr>\n<td align=\"center\">查看环境变量</td>\n<td align=\"center\">echo $变量名 或env，如env</td>\n</tr>\n<tr>\n<td align=\"center\">取消环境变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">环境变量作用范围</td>\n<td align=\"center\">仅在当前shell和子shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"位置变量\"><a href=\"#位置变量\" class=\"headerlink\" title=\"位置变量\"></a>位置变量</h4><p>位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。<br>执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">0代表命令本身，<span class=\"variable\">$1</span>-<span class=\"variable\">$9</span>代表接收的第1~9个参数，<span class=\"variable\">$10</span>以上需要用&#123;&#125;括起来，如<span class=\"variable\">$&#123;20&#125;</span>代表接收的第20个参数。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h4><p>预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">预定义变量</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"left\">脚本名</td>\n</tr>\n<tr>\n<td align=\"center\">$*</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$@</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$#</td>\n<td align=\"left\">参数的个数</td>\n</tr>\n<tr>\n<td align=\"center\">$$</td>\n<td align=\"left\">当前进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$!</td>\n<td align=\"left\">上一个后台进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$?</td>\n<td align=\"left\">上一个命令的返回值，0表示成功。</td>\n</tr>\n</tbody></table>\n<h3 id=\"变量的操作\"><a href=\"#变量的操作\" class=\"headerlink\" title=\"变量的操作\"></a>变量的操作</h3><p>变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。</p>\n<p>变量创建好后，可以用$变量名的方式获取变量的值。</p>\n<p>可以使用$符号获取变量的值。</p>\n<p>用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。</p>\n<h4 id=\"变量的删除\"><a href=\"#变量的删除\" class=\"headerlink\" title=\"变量的删除\"></a>变量的删除</h4><table>\n<thead>\n<tr>\n<th align=\"center\">格式</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">${变量名#关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名##关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n</tbody></table>\n<h4 id=\"变量的替换\"><a href=\"#变量的替换\" class=\"headerlink\" title=\"变量的替换\"></a>变量的替换</h4><p>|格式  |说明|<br>|:—:|：—：|<br>|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|<br>|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|</p>\n<h4 id=\"变量的替代\"><a href=\"#变量的替代\" class=\"headerlink\" title=\"变量的替代\"></a>变量的替代</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;变量名-新的变量名&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>在Shell中，变量值的类型默认是字符串，不直接进行运算。</p>\n<p>用于整数运算的方法有expr、(())和$[]。</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr expression</span><br><span class=\"line\">例：</span><br><span class=\"line\">n1 + n2</span><br><span class=\"line\">expr $n1 + $n2</span><br></pre></td></tr></table></figure>\n<p>运算符及用于计算的数字两边必须有空格，否则会执行失败。<br>用expr进行乘法运算时，必须在<em>前用反斜线转义（Shell可能误解为</em>号）。</p>\n<p>“（（））”或“[ ]”数值运算命令<br>双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符<br>格式：<br>“ ((expression))”，或“ [expression]”<br>括号内部两侧可以有空格，也可省空格。<br>需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1+n2</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">((<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>))</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">[<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>let数值运算命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let expression</span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\">let sum = n1+n2;</span><br></pre></td></tr></table></figure>\n\n<p>let数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量</p>\n<h3 id=\"shell中的特殊符号\"><a href=\"#shell中的特殊符号\" class=\"headerlink\" title=\"shell中的特殊符号\"></a>shell中的特殊符号</h3><h4 id=\"1-“-”表示注释。\"><a href=\"#1-“-”表示注释。\" class=\"headerlink\" title=\"1. “#”表示注释。\"></a>1. “#”表示注释。</h4><ul>\n<li>行首为#（#!是个例外）表示此行是注释。</li>\n<li>注释也可以放在本行命令的后面，需要注意的是#两边有空格。</li>\n<li>释也可以放在本行行首空白的后面。</li>\n</ul>\n<h4 id=\"2-“-“\"><a href=\"#2-“-“\" class=\"headerlink\" title=\"2. “ ; “\"></a>2. “ ; “</h4><ul>\n<li>“;”在同一行中分隔两个或者两个以上的命令。</li>\n<li>“;”也适用于循环语句</li>\n</ul>\n<h4 id=\"3-“-”\"><a href=\"#3-“-”\" class=\"headerlink\" title=\"3. “;;”\"></a>3. “;;”</h4><ul>\n<li>用于终止case语句</li>\n</ul>\n<h4 id=\"4-“-”\"><a href=\"#4-“-”\" class=\"headerlink\" title=\"4. “:”\"></a>4. “:”</h4><ul>\n<li>空命令“:”和true命令作用相同。</li>\n<li>在while死循环和if/then中也可使用这个命令。</li>\n</ul>\n<h4 id=\"5-“-”\"><a href=\"#5-“-”\" class=\"headerlink\" title=\"5. “.”\"></a>5. “.”</h4><ul>\n<li>“.”等价于source命令，是bash中的一个内建命令。</li>\n<li>“.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。</li>\n<li>当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。</li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><h5 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h5><p>echo命令是最常用的，其功能是将字符串输出到屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo [-ne] [string]</span><br></pre></td></tr></table></figure>\n<p>其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符</p>\n<h5 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h5><p>输出命令printf的功能是格式化输出数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf format [arguments...]</span><br></pre></td></tr></table></figure>\n\n<p>format为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。<br>arguments为要输出的数据。</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><h5 id=\"1-直接给变量赋值\"><a href=\"#1-直接给变量赋值\" class=\"headerlink\" title=\"1. 直接给变量赋值\"></a>1. 直接给变量赋值</h5><p>例如，name=liming</p>\n<h5 id=\"2-从键盘读入赋值\"><a href=\"#2-从键盘读入赋值\" class=\"headerlink\" title=\"2. 从键盘读入赋值\"></a>2. 从键盘读入赋值</h5><ul>\n<li>read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read  [options] [variable…]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-使用命令行参数赋值\"><a href=\"#3-使用命令行参数赋值\" class=\"headerlink\" title=\"3. 使用命令行参数赋值\"></a>3. 使用命令行参数赋值</h5><p>使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数……，这种赋值方法适用于参数经常变化且不需要交互的情况。</p>\n<h5 id=\"4-利用命令的输出结果赋值\"><a href=\"#4-利用命令的输出结果赋值\" class=\"headerlink\" title=\"4. 利用命令的输出结果赋值\"></a>4. 利用命令的输出结果赋值</h5><ul>\n<li>在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。</li>\n<li>把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名</li>\n</ul>\n<h5 id=\"5-从文件中读入数据赋值\"><a href=\"#5-从文件中读入数据赋值\" class=\"headerlink\" title=\"5. 从文件中读入数据赋值\"></a>5. 从文件中读入数据赋值</h5><p>这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 转义字符：用于引用任意的单个字符。</span><br><span class=\"line\">2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。</span><br><span class=\"line\">3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><h4 id=\"文件测试\"><a href=\"#文件测试\" class=\"headerlink\" title=\"文件测试\"></a>文件测试</h4><ol>\n<li>test<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“test  &lt;expression&gt;”</span><br></pre></td></tr></table></figure></li>\n<li>“&lt;测试表达式&gt;”</li>\n</ol>\n<p>也可以使用“&lt;测试表达式&gt;”，就是使用中括号。<br>语法格式：<br>“ [  <expression> ]”<br>注意：[]与expression之间必须有空格。<br>通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。</p>\n<h4 id=\"整数测试\"><a href=\"#整数测试\" class=\"headerlink\" title=\"整数测试\"></a>整数测试</h4><p>整数测试通常用于数值之间的运算。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">       [ 整数1 操作符 整数2 ]</span><br><span class=\"line\">或   test 整数1 操作符 整数2。</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符1</th>\n<th align=\"center\">操作符2(部分能用)  意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-eq ==</td>\n<td align=\"center\">等于（Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-ge &gt;=</td>\n<td align=\"center\">大于等于（Greater or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-gt &gt;</td>\n<td align=\"center\">大于（Greater Than-le）</td>\n</tr>\n<tr>\n<td align=\"center\">-le &lt;=</td>\n<td align=\"center\">小于等于（Lesser or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-lt</td>\n<td align=\"center\">&lt;   小于（Lesser Than）</td>\n</tr>\n<tr>\n<td align=\"center\">-ne !=</td>\n<td align=\"center\">不等于（Not Equal）</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串测试\"><a href=\"#字符串测试\" class=\"headerlink\" title=\"字符串测试\"></a>字符串测试</h4><p>字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 字符串1 = 字符串2 ]</span><br><span class=\"line\">[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression1 op expression2 ]</span><br><span class=\"line\">or       command1 op commnad2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">! expr</td>\n<td align=\"center\">如果表达式评估为假，则为真</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -a expr2</td>\n<td align=\"center\">如果 expr1 和 expr2 都为真，则结果为真，&amp;&amp;</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -o expr2</td>\n<td align=\"center\">如果 expr1 或 expr2 为真，则结果为真，</td>\n</tr>\n</tbody></table>\n<h3 id=\"if语句格式\"><a href=\"#if语句格式\" class=\"headerlink\" title=\"if语句格式\"></a>if语句格式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语句格式：</span><br><span class=\"line\">if [ expression ];then  code</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then code</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ expression ];then  code1</span><br><span class=\"line\">else code2</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then   code1</span><br><span class=\"line\">else  code2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if expression; then</span><br><span class=\"line\"> command…</span><br><span class=\"line\">[elif expression; then</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">[else</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case value in</span><br><span class=\"line\">    [ expression1) code1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    expression2) code2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    …</span><br><span class=\"line\">    *）code</span><br><span class=\"line\">    ]</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"while-命令\"><a href=\"#while-命令\" class=\"headerlink\" title=\"while 命令\"></a>while 命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while expression; do</span><br><span class=\"line\">       command…</span><br><span class=\"line\">done   </span><br></pre></td></tr></table></figure>\n<h4 id=\"until命令\"><a href=\"#until命令\" class=\"headerlink\" title=\"until命令\"></a>until命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until expression; do</span><br><span class=\"line\">     command…</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  variable in [in sequence]</span><br><span class=\"line\">do</span><br><span class=\"line\">    code</span><br><span class=\"line\">done </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  变量名 in 取值列表；do     循环体 done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable [in sequence]; do</span><br><span class=\"line\">          command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((expression1; expression2; expression3;));do</span><br><span class=\"line\">           command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n\n\n<p>在循环后面加个 &amp; 符号表示在后台执行</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"数组分为普通数组和关联数组。\"><a href=\"#数组分为普通数组和关联数组。\" class=\"headerlink\" title=\"数组分为普通数组和关联数组。\"></a>数组分为普通数组和关联数组。</h4><p>普通数组中的索引（下标）都是整数。<br>关联数组的数组索引可以用任意的文本。</p>\n<p>两者最大区别：</p>\n<ul>\n<li>关联数组使用之前需要声明。</li>\n<li>关联数组是由特定格式的键值对组成</li>\n</ul>\n<h4 id=\"普通数组\"><a href=\"#普通数组\" class=\"headerlink\" title=\"普通数组\"></a>普通数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（value_table）</span><br></pre></td></tr></table></figure>\n\n<p>value_table中值之间用空格隔开。</p>\n<h4 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)</span><br></pre></td></tr></table></figure>\n<p>其中：<br>indexei可以用标识符表示。</p>\n<p>声明普通数组方法：<br>#declare -a arrayname<br>声明关联数组方法：<br>#declare -A arrayname</p>\n<h4 id=\"数组定义方法\"><a href=\"#数组定义方法\" class=\"headerlink\" title=\"数组定义方法\"></a>数组定义方法</h4><ul>\n<li><p>直接定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=(value1 value2 value3 ... valuen)</span><br></pre></td></tr></table></figure></li>\n<li><p>下标定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=([index1]=value1 [index2]=value2 ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>间接定义数组</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0]=value1;array[1]=value2;....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从文件中读入定义数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=($(command))</span><br><span class=\"line\">array_name=($(`variable`))</span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\">array_name=(`command`)</span><br><span class=\"line\">array_name=(`variable`)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问数组表达式\"><a href=\"#访问数组表达式\" class=\"headerlink\" title=\"访问数组表达式\"></a>访问数组表达式</h4><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>echo ${!array[*]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${!array[@]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${array[*]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo ${array[@]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo $</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":10522,"excerpt":"","more":"<h1 id=\"Linux知识点总结\"><a href=\"#Linux知识点总结\" class=\"headerlink\" title=\"Linux知识点总结\"></a>Linux知识点总结</h1><h2 id=\"Linux概述\"><a href=\"#Linux概述\" class=\"headerlink\" title=\"Linux概述\"></a>Linux概述</h2><h3 id=\"Linux系统的优缺点\"><a href=\"#Linux系统的优缺点\" class=\"headerlink\" title=\"Linux系统的优缺点\"></a>Linux系统的优缺点</h3><ol>\n<li>优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；</li>\n<li>缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。</li>\n</ol>\n<h3 id=\"Linux系统的特点\"><a href=\"#Linux系统的特点\" class=\"headerlink\" title=\"Linux系统的特点\"></a>Linux系统的特点</h3><ol>\n<li>一切皆文件</li>\n<li>完全兼容可移植操作系统接口POSIX1.0标准</li>\n<li>多用户、多任务</li>\n<li>完全免费</li>\n</ol>\n<h3 id=\"Linux的含义\"><a href=\"#Linux的含义\" class=\"headerlink\" title=\"Linux的含义\"></a>Linux的含义</h3><p>Linux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。<br>通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。<br>Linux是类UNIX操作系统。</p>\n<h3 id=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"><a href=\"#Linux的诞生、发展和成长过程依赖五个重要支柱\" class=\"headerlink\" title=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"></a>Linux的诞生、发展和成长过程依赖五个重要支柱</h3><ol>\n<li>UXIX操作系统</li>\n<li>MINIX操作系统</li>\n<li>GNU计划</li>\n<li>POSIX标准</li>\n<li>Internet</li>\n</ol>\n<h3 id=\"Linux内核的组成\"><a href=\"#Linux内核的组成\" class=\"headerlink\" title=\"Linux内核的组成\"></a>Linux内核的组成</h3><ol>\n<li>内存管理器：对内存资源的访问控制。</li>\n<li>进程管理器：对CPU的访问控制。</li>\n<li>设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。</li>\n<li>虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。</li>\n<li>网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。</li>\n</ol>\n<h3 id=\"shell-分为\"><a href=\"#shell-分为\" class=\"headerlink\" title=\"shell 分为\"></a>shell 分为</h3><ol>\n<li>GLI命令行界面</li>\n<li>GUI图用户界面</li>\n</ol>\n<h3 id=\"Linux文件系统\"><a href=\"#Linux文件系统\" class=\"headerlink\" title=\"Linux文件系统\"></a>Linux文件系统</h3><p>Linux一切皆文件；<br>文件系统是指文件存放在磁盘等存储设备上的组织方法。</p>\n<h2 id=\"Linux基本操作\"><a href=\"#Linux基本操作\" class=\"headerlink\" title=\"Linux基本操作\"></a>Linux基本操作</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><p><strong>命令格式</strong>： command [options] [arguments]  ，命令名：[选项]：[参数]</p>\n<h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man [option] filename</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--help |more</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>Linux 日志文件存放在 /var/log目录下</p>\n<p>日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。</p>\n<h2 id=\"文件系统和文件管理\"><a href=\"#文件系统和文件管理\" class=\"headerlink\" title=\"文件系统和文件管理\"></a>文件系统和文件管理</h2><h3 id=\"Linux文件类型\"><a href=\"#Linux文件类型\" class=\"headerlink\" title=\"Linux文件类型\"></a>Linux文件类型</h3><ol>\n<li>普通文件</li>\n<li>目录文件</li>\n<li>链接文件</li>\n<li>设备文件</li>\n<li>管道文件</li>\n</ol>\n<h4 id=\"普通文件\"><a href=\"#普通文件\" class=\"headerlink\" title=\"普通文件\"></a>普通文件</h4><ul>\n<li>普通文件是指以<strong>字节</strong>为单位的<strong>数据流</strong>类型文件，其特点是不包含文件系统的结构信息。</li>\n<li>通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。</li>\n<li>按其内部结构分为文本文件和二进制文件。</li>\n</ul>\n<h4 id=\"目录文件\"><a href=\"#目录文件\" class=\"headerlink\" title=\"目录文件\"></a>目录文件</h4><ul>\n<li>目录文件不存放常规数据，它是用来<strong>组织</strong>、<strong>访问</strong>其他文件的，是内核组织文件系统的基本节点。</li>\n<li>目录文件可以包含下一级目录文件或普通文件。</li>\n<li>目录文件是一种文件，是Linux文件中的一种</li>\n</ul>\n<h4 id=\"链接文件\"><a href=\"#链接文件\" class=\"headerlink\" title=\"链接文件\"></a>链接文件</h4><ul>\n<li>链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。</li>\n<li>根据链接文件的不同，分为<strong>硬链接</strong>（Hard Link）文件和<strong>符号链接</strong>（Symbolic Link，又称为软链接）文件</li>\n</ul>\n<h4 id=\"设备文件\"><a href=\"#设备文件\" class=\"headerlink\" title=\"设备文件\"></a>设备文件</h4><ul>\n<li>设备文件是Linux中最特殊的文件，可以方便地访问外部设备。</li>\n<li>Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。</li>\n<li>设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。</li>\n<li>根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。</li>\n</ul>\n<h4 id=\"管道文件\"><a href=\"#管道文件\" class=\"headerlink\" title=\"管道文件\"></a>管道文件</h4><ul>\n<li>管道文件是一种很特殊的文件，主要用于不同进程的信息传递。</li>\n<li>当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。</li>\n</ul>\n<h3 id=\"文件类型判断\"><a href=\"#文件类型判断\" class=\"headerlink\" title=\"文件类型判断\"></a>文件类型判断</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件的详细属性\"><a href=\"#查看文件的详细属性\" class=\"headerlink\" title=\"查看文件的详细属性\"></a>查看文件的详细属性</h3><p>使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"显示当前工作目录\"><a href=\"#显示当前工作目录\" class=\"headerlink\" title=\"显示当前工作目录\"></a>显示当前工作目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绝对路径和相对路径\"><a href=\"#绝对路径和相对路径\" class=\"headerlink\" title=\"绝对路径和相对路径\"></a>绝对路径和相对路径</h3><ul>\n<li>绝对路径是以根目录“/”开始，递归每级目录直到目标路径。</li>\n<li>相对路径是以当前目录为起点，到达目标的路径。</li>\n</ul>\n<h3 id=\"显示目录下的文件结构\"><a href=\"#显示目录下的文件结构\" class=\"headerlink\" title=\"显示目录下的文件结构\"></a>显示目录下的文件结构</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree filename</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换目录\"><a href=\"#切换目录\" class=\"headerlink\" title=\"切换目录\"></a>切换目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [directory]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>- ```表示返回到上次目录。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cd ..```表示返回到上一级目录</span><br><span class=\"line\"></span><br><span class=\"line\">### ls命令</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">ls [option] [names]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示所有隐藏文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br></pre></td></tr></table></figure></li>\n<li>显示所有以a开头的文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls a*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"目录的创建和删除\"><a href=\"#目录的创建和删除\" class=\"headerlink\" title=\"目录的创建和删除\"></a>目录的创建和删除</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称<br>参数：-p :创建多层目录，-v：显示创建过程信息</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p><strong>rmdir命令只能用来删除空目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称</p>\n<h3 id=\"文件的创建、查看、复制、移动、删除、排序\"><a href=\"#文件的创建、查看、复制、移动、删除、排序\" class=\"headerlink\" title=\"文件的创建、查看、复制、移动、删除、排序\"></a>文件的创建、查看、复制、移动、删除、排序</h3><h4 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [option] filename</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。</li>\n<li>能够用来连接两个或者多个文件，形成新文件。</li>\n</ul>\n<p>more命令以逐页的方式显示文件的内容.<br>less命令也是对文件或其他输出进行分页显示。<br>head命令可以查看文件的前几行的内容。<br>tail命令查看文件的后几行的内容</p>\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [option] source  dest</span><br></pre></td></tr></table></figure>\n<p>source表示需要复制的文件，dest 表示需要复制到的目录。</p>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv [option] source dest</span><br></pre></td></tr></table></figure>\n<p>为文件或目录改名或者将文件由一个目录移动到另一个目录中</p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除一个目录中的一个或者多个文件。</li>\n<li>将某个目录及其下的所有文件及子目录均删除。</li>\n<li>对于链接文件，只是删除了链接，原有文件均保持不变</li>\n</ul>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>对文件中的各行进行排序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件查找\"><a href=\"#文件查找\" class=\"headerlink\" title=\"文件查找\"></a>文件查找</h3><p>以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][–help][范本样式][文件或目录…]</span><br></pre></td></tr></table></figure>\n\n\n<p>find:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [pathname] [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"linux-文件链接\"><a href=\"#linux-文件链接\" class=\"headerlink\" title=\"linux 文件链接\"></a>linux 文件链接</h3><h4 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h4><ul>\n<li>默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。</li>\n<li>创建一个硬链接时，也为这个文件创建了一个额外的目录条目。</li>\n</ul>\n<h5 id=\"硬链接的局限性\"><a href=\"#硬链接的局限性\" class=\"headerlink\" title=\"硬链接的局限性\"></a>硬链接的局限性</h5><p>（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。<br>（2）硬链接无法引用目录。</p>\n<p>当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了</p>\n<h4 id=\"符号链接（软链接）\"><a href=\"#符号链接（软链接）\" class=\"headerlink\" title=\"符号链接（软链接）\"></a>符号链接（软链接）</h4><p>符号链接指向的文件与符号链接自身几乎没有区别。</p>\n<h3 id=\"文件时间\"><a href=\"#文件时间\" class=\"headerlink\" title=\"文件时间\"></a>文件时间</h3><p>在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。</p>\n<h4 id=\"1-访问时间（Access-time）\"><a href=\"#1-访问时间（Access-time）\" class=\"headerlink\" title=\"1.访问时间（Access time）\"></a>1.访问时间（Access time）</h4><p>对文件内容进行一次读操作时间。</p>\n<h4 id=\"2-修改时间（Change-time）\"><a href=\"#2-修改时间（Change-time）\" class=\"headerlink\" title=\"2.修改时间（Change time）\"></a>2.修改时间（Change time）</h4><p>文件内容被最后一次修改的时间。</p>\n<p>ls -l 命令显示出来的文件时间就是这个时间</p>\n<h4 id=\"3-状态时间（Modify-time）\"><a href=\"#3-状态时间（Modify-time）\" class=\"headerlink\" title=\"3.状态时间（Modify time）\"></a>3.状态时间（Modify time）</h4><p>当文件的状态被改变时，状态时间就会改变</p>\n<h2 id=\"Linux用户管理\"><a href=\"#Linux用户管理\" class=\"headerlink\" title=\"Linux用户管理\"></a>Linux用户管理</h2><p>超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。</p>\n<p>Linux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID</p>\n<p>id命令可以查看当前用户登录信息。</p>\n<ul>\n<li>UID(User Identification)为用户的ID。</li>\n<li>GID(Group Identification)为用户所属组的ID。</li>\n<li>groups为用户属于的所有组的ID。</li>\n</ul>\n<p>ps aux | less命令查看进程</p>\n<h3 id=\"用户分类\"><a href=\"#用户分类\" class=\"headerlink\" title=\"用户分类\"></a>用户分类</h3><ol>\n<li>root用户：拥有最高权限，ID为0。</li>\n<li>普通用户：可以登录，由管理员创建，使用权限有限。</li>\n<li>系统用户：不具有登录的能力，但是系统运行不可或缺的。</li>\n</ol>\n<h3 id=\"管理用户组\"><a href=\"#管理用户组\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><ul>\n<li>useradd用来添加用户。</li>\n<li>passwd修改用户口令。</li>\n<li>usermod修改用户信息。</li>\n<li>userdel删除用户。</li>\n</ul>\n<h4 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h4><p>添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd [option] username</span><br></pre></td></tr></table></figure>\n<p>username表示新账号的登录名</p>\n<h4 id=\"修改用户口令\"><a href=\"#修改用户口令\" class=\"headerlink\" title=\"修改用户口令\"></a>修改用户口令</h4><p>用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd [option] [username]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>username参数没有指定时，表示修改当前用户的口令。</li>\n<li>如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限</li>\n</ul>\n<h4 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h4><p>删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel [option] username</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户信息\"><a href=\"#修改用户信息\" class=\"headerlink\" title=\"修改用户信息\"></a>修改用户信息</h4><p>修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod [option] username</span><br></pre></td></tr></table></figure>\n\n<p>gpasswd命令–从用户组中移出一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"管理用户组-1\"><a href=\"#管理用户组-1\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><p>用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户</p>\n<h4 id=\"添加用户组\"><a href=\"#添加用户组\" class=\"headerlink\" title=\"添加用户组\"></a>添加用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd [option] group_name</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"删除用户组\"><a href=\"#删除用户组\" class=\"headerlink\" title=\"删除用户组\"></a>删除用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户组\"><a href=\"#修改用户组\" class=\"headerlink\" title=\"修改用户组\"></a>修改用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod [option] group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看用户的分组\"><a href=\"#查看用户的分组\" class=\"headerlink\" title=\"查看用户的分组\"></a>查看用户的分组</h4><ol>\n<li>groups命令查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups</span><br><span class=\"line\">groups user1 user2</span><br></pre></td></tr></table></figure></li>\n<li>查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。</li>\n<li>id命令法，只执行id命令就可以查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br><span class=\"line\">id user2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"和用户相关的一些系统文件\"><a href=\"#和用户相关的一些系统文件\" class=\"headerlink\" title=\"和用户相关的一些系统文件\"></a>和用户相关的一些系统文件</h3><ol>\n<li>/etc/passwd文件保存用户信息。</li>\n<li>/etc/shadow文件保存加密的用户密码。</li>\n<li>/etc/group文件保存用户组信息。</li>\n<li>/etc/login.defs配置文件。</li>\n</ol>\n<p><strong>su root</strong>可以返回root </p>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><p>权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。</p>\n<h3 id=\"U-G-O\"><a href=\"#U-G-O\" class=\"headerlink\" title=\"U G O\"></a>U G O</h3><p>U: owner为属主，文件所有者。<br>G：group为属组，同组用户。<br>O：other为其他用户。</p>\n<h3 id=\"UGO方式每组的3个字符具体意义如下：\"><a href=\"#UGO方式每组的3个字符具体意义如下：\" class=\"headerlink\" title=\"UGO方式每组的3个字符具体意义如下：\"></a>UGO方式每组的3个字符具体意义如下：</h3><p>r:read，数字设定值为4<br>w:write,数字设定值为2<br>x:execute,数字设定值为1</p>\n<h3 id=\"设置文件属性和权限\"><a href=\"#设置文件属性和权限\" class=\"headerlink\" title=\"设置文件属性和权限\"></a>设置文件属性和权限</h3><h4 id=\"改变文件所属用户命令chown\"><a href=\"#改变文件所属用户命令chown\" class=\"headerlink\" title=\"改变文件所属用户命令chown\"></a>改变文件所属用户命令chown</h4><p>文件所有者修改为指定的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">显示更改的部分的信息</td>\n</tr>\n<tr>\n<td align=\"center\">-f</td>\n<td align=\"center\">忽略错误信息</td>\n</tr>\n<tr>\n<td align=\"center\">-h</td>\n<td align=\"center\">修复符号链接</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"center\">显示详细的处理信息</td>\n</tr>\n<tr>\n<td align=\"center\">-R</td>\n<td align=\"center\">处理指定目录以及其子目录下的所有文件</td>\n</tr>\n<tr>\n<td align=\"center\">–help</td>\n<td align=\"center\">显示辅助说明</td>\n</tr>\n<tr>\n<td align=\"center\">–version</td>\n<td align=\"center\">显示版本</td>\n</tr>\n</tbody></table>\n<h4 id=\"改变文件所在组命令chgrp\"><a href=\"#改变文件所在组命令chgrp\" class=\"headerlink\" title=\"改变文件所在组命令chgrp\"></a>改变文件所在组命令chgrp</h4><p>变更目录和文件的所属组，只有超级用户才拥有此权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp [option] group file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c或–changes</td>\n<td align=\"center\">效果类似”-v”参数，但仅回报更改部分。</td>\n</tr>\n<tr>\n<td align=\"center\">-f或–quiet或–silent</td>\n<td align=\"center\">不显示错误信息。</td>\n</tr>\n<tr>\n<td align=\"center\">-h或–no-dereference</td>\n<td align=\"center\">只对符号连接的文件作修改，而不更动其他任何相关文件。</td>\n</tr>\n<tr>\n<td align=\"center\">-R或–recursive</td>\n<td align=\"center\">递归处理，将指定目录下的所有文件及子目录一并处理。</td>\n</tr>\n<tr>\n<td align=\"center\">-v或–verbose</td>\n<td align=\"center\">显示指令执行过程。</td>\n</tr>\n<tr>\n<td align=\"center\">–reference=&amp;lt</td>\n<td align=\"center\">参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</td>\n</tr>\n</tbody></table>\n<h4 id=\"修改文件或目录的权限chmod\"><a href=\"#修改文件或目录的权限chmod\" class=\"headerlink\" title=\"修改文件或目录的权限chmod\"></a>修改文件或目录的权限chmod</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure>\n<p>u表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。<br>+表示增加权限、-表示取消权限、=表示唯一设定权限。<br>r表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p>\n<h5 id=\"修改文件权限的方法有2种\"><a href=\"#修改文件权限的方法有2种\" class=\"headerlink\" title=\"修改文件权限的方法有2种\"></a>修改文件权限的方法有2种</h5><ol>\n<li>符号法（表达式法）<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [who] [operator] [mode] file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>who指定用户身份，若此参数省略，则表示对所有用户进行操作。</li>\n<li>operator表示添加或取消某个权限，取值为“+”或“-”。</li>\n<li>mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。</li>\n</ul>\n<ol start=\"2\">\n<li>数字法<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 数字 file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"><a href=\"#存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\" class=\"headerlink\" title=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"></a>存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。</h3><h3 id=\"基础权限ACL\"><a href=\"#基础权限ACL\" class=\"headerlink\" title=\"基础权限ACL\"></a>基础权限ACL</h3><p>主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。</p>\n<h4 id=\"getfacl命令\"><a href=\"#getfacl命令\" class=\"headerlink\" title=\"getfacl命令\"></a>getfacl命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl [-aceEsRLPtpndvh] file ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"setfacl命令可以设置ACL权限\"><a href=\"#setfacl命令可以设置ACL权限\" class=\"headerlink\" title=\"setfacl命令可以设置ACL权限\"></a>setfacl命令可以设置ACL权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux编程基础\"><a href=\"#linux编程基础\" class=\"headerlink\" title=\"linux编程基础\"></a>linux编程基础</h2><p>make可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，</p>\n<p>make通过makefile文件描述的内容自动维护编译工作。</p>\n<h2 id=\"shell编程\"><a href=\"#shell编程\" class=\"headerlink\" title=\"shell编程\"></a>shell编程</h2><p>Shell脚本是一个包含一系列命令的文件。<br>Shell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。</p>\n<h3 id=\"用Shell脚本的原因：\"><a href=\"#用Shell脚本的原因：\" class=\"headerlink\" title=\"用Shell脚本的原因：\"></a>用Shell脚本的原因：</h3><ol>\n<li>效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 </li>\n<li>简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。</li>\n<li>可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。</li>\n<li>开发容易：可以在短时间内完成一个功能强大又好用的脚本。</li>\n</ol>\n<h3 id=\"Shell分类：\"><a href=\"#Shell分类：\" class=\"headerlink\" title=\"Shell分类：\"></a>Shell分类：</h3><ol>\n<li>用于用户交互接口的Shell称为交互式Shell。</li>\n<li>作为命令解析器的Shell称为非交互式Shell。</li>\n</ol>\n<h3 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h3><p>脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，</p>\n<p>Shell的注释以“#”开头，注释的内容不会执行。</p>\n<p>给文件helloxiangtian.sh增加可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chomd +x helloxiangtan.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shell变量命名规则：\"><a href=\"#Shell变量命名规则：\" class=\"headerlink\" title=\"Shell变量命名规则：\"></a>Shell变量命名规则：</h3><p>变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 </p>\n<h3 id=\"shell变量分类\"><a href=\"#shell变量分类\" class=\"headerlink\" title=\"shell变量分类\"></a>shell变量分类</h3><p>Shell变量分为自定义变量、环境变量、位置变量和预定义变量。</p>\n<p>根据工作要求临时定义的变量称为自定义变量。<br>环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。<br>从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。<br>预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$*等。</p>\n<p>Shell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。</p>\n<h4 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义自定义变量</td>\n<td align=\"center\">变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。</td>\n</tr>\n<tr>\n<td align=\"center\">使用自定义变量</td>\n<td align=\"center\">$变量名</td>\n</tr>\n<tr>\n<td align=\"center\">查看自定义变量</td>\n<td align=\"center\">echo $变量名 set（所有变量：自定义变量和环境变量）</td>\n</tr>\n<tr>\n<td align=\"center\">取消自定义变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">自定义变量作用范围</td>\n<td align=\"center\">仅在当前shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>在各种编程语言中会提及全局变量概念。<br>全局变量可以在程序的任何地方使用。<br>在Shell编程中该功能由环境变量实现。<br>系统中的所有进程都可以使用环境变量。<br>环境变量与全局变量区别：<br>子进程对环境变量的修改不会传递到父进程中。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义环境变量</td>\n<td align=\"center\">使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。</td>\n</tr>\n<tr>\n<td align=\"center\">使用环境变量</td>\n<td align=\"center\">$变量名或$｛变量名｝</td>\n</tr>\n<tr>\n<td align=\"center\">查看环境变量</td>\n<td align=\"center\">echo $变量名 或env，如env</td>\n</tr>\n<tr>\n<td align=\"center\">取消环境变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">环境变量作用范围</td>\n<td align=\"center\">仅在当前shell和子shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"位置变量\"><a href=\"#位置变量\" class=\"headerlink\" title=\"位置变量\"></a>位置变量</h4><p>位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。<br>执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">0代表命令本身，<span class=\"variable\">$1</span>-<span class=\"variable\">$9</span>代表接收的第1~9个参数，<span class=\"variable\">$10</span>以上需要用&#123;&#125;括起来，如<span class=\"variable\">$&#123;20&#125;</span>代表接收的第20个参数。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h4><p>预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">预定义变量</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"left\">脚本名</td>\n</tr>\n<tr>\n<td align=\"center\">$*</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$@</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$#</td>\n<td align=\"left\">参数的个数</td>\n</tr>\n<tr>\n<td align=\"center\">$$</td>\n<td align=\"left\">当前进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$!</td>\n<td align=\"left\">上一个后台进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$?</td>\n<td align=\"left\">上一个命令的返回值，0表示成功。</td>\n</tr>\n</tbody></table>\n<h3 id=\"变量的操作\"><a href=\"#变量的操作\" class=\"headerlink\" title=\"变量的操作\"></a>变量的操作</h3><p>变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。</p>\n<p>变量创建好后，可以用$变量名的方式获取变量的值。</p>\n<p>可以使用$符号获取变量的值。</p>\n<p>用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。</p>\n<h4 id=\"变量的删除\"><a href=\"#变量的删除\" class=\"headerlink\" title=\"变量的删除\"></a>变量的删除</h4><table>\n<thead>\n<tr>\n<th align=\"center\">格式</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">${变量名#关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名##关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n</tbody></table>\n<h4 id=\"变量的替换\"><a href=\"#变量的替换\" class=\"headerlink\" title=\"变量的替换\"></a>变量的替换</h4><p>|格式  |说明|<br>|:—:|：—：|<br>|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|<br>|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|</p>\n<h4 id=\"变量的替代\"><a href=\"#变量的替代\" class=\"headerlink\" title=\"变量的替代\"></a>变量的替代</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;变量名-新的变量名&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>在Shell中，变量值的类型默认是字符串，不直接进行运算。</p>\n<p>用于整数运算的方法有expr、(())和$[]。</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr expression</span><br><span class=\"line\">例：</span><br><span class=\"line\">n1 + n2</span><br><span class=\"line\">expr $n1 + $n2</span><br></pre></td></tr></table></figure>\n<p>运算符及用于计算的数字两边必须有空格，否则会执行失败。<br>用expr进行乘法运算时，必须在<em>前用反斜线转义（Shell可能误解为</em>号）。</p>\n<p>“（（））”或“[ ]”数值运算命令<br>双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符<br>格式：<br>“ ((expression))”，或“ [expression]”<br>括号内部两侧可以有空格，也可省空格。<br>需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1+n2</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">((<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>))</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">[<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>let数值运算命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let expression</span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\">let sum = n1+n2;</span><br></pre></td></tr></table></figure>\n\n<p>let数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量</p>\n<h3 id=\"shell中的特殊符号\"><a href=\"#shell中的特殊符号\" class=\"headerlink\" title=\"shell中的特殊符号\"></a>shell中的特殊符号</h3><h4 id=\"1-“-”表示注释。\"><a href=\"#1-“-”表示注释。\" class=\"headerlink\" title=\"1. “#”表示注释。\"></a>1. “#”表示注释。</h4><ul>\n<li>行首为#（#!是个例外）表示此行是注释。</li>\n<li>注释也可以放在本行命令的后面，需要注意的是#两边有空格。</li>\n<li>释也可以放在本行行首空白的后面。</li>\n</ul>\n<h4 id=\"2-“-“\"><a href=\"#2-“-“\" class=\"headerlink\" title=\"2. “ ; “\"></a>2. “ ; “</h4><ul>\n<li>“;”在同一行中分隔两个或者两个以上的命令。</li>\n<li>“;”也适用于循环语句</li>\n</ul>\n<h4 id=\"3-“-”\"><a href=\"#3-“-”\" class=\"headerlink\" title=\"3. “;;”\"></a>3. “;;”</h4><ul>\n<li>用于终止case语句</li>\n</ul>\n<h4 id=\"4-“-”\"><a href=\"#4-“-”\" class=\"headerlink\" title=\"4. “:”\"></a>4. “:”</h4><ul>\n<li>空命令“:”和true命令作用相同。</li>\n<li>在while死循环和if/then中也可使用这个命令。</li>\n</ul>\n<h4 id=\"5-“-”\"><a href=\"#5-“-”\" class=\"headerlink\" title=\"5. “.”\"></a>5. “.”</h4><ul>\n<li>“.”等价于source命令，是bash中的一个内建命令。</li>\n<li>“.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。</li>\n<li>当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。</li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><h5 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h5><p>echo命令是最常用的，其功能是将字符串输出到屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo [-ne] [string]</span><br></pre></td></tr></table></figure>\n<p>其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符</p>\n<h5 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h5><p>输出命令printf的功能是格式化输出数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf format [arguments...]</span><br></pre></td></tr></table></figure>\n\n<p>format为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。<br>arguments为要输出的数据。</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><h5 id=\"1-直接给变量赋值\"><a href=\"#1-直接给变量赋值\" class=\"headerlink\" title=\"1. 直接给变量赋值\"></a>1. 直接给变量赋值</h5><p>例如，name=liming</p>\n<h5 id=\"2-从键盘读入赋值\"><a href=\"#2-从键盘读入赋值\" class=\"headerlink\" title=\"2. 从键盘读入赋值\"></a>2. 从键盘读入赋值</h5><ul>\n<li>read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read  [options] [variable…]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-使用命令行参数赋值\"><a href=\"#3-使用命令行参数赋值\" class=\"headerlink\" title=\"3. 使用命令行参数赋值\"></a>3. 使用命令行参数赋值</h5><p>使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数……，这种赋值方法适用于参数经常变化且不需要交互的情况。</p>\n<h5 id=\"4-利用命令的输出结果赋值\"><a href=\"#4-利用命令的输出结果赋值\" class=\"headerlink\" title=\"4. 利用命令的输出结果赋值\"></a>4. 利用命令的输出结果赋值</h5><ul>\n<li>在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。</li>\n<li>把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名</li>\n</ul>\n<h5 id=\"5-从文件中读入数据赋值\"><a href=\"#5-从文件中读入数据赋值\" class=\"headerlink\" title=\"5. 从文件中读入数据赋值\"></a>5. 从文件中读入数据赋值</h5><p>这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 转义字符：用于引用任意的单个字符。</span><br><span class=\"line\">2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。</span><br><span class=\"line\">3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><h4 id=\"文件测试\"><a href=\"#文件测试\" class=\"headerlink\" title=\"文件测试\"></a>文件测试</h4><ol>\n<li>test<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“test  &lt;expression&gt;”</span><br></pre></td></tr></table></figure></li>\n<li>“&lt;测试表达式&gt;”</li>\n</ol>\n<p>也可以使用“&lt;测试表达式&gt;”，就是使用中括号。<br>语法格式：<br>“ [  <expression> ]”<br>注意：[]与expression之间必须有空格。<br>通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。</p>\n<h4 id=\"整数测试\"><a href=\"#整数测试\" class=\"headerlink\" title=\"整数测试\"></a>整数测试</h4><p>整数测试通常用于数值之间的运算。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">       [ 整数1 操作符 整数2 ]</span><br><span class=\"line\">或   test 整数1 操作符 整数2。</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符1</th>\n<th align=\"center\">操作符2(部分能用)  意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-eq ==</td>\n<td align=\"center\">等于（Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-ge &gt;=</td>\n<td align=\"center\">大于等于（Greater or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-gt &gt;</td>\n<td align=\"center\">大于（Greater Than-le）</td>\n</tr>\n<tr>\n<td align=\"center\">-le &lt;=</td>\n<td align=\"center\">小于等于（Lesser or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-lt</td>\n<td align=\"center\">&lt;   小于（Lesser Than）</td>\n</tr>\n<tr>\n<td align=\"center\">-ne !=</td>\n<td align=\"center\">不等于（Not Equal）</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串测试\"><a href=\"#字符串测试\" class=\"headerlink\" title=\"字符串测试\"></a>字符串测试</h4><p>字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 字符串1 = 字符串2 ]</span><br><span class=\"line\">[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression1 op expression2 ]</span><br><span class=\"line\">or       command1 op commnad2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">! expr</td>\n<td align=\"center\">如果表达式评估为假，则为真</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -a expr2</td>\n<td align=\"center\">如果 expr1 和 expr2 都为真，则结果为真，&amp;&amp;</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -o expr2</td>\n<td align=\"center\">如果 expr1 或 expr2 为真，则结果为真，</td>\n</tr>\n</tbody></table>\n<h3 id=\"if语句格式\"><a href=\"#if语句格式\" class=\"headerlink\" title=\"if语句格式\"></a>if语句格式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语句格式：</span><br><span class=\"line\">if [ expression ];then  code</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then code</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ expression ];then  code1</span><br><span class=\"line\">else code2</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then   code1</span><br><span class=\"line\">else  code2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if expression; then</span><br><span class=\"line\"> command…</span><br><span class=\"line\">[elif expression; then</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">[else</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case value in</span><br><span class=\"line\">    [ expression1) code1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    expression2) code2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    …</span><br><span class=\"line\">    *）code</span><br><span class=\"line\">    ]</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"while-命令\"><a href=\"#while-命令\" class=\"headerlink\" title=\"while 命令\"></a>while 命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while expression; do</span><br><span class=\"line\">       command…</span><br><span class=\"line\">done   </span><br></pre></td></tr></table></figure>\n<h4 id=\"until命令\"><a href=\"#until命令\" class=\"headerlink\" title=\"until命令\"></a>until命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until expression; do</span><br><span class=\"line\">     command…</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  variable in [in sequence]</span><br><span class=\"line\">do</span><br><span class=\"line\">    code</span><br><span class=\"line\">done </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  变量名 in 取值列表；do     循环体 done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable [in sequence]; do</span><br><span class=\"line\">          command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((expression1; expression2; expression3;));do</span><br><span class=\"line\">           command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n\n\n<p>在循环后面加个 &amp; 符号表示在后台执行</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"数组分为普通数组和关联数组。\"><a href=\"#数组分为普通数组和关联数组。\" class=\"headerlink\" title=\"数组分为普通数组和关联数组。\"></a>数组分为普通数组和关联数组。</h4><p>普通数组中的索引（下标）都是整数。<br>关联数组的数组索引可以用任意的文本。</p>\n<p>两者最大区别：</p>\n<ul>\n<li>关联数组使用之前需要声明。</li>\n<li>关联数组是由特定格式的键值对组成</li>\n</ul>\n<h4 id=\"普通数组\"><a href=\"#普通数组\" class=\"headerlink\" title=\"普通数组\"></a>普通数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（value_table）</span><br></pre></td></tr></table></figure>\n\n<p>value_table中值之间用空格隔开。</p>\n<h4 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)</span><br></pre></td></tr></table></figure>\n<p>其中：<br>indexei可以用标识符表示。</p>\n<p>声明普通数组方法：<br>#declare -a arrayname<br>声明关联数组方法：<br>#declare -A arrayname</p>\n<h4 id=\"数组定义方法\"><a href=\"#数组定义方法\" class=\"headerlink\" title=\"数组定义方法\"></a>数组定义方法</h4><ul>\n<li><p>直接定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=(value1 value2 value3 ... valuen)</span><br></pre></td></tr></table></figure></li>\n<li><p>下标定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=([index1]=value1 [index2]=value2 ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>间接定义数组</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0]=value1;array[1]=value2;....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从文件中读入定义数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=($(command))</span><br><span class=\"line\">array_name=($(`variable`))</span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\">array_name=(`command`)</span><br><span class=\"line\">array_name=(`variable`)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问数组表达式\"><a href=\"#访问数组表达式\" class=\"headerlink\" title=\"访问数组表达式\"></a>访问数组表达式</h4><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>echo ${!array[*]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${!array[@]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${array[*]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo ${array[@]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo $</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"网络编程期末知识点总结","date":"2021-12-30T10:57:00.000Z","description":"网络编程期末知识点总结","_content":"\n# 网络编程知识点总结\n\n## 套接字地址，通用形式\n\n```c\nstruct sockaddr{  /*保存地址的结构*/\n\tunsigned char sa_len; /*总长度*/\n\tsa_family_t sa_family; /*地址族*/\n\tchar sa_data[14]; /*实际更长：地址值*/\n}\n```\n\n\n## 互联网地址，互联网风格\n\n```c\nstruct sockaddr_in{\n\tunit8_t sin_len;  /*总长度*/\n\tsa_family_t sa_family; /*地址类型*/\n\tin_port_t  sin_port; /*协议端口号*/\n\tstruct in_addr sin_addr；/*IP地址*/\n\tsin_zero[8]； /*未使用（设置为0）*/\n}\n```\n\n## 两种传输服务的套接字类型\n\nUDP:不可靠的数据报\nTCP：可靠的、面向字节流的\n\n### UDP\n\n#### 客户端服务端之间没有连接\n- 发送数据前不握手\n- 发送方式显式的将IP目的地址和端口 # 附加到每个数据包\n- 接受方从收到的数据包中提取发送方的IP地址和端口号\n\n#### UDP传输的数据可能丢失或接受顺序错误\n\n\n#### 简单的UDP程序\n\n```c\n#define LINELEN 128\n/* 1) initialize sockaddr_in structure */\nmemset(&serverin, 0, sizeof(serverin));\nserverin.sin_family = AF_INET;\nserverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);\nserverin.sin_port = htons(SERVER_PORT);\n/* 2) Create a socket */\nif ((clientSocket = socket(PF_INET, SOCK_DGRAM, 0)) < 0)\nerr(1, “create socket\");\n/* 3) formulate a request */\nchar buf[LINELEN+1];\nint nchars; /* char count read in buf */\nfgets(buf, sizeof(buf), stdin);\nbuf[LINELEN] = '\\0'; /* insure null-terminated */\nnchars = strlen(buf);\n/* 4) send the request */\n(void) sendto(clientSocket, buf, nchars, 0, \n(struct sockaddr *)&serverin, sizeof(serverin));\n/* 5) receive the reply */\nif (recv(clientSocket, buf, sizeof(buf), 0) < 0)\nerr(1, \"recv socket\");\n}\n/* 6) handle the response */\nfputs(buf, stdout);\nfflush(stdout);\n```\n\n\n### 创建UDP和TCP通信端点sockfd\n\n[socket详解](https://www.jianshu.com/p/066d99da7cbd)\n\n#### TCP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_STREAM,0);\n```\n\n#### UDP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,0);\n```\n\n\n## [FD_ZERO、FD_SET、FD_CLR、FD_ISSET](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n\n1. FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。\n2. FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。\n3. FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。\n4. FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。\n\n\n## [select](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n```c\nint select(int nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout);\n```\n\n### nfds\n需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。\n### readset\n用来检查可读性的一组文件描述字。\n### writeset\n用来检查可写性的一组文件描述字。\n### exceptset\n用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)\n### timeout\n用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。\n\n## ai_family\nai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\n## htonl:将主机数转换成无符号长整形的网络字节顺序。\n## htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\n## ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\n\n## FTP使用TCP传输而不是UDP\n\n\n## 如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\n\n## 调用fork的返回值\n1. 在父进程中，fork返回新创建子进程的进程ID；\n2. 在子进程中，fork返回0；\n3. 如果出现错误，fork返回一个负值；\n\n## [listen](https://www.cnblogs.com/love-yh/p/7518552.html)只能由TCP服务器程序调用\n\n## [recvfrom](http://blog.sina.com.cn/s/blog_4171e80d01000asy.html) 中 buflen不能为0\n\n## ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\n\n## size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\n\n## [servname 、nodename、hints](https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html)\n\n```c\n\nint getaddrinfo(const char *restrict nodename, /* host 或者IP地址 */\n    const char *restrict servname, /* 十进制端口号 或者常用服务名称如\"ftp\"、\"http\"等 */\n    const struct addrinfo *restrict hints, /* 获取信息要求设置 */\n    struct addrinfo **restrict res); /* 获取信息结果 */\n\n ```\n \n## [pthread](https://blog.csdn.net/networkhunter/article/details/100218945)\n\n\n```c\nint pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg); \n```\n\n```c\nint pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);  \nint pthread_mutex_destory(pthread_mutex_t *mutex );  \nint pthread_mutex_lock(pthread_mutex_t *mutex);  \nint pthread_mutex_trylock(pthread_mutex_t *mutex);  \nint pthread_mutex_unlock(pthread_mutex_t *mutex);  \n```\n\n```c\npthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);\n```\n\n","source":"_posts/网络编程期末知识点总结.md","raw":"---\ntitle: 网络编程期末知识点总结\ndate: 2021-12-30 18:57:00\ndescription: 网络编程期末知识点总结\ncategories: \"网络编程\" #分类\ntags:   #标签\n    - 课程学习\n    - 网络编程\n---\n\n# 网络编程知识点总结\n\n## 套接字地址，通用形式\n\n```c\nstruct sockaddr{  /*保存地址的结构*/\n\tunsigned char sa_len; /*总长度*/\n\tsa_family_t sa_family; /*地址族*/\n\tchar sa_data[14]; /*实际更长：地址值*/\n}\n```\n\n\n## 互联网地址，互联网风格\n\n```c\nstruct sockaddr_in{\n\tunit8_t sin_len;  /*总长度*/\n\tsa_family_t sa_family; /*地址类型*/\n\tin_port_t  sin_port; /*协议端口号*/\n\tstruct in_addr sin_addr；/*IP地址*/\n\tsin_zero[8]； /*未使用（设置为0）*/\n}\n```\n\n## 两种传输服务的套接字类型\n\nUDP:不可靠的数据报\nTCP：可靠的、面向字节流的\n\n### UDP\n\n#### 客户端服务端之间没有连接\n- 发送数据前不握手\n- 发送方式显式的将IP目的地址和端口 # 附加到每个数据包\n- 接受方从收到的数据包中提取发送方的IP地址和端口号\n\n#### UDP传输的数据可能丢失或接受顺序错误\n\n\n#### 简单的UDP程序\n\n```c\n#define LINELEN 128\n/* 1) initialize sockaddr_in structure */\nmemset(&serverin, 0, sizeof(serverin));\nserverin.sin_family = AF_INET;\nserverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);\nserverin.sin_port = htons(SERVER_PORT);\n/* 2) Create a socket */\nif ((clientSocket = socket(PF_INET, SOCK_DGRAM, 0)) < 0)\nerr(1, “create socket\");\n/* 3) formulate a request */\nchar buf[LINELEN+1];\nint nchars; /* char count read in buf */\nfgets(buf, sizeof(buf), stdin);\nbuf[LINELEN] = '\\0'; /* insure null-terminated */\nnchars = strlen(buf);\n/* 4) send the request */\n(void) sendto(clientSocket, buf, nchars, 0, \n(struct sockaddr *)&serverin, sizeof(serverin));\n/* 5) receive the reply */\nif (recv(clientSocket, buf, sizeof(buf), 0) < 0)\nerr(1, \"recv socket\");\n}\n/* 6) handle the response */\nfputs(buf, stdout);\nfflush(stdout);\n```\n\n\n### 创建UDP和TCP通信端点sockfd\n\n[socket详解](https://www.jianshu.com/p/066d99da7cbd)\n\n#### TCP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_STREAM,0);\n```\n\n#### UDP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,0);\n```\n\n\n## [FD_ZERO、FD_SET、FD_CLR、FD_ISSET](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n\n1. FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。\n2. FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。\n3. FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。\n4. FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。\n\n\n## [select](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n```c\nint select(int nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout);\n```\n\n### nfds\n需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。\n### readset\n用来检查可读性的一组文件描述字。\n### writeset\n用来检查可写性的一组文件描述字。\n### exceptset\n用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)\n### timeout\n用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。\n\n## ai_family\nai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\n## htonl:将主机数转换成无符号长整形的网络字节顺序。\n## htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\n## ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\n\n## FTP使用TCP传输而不是UDP\n\n\n## 如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\n\n## 调用fork的返回值\n1. 在父进程中，fork返回新创建子进程的进程ID；\n2. 在子进程中，fork返回0；\n3. 如果出现错误，fork返回一个负值；\n\n## [listen](https://www.cnblogs.com/love-yh/p/7518552.html)只能由TCP服务器程序调用\n\n## [recvfrom](http://blog.sina.com.cn/s/blog_4171e80d01000asy.html) 中 buflen不能为0\n\n## ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\n\n## size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\n\n## [servname 、nodename、hints](https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html)\n\n```c\n\nint getaddrinfo(const char *restrict nodename, /* host 或者IP地址 */\n    const char *restrict servname, /* 十进制端口号 或者常用服务名称如\"ftp\"、\"http\"等 */\n    const struct addrinfo *restrict hints, /* 获取信息要求设置 */\n    struct addrinfo **restrict res); /* 获取信息结果 */\n\n ```\n \n## [pthread](https://blog.csdn.net/networkhunter/article/details/100218945)\n\n\n```c\nint pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg); \n```\n\n```c\nint pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);  \nint pthread_mutex_destory(pthread_mutex_t *mutex );  \nint pthread_mutex_lock(pthread_mutex_t *mutex);  \nint pthread_mutex_trylock(pthread_mutex_t *mutex);  \nint pthread_mutex_unlock(pthread_mutex_t *mutex);  \n```\n\n```c\npthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);\n```\n\n","slug":"网络编程期末知识点总结","published":1,"updated":"2021-12-30T15:06:03.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxt3o5jh003xisax0a8pg2ux","content":"<h1 id=\"网络编程知识点总结\"><a href=\"#网络编程知识点总结\" class=\"headerlink\" title=\"网络编程知识点总结\"></a>网络编程知识点总结</h1><h2 id=\"套接字地址，通用形式\"><a href=\"#套接字地址，通用形式\" class=\"headerlink\" title=\"套接字地址，通用形式\"></a>套接字地址，通用形式</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span>&#123;</span>  <span class=\"comment\">/*保存地址的结构*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> sa_len; <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址族*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> sa_data[<span class=\"number\">14</span>]; <span class=\"comment\">/*实际更长：地址值*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"互联网地址，互联网风格\"><a href=\"#互联网地址，互联网风格\" class=\"headerlink\" title=\"互联网地址，互联网风格\"></a>互联网地址，互联网风格</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unit8_t</span> sin_len;  <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址类型*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">in_port_t</span>  sin_port; <span class=\"comment\">/*协议端口号*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>；/*<span class=\"title\">IP</span>地址*/</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">sin_zero</span>[8]； /*未使用（设置为0）*/</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两种传输服务的套接字类型\"><a href=\"#两种传输服务的套接字类型\" class=\"headerlink\" title=\"两种传输服务的套接字类型\"></a>两种传输服务的套接字类型</h2><p>UDP:不可靠的数据报<br>TCP：可靠的、面向字节流的</p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h4 id=\"客户端服务端之间没有连接\"><a href=\"#客户端服务端之间没有连接\" class=\"headerlink\" title=\"客户端服务端之间没有连接\"></a>客户端服务端之间没有连接</h4><ul>\n<li>发送数据前不握手</li>\n<li>发送方式显式的将IP目的地址和端口 # 附加到每个数据包</li>\n<li>接受方从收到的数据包中提取发送方的IP地址和端口号</li>\n</ul>\n<h4 id=\"UDP传输的数据可能丢失或接受顺序错误\"><a href=\"#UDP传输的数据可能丢失或接受顺序错误\" class=\"headerlink\" title=\"UDP传输的数据可能丢失或接受顺序错误\"></a>UDP传输的数据可能丢失或接受顺序错误</h4><h4 id=\"简单的UDP程序\"><a href=\"#简单的UDP程序\" class=\"headerlink\" title=\"简单的UDP程序\"></a>简单的UDP程序</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINELEN 128</span></span><br><span class=\"line\"><span class=\"comment\">/* 1) initialize sockaddr_in structure */</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;serverin, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(serverin));</span><br><span class=\"line\">serverin.sin_family = AF_INET;</span><br><span class=\"line\">serverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);</span><br><span class=\"line\">serverin.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\"><span class=\"comment\">/* 2) Create a socket */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((clientSocket = socket(PF_INET, SOCK_DGRAM, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">err(<span class=\"number\">1</span>, “create socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">/* 3) formulate a request */</span></span><br><span class=\"line\"><span class=\"string\">char buf[LINELEN+1];</span></span><br><span class=\"line\"><span class=\"string\">int nchars; /* char count read in buf */</span></span><br><span class=\"line\"><span class=\"string\">fgets(buf, sizeof(buf), stdin);</span></span><br><span class=\"line\"><span class=\"string\">buf[LINELEN] = &#x27;\\0&#x27;; /* insure null-terminated */</span></span><br><span class=\"line\"><span class=\"string\">nchars = strlen(buf);</span></span><br><span class=\"line\"><span class=\"string\">/* 4) send the request */</span></span><br><span class=\"line\"><span class=\"string\">(void) sendto(clientSocket, buf, nchars, 0, </span></span><br><span class=\"line\"><span class=\"string\">(struct sockaddr *)&amp;serverin, sizeof(serverin));</span></span><br><span class=\"line\"><span class=\"string\">/* 5) receive the reply */</span></span><br><span class=\"line\"><span class=\"string\">if (recv(clientSocket, buf, sizeof(buf), 0) &lt; 0)</span></span><br><span class=\"line\"><span class=\"string\">err(1, &quot;</span>recv socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">/* 6) handle the response */</span></span><br><span class=\"line\"><span class=\"string\">fputs(buf, stdout);</span></span><br><span class=\"line\"><span class=\"string\">fflush(stdout);</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"创建UDP和TCP通信端点sockfd\"><a href=\"#创建UDP和TCP通信端点sockfd\" class=\"headerlink\" title=\"创建UDP和TCP通信端点sockfd\"></a>创建UDP和TCP通信端点sockfd</h3><p><a href=\"https://www.jianshu.com/p/066d99da7cbd\">socket详解</a></p>\n<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UDP-1\"><a href=\"#UDP-1\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"FD-ZERO、FD-SET、FD-CLR、FD-ISSET\"><a href=\"#FD-ZERO、FD-SET、FD-CLR、FD-ISSET\" class=\"headerlink\" title=\"FD_ZERO、FD_SET、FD_CLR、FD_ISSET\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">FD_ZERO、FD_SET、FD_CLR、FD_ISSET</a></h2><ol>\n<li>FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。</li>\n<li>FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。</li>\n<li>FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。</li>\n<li>FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。</li>\n</ol>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">select</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nfds\"><a href=\"#nfds\" class=\"headerlink\" title=\"nfds\"></a>nfds</h3><p>需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。</p>\n<h3 id=\"readset\"><a href=\"#readset\" class=\"headerlink\" title=\"readset\"></a>readset</h3><p>用来检查可读性的一组文件描述字。</p>\n<h3 id=\"writeset\"><a href=\"#writeset\" class=\"headerlink\" title=\"writeset\"></a>writeset</h3><p>用来检查可写性的一组文件描述字。</p>\n<h3 id=\"exceptset\"><a href=\"#exceptset\" class=\"headerlink\" title=\"exceptset\"></a>exceptset</h3><p>用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)</p>\n<h3 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h3><p>用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。</p>\n<h2 id=\"ai-family\"><a href=\"#ai-family\" class=\"headerlink\" title=\"ai_family\"></a>ai_family</h2><p>ai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址</p>\n<h2 id=\"ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"><a href=\"#ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\" class=\"headerlink\" title=\"ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"></a>ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。</h2><h2 id=\"htonl-将主机数转换成无符号长整形的网络字节顺序。\"><a href=\"#htonl-将主机数转换成无符号长整形的网络字节顺序。\" class=\"headerlink\" title=\"htonl:将主机数转换成无符号长整形的网络字节顺序。\"></a>htonl:将主机数转换成无符号长整形的网络字节顺序。</h2><h2 id=\"htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"><a href=\"#htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\" class=\"headerlink\" title=\"htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"></a>htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。</h2><h2 id=\"ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\"><a href=\"#ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\" class=\"headerlink\" title=\"ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\"></a>ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。</h2><h2 id=\"FTP使用TCP传输而不是UDP\"><a href=\"#FTP使用TCP传输而不是UDP\" class=\"headerlink\" title=\"FTP使用TCP传输而不是UDP\"></a>FTP使用TCP传输而不是UDP</h2><h2 id=\"如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"><a href=\"#如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\" class=\"headerlink\" title=\"如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"></a>如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。</h2><h2 id=\"调用fork的返回值\"><a href=\"#调用fork的返回值\" class=\"headerlink\" title=\"调用fork的返回值\"></a>调用fork的返回值</h2><ol>\n<li>在父进程中，fork返回新创建子进程的进程ID；</li>\n<li>在子进程中，fork返回0；</li>\n<li>如果出现错误，fork返回一个负值；</li>\n</ol>\n<h2 id=\"listen只能由TCP服务器程序调用\"><a href=\"#listen只能由TCP服务器程序调用\" class=\"headerlink\" title=\"listen只能由TCP服务器程序调用\"></a><a href=\"https://www.cnblogs.com/love-yh/p/7518552.html\">listen</a>只能由TCP服务器程序调用</h2><h2 id=\"recvfrom-中-buflen不能为0\"><a href=\"#recvfrom-中-buflen不能为0\" class=\"headerlink\" title=\"recvfrom 中 buflen不能为0\"></a><a href=\"http://blog.sina.com.cn/s/blog_4171e80d01000asy.html\">recvfrom</a> 中 buflen不能为0</h2><h2 id=\"ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"><a href=\"#ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\" class=\"headerlink\" title=\"ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"></a>ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移</h2><h2 id=\"size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"><a href=\"#size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\" class=\"headerlink\" title=\"size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"></a>size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。</h2><h2 id=\"servname-、nodename、hints\"><a href=\"#servname-、nodename、hints\" class=\"headerlink\" title=\"servname 、nodename、hints\"></a><a href=\"https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html\">servname 、nodename、hints</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getaddrinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> nodename, <span class=\"comment\">/* host 或者IP地址 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> servname, <span class=\"comment\">/* 十进制端口号 或者常用服务名称如&quot;ftp&quot;、&quot;http&quot;等 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> struct addrinfo *<span class=\"keyword\">restrict</span> hints, <span class=\"comment\">/* 获取信息要求设置 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    struct addrinfo **<span class=\"keyword\">restrict</span> res)</span></span>; <span class=\"comment\">/* 获取信息结果 */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"pthread\"><a href=\"#pthread\" class=\"headerlink\" title=\"pthread\"></a><a href=\"https://blog.csdn.net/networkhunter/article/details/100218945\">pthread</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> *thread, <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">void</span> *(*start_routine)(<span class=\"keyword\">void</span>*), <span class=\"keyword\">void</span> *arg)</span></span>; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_init</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *<span class=\"keyword\">restrict</span> mutex,<span class=\"keyword\">const</span> <span class=\"keyword\">pthread_mutexattr_t</span> *<span class=\"keyword\">restrict</span> attr)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_destory</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex )</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_lock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_trylock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_unlock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_attr_setschedpolicy(<span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">int</span> policy);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":3705,"excerpt":"","more":"<h1 id=\"网络编程知识点总结\"><a href=\"#网络编程知识点总结\" class=\"headerlink\" title=\"网络编程知识点总结\"></a>网络编程知识点总结</h1><h2 id=\"套接字地址，通用形式\"><a href=\"#套接字地址，通用形式\" class=\"headerlink\" title=\"套接字地址，通用形式\"></a>套接字地址，通用形式</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span>&#123;</span>  <span class=\"comment\">/*保存地址的结构*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> sa_len; <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址族*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> sa_data[<span class=\"number\">14</span>]; <span class=\"comment\">/*实际更长：地址值*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"互联网地址，互联网风格\"><a href=\"#互联网地址，互联网风格\" class=\"headerlink\" title=\"互联网地址，互联网风格\"></a>互联网地址，互联网风格</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unit8_t</span> sin_len;  <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址类型*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">in_port_t</span>  sin_port; <span class=\"comment\">/*协议端口号*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>；/*<span class=\"title\">IP</span>地址*/</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">sin_zero</span>[8]； /*未使用（设置为0）*/</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两种传输服务的套接字类型\"><a href=\"#两种传输服务的套接字类型\" class=\"headerlink\" title=\"两种传输服务的套接字类型\"></a>两种传输服务的套接字类型</h2><p>UDP:不可靠的数据报<br>TCP：可靠的、面向字节流的</p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h4 id=\"客户端服务端之间没有连接\"><a href=\"#客户端服务端之间没有连接\" class=\"headerlink\" title=\"客户端服务端之间没有连接\"></a>客户端服务端之间没有连接</h4><ul>\n<li>发送数据前不握手</li>\n<li>发送方式显式的将IP目的地址和端口 # 附加到每个数据包</li>\n<li>接受方从收到的数据包中提取发送方的IP地址和端口号</li>\n</ul>\n<h4 id=\"UDP传输的数据可能丢失或接受顺序错误\"><a href=\"#UDP传输的数据可能丢失或接受顺序错误\" class=\"headerlink\" title=\"UDP传输的数据可能丢失或接受顺序错误\"></a>UDP传输的数据可能丢失或接受顺序错误</h4><h4 id=\"简单的UDP程序\"><a href=\"#简单的UDP程序\" class=\"headerlink\" title=\"简单的UDP程序\"></a>简单的UDP程序</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINELEN 128</span></span><br><span class=\"line\"><span class=\"comment\">/* 1) initialize sockaddr_in structure */</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;serverin, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(serverin));</span><br><span class=\"line\">serverin.sin_family = AF_INET;</span><br><span class=\"line\">serverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);</span><br><span class=\"line\">serverin.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\"><span class=\"comment\">/* 2) Create a socket */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((clientSocket = socket(PF_INET, SOCK_DGRAM, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">err(<span class=\"number\">1</span>, “create socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">/* 3) formulate a request */</span></span><br><span class=\"line\"><span class=\"string\">char buf[LINELEN+1];</span></span><br><span class=\"line\"><span class=\"string\">int nchars; /* char count read in buf */</span></span><br><span class=\"line\"><span class=\"string\">fgets(buf, sizeof(buf), stdin);</span></span><br><span class=\"line\"><span class=\"string\">buf[LINELEN] = &#x27;\\0&#x27;; /* insure null-terminated */</span></span><br><span class=\"line\"><span class=\"string\">nchars = strlen(buf);</span></span><br><span class=\"line\"><span class=\"string\">/* 4) send the request */</span></span><br><span class=\"line\"><span class=\"string\">(void) sendto(clientSocket, buf, nchars, 0, </span></span><br><span class=\"line\"><span class=\"string\">(struct sockaddr *)&amp;serverin, sizeof(serverin));</span></span><br><span class=\"line\"><span class=\"string\">/* 5) receive the reply */</span></span><br><span class=\"line\"><span class=\"string\">if (recv(clientSocket, buf, sizeof(buf), 0) &lt; 0)</span></span><br><span class=\"line\"><span class=\"string\">err(1, &quot;</span>recv socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">/* 6) handle the response */</span></span><br><span class=\"line\"><span class=\"string\">fputs(buf, stdout);</span></span><br><span class=\"line\"><span class=\"string\">fflush(stdout);</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"创建UDP和TCP通信端点sockfd\"><a href=\"#创建UDP和TCP通信端点sockfd\" class=\"headerlink\" title=\"创建UDP和TCP通信端点sockfd\"></a>创建UDP和TCP通信端点sockfd</h3><p><a href=\"https://www.jianshu.com/p/066d99da7cbd\">socket详解</a></p>\n<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UDP-1\"><a href=\"#UDP-1\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"FD-ZERO、FD-SET、FD-CLR、FD-ISSET\"><a href=\"#FD-ZERO、FD-SET、FD-CLR、FD-ISSET\" class=\"headerlink\" title=\"FD_ZERO、FD_SET、FD_CLR、FD_ISSET\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">FD_ZERO、FD_SET、FD_CLR、FD_ISSET</a></h2><ol>\n<li>FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。</li>\n<li>FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。</li>\n<li>FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。</li>\n<li>FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。</li>\n</ol>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">select</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nfds\"><a href=\"#nfds\" class=\"headerlink\" title=\"nfds\"></a>nfds</h3><p>需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。</p>\n<h3 id=\"readset\"><a href=\"#readset\" class=\"headerlink\" title=\"readset\"></a>readset</h3><p>用来检查可读性的一组文件描述字。</p>\n<h3 id=\"writeset\"><a href=\"#writeset\" class=\"headerlink\" title=\"writeset\"></a>writeset</h3><p>用来检查可写性的一组文件描述字。</p>\n<h3 id=\"exceptset\"><a href=\"#exceptset\" class=\"headerlink\" title=\"exceptset\"></a>exceptset</h3><p>用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)</p>\n<h3 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h3><p>用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。</p>\n<h2 id=\"ai-family\"><a href=\"#ai-family\" class=\"headerlink\" title=\"ai_family\"></a>ai_family</h2><p>ai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址</p>\n<h2 id=\"ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"><a href=\"#ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\" class=\"headerlink\" title=\"ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"></a>ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。</h2><h2 id=\"htonl-将主机数转换成无符号长整形的网络字节顺序。\"><a href=\"#htonl-将主机数转换成无符号长整形的网络字节顺序。\" class=\"headerlink\" title=\"htonl:将主机数转换成无符号长整形的网络字节顺序。\"></a>htonl:将主机数转换成无符号长整形的网络字节顺序。</h2><h2 id=\"htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"><a href=\"#htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\" class=\"headerlink\" title=\"htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"></a>htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。</h2><h2 id=\"ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\"><a href=\"#ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\" class=\"headerlink\" title=\"ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\"></a>ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。</h2><h2 id=\"FTP使用TCP传输而不是UDP\"><a href=\"#FTP使用TCP传输而不是UDP\" class=\"headerlink\" title=\"FTP使用TCP传输而不是UDP\"></a>FTP使用TCP传输而不是UDP</h2><h2 id=\"如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"><a href=\"#如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\" class=\"headerlink\" title=\"如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"></a>如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。</h2><h2 id=\"调用fork的返回值\"><a href=\"#调用fork的返回值\" class=\"headerlink\" title=\"调用fork的返回值\"></a>调用fork的返回值</h2><ol>\n<li>在父进程中，fork返回新创建子进程的进程ID；</li>\n<li>在子进程中，fork返回0；</li>\n<li>如果出现错误，fork返回一个负值；</li>\n</ol>\n<h2 id=\"listen只能由TCP服务器程序调用\"><a href=\"#listen只能由TCP服务器程序调用\" class=\"headerlink\" title=\"listen只能由TCP服务器程序调用\"></a><a href=\"https://www.cnblogs.com/love-yh/p/7518552.html\">listen</a>只能由TCP服务器程序调用</h2><h2 id=\"recvfrom-中-buflen不能为0\"><a href=\"#recvfrom-中-buflen不能为0\" class=\"headerlink\" title=\"recvfrom 中 buflen不能为0\"></a><a href=\"http://blog.sina.com.cn/s/blog_4171e80d01000asy.html\">recvfrom</a> 中 buflen不能为0</h2><h2 id=\"ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"><a href=\"#ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\" class=\"headerlink\" title=\"ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"></a>ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移</h2><h2 id=\"size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"><a href=\"#size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\" class=\"headerlink\" title=\"size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"></a>size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。</h2><h2 id=\"servname-、nodename、hints\"><a href=\"#servname-、nodename、hints\" class=\"headerlink\" title=\"servname 、nodename、hints\"></a><a href=\"https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html\">servname 、nodename、hints</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getaddrinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> nodename, <span class=\"comment\">/* host 或者IP地址 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> servname, <span class=\"comment\">/* 十进制端口号 或者常用服务名称如&quot;ftp&quot;、&quot;http&quot;等 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> struct addrinfo *<span class=\"keyword\">restrict</span> hints, <span class=\"comment\">/* 获取信息要求设置 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    struct addrinfo **<span class=\"keyword\">restrict</span> res)</span></span>; <span class=\"comment\">/* 获取信息结果 */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"pthread\"><a href=\"#pthread\" class=\"headerlink\" title=\"pthread\"></a><a href=\"https://blog.csdn.net/networkhunter/article/details/100218945\">pthread</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> *thread, <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">void</span> *(*start_routine)(<span class=\"keyword\">void</span>*), <span class=\"keyword\">void</span> *arg)</span></span>; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_init</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *<span class=\"keyword\">restrict</span> mutex,<span class=\"keyword\">const</span> <span class=\"keyword\">pthread_mutexattr_t</span> *<span class=\"keyword\">restrict</span> attr)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_destory</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex )</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_lock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_trylock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_unlock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_attr_setschedpolicy(<span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">int</span> policy);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"507. 完美数","date":"2021-12-31T08:21:22.000Z","description":"507. 完美数 直接求解&数学理论","_content":"\n# 507. 完美数 直接求解&数学理论\n\n## [查看原题](https://leetcode-cn.com/problems/perfect-number/)\n\n## 解题思路（直接求因子）\n\n直接循环找出每一个正因子相加判断\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n\tif(num ===1 ){\n\t\treturn false;\n\t}\n\tlet sum  = 1;\n\tfor(let i = 2;i <= Math.floor(Math.sqrt(num));i++){\n\t\tif(num % i === 0){\n\t\t\tsum += num/i + i;\n\t\t}\n\t}\n\tif(sum === num){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n};\n\n```\n\n## 解题思路（数学理论）\n\n根据欧几里得-欧拉定理，每个偶完全数都可以写成\n\n$$2^p-1(2^p -1)$$\n\n的形式，其中 $p$ 为素数且 $2^p-1$也是素数\n\n由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。\n这一共有如下 5 个：\n6, 28, 496, 8128, 33550336\n\n## 代码\n\n```javascript\nvar checkPerfectNumber = function(num) {\n    return num === 6 || num === 28 || num === 496 || num === 8128 || num === 33550336;\n};\n\n```","source":"_posts/507. 完美数.md","raw":"---\ntitle: 507. 完美数\ndate: 2021-12-31 16:21:22\ndescription: 507. 完美数 直接求解&数学理论\ncategories: \"leetcode题解\"\ntags: \n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 507. 完美数 直接求解&数学理论\n\n## [查看原题](https://leetcode-cn.com/problems/perfect-number/)\n\n## 解题思路（直接求因子）\n\n直接循环找出每一个正因子相加判断\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n\tif(num ===1 ){\n\t\treturn false;\n\t}\n\tlet sum  = 1;\n\tfor(let i = 2;i <= Math.floor(Math.sqrt(num));i++){\n\t\tif(num % i === 0){\n\t\t\tsum += num/i + i;\n\t\t}\n\t}\n\tif(sum === num){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n};\n\n```\n\n## 解题思路（数学理论）\n\n根据欧几里得-欧拉定理，每个偶完全数都可以写成\n\n$$2^p-1(2^p -1)$$\n\n的形式，其中 $p$ 为素数且 $2^p-1$也是素数\n\n由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。\n这一共有如下 5 个：\n6, 28, 496, 8128, 33550336\n\n## 代码\n\n```javascript\nvar checkPerfectNumber = function(num) {\n    return num === 6 || num === 28 || num === 496 || num === 8128 || num === 33550336;\n};\n\n```","slug":"507. 完美数","published":1,"updated":"2021-12-31T08:24:13.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu4r7sw0000kwaxh64j4n32","content":"<h1 id=\"507-完美数-直接求解-amp-数学理论\"><a href=\"#507-完美数-直接求解-amp-数学理论\" class=\"headerlink\" title=\"507. 完美数 直接求解&amp;数学理论\"></a>507. 完美数 直接求解&amp;数学理论</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-number/\">查看原题</a></h2><h2 id=\"解题思路（直接求因子）\"><a href=\"#解题思路（直接求因子）\" class=\"headerlink\" title=\"解题思路（直接求因子）\"></a>解题思路（直接求因子）</h2><p>直接循环找出每一个正因子相加判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num ===<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;i &lt;= <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.sqrt(num));i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num % i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tsum += num/i + i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sum === num)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路（数学理论）\"><a href=\"#解题思路（数学理论）\" class=\"headerlink\" title=\"解题思路（数学理论）\"></a>解题思路（数学理论）</h2><p>根据欧几里得-欧拉定理，每个偶完全数都可以写成</p>\n<p>$$2^p-1(2^p -1)$$</p>\n<p>的形式，其中 $p$ 为素数且 $2^p-1$也是素数</p>\n<p>由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。<br>这一共有如下 5 个：<br>6, 28, 496, 8128, 33550336</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">6</span> || num === <span class=\"number\">28</span> || num === <span class=\"number\">496</span> || num === <span class=\"number\">8128</span> || num === <span class=\"number\">33550336</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":672,"excerpt":"","more":"<h1 id=\"507-完美数-直接求解-amp-数学理论\"><a href=\"#507-完美数-直接求解-amp-数学理论\" class=\"headerlink\" title=\"507. 完美数 直接求解&amp;数学理论\"></a>507. 完美数 直接求解&amp;数学理论</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-number/\">查看原题</a></h2><h2 id=\"解题思路（直接求因子）\"><a href=\"#解题思路（直接求因子）\" class=\"headerlink\" title=\"解题思路（直接求因子）\"></a>解题思路（直接求因子）</h2><p>直接循环找出每一个正因子相加判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num ===<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;i &lt;= <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.sqrt(num));i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num % i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tsum += num/i + i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sum === num)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路（数学理论）\"><a href=\"#解题思路（数学理论）\" class=\"headerlink\" title=\"解题思路（数学理论）\"></a>解题思路（数学理论）</h2><p>根据欧几里得-欧拉定理，每个偶完全数都可以写成</p>\n<p>$$2^p-1(2^p -1)$$</p>\n<p>的形式，其中 $p$ 为素数且 $2^p-1$也是素数</p>\n<p>由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。<br>这一共有如下 5 个：<br>6, 28, 496, 8128, 33550336</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">6</span> || num === <span class=\"number\">28</span> || num === <span class=\"number\">496</span> || num === <span class=\"number\">8128</span> || num === <span class=\"number\">33550336</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxt3o5hm0009isax3lp3afrg","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hu000hisax5z63c9lx"},{"post_id":"ckxt3o5h80001isax3gqdboov","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hw000lisax4so98ess"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hx000nisax7flm0r88"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hz000risaxa19h0qpc"},{"post_id":"ckxt3o5he0003isaxck8cazr7","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i0000uisax0bjqdto9"},{"post_id":"ckxt3o5hs000gisax91ya17rl","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i2000yisaxcsyv9e3z"},{"post_id":"ckxt3o5hv000kisax4djg4if4","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i30011isaxedy1dar0"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i50015isax1aaq81tv"},{"post_id":"ckxt3o5hw000misax38lv49tf","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i60018isax4aqafjal"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i7001cisaxa14dazlc"},{"post_id":"ckxt3o5i0000tisax74y7ehep","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i9001fisax93ag11bu"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ib001jisax93gk3dl5"},{"post_id":"ckxt3o5i20010isaxffiq19uw","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ic001misax86js1qzv"},{"post_id":"ckxt3o5i40014isax5txgcn2p","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ie001qisaxe3id066e"},{"post_id":"ckxt3o5i50017isaxcznv8s09","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5if001tisax66o51b4p"},{"post_id":"ckxt3o5i7001bisax450dhuqf","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ig001xisaxein3284s"},{"post_id":"ckxt3o5i8001eisax57c05f60","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ii0020isax3o4h36u9"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ij0024isax8c8v976g"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5im0027isaxgomz0udk"},{"post_id":"ckxt3o5id001pisaxfltpbw66","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ip002bisax3cs24o3l"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iq002eisaxdihsdqoi"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5is002iisax54tpdj1u"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5it002lisax6gdd2o7j"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iv002pisax9fxehtx4"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iw002sisax7ka1dfxj"},{"post_id":"ckxt3o5io002aisax4fdz66em","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iy002wisax5qga7ckz"},{"post_id":"ckxt3o5ip002disax6gi96cgq","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iz002zisax6bmpfbmn"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j20032isax7h3h3pj1"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j30035isaxci2aciyf"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j70038isax1u104zij"},{"post_id":"ckxt3o5iv002risax39kv2jy8","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j9003bisax07fd68e6"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ja003eisaxa1um98pt"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jc003hisax8plhd938"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jd003kisaxeuka3dy5"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5je003nisax1f0y5bgl"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jf003qisax4qw8dzjj"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jg003tisaxabac01mq"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jh003yisaxaupgbyx2"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ji0040isax51xd8zue"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ji0044isax658xbtwx"},{"post_id":"ckxt3o5jd003misax35a27iwf","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jj0046isaxcdsb6ve7"},{"post_id":"ckxt3o5je003pisaxhgwlhx2s","category_id":"ckxt3o5jg003uisax4vieahs0","_id":"ckxt3o5jj0048isax4ixwdke9"},{"post_id":"ckxt3o5jf003sisaxfa6yc5xl","category_id":"ckxt3o5ji0042isaxffouey6s","_id":"ckxt3o5jk004disax19u060l8"},{"post_id":"ckxt3o5jh003xisax0a8pg2ux","category_id":"ckxt3o5jj0049isaxf3t47yxn","_id":"ckxt3o5jk004hisaxg7dm86b0"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxu4r7t20003kwax5vs5dtkv"}],"PostTag":[{"post_id":"ckxt3o5hv000kisax4djg4if4","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5hy000pisaxeaute8uj"},{"post_id":"ckxt3o5hv000kisax4djg4if4","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5i0000sisax0iesh79b"},{"post_id":"ckxt3o5hv000kisax4djg4if4","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5i1000wisax6q72135f"},{"post_id":"ckxt3o5h80001isax3gqdboov","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5i2000zisax8aec8jll"},{"post_id":"ckxt3o5h80001isax3gqdboov","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5i40013isaxdqefhlij"},{"post_id":"ckxt3o5h80001isax3gqdboov","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5i50016isax51jshqsv"},{"post_id":"ckxt3o5hw000misax38lv49tf","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5i6001aisax21wrdog9"},{"post_id":"ckxt3o5hw000misax38lv49tf","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5i8001disax6zur79yv"},{"post_id":"ckxt3o5hw000misax38lv49tf","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5i9001hisaxbqj48uxc"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ib001kisax1kx23l89"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5id001oisaxd1f72rli"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ie001risaxa177cxb1"},{"post_id":"ckxt3o5i0000tisax74y7ehep","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5if001visaxhxka8qez"},{"post_id":"ckxt3o5i0000tisax74y7ehep","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5ih001yisax8wi5bota"},{"post_id":"ckxt3o5i0000tisax74y7ehep","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ii0022isaxgpeg9ffd"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ij0025isax1n9a7oj3"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5in0029isaxh5m09llb"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ip002cisaxaolxemhu"},{"post_id":"ckxt3o5i20010isaxffiq19uw","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ir002gisaxe0cb1s5n"},{"post_id":"ckxt3o5i20010isaxffiq19uw","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5is002jisax5gw56eeg"},{"post_id":"ckxt3o5i20010isaxffiq19uw","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5iu002nisaxc0si7usk"},{"post_id":"ckxt3o5i40014isax5txgcn2p","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5iv002qisaxffb8di99"},{"post_id":"ckxt3o5i40014isax5txgcn2p","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5ix002uisax4yun1jd1"},{"post_id":"ckxt3o5i40014isax5txgcn2p","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5iy002xisaxgo700672"},{"post_id":"ckxt3o5he0003isaxck8cazr7","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5j10030isax23xuad4a"},{"post_id":"ckxt3o5he0003isaxck8cazr7","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5j20033isaxcwgzd1nu"},{"post_id":"ckxt3o5he0003isaxck8cazr7","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5j50036isaxa4z17qmm"},{"post_id":"ckxt3o5i50017isaxcznv8s09","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5j80039isax5ro8aib4"},{"post_id":"ckxt3o5i50017isaxcznv8s09","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5ja003cisaxclrm2bt5"},{"post_id":"ckxt3o5i50017isaxcznv8s09","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jb003fisax4m4f5lku"},{"post_id":"ckxt3o5i7001bisax450dhuqf","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jc003iisax40eb5kxk"},{"post_id":"ckxt3o5i7001bisax450dhuqf","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jd003lisax6l0kagxj"},{"post_id":"ckxt3o5i7001bisax450dhuqf","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5je003oisaxge1j6m4s"},{"post_id":"ckxt3o5i8001eisax57c05f60","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jf003risaxea5x7yne"},{"post_id":"ckxt3o5i8001eisax57c05f60","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jh003wisax5c17br4f"},{"post_id":"ckxt3o5i8001eisax57c05f60","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ji003zisaxbn3t4xp4"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ji0041isaxh1tb3nxa"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jj0045isaxhlzu48x4"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jj0047isax7nxk12xx"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jk004bisax0psq4j7h"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jk004cisax7fmy7g0l"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jk004fisax4jjjf4xf"},{"post_id":"ckxt3o5id001pisaxfltpbw66","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jk004gisaxgero6h4o"},{"post_id":"ckxt3o5id001pisaxfltpbw66","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jl004jisax7wx18u5n"},{"post_id":"ckxt3o5id001pisaxfltpbw66","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jl004kisax6s10g6bn"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jl004misaxe33g1lua"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004nisax99ndcgnk"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004oisax6nh353zv"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004pisax7uf91dxr"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004qisaxeqdm8lnz"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004risaxfgd600fs"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004sisaxbsnhbzdg"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004tisaxa4a226bd"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004uisaxgmgvg700"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004visax82xf3cr0"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004wisaxcomr7che"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004xisaxhel94agu"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004yisaxe549gb44"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004zisaxbflths3v"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0050isax0mep2gmv"},{"post_id":"ckxt3o5hm0009isax3lp3afrg","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn0051isax9w8n155j"},{"post_id":"ckxt3o5hm0009isax3lp3afrg","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn0052isaxdws07j4r"},{"post_id":"ckxt3o5hm0009isax3lp3afrg","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0053isax6mrt7mpd"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn0054isax6fmc45l4"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn0055isax9tz2cp51"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0056isaxai8c3hwa"},{"post_id":"ckxt3o5io002aisax4fdz66em","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn0057isax5cg2hepf"},{"post_id":"ckxt3o5io002aisax4fdz66em","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn0058isaxd0scgkwh"},{"post_id":"ckxt3o5io002aisax4fdz66em","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0059isax574bcruk"},{"post_id":"ckxt3o5ip002disax6gi96cgq","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn005aisaxfi2jh0gd"},{"post_id":"ckxt3o5ip002disax6gi96cgq","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn005bisax03i1b94u"},{"post_id":"ckxt3o5ip002disax6gi96cgq","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn005cisaxftbf4kzb"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005disaxa7sa3s3s"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005eisax0qi0fvj2"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005fisaxbbnobsrl"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005gisaxdaxw3yrq"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005hisax3gdsgtg0"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005iisax5yks6nlw"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005jisax8d7bc0zw"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005kisaxd7vf5pah"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005lisax0r3m1ral"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005misax8gm34f2p"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005nisax98s220a5"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005oisaxa9eigay0"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005pisaxg8xr9soj"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005qisaxew755jz5"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jp005risaxg69cdt31"},{"post_id":"ckxt3o5iv002risax39kv2jy8","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005sisax7y0lcp60"},{"post_id":"ckxt3o5iv002risax39kv2jy8","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005tisax4ixy87mk"},{"post_id":"ckxt3o5iv002risax39kv2jy8","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jp005uisax6ob4hel9"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005visaxdnudgce5"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005wisax240k7x35"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jp005xisax2s37fgxu"},{"post_id":"ckxt3o5hs000gisax91ya17rl","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005yisax8bpodmmm"},{"post_id":"ckxt3o5hs000gisax91ya17rl","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005zisax9sfd30bk"},{"post_id":"ckxt3o5hs000gisax91ya17rl","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0060isax0oeu7xjc"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq0061isaxe4uc2vnu"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq0062isaxa4dqfj0o"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0063isaxbzfj6m16"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq0064isax0cj4hd49"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq0065isax83nb2x0v"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0066isax2d3yaj7w"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq0067isaxhw1phcq4"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq0068isax4l1d34ux"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0069isax136bclbd"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq006aisax3zlu73p0"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq006bisaxfl0a8som"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006cisax1qsie3gy"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006disax3c61fnss"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006eisaxf6ux6f36"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006fisax0d8l6ten"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006gisaxcv698vr0"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006hisaxb06t5nsb"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006iisax0c6d2vv9"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006jisaxhpqqeeo4"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006kisax4e302hr0"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006lisaxejhtavc2"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006misax066iece4"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006nisax38h51fe0"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006oisax46gtcsgi"},{"post_id":"ckxt3o5jd003misax35a27iwf","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006pisaxdkry2h3d"},{"post_id":"ckxt3o5jd003misax35a27iwf","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006qisaxbwle1wxr"},{"post_id":"ckxt3o5jd003misax35a27iwf","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5js006risax35lf0m1j"},{"post_id":"ckxt3o5je003pisaxhgwlhx2s","tag_id":"ckxt3o5jg003visax7l728zff","_id":"ckxt3o5js006sisax9wdn38jq"},{"post_id":"ckxt3o5je003pisaxhgwlhx2s","tag_id":"ckxt3o5ji0043isaxcuelf9p4","_id":"ckxt3o5js006tisaxbueq6vcl"},{"post_id":"ckxt3o5jf003sisaxfa6yc5xl","tag_id":"ckxt3o5ji0043isaxcuelf9p4","_id":"ckxt3o5js006uisax4av28fnq"},{"post_id":"ckxt3o5jf003sisaxfa6yc5xl","tag_id":"ckxt3o5jk004eisaxd6xm4ldg","_id":"ckxt3o5js006visax239c0rio"},{"post_id":"ckxt3o5jh003xisax0a8pg2ux","tag_id":"ckxt3o5ji0043isaxcuelf9p4","_id":"ckxt3o5js006wisaxd09n3rxq"},{"post_id":"ckxt3o5jh003xisax0a8pg2ux","tag_id":"ckxt3o5jl004lisax7ij2ehzk","_id":"ckxt3o5js006xisax189ahxo3"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu4r7t20001kwax9iph3cla"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxu4r7t20002kwaxbjsnea89"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxu4r7t20004kwax9ckedegs"}],"Tag":[{"name":"js","_id":"ckxt3o5hi0005isaxbatfdhlk"},{"name":"leetcode","_id":"ckxt3o5ho000disaxfce4bn15"},{"name":"算法","_id":"ckxt3o5hv000jisaxgningmx2"},{"name":"oracle","_id":"ckxt3o5jg003visax7l728zff"},{"name":"课程学习","_id":"ckxt3o5ji0043isaxcuelf9p4"},{"name":"Linux","_id":"ckxt3o5jk004eisaxd6xm4ldg"},{"name":"网络编程","_id":"ckxt3o5jl004lisax7ij2ehzk"}]}}