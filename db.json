{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":0},{"_id":"source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":0},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/1005. K 次取反后最大化的数组和.md","hash":"d741fd93425c4bb543504e5a37a5e9f68d02455d","modified":1640873976246},{"_id":"source/_posts/1122. 数组的相对排序.md","hash":"1ad7d9b9f815f121f35d25915f55a203620252ac","modified":1640874009913},{"_id":"source/_posts/1078. Bigram 分词.md","hash":"dceaf5bb1db03d482fc5cba9620aaadd4f4792e1","modified":1640873992501},{"_id":"source/_posts/1154. 一年中的第几天.md","hash":"d88ec8775e761a0fd8b8f5c540c885949613cbbd","modified":1640874065911},{"_id":"source/_posts/119. 杨辉三角.md","hash":"0a726c55cd81bec72469d6f10e5ca0ef25e20eeb","modified":1640876293071},{"_id":"source/_posts/118. 杨辉三角.md","hash":"7e7b96cadaed9abbf9e43a170a2246d2cbd9589b","modified":1640875102529},{"_id":"source/_posts/136. 只出现一次的数字.md","hash":"2a21a46b0c351a79bd2057ede4022cd7cbc519d5","modified":1640876337102},{"_id":"source/_posts/1446. 连续字符.md","hash":"d91f63816c450cc63feb87ddd8922c781621bb7a","modified":1640876348263},{"_id":"source/_posts/1518. 换酒问题.md","hash":"81f4901e80a9e517ed1ac6190a9d58af5ba9d2cc","modified":1640876359707},{"_id":"source/_posts/1816. 截断句子.md","hash":"9fb4baa5ce3a207b0a20253a97f1f51383e2ccf2","modified":1640876380912},{"_id":"source/_posts/189. 轮转数组.md","hash":"717f4d44a492caee29759139a3f06b10360dea33","modified":1640876390842},{"_id":"source/_posts/1995. 统计特殊四元组.md","hash":"be9f282ed9c616b0dfe4585f36f1215ef1d8b3e5","modified":1640876399608},{"_id":"source/_posts/167. 两数之和 II - 输入有序数组.md","hash":"ba1d050d3990f04ab6543a23cc683736c821441a","modified":1640876370837},{"_id":"source/_posts/242. 有效的字母异位词.md","hash":"b59dee1a4de940ee748d427de9ad41c039c51ab8","modified":1640876457186},{"_id":"source/_posts/217. 存在重复元素.md","hash":"5962d30137ddcc68882cd00641b74e2a5ed5245d","modified":1640876423407},{"_id":"source/_posts/202. 快乐数.md","hash":"8d46f299ec912d66a3f92aa486a8edadb7cebc08","modified":1640876408754},{"_id":"source/_posts/258. 各位相加 .md","hash":"7f59c132138a267300f6efbfac7c693d2bce0e91","modified":1640876466898},{"_id":"source/_posts/283. 移动零.md","hash":"f7035b294648fd78e7248f77011a75f808342b24","modified":1640876487143},{"_id":"source/_posts/278. 第一个错误的版本.md","hash":"9e49a3bae979b9a97664db3d308e11424cbc8946","modified":1640876476223},{"_id":"source/_posts/318. 最大单词长度乘积.md","hash":"5ff5803359eaed22b1f4954db2e64669f768f0f8","modified":1640876496685},{"_id":"source/_posts/344. 反转字符串.md","hash":"49cb60774ffe57dfef3823f4bfdc8a19f54faacc","modified":1640876506512},{"_id":"source/_posts/35. 搜索插入位置.md","hash":"d697455acc1fd9f39a1776e4a07cec3fa077b27e","modified":1640876516404},{"_id":"source/_posts/391. 完美矩形.md","hash":"69cebe882340d4c2d939b4bfeb965e039dd8293b","modified":1640876541988},{"_id":"source/_posts/383. 赎金信.md","hash":"7cdd80bbb0e66d20fd6a26c9702b65bcb9bf4dfa","modified":1640876528153},{"_id":"source/_posts/414. 第三大的数.md","hash":"f458ba6b1a26e699fdb097578499d790614ae7f4","modified":1640876558532},{"_id":"source/_posts/438. 找到字符串中所有字母异位词.md","hash":"360c41224e4b9878b707866644b7f076aea5d912","modified":1640876569648},{"_id":"source/_posts/48. 旋转图像.md","hash":"9195a95006df22730cbdcda52d67143bb3088b6c","modified":1640876579452},{"_id":"source/_posts/506. 相对名次 .md","hash":"5820118217f81c8603497926c49498e00fbd6179","modified":1640876613590},{"_id":"source/_posts/520. 检测大写字母.md","hash":"3f04a052a654666cef6f92027151a48cffdd2d8f","modified":1640876622086},{"_id":"source/_posts/563. 二叉树的坡度.md","hash":"595b3e0f13f332d4c6aa8ace4d09e5e646cfc3c7","modified":1640876640470},{"_id":"source/_posts/495.提莫攻击.md","hash":"ad69d1debb2644db7618f4f7ee0dc00043c2b13f","modified":1640876591660},{"_id":"source/_posts/557. 反转字符串中的单词 III.md","hash":"b1b1ba675357ba68af04745a53801d90182ac42a","modified":1640876630553},{"_id":"source/_posts/567. 字符串的排列.md","hash":"9d7c1c4526057e3cd2ef515b99c8f0fabc60b172","modified":1640876650038},{"_id":"source/_posts/594. 最长和谐子序列.md","hash":"9177c183340f96dd38f63dd8bd10030dd4a1de01","modified":1640876658330},{"_id":"source/_posts/748. 最短补全词.md","hash":"c7f3a4f16c7219e7972de82e61187d85e6c099c0","modified":1640876676337},{"_id":"source/_posts/704. 二分查找.md","hash":"3de2d280eed640e85b3dd7b3f1b59dcd488327e7","modified":1640876667591},{"_id":"source/_posts/876. 链表的中间结点.md","hash":"fd5e0497c147c3e445951bc44890ca41ff7953ff","modified":1640876707889},{"_id":"source/_posts/859. 亲密字符串.md","hash":"33b46dcddc1dcacade9c409f1ee4c22b684fda72","modified":1640876699075},{"_id":"source/_posts/794. 有效的井字游戏.md","hash":"77de0ca30372d45579944041bd9768e4acb2c043","modified":1640876685944},{"_id":"source/_posts/88. 合并两个有序数组.md","hash":"df4e5d6ba891414b91703e28d338f53b6ecb4365","modified":1640876717410},{"_id":"source/_posts/997. 找到小镇的法官.md","hash":"ee540ce2a97008d4cbffb339dd526038d7e953b0","modified":1640876728420},{"_id":"source/_posts/Oracle期末知识点总结.md","hash":"82758cb8f4bcfd1ba447f29bb1ec0b81259bb6ef","modified":1640876761732},{"_id":"source/_posts/网络编程期末知识点总结.md","hash":"f914e545f32dd82198c63281e4c53e69d89f1762","modified":1640876763138},{"_id":"source/archives/index.md","hash":"1ce8976c3e9cbce613ae32d95a89a8301145f61a","modified":1640840861013},{"_id":"source/about/index.md","hash":"783651a22d45a46783e2e9f0b5ed7f314c874450","modified":1640842867346},{"_id":"source/guestbook/index.md","hash":"22519d5b33f211e49c4b357b5be2a1057c554471","modified":1640844183229},{"_id":"source/categories/index.md","hash":"f32900b965c4560262988464d275f6cfe6a6d77d","modified":1640840808902},{"_id":"source/images/avatar.jpeg","hash":"fe71c33866e15093924e8662b6e032fb94d64e0b","modified":1628079188213},{"_id":"source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640837927604},{"_id":"source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640837927604},{"_id":"source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640837927729},{"_id":"source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640837927605},{"_id":"source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640837927730},{"_id":"source/tags/index.md","hash":"2cd52c36e08c491595882e1966ef0e5b5fd848c0","modified":1640841536580},{"_id":"source/sitemap/index.md","hash":"870960b65877131af483c17879f695768e7b059f","modified":1640843781987},{"_id":"source/_posts/Linux知识点总结.md","hash":"08e04a7213dd4b7169b81a3c06a04c730c1a906d","modified":1640876738864},{"_id":"source/images/favicon.ico","hash":"06fe12b8e4c30684672836c3b37544ad4464b292","modified":1640764254709},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1640849043632},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1640849043633},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1640849043633},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1640849043644},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1640849043643},{"_id":"themes/next/README.md","hash":"43fe29330352545446a532e6630866251129882a","modified":1640849043644},{"_id":"themes/next/_config.yml","hash":"d734b82f7dd862e9221df5de89792cbf2edbf4c3","modified":1640849043645},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1640849043644},{"_id":"themes/next/_vendors.yml","hash":"ba72c575e627697a050614411706cb20206d4b71","modified":1640849043646},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1640849043646},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1640849043693},{"_id":"themes/next/package.json","hash":"e527d094273cf3be4766630bbfe6cc8cf1eeb529","modified":1640849043692},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1640849043634},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1640849043636},{"_id":"themes/next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1640849043633},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1640849043635},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1640849043638},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1640849043639},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1640849043640},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1640849043638},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1640849043639},{"_id":"themes/next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1640849043640},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1640849043650},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1640849043651},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1640849043652},{"_id":"themes/next/languages/default.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1640849043653},{"_id":"themes/next/languages/es.yml","hash":"07955d78028cea2a590c63fdc2c01ca3ee05a727","modified":1640849043654},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1640849043653},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1640849043654},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1640849043655},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1640849043655},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1640849043656},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1640849043655},{"_id":"themes/next/languages/ko.yml","hash":"d6e2add7488065ec4f7d21cfcf7f0eaa877a84f4","modified":1640849043656},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1640849043656},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1640849043657},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1640849043657},{"_id":"themes/next/languages/ru.yml","hash":"7d13108f4a70ff6a162508a49678e4a477fa7b56","modified":1640849043657},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1640849043658},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1640849043658},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1640849043659},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1640849043659},{"_id":"themes/next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1640849043659},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1640849043647},{"_id":"themes/next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1640849043660},{"_id":"themes/next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1640849043660},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1640849043647},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1640849043648},{"_id":"themes/next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1640849043661},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1640849043690},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1640849043691},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1640849043691},{"_id":"themes/next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1640849043691},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1640849043692},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1640849043692},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1640849043761},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1640849043636},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1640849043637},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1640849043637},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1640849043638},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"7dec949b13131783e726facb2f4acde0945db1b8","modified":1640849043640},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"46d0b29dc561fe571d91fd06a7c8ef606b984c72","modified":1640849043641},{"_id":"themes/next/.github/workflows/linter.yml","hash":"b57d876c90d1645a52bbba8a52d47ad0b0c96140","modified":1640849043641},{"_id":"themes/next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1640849043641},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1640849043642},{"_id":"themes/next/.github/workflows/stale.yml","hash":"32e7dfb55ecf8af66aebfed471be09ef2eb10e18","modified":1640849043642},{"_id":"themes/next/.github/workflows/tester.yml","hash":"645bb69d0b6cc062c47fabb1ccb2297ccbcfa7f5","modified":1640849043643},{"_id":"themes/next/docs/ru/README.md","hash":"e1d6bf38cf34972ca2ee5331a727787fe14082a3","modified":1640849043648},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1640849043649},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1640849043649},{"_id":"themes/next/docs/zh-CN/README.md","hash":"354b0b0a24cbe97cccf2ec8bd97eb7d624fa0dea","modified":1640849043650},{"_id":"themes/next/layout/_macro/post.njk","hash":"367cafd3acc1c6a045d8a72de0479aabbf4a3559","modified":1640849043662},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1640849043662},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eec74e135d01948361020140c3798769e1e7363b","modified":1640849043663},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d6b7bb7764e3b471ed6b4e5715f6cbe2dd453f59","modified":1640849043663},{"_id":"themes/next/layout/_partials/footer.njk","hash":"65f0d69084e0e26a0153d3b8db610a15c4102691","modified":1640849043664},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1640849043671},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1640849043668},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1640849043676},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1640849043677},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1640849043677},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1640849043685},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1640849043685},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1640849043687},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1640849043687},{"_id":"themes/next/scripts/events/index.js","hash":"8bca7ae3cebb3857866d718a562c5d8820fcfbe5","modified":1640849043693},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1640849043687},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1640849043699},{"_id":"themes/next/scripts/filters/locals.js","hash":"8499b9c8c6cdae8aa7e4f5ec5b4b76037969db76","modified":1640849043700},{"_id":"themes/next/scripts/filters/minify.js","hash":"9789307212d729c8cb65e3541348938a1965ff6f","modified":1640849043700},{"_id":"themes/next/scripts/filters/post.js","hash":"5a132b7f9280a40b3d5fb40928c8cbbe071fe6f6","modified":1640849043701},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1640849043704},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1640849043704},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1640849043705},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1640849043704},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1640849043705},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1640849043705},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1640849043706},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1640849043707},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1640849043706},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1640849043707},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1640849043708},{"_id":"themes/next/scripts/helpers/engine.js","hash":"18cc82558e7a9f3b6086c41ce9de0c46e807a66c","modified":1640849043702},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1640849043707},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1640849043702},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"e73f43f1bcb46965e317285d6831e129a40ea59b","modified":1640849043702},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1640849043703},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1640849043703},{"_id":"themes/next/source/css/_mixins.styl","hash":"2ca820b221fb7458e6ef4fbcff826e1d1cf4b473","modified":1640849043732},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1640849043709},{"_id":"themes/next/source/css/noscript.styl","hash":"7dc97674c232f6ca71e48b95e3f66472cd8e9c05","modified":1640849043740},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1640849043740},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640849043741},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1640849043741},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640849043741},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640849043742},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1640849043744},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640849043743},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640849043742},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1640849043744},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1640849043744},{"_id":"themes/next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1640849043745},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1640849043745},{"_id":"themes/next/source/js/next-boot.js","hash":"b0bdb542a809932182cfbb8772328115142a0b77","modified":1640849043745},{"_id":"themes/next/source/js/schedule.js","hash":"6dade4388aa6579576a35758075134f573985d57","modified":1640849043747},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1640849043746},{"_id":"themes/next/source/js/utils.js","hash":"c13fa66aae52f59f88881738c00ebdcaf0209496","modified":1640849043758},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1640849043759},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1640849043759},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1640849043762},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1640849043760},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1640849043762},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1640849043761},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1640849043762},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1640849043763},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1640849043763},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1640849043764},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1640849043764},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1640849043763},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1640849043765},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1640849043765},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1640849043765},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1640849043766},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"bd87e3a877ebab4508fc2b48b41c96b45c4dd970","modified":1640849043664},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"abcc550cb14374fb7452d6edee63967ad9583d1c","modified":1640849043665},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1640849043667},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"f066390762faf6684a523e2eb943420023aac2b1","modified":1640849043667},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1640849043666},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"67372599fe025ebe442b73151e5bb56415758356","modified":1640849043667},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"940cad08a67e6c361214045096bd3cdffdf44fcf","modified":1640849043667},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"9c136edd2248e2d50c1f6110b75e2b75c299bbd7","modified":1640849043668},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1640849043669},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1640849043670},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"130e776575d634201d4f8ef3d78dc12624f19fde","modified":1640849043670},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1640849043669},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1640849043672},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1640849043671},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1640849043673},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1640849043673},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"80d3dac42740d2aef677e25165e31c05eb048887","modified":1640849043674},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1640849043674},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1640849043675},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1640849043676},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1640849043675},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1640849043675},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1640849043679},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c7cea42f6db2137c11ca1d83e43fcb7ad7ccfb89","modified":1640849043680},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1640849043682},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1640849043680},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1640849043682},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"465fcffd4216f8ca0ea2613fe9cf7308f71b9da5","modified":1640849043681},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1640849043683},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1640849043680},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1640849043683},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1640849043682},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1640849043683},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1640849043683},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1640849043684},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1640849043684},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"a84db8bc8804335f95609a221ac1746433dcdc89","modified":1640849043686},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1640849043684},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1640849043685},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1640849043686},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1640849043688},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1640849043690},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1640849043690},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1640849043688},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1640849043689},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1640849043688},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1640849043689},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1640849043689},{"_id":"themes/next/scripts/events/lib/config.js","hash":"a912944cae0d864458d365867b8a9c89f348e68a","modified":1640849043694},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1640849043694},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1640849043694},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"cfff8331fdaa2ede4ab08c58cfc6d98c7d2374d9","modified":1640849043696},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1640849043696},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"8508e96a5f883a5a57d8c1b8b5ea438fa29aafd3","modified":1640849043695},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1640849043697},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"2f7057a8d3fce08aa7e2a17d7b7a1f03ac3d8ed6","modified":1640849043695},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1640849043697},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1640849043698},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1640849043698},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1640849043697},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1640849043698},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1640849043699},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1640849043739},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1640849043739},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1640849043738},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1640849043739},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1640849043740},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1640849043752},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"539c5bb51244f7f4aa98884f3229d128c1cefc40","modified":1640849043754},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1640849043754},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1640849043754},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e1b4bf9aa47d14c790a0920d7dbb3e9812d4358b","modified":1640849043747},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1640849043709},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1640849043716},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1640849043710},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1640849043721},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1640849043721},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1640849043725},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1640849043726},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1640849043727},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1640849043725},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1640849043727},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1640849043727},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1640849043728},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1640849043733},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1640849043732},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1640849043733},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"c9a9e07b721bb2376e24753ae0a9452431439114","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1640849043735},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f337981f8f20944ed366694aea88146c7b0a13ab","modified":1640849043734},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1640849043735},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"28030c61288cc0e1321b18373a5c79029fd76a53","modified":1640849043735},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1640849043736},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1640849043736},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1640849043736},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1640849043737},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1640849043738},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1640849043738},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1640849043748},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1640849043748},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1640849043749},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1640849043748},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1640849043749},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b1dd519dc3b1153c9d2ba2d35f68ca8f73f33bae","modified":1640849043750},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1640849043750},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1640849043749},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1640849043750},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1640849043751},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1640849043751},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1640849043751},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1640849043753},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1640849043752},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ea94731438d8c518d946601f8f46a65b92381fac","modified":1640849043755},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1640849043753},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"dc2b0e89aa32afc7f7a7e2d7a277dadb7f96e06d","modified":1640849043755},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1640849043756},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"d0829fe41d2fe86b8499e2a896556c1275ea0066","modified":1640849043756},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1640849043757},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"2618135cbcee6bf228f6734767de1995e5eaaac6","modified":1640849043757},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1640849043710},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1640849043711},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1640849043711},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1640849043711},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1640849043712},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1640849043712},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"7a34d020877273dcf11c25fa481409300efb8659","modified":1640849043713},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1640849043713},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1640849043714},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1640849043714},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1640849043713},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1640849043714},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1640849043715},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1640849043715},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1640849043716},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1640849043715},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1640849043716},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"25ea9a0af888355b3a046db1100b5cb0e2d6ef6e","modified":1640849043717},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1640849043717},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1640849043717},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1640849043718},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1640849043717},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1640849043719},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1640849043719},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1640849043719},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"67fc7a1eb59c8451eec34e572cbb2fd1424757bc","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1640849043720},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1640849043721},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1640849043722},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1640849043722},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1640849043723},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1640849043723},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1640849043724},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1640849043723},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1640849043724},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1640849043724},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"a4003e1408844568cb5102a5a111046cb19b2d31","modified":1640849043726},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1640849043724},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1640849043726},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1640849043729},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1640849043730},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1640849043730},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1640849043731},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"40a38f2129617ffd4e8d5cd78e982fdfc9941acf","modified":1640849043732},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1640849043731},{"_id":"public/about/index.html","hash":"fb2c779c79918ff9429a04cf88bec8942ef2b4cd","modified":1641018966181},{"_id":"public/guestbook/index.html","hash":"df2e3b4609c6bf109ae72f8004653b31d3c48f14","modified":1641018966181},{"_id":"public/categories/index.html","hash":"2b3829df0ef77968fe4a6fc6f4f28abfaa4814f0","modified":1641018966181},{"_id":"public/tags/index.html","hash":"8c85651e79448eb44f5677a99cdd71bf540b7de3","modified":1641018966181},{"_id":"public/sitemap/index.html","hash":"09b2434557139c87187e9c4dd0490dfc46d3094b","modified":1641018966181},{"_id":"public/archives/page/5/index.html","hash":"8024487336b27a42d0f09499a694a6c0f8a9e07b","modified":1641018966181},{"_id":"public/archives/2021/page/5/index.html","hash":"199226cdbd14ab6ac84e544b433327f2577e73a7","modified":1641018966181},{"_id":"public/archives/2021/12/page/5/index.html","hash":"9e686acaa3a0a3f6463b3a0dd9fac09414f986d6","modified":1641018966181},{"_id":"public/tags/js/page/5/index.html","hash":"7015c34484291f617e6aee5f180dbb522510a0e4","modified":1641018966181},{"_id":"public/tags/leetcode/page/5/index.html","hash":"fa79445003a0cc2a2b035169a449f2c5da698741","modified":1641018966181},{"_id":"public/archives/index.html","hash":"3a1740f4dd4e473c116e468e64692570c9593a3f","modified":1641018966181},{"_id":"public/2021/12/30/网络编程期末知识点总结/index.html","hash":"64217bf690704ed2bc0a555ea4996c8f567320ce","modified":1641018966181},{"_id":"public/2021/12/30/Oracle期末知识点总结/index.html","hash":"592c12283b88e7f65144ddd96d7e1f4d502119e5","modified":1641018966181},{"_id":"public/2021/12/30/Linux知识点总结/index.html","hash":"efe316a6ea155d460d9d447c416565408b6daff6","modified":1641018966181},{"_id":"public/2021/12/30/1005. K 次取反后最大化的数组和/index.html","hash":"9a8b520739632274c4da2ec1470deac76e672253","modified":1641018966181},{"_id":"public/2021/12/30/1078. Bigram 分词/index.html","hash":"f25e1e6998aff32cb7ecbdd62cb053ef5682f58f","modified":1641018966181},{"_id":"public/2021/12/30/1122. 数组的相对排序/index.html","hash":"f4ed7423ce0e712598c7e25475e6692e1392ccee","modified":1641018966181},{"_id":"public/2021/12/30/1154. 一年中的第几天/index.html","hash":"c99f0729c9c61a3cf4617a068a3901b0ef417b83","modified":1641018966181},{"_id":"public/2021/12/30/118. 杨辉三角/index.html","hash":"5c19c968a164b32d14e1f01ffc35aa9cf0beb5fc","modified":1641018966181},{"_id":"public/2021/12/30/136. 只出现一次的数字/index.html","hash":"cc65df5cc699ba673ebe5a3d98b47a533dde66b9","modified":1641018966181},{"_id":"public/2021/12/30/119. 杨辉三角/index.html","hash":"56188c980099b0f3c4f1d31c379d52b4a974ac7b","modified":1641018966181},{"_id":"public/2021/12/30/1446. 连续字符/index.html","hash":"8722c236755a443b4a83900a3758136e8b0a5109","modified":1641018966181},{"_id":"public/2021/12/30/1518. 换酒问题/index.html","hash":"43220b1ff73f236918eff1660b668ef85557aa43","modified":1641018966181},{"_id":"public/2021/12/30/189. 轮转数组/index.html","hash":"ae9deb8f24362cf2027a7cf8602808d90b45d179","modified":1641018966181},{"_id":"public/2021/12/30/167. 两数之和 II - 输入有序数组/index.html","hash":"27e5206c69914b3173a23abe7ff5e1cd99a04dc8","modified":1641018966181},{"_id":"public/2021/12/30/1816. 截断句子/index.html","hash":"ba8d4d66a072315df7dd04ef7974e142d2345e82","modified":1641018966181},{"_id":"public/2021/12/30/1995. 统计特殊四元组/index.html","hash":"cb47e120b880640b04d52b1b9f44a561727f7c29","modified":1641018966181},{"_id":"public/2021/12/30/242. 有效的字母异位词/index.html","hash":"345f1fd579e01cea29fac9dbc59761e175ebfbef","modified":1641018966181},{"_id":"public/2021/12/30/217. 存在重复元素/index.html","hash":"ddbc92d2a4818a822204a4c800b69d8916aa0999","modified":1641018966181},{"_id":"public/2021/12/30/202. 快乐数/index.html","hash":"751f8c7a7b307b740ed37a50a7fd299f6f36821c","modified":1641018966181},{"_id":"public/2021/12/30/258. 各位相加 /index.html","hash":"09e29da725494236456883ced606a327f06342fc","modified":1641018966181},{"_id":"public/2021/12/30/278. 第一个错误的版本/index.html","hash":"0d662a2fa06f47e62a5e46bb3bb7341bfc5fbcdb","modified":1641018966181},{"_id":"public/2021/12/30/283. 移动零/index.html","hash":"6e8d506916fa7463ccf1356afb249adb17f53138","modified":1641018966181},{"_id":"public/2021/12/30/318. 最大单词长度乘积/index.html","hash":"4544142c2da2bf2173dc44e3eb199303ec180e94","modified":1641018966181},{"_id":"public/2021/12/30/344. 反转字符串/index.html","hash":"4d37f0a0e52feb9b7d678eeeb9fac928ccfd9bda","modified":1641018966181},{"_id":"public/2021/12/30/35. 搜索插入位置/index.html","hash":"338cd7c95070dcc9d8b3ae84d71fcf30becf5d02","modified":1641018966181},{"_id":"public/2021/12/30/391. 完美矩形/index.html","hash":"b75c267ed736d984d91589fc52c9c941bdfdaead","modified":1641018966181},{"_id":"public/2021/12/30/383. 赎金信/index.html","hash":"d9a2c012b75bf03cdcea31510650a8df894a4339","modified":1641018966181},{"_id":"public/2021/12/30/414. 第三大的数/index.html","hash":"ec8265900a7ea3f6a60460ac9561f1ef370946e6","modified":1641018966181},{"_id":"public/2021/12/30/438. 找到字符串中所有字母异位词/index.html","hash":"a1ac427f363ef7ae67f162208c6a57140a1df397","modified":1641018966181},{"_id":"public/2021/12/30/48. 旋转图像/index.html","hash":"08bd78dc3b92d80c3b08d376c3e12b630e940446","modified":1641018966181},{"_id":"public/2021/12/30/506. 相对名次 /index.html","hash":"3a4fdd6f6bc323e7d0942ca78122a847a2129688","modified":1641018966181},{"_id":"public/2021/12/30/520. 检测大写字母/index.html","hash":"903a2676df1626a25cfb1a9e9cafeb89d6295df1","modified":1641018966181},{"_id":"public/2021/12/30/495.提莫攻击/index.html","hash":"35b44d828e5dccb02562882b7721651f5ff6d09f","modified":1641018966181},{"_id":"public/2021/12/30/563. 二叉树的坡度/index.html","hash":"dda174c62ee75247d46114abd1b4850c29756710","modified":1641018966181},{"_id":"public/2021/12/30/557. 反转字符串中的单词 III/index.html","hash":"843e8a6569c5aca13d441f61ff247dbc2d02cf9b","modified":1641018966181},{"_id":"public/2021/12/30/567. 字符串的排列/index.html","hash":"20095ab02555a6ed67e6e671694ebcef720e3bf4","modified":1641018966181},{"_id":"public/2021/12/30/594. 最长和谐子序列/index.html","hash":"b21bd8c2c7cd814f56711daf1c66d34997e07e53","modified":1641018966181},{"_id":"public/2021/12/30/704. 二分查找/index.html","hash":"4d69b58c81e66c081c1dc3609ad2703ed4386bc3","modified":1641018966181},{"_id":"public/2021/12/30/748. 最短补全词/index.html","hash":"38e7cf94e58eac9f584257572c58adae9a395a2f","modified":1641018966181},{"_id":"public/2021/12/30/859. 亲密字符串/index.html","hash":"1dde94bad016d4c82f29db1202d0dc0d8a2633ff","modified":1641018966181},{"_id":"public/2021/12/30/794. 有效的井字游戏/index.html","hash":"ee54b9c78eac3689799bdf4f60edbe3c5bcdde45","modified":1641018966181},{"_id":"public/2021/12/30/876. 链表的中间结点/index.html","hash":"9c787a69a602eb2d7653266b55ed1fdd4c8727b1","modified":1641018966181},{"_id":"public/2021/12/30/88. 合并两个有序数组/index.html","hash":"c76a41b5540225a1085325b6e821d950c2271b29","modified":1641018966181},{"_id":"public/2021/12/30/997. 找到小镇的法官/index.html","hash":"60a4e3e4e8a7d3c0a86bd1ac4dc5084f90a4b524","modified":1641018966181},{"_id":"public/archives/page/2/index.html","hash":"0bcf0931bf124a898f44bd2879594b270a863cbb","modified":1641018966181},{"_id":"public/archives/page/3/index.html","hash":"59d4a6a7ffa39f63e95d10cd4643868d24cfc76e","modified":1641018966181},{"_id":"public/archives/page/4/index.html","hash":"cd3f9f8acbff637a39f5524c3e1046651320da20","modified":1641018966181},{"_id":"public/archives/2021/index.html","hash":"9cf7e2e4d633962f2872a8024b04c890a88038bd","modified":1641018966181},{"_id":"public/archives/2021/page/2/index.html","hash":"046a1e4c2edf0e9b1cdc7cdbb2505865f1962bea","modified":1641018966181},{"_id":"public/archives/2021/page/4/index.html","hash":"9f2dada2b63ae81fb66e7aea41e054a5eda64e57","modified":1641018966181},{"_id":"public/archives/2021/page/3/index.html","hash":"9168558646a9c834ce979f1170f99a0a7cfe1445","modified":1641018966181},{"_id":"public/archives/2021/12/index.html","hash":"839b5debd9f614e0da43758228969238ddbcd678","modified":1641018966181},{"_id":"public/archives/2021/12/page/2/index.html","hash":"e1ca31b50b30832ec3cd87aef52aadfaff345b5a","modified":1641018966181},{"_id":"public/archives/2021/12/page/3/index.html","hash":"50f2bee0fcaddf0ff0a840420b65ce0442bbda39","modified":1641018966181},{"_id":"public/index.html","hash":"16a54fb1dde0d6baeab4edaab93e57ada1a36fa2","modified":1641018966181},{"_id":"public/archives/2021/12/page/4/index.html","hash":"ed5ce10ac9798b753da626556db19548a67c824b","modified":1641018966181},{"_id":"public/page/3/index.html","hash":"361d2a4c33fc3ac9903fb80a10fbdc126434fced","modified":1641018966181},{"_id":"public/page/2/index.html","hash":"f470c7e5a2f250715d087e52f4d44c8104ff962d","modified":1641018966181},{"_id":"public/page/4/index.html","hash":"92c9c0429a04b64bbd3809e0f5c22fe1955154f2","modified":1641018966181},{"_id":"public/page/5/index.html","hash":"164039c05b96e41eebbc2c22f8bf05d666a0960e","modified":1641018966181},{"_id":"public/tags/js/index.html","hash":"68c44c47717497730ab92b7f2e94803dc7eabd63","modified":1641018966181},{"_id":"public/tags/js/page/2/index.html","hash":"25a3b024b977614ef2362c3dd0a86626eef1a9de","modified":1641018966181},{"_id":"public/tags/js/page/3/index.html","hash":"1114abc10e4c10543d0a74a98ac72da1822c29f6","modified":1641018966181},{"_id":"public/tags/js/page/4/index.html","hash":"34a7fb399b6bd5f678541400d33fa0b235cadeae","modified":1641018966181},{"_id":"public/tags/leetcode/index.html","hash":"d19c2fb930807dade1264bacc8965ab3e4a328c1","modified":1641018966181},{"_id":"public/tags/leetcode/page/2/index.html","hash":"8089d50ee7a2d8b6f92d2eac2bcdfbbe6085ff7e","modified":1641018966181},{"_id":"public/tags/leetcode/page/3/index.html","hash":"0ef6c185cc40145ab4d0899d0df498fcea57eb5a","modified":1641018966181},{"_id":"public/tags/leetcode/page/4/index.html","hash":"df99ae58887783b0338ea04d8f84d08b7604d198","modified":1641018966181},{"_id":"public/tags/算法/page/5/index.html","hash":"89dea898fa21f253eb78256537fc7ba0585df258","modified":1641018966181},{"_id":"public/tags/课程学习/index.html","hash":"2e2dbac7119376fad72afa91654db2b63cbdd5ab","modified":1641018966181},{"_id":"public/tags/oracle/index.html","hash":"4b62766828e3c7f30c24489c269ba4eec6721983","modified":1641018966181},{"_id":"public/tags/Linux/index.html","hash":"9de9627f4496bb8569cd53f197cbfc45ac615f03","modified":1641018966181},{"_id":"public/tags/网络编程/index.html","hash":"5bed01d088319fac1cb4e4b26317dacf03fbbb73","modified":1641018966181},{"_id":"public/categories/leetcode题解/page/5/index.html","hash":"9bc85ef7f891b2217d19de121d43c34ee4f2e19a","modified":1641018966181},{"_id":"public/categories/Oracle/index.html","hash":"f99c3f6125a79295809389cd9b0ebd595c9fdd02","modified":1641018966181},{"_id":"public/categories/Linux/index.html","hash":"870b7234843616b60e38ec6b16003d6499b39482","modified":1641018966181},{"_id":"public/categories/网络编程/index.html","hash":"d5496725b66bf94c46093f3fa93d7e1b286e5764","modified":1641018966181},{"_id":"public/tags/算法/page/2/index.html","hash":"ffd3fb2f84770796e3341f46e6525997e987376c","modified":1641018966181},{"_id":"public/tags/算法/index.html","hash":"6d816d60647698572eda3816b07ec2b2455b4abe","modified":1641018966181},{"_id":"public/tags/算法/page/3/index.html","hash":"9e53e30ea423427e60c3b2d3bf9ba5afc68933d8","modified":1641018966181},{"_id":"public/tags/算法/page/4/index.html","hash":"d15b5dbff4c9a767e4b2247c6422063cdd00ec30","modified":1641018966181},{"_id":"public/categories/leetcode题解/index.html","hash":"0325b9ba1d89b2bc84c8fda578b677cd612e57c3","modified":1641018966181},{"_id":"public/categories/leetcode题解/page/2/index.html","hash":"dfa6d0504cf3585807b65ca4c92b4f03da0621f4","modified":1641018966181},{"_id":"public/categories/leetcode题解/page/4/index.html","hash":"1dbcdacd51d405e2fbad3fbd7b6293a75abaac1b","modified":1641018966181},{"_id":"public/categories/leetcode题解/page/3/index.html","hash":"a2753aa4b8f15f06cd40b3ae26954d35eb90a295","modified":1641018966181},{"_id":"public/images/avatar.jpeg","hash":"fe71c33866e15093924e8662b6e032fb94d64e0b","modified":1640876782780},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640876782780},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640876782780},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640876782780},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640876782780},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640876782780},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1640876782780},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1640876782780},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1640876782780},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1640876782780},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1640876782780},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1640876782780},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1640876782780},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1640876782780},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1640876782780},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1640876782780},{"_id":"public/css/main.css","hash":"b3de1adeb1665e17a8ec7240da9cfe7629028912","modified":1640876782780},{"_id":"public/images/favicon.ico","hash":"06fe12b8e4c30684672836c3b37544ad4464b292","modified":1640876782780},{"_id":"source/_posts/507. 完美数.md","hash":"b40ded0245992d386aa4ebf42300564fcbf55831","modified":1640939053499},{"_id":"public/2021/12/31/507. 完美数/index.html","hash":"e9bdfb71c771e43cc2774695fb7991272503be24","modified":1641018966181},{"_id":"source/_posts/BOMdemo1.md","hash":"bd42f45b0e3317ef39977e9dc86fd83507c6a50a","modified":1641018544360},{"_id":"source/_posts/CommonJS.md","hash":"b75778988e80bb1d4fd968546f3278e4637e89a5","modified":1641018586047},{"_id":"source/_posts/canvas常用属性相关.md","hash":"ff15d3c29ffa224b50cee2acacd225792ef2b333","modified":1641018567026},{"_id":"source/_posts/fetchAPI .md","hash":"f78e857f30d22f0e17a9e1a7dfbd428ae28530c2","modified":1641018615379},{"_id":"source/_posts/documen里面的方法.md","hash":"37d71ced82e448028e0fa5d57e8b306c9189b4e2","modified":1641018602578},{"_id":"source/_posts/h5基础.md","hash":"dfac2aaa854ebfae1e3ce0b9d8a442ed4c25a021","modified":1641018643225},{"_id":"source/_posts/git文档.md","hash":"06b5d6120cefa25037ac55552385e2ed463c0430","modified":1641018628715},{"_id":"source/_posts/gulp.md","hash":"2d48ea8872ca0b7323184b3a64058c4c8ca7c1a2","modified":1634473536546},{"_id":"source/_posts/js收官和数组方法.md","hash":"5581348e703b2a9fce0270cee2291abc75948958","modified":1641018654608},{"_id":"source/_posts/js知识和基础语法.md","hash":"33b82fd400dbf792c4a83f26d1447122888ce00e","modified":1641018669154},{"_id":"source/_posts/less.md","hash":"b81a65dc084c7fa558f18e00ad3a7335136f7a54","modified":1641018686237},{"_id":"source/_posts/webpack.md","hash":"885887aad55cfb287e4909d53a4b0cc265bde6e8","modified":1641018709429},{"_id":"source/_posts/代理和反射.md","hash":"ece019d476ad30e995aea7dcf71091f41c914621","modified":1641018725014},{"_id":"source/_posts/变量_字符串 _函数 _对象.md","hash":"766ca87364cab8a14dfd77f0e816234f3ead7969","modified":1641018763405},{"_id":"source/_posts/动画.md","hash":"2e3d0c2545a944caee00e2a45e1ef3ef561bcccb","modified":1641018749945},{"_id":"source/_posts/其他集合.md","hash":"77d2fc7826c29096263a876ae8ce604151999d8a","modified":1641018736829},{"_id":"source/_posts/响应式网页和栅格系统.md","hash":"c0a556927a07499c2c5f5fa4df3a2f706b8414bd","modified":1641018780876},{"_id":"source/_posts/继承_枚举_数组.md","hash":"0f77b0c225b7f0364c387ef028fd1bfb29c8d386","modified":1641018830803},{"_id":"source/_posts/新增数组API.md","hash":"a0469155aa12c08d2473867c89d6a286424e3294","modified":1641018810183},{"_id":"source/_posts/网络的使用.md","hash":"06cacc066e050a7620aeda4ec2a0bbdbbc713c17","modified":1641018844959},{"_id":"source/_posts/解构_符号_异步处理.md","hash":"8f945eed117fcfc5947853cd4d39ec1c0889aa40","modified":1641018869021},{"_id":"source/_posts/运动_正则.md","hash":"8b6d6d0e7cf4415bdecbf43efc9aee95fd66d26f","modified":1641018888730},{"_id":"source/_posts/选择器.md","hash":"2a347e54d1f8ae2df20deac1b4eaccc4f5278dc4","modified":1641018911683},{"_id":"source/_posts/迭代器和生成器.md","hash":"293da27c81cab8625102ba630686bc5e123a26ff","modified":1641018901949},{"_id":"public/2021/12/31/gulp/index.html","hash":"2941ec3f83d4055f84daa0bccbb580294fd386b4","modified":1640941796199},{"_id":"public/2021/12/31/BOMdemo1/index.html","hash":"09d02ad2baca9452db3fc7d6ed3ffb16321a6c2c","modified":1641018966181},{"_id":"public/categories/前端学习笔记/page/3/index.html","hash":"70aee2077711070c021444f1bfadb0044be0f8d1","modified":1641018966181},{"_id":"public/tags/bom/index.html","hash":"18c6c4bf9bf310751d9f211f2382532e8c81c32f","modified":1641018966181},{"_id":"public/tags/前端/page/3/index.html","hash":"f7fe6602737be473f5ecdc35202d4b6608956fc3","modified":1641018966181},{"_id":"public/tags/CommonJS/index.html","hash":"9b61af917794ef5ce95ced0b66cb50256bab742d","modified":1641018966181},{"_id":"public/tags/ES6/index.html","hash":"62576c9c9cc33b6a2d9d69823a388aa57b64b1e3","modified":1641018966181},{"_id":"public/tags/HTML/index.html","hash":"c50af1feebfca4899383e7f1b3248d675070bf4b","modified":1641018966181},{"_id":"public/tags/DOM/index.html","hash":"c181c8ade266172abef2d31723b53e63f30af25e","modified":1641018966181},{"_id":"public/tags/git/index.html","hash":"3387f28e38436ed9354f13c7cda26f3c8824b7e0","modified":1641018966181},{"_id":"public/tags/工具/index.html","hash":"334c6cd599027f68eb7336e07b2274915a7ed48f","modified":1641018966181},{"_id":"public/tags/less/index.html","hash":"4980b52e4b8146851da7a51bcbdcff15fc36786b","modified":1641018966181},{"_id":"public/tags/浏览器/index.html","hash":"7c03637dd5358209f5c5dcf518611deb10aa0c84","modified":1641018966181},{"_id":"public/tags/webpack/index.html","hash":"ddb456d9c0c257df69384de91a30b2f2d02710f2","modified":1641018966181},{"_id":"public/tags/CSS/index.html","hash":"55f5f0bba892648b7221e444085558b3f8b6e575","modified":1641018966181},{"_id":"public/tags/bootstrap/index.html","hash":"db08b366fcd90b187fd55a76cfe05020f9a529a9","modified":1641018966181},{"_id":"public/tags/网络/index.html","hash":"d4d87fbe262fa6d38cf4313d242036e59084e4a8","modified":1641018966181},{"_id":"public/2021/12/31/迭代器和生成器/index.html","hash":"cf7e3eeb48c5f85d8eff37e66d120324c47bf283","modified":1641018966181},{"_id":"public/2021/12/31/CommonJS/index.html","hash":"49f8229bd1b0834131588899c4ae468a9a53750f","modified":1641018966181},{"_id":"public/2021/12/31/fetchAPI /index.html","hash":"684f22673ac2b9eb6e592152960240784213b1ea","modified":1641018966181},{"_id":"public/2021/12/31/canvas常用属性相关/index.html","hash":"33bf786afa4b141aef88e8ea139f5f4a7887554c","modified":1641018966181},{"_id":"public/2021/12/31/documen里面的方法/index.html","hash":"dd7cbf7718cb4547a33776e51dde8f37f5542d9b","modified":1641018966181},{"_id":"public/2021/12/31/git文档/index.html","hash":"f970fb769732181a15b554fe617181cb2c51b95e","modified":1641018966181},{"_id":"public/2021/12/31/h5基础/index.html","hash":"001d7ce1b1d4b53c78709b1af374defe60ee797b","modified":1641018966181},{"_id":"public/2021/12/31/js收官和数组方法/index.html","hash":"e915b888a9b3aee24c7f14ab4625581805e94f39","modified":1641018966181},{"_id":"public/2021/12/31/less/index.html","hash":"838469979824a6d0b59a10e2132503f0986b7afa","modified":1641018966181},{"_id":"public/2021/12/31/js知识和基础语法/index.html","hash":"527d2355d3af5d92239db90237ed5134351154d7","modified":1641018966181},{"_id":"public/2021/12/31/webpack/index.html","hash":"cd72e7da813e260b50f66d7c7ee3dd53b6699039","modified":1641018966181},{"_id":"public/2021/12/31/代理和反射/index.html","hash":"299ceff3eedeef2588b46a386650bebc9a449d55","modified":1641018966181},{"_id":"public/2021/12/31/动画/index.html","hash":"b86d4ebf5d9c33498b409679c1df8f267753fe6b","modified":1641018966181},{"_id":"public/2021/12/31/变量_字符串 _函数 _对象/index.html","hash":"b6c3e0ba9ebaafec21da7d6b19dd5abb344681c1","modified":1641018966181},{"_id":"public/2021/12/31/响应式网页和栅格系统/index.html","hash":"cab45d2dffde2777ffb9adae676fdf59587667ee","modified":1641018966181},{"_id":"public/2021/12/31/其他集合/index.html","hash":"e7cd99356ee3f54b7338f424a436afe83a33f51a","modified":1641018966181},{"_id":"public/2021/12/31/新增数组API/index.html","hash":"3a09241c3e0787c981176d6426a93c3ccf08ee81","modified":1641018966181},{"_id":"public/2021/12/31/继承_枚举_数组/index.html","hash":"fa068bea1984fcf8bb58014a1a3864493ec3a9f4","modified":1641018966181},{"_id":"public/2021/12/31/解构_符号_异步处理/index.html","hash":"8c554d0147caae423e959ee2bace88cbe6fbfa5e","modified":1641018966181},{"_id":"public/2021/12/31/网络的使用/index.html","hash":"122913b2550fffa9f23cc2238442f5b54fda8765","modified":1641018966181},{"_id":"public/2021/12/31/运动_正则/index.html","hash":"3104e198ca30f97e27622619f36133a63ccef133","modified":1641018966181},{"_id":"public/2021/12/31/选择器/index.html","hash":"f3848ca984a7e3a932589c04123af7dadccccc36","modified":1641018966181},{"_id":"public/archives/page/6/index.html","hash":"0aa2aea359db2b530ad4b17fd4ef01e5d7304a7e","modified":1641018966181},{"_id":"public/archives/page/7/index.html","hash":"9d489bb5d3a3261825a663f312bcae2288036daf","modified":1641018966181},{"_id":"public/archives/2021/page/6/index.html","hash":"59fe5b1807b2da1ed7f5fb8d68936a6e0643e9af","modified":1641018966181},{"_id":"public/archives/2021/page/7/index.html","hash":"95e131e3bc1ecbe0b353af04e8afb113ad1a42d2","modified":1641018966181},{"_id":"public/archives/2021/12/page/6/index.html","hash":"bc472bd95b0c7a395e00e64c9eec1b5d93027777","modified":1641018966181},{"_id":"public/archives/2021/12/page/7/index.html","hash":"5c496b906351ec7cbc333ed5f5c54f87a65e410f","modified":1641018966181},{"_id":"public/categories/前端学习笔记/index.html","hash":"064204fd7550acfefaccc1afcd911fc7cb4adc06","modified":1641018966181},{"_id":"public/categories/前端学习笔记/page/2/index.html","hash":"cb55a883fdcf02de7993bff42ee0c83527f4fcad","modified":1641018966181},{"_id":"public/tags/前端/index.html","hash":"7ad036ce8a26b9f430f9d39f25c82799c4b03c97","modified":1641018966181},{"_id":"public/tags/前端/page/2/index.html","hash":"4f0ecdd1621ba55f39830cb9e8e9d0dc7014e29e","modified":1641018966181},{"_id":"public/page/6/index.html","hash":"432f1a3b500f19d38cd345ad6160c7f43ee60022","modified":1641018966181},{"_id":"public/page/7/index.html","hash":"172f702d5d81071f4342c24913d582c9c1a79b12","modified":1641018966181},{"_id":"source/_posts/异步组件.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636854874983},{"_id":"source/_posts/$listeners&v-module.md","hash":"e242509ebff4958b6caf4a35bfad268ac69ce69f","modified":1641017945908},{"_id":"source/_posts/2022. 将一维数组转变成二维数组.md","hash":"9eb6ec240887052d21409327aacd09391dccc89d","modified":1641016783397},{"_id":"source/_posts/v-model.md","hash":"d65c9654d243b066e285a967f8d1a0b03ce80287","modified":1641017188433},{"_id":"source/_posts/动态路由&watch.md","hash":"f54822d91e8833216f3998e46caa5d426980f1da","modified":1641017836228},{"_id":"source/_posts/基础知识.md","hash":"78d61eb233d78e9621fd9981eb08df442927494f","modified":1641018401148},{"_id":"source/_posts/弹出消息.md","hash":"4b2a5d85568d797a1bb720fd9132cea9dcff0b0c","modified":1641017464935},{"_id":"source/_posts/插槽.md","hash":"eda6c2ca4bde2bd3d18059f035241b40683ea946","modified":1641018126463},{"_id":"source/_posts/打包优化.md","hash":"4e38bfaeef12dc33b40cc75d04aa0b2c2d6d84e2","modified":1641018235950},{"_id":"source/_posts/搭建工程.md","hash":"7741e9ead82307e34abb7836416d2677a02b1562","modified":1641017510590},{"_id":"source/_posts/登录方面的知识.md","hash":"7b703f097e2da8f067d2018c91c48102787d74fd","modified":1641018177284},{"_id":"source/_posts/数据共享vuex.md","hash":"c448ff28606d926f2a76a39da8710f8557b5ccf2","modified":1641018001951},{"_id":"source/_posts/组件.md","hash":"9621036103095f24966ac3773542f1e1b27376e2","modified":1641017392914},{"_id":"source/_posts/混入和组件递归.md","hash":"ac80718e9b8fcc490d8e01b301ed00dc77e46d6d","modified":1641017803292},{"_id":"source/_posts/组件生存周期.md","hash":"b81386acd771e1e8c13f7ddf5faac4a2e3430d03","modified":1641017760060},{"_id":"source/_posts/数据响应.md","hash":"e53b3a1e1bd4a4dd726a8b3b2d4d912a812f7750","modified":1641017347971},{"_id":"source/_posts/组件通信.md","hash":"e1a0a806d8d1a36d049218a111152fb2bbeda7ce","modified":1641018302952},{"_id":"source/_posts/组件事件.md","hash":"9fd5906bd66f00b72e4beebeb0acfc6e650225a6","modified":1641018078334},{"_id":"source/_posts/自定义组件.md","hash":"d8193f2bc64275dc08b832dc0a4d771e859bf16d","modified":1641017270509},{"_id":"source/_posts/虚拟节点.md","hash":"332e3fd681d5fb3c1b2a4510db7ad3c830d8f346","modified":1641018507657},{"_id":"source/_posts/路由.md","hash":"92adc38086c50cb0b3a0d9da7efc0b7e88dd0310","modified":1641018426596},{"_id":"source/_posts/计算属性.md","hash":"a34ac1296c1314962e41f57b5bdd53bf9bd10e78","modified":1641017677078},{"_id":"source/_posts/获取数据.md","hash":"b1c3977060417878d9a3ba2c1e2c9fe47d4bd924","modified":1641017574797},{"_id":"public/2022/01/01/异步组件/index.html","hash":"ae85a3ba2d68078d49c0e4b3bf47fe91a2932d2f","modified":1641017075735},{"_id":"public/page/10/index.html","hash":"b2559d75acb62892a1c82a63089990434d5fd570","modified":1641017075735},{"_id":"public/categories/前端学习笔记/vue/index.html","hash":"13259e514c86cc39380b32302447e809e67dfb78","modified":1641018966181},{"_id":"public/archives/page/10/index.html","hash":"565e2e919139fe9aa44bebfa5becaab256bb1f75","modified":1641017075735},{"_id":"public/archives/2022/page/3/index.html","hash":"07a5bb2b7bc5b93e5e6cb8559ba1c47a5daeabfb","modified":1641018966181},{"_id":"public/archives/2022/01/page/3/index.html","hash":"0ffeefaf15e2360f74bf5d551737c66cf382341e","modified":1641018966181},{"_id":"public/2022/01/01/v-model/index.html","hash":"aa6764ffa1045d1de99f743f4cd4b666cc17444d","modified":1641018966181},{"_id":"public/2022/01/01/虚拟节点/index.html","hash":"05959b23dc764e8074a08042963efc4711d83647","modified":1641018966181},{"_id":"public/2022/01/01/数据响应/index.html","hash":"968c419a4df151fcb1cf480e1925cbba4d0a9bf8","modified":1641018966181},{"_id":"public/2022/01/01/数据共享vuex/index.html","hash":"49fc43832ff1144852cebb45279ace176e0c30a5","modified":1641018966181},{"_id":"public/2022/01/01/路由/index.html","hash":"b7ed4fc4ef80131b2d7ac4f29ac73728daeb0c59","modified":1641018966181},{"_id":"public/2022/01/01/计算属性/index.html","hash":"ca5a19867c9f5c3995cae44f5b7e9cfdd7b266ab","modified":1641018966181},{"_id":"public/2022/01/01/基础知识/index.html","hash":"c981c9f6c92a04d53cf069c48780acacf5f9d5ba","modified":1641018966181},{"_id":"public/2022/01/01/混入和组件递归/index.html","hash":"925448bb34f6978dd159e843c2c1358d9ce12425","modified":1641018966181},{"_id":"public/2022/01/01/获取数据/index.html","hash":"166890c7d4428c9179118942e49492389e41e476","modified":1641018966181},{"_id":"public/2022/01/01/动态路由&watch/index.html","hash":"77f0eb699b09cf4b53ad2cbb79f1d095d60b5156","modified":1641018966181},{"_id":"public/2022/01/01/登录方面的知识/index.html","hash":"9af419fc76495662708bcbd2b8f4e6bb2d80893e","modified":1641018966181},{"_id":"public/2022/01/01/弹出消息/index.html","hash":"4982d09c0b41a6d4c881c31dc176736e84f9167d","modified":1641018966181},{"_id":"public/2022/01/01/打包优化/index.html","hash":"469c4456ef77812c05891ad786727cf535174354","modified":1641018966181},{"_id":"public/2022/01/01/搭建工程/index.html","hash":"0d36ef820e4750b7e6eaedae6fbb6bf57e3b382f","modified":1641018966181},{"_id":"public/2022/01/01/插槽/index.html","hash":"f2dfc50c1431a11597c620bf6825a604fa9c3990","modified":1641018966181},{"_id":"public/2022/01/01/$listeners&v-module/index.html","hash":"c02a5ba8c8ae6eab60b96fee012f57de36d2e38a","modified":1641018966181},{"_id":"public/2022/01/01/组件事件/index.html","hash":"71da1f8774a6baf520d909198511a15892f34c68","modified":1641018966181},{"_id":"public/2022/01/01/组件通信/index.html","hash":"1d31cb9736db0d5b6164e4ddb97795e15ae521c2","modified":1641018966181},{"_id":"public/2022/01/01/组件生存周期/index.html","hash":"44f5f4829f11fd08d7f73c6e7732576db9c07fd9","modified":1641018966181},{"_id":"public/2022/01/01/组件/index.html","hash":"cf0f96c75dafb1680f0c44770af4a2bbc27c7691","modified":1641018966181},{"_id":"public/2022/01/01/自定义组件/index.html","hash":"a5da0efced4d2ad74d8bbe41937ea8805e28e200","modified":1641018966181},{"_id":"public/2022/01/01/2022. 将一维数组转变成二维数组/index.html","hash":"5eddc62afa2fc9ad42bacdf00f9a89e8f872c299","modified":1641018966181},{"_id":"public/page/8/index.html","hash":"d1ab744211d46c07eecdfdad501240ebe676e42b","modified":1641018966181},{"_id":"public/page/9/index.html","hash":"dc23a012af4c2a918268c9647acb5bcdf55a814f","modified":1641018966181},{"_id":"public/archives/page/8/index.html","hash":"3d4ba0f80e94d344d0a59d2be33fa8ada1495244","modified":1641018966181},{"_id":"public/archives/page/9/index.html","hash":"1c87102fdb3484cf55cfdb45b2a34d151029fb43","modified":1641018966181},{"_id":"public/archives/2022/index.html","hash":"e1cd7c10e00f176c386d76f50312a0136bfd4bcd","modified":1641018966181},{"_id":"public/archives/2022/page/2/index.html","hash":"fe0817b5cdc1c309abca51c0103263bf31fd72c9","modified":1641018966181},{"_id":"public/archives/2022/01/index.html","hash":"749f9f72d26e555407a899f9e78c066082be36c0","modified":1641018966181},{"_id":"public/archives/2022/01/page/2/index.html","hash":"957ee9a9e5709f11b9bdcf321d67b3b4e74806fa","modified":1641018966181},{"_id":"public/categories/前端学习笔记/page/5/index.html","hash":"de78cade1200befd9a825afb588fea365ba6138d","modified":1641018966181},{"_id":"public/categories/前端学习笔记/vue/page/3/index.html","hash":"c72a6c9ec828a154bc149cadc99ae16e14190d2f","modified":1641018966181},{"_id":"public/categories/前端学习笔记/BOM/index.html","hash":"f93b3563c1a352f8f6f93c07ddf1236a9de20286","modified":1641018966181},{"_id":"public/categories/前端学习笔记/ES6/index.html","hash":"ffa4dfbb947eb2e93bf66a1acc6f318e82b0a071","modified":1641018966181},{"_id":"public/categories/前端学习笔记/HTML/index.html","hash":"76b6b05dd57df0fe05c5848c187a3b50ab7cdb70","modified":1641018966181},{"_id":"public/categories/前端学习笔记/js/index.html","hash":"6da1b3157f2e9429500c15cb690abaabd06fce89","modified":1641018966181},{"_id":"public/categories/前端学习笔记/前端工程化/index.html","hash":"7ed5fc65293e76a85529fdb363d40fc00c91e3e6","modified":1641018966181},{"_id":"public/categories/前端学习笔记/less/index.html","hash":"0cb20bb9e6913e383b99d3fa7ce33c6627fbd790","modified":1641018966181},{"_id":"public/categories/前端学习笔记/工具类/index.html","hash":"0bf9b365d07a811aa633e8eea5444389616cde2b","modified":1641018966181},{"_id":"public/categories/前端学习笔记/bootstrap/index.html","hash":"45b17669de2ea87306d68ef20d7a01cb945dd6f6","modified":1641018966181},{"_id":"public/categories/前端学习笔记/CSS/index.html","hash":"325479afb1c06ecc14ad59ad65a3223ca076dc55","modified":1641018966181},{"_id":"public/categories/前端学习笔记/网络/index.html","hash":"649097414b8ee4310181e99e47a530ce71cb06f3","modified":1641018966181},{"_id":"public/tags/前端/page/5/index.html","hash":"831b8e4df926d7ab41375b6990730282ceee1f11","modified":1641018966181},{"_id":"public/tags/vue2/page/3/index.html","hash":"180f106f755d21433a8f8939bdd2c78855072578","modified":1641018966181},{"_id":"public/tags/面试题/index.html","hash":"69f060bbf6252aa599068596d30f97fb22087311","modified":1641018966181},{"_id":"public/categories/前端学习笔记/page/4/index.html","hash":"b7bea3d541b05ad69def5c77c205ac85c512f3b9","modified":1641018966181},{"_id":"public/categories/前端学习笔记/vue/page/2/index.html","hash":"b231dff2a91bfe77f669daf0fedc02040dfe544e","modified":1641018966181},{"_id":"public/tags/前端/page/4/index.html","hash":"9c1cad2a0fd5df2ba5fedb71662fadd972615efe","modified":1641018966181},{"_id":"public/tags/vue2/index.html","hash":"ea01f1ba2d355c857c4169fbcb36578b3c5e0f5a","modified":1641018966181},{"_id":"public/tags/vue2/page/2/index.html","hash":"104f05b4efbf4d93c383db7e0decdf51fa1a7a37","modified":1641018966181}],"Category":[{"name":"leetcode题解","_id":"ckxt3o5hh0004isax51b78un5"},{"name":"Oracle","_id":"ckxt3o5jg003uisax4vieahs0"},{"name":"Linux","_id":"ckxt3o5ji0042isaxffouey6s"},{"name":"网络编程","_id":"ckxt3o5jj0049isaxf3t47yxn"},{"name":"前端学习笔记","_id":"ckxu6dnho000210axe77jhel4"},{"name":"vue","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvf7clj0007ccax0i9nb0i9"},{"name":"BOM","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn4j0001iwaxbrg7a3e7"},{"name":"ES6","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn4m0005iwaxdi728lo3"},{"name":"HTML","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn4p0008iwaxedasdj91"},{"name":"js","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn4u000biwax1nyd1clt"},{"name":"前端工程化","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5a000qiwaxfjl06ahk"},{"name":"less","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5e000wiwaxhmx2e2rv"},{"name":"工具类","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5g0011iwax3vt2hgvh"},{"name":"bootstrap","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5j0017iwaxa7jifafy"},{"name":"CSS","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5o001diwax8u4sfb9n"},{"name":"网络","parent":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5x001uiwaxcwpo19g3"}],"Data":[],"Page":[{"title":"about","date":"2021-12-30T05:40:42.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-30 13:40:42\ntype: about\n---\n","updated":"2021-12-30T05:41:07.346Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckxt3o5h40000isaxbwl5bark","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"archives","date":"2021-12-30T05:07:14.000Z","type":"archives","comments":0,"sitemap":false,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-12-30 13:07:14\ntype: archives\ncomments: false\nsitemap: false\n---\n","updated":"2021-12-30T05:07:41.013Z","path":"archives/index.html","layout":"page","_id":"ckxt3o5hd0002isaxdjfydsgm","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"guestbook","date":"2021-12-30T05:29:24.000Z","type":"guestbook","comments":1,"sitemap":false,"_content":"","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2021-12-30 13:29:24\ntype: guestbook\ncomments: true\nsitemap: false\n---\n","updated":"2021-12-30T06:03:03.229Z","path":"guestbook/index.html","layout":"page","_id":"ckxt3o5hj0006isaxcgjhfrui","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类","date":"2021-12-30T05:05:14.000Z","type":"categories","comments":0,"sitemap":false,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-12-30 13:05:14\ntype: categories\ncomments: false\nsitemap: false\n---\n","updated":"2021-12-30T05:06:48.902Z","path":"categories/index.html","layout":"page","_id":"ckxt3o5hl0008isaxa2su1tua","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2021-12-30T05:18:19.000Z","type":"tags","comments":0,"sitemap":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-12-30 13:18:19\ntype: tags\ncomments: false\nsitemap: false\n---\n","updated":"2021-12-30T05:18:56.580Z","path":"tags/index.html","layout":"page","_id":"ckxt3o5hn000aisax3b1n9djs","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"sitemap","date":"2021-12-30T05:35:26.000Z","type":"sitemap.xml","comments":0,"sitemap":true,"_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2021-12-30 13:35:26\ntype: sitemap.xml\ncomments: false\nsitemap: true\n---\n","updated":"2021-12-30T05:56:21.987Z","path":"sitemap/index.html","layout":"page","_id":"ckxt3o5hq000eisaxc0yxcb3e","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"1005 K 次取反后最大化的数组和 找到负数个数，条件判断","date":"2021-12-30T10:24:47.000Z","description":"1005 K 次取反后最大化的数组和 找到负数个数，条件判断","comments":1,"toc":true,"_content":"\n# 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\n\n## [查看原题](https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/)\n\n## 解题思路\n\n主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。\n1. 先将数组排序，便于后续操作数组中的数据\n2. 找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中\n3. 开始判断变化的次数和负数个数的关系\n\t- 如果变化的次数小于等于负数的个数，k<=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍\n\t- 如果变化的次数大于负数的个数，继续判断负数的个数是否为0\n\t\t1. 为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]\n\t\t2. 不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数\n\t\t\t- temp为偶数，直接返回最大值\n\t\t\t- temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则 \t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。\n\n\t\t\t\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\n// 统计负数的个数\nvar largestSumAfterKNegations = function(nums, k) {\n\tlet count = 0;//负数的个数\n\tlet maxSum = 0;//可能的最大和\n\tlet sum = 0;//原来的\n\tnums.sort((a,b)=>a-b);\n\tnums.forEach(item=>{\n\t\tif(item < 0){\n\t\t\tcount ++;\n\t\t}\n\t\tsum += item;\n\t})\n\tif(k<=count){\n\t\tmaxSum = sum;\n\t\tfor(let i =0;i<k;i++){\n\t\t\tmaxSum+=(-nums[i]*2);\n\t\t}\n\t\treturn maxSum;\n\t}else if(k>count){\n\t\tif(!count){\n\t\t\tif(k%2===0){\n\t\t\t\treturn sum;\n\t\t\t}else{\n\t\t\t\treturn sum-2*nums[0];\n\t\t\t}\n\t\t}else{\n\t\t\tlet temp  = k-count;\n\t\t\tmaxSum = sum;\n\t\t\tfor(let i =0;i<count;i++){\n\t\t\t\tmaxSum+=(-nums[i]*2);\n\t\t\t}\n\t\t\tif(temp%2===0){\n\t\t\t\treturn maxSum;\n\t\t\t}else{\n\t\t\t\tif(count === nums.length){\n\t\t\t\t\treturn maxSum + 2*(nums[nums.length-1])\n\t\t\t\t}else{\n\t\t\t\t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n```","source":"_posts/1005. K 次取反后最大化的数组和.md","raw":"---\ntitle: 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\ndate: 2021-12-30 18:24:47\ndescription: 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1005 K 次取反后最大化的数组和 找到负数个数，条件判断\n\n## [查看原题](https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/)\n\n## 解题思路\n\n主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。\n1. 先将数组排序，便于后续操作数组中的数据\n2. 找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中\n3. 开始判断变化的次数和负数个数的关系\n\t- 如果变化的次数小于等于负数的个数，k<=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍\n\t- 如果变化的次数大于负数的个数，继续判断负数的个数是否为0\n\t\t1. 为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]\n\t\t2. 不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数\n\t\t\t- temp为偶数，直接返回最大值\n\t\t\t- temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则 \t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。\n\n\t\t\t\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\n// 统计负数的个数\nvar largestSumAfterKNegations = function(nums, k) {\n\tlet count = 0;//负数的个数\n\tlet maxSum = 0;//可能的最大和\n\tlet sum = 0;//原来的\n\tnums.sort((a,b)=>a-b);\n\tnums.forEach(item=>{\n\t\tif(item < 0){\n\t\t\tcount ++;\n\t\t}\n\t\tsum += item;\n\t})\n\tif(k<=count){\n\t\tmaxSum = sum;\n\t\tfor(let i =0;i<k;i++){\n\t\t\tmaxSum+=(-nums[i]*2);\n\t\t}\n\t\treturn maxSum;\n\t}else if(k>count){\n\t\tif(!count){\n\t\t\tif(k%2===0){\n\t\t\t\treturn sum;\n\t\t\t}else{\n\t\t\t\treturn sum-2*nums[0];\n\t\t\t}\n\t\t}else{\n\t\t\tlet temp  = k-count;\n\t\t\tmaxSum = sum;\n\t\t\tfor(let i =0;i<count;i++){\n\t\t\t\tmaxSum+=(-nums[i]*2);\n\t\t\t}\n\t\t\tif(temp%2===0){\n\t\t\t\treturn maxSum;\n\t\t\t}else{\n\t\t\t\tif(count === nums.length){\n\t\t\t\t\treturn maxSum + 2*(nums[nums.length-1])\n\t\t\t\t}else{\n\t\t\t\t\treturn maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n```","slug":"1005. K 次取反后最大化的数组和","published":1,"updated":"2021-12-30T14:19:36.246Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5h80001isax3gqdboov","content":"<h1 id=\"1005-K-次取反后最大化的数组和-找到负数个数，条件判断\"><a href=\"#1005-K-次取反后最大化的数组和-找到负数个数，条件判断\" class=\"headerlink\" title=\"1005 K 次取反后最大化的数组和 找到负数个数，条件判断\"></a>1005 K 次取反后最大化的数组和 找到负数个数，条件判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。</p>\n<ol>\n<li>先将数组排序，便于后续操作数组中的数据</li>\n<li>找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中</li>\n<li>开始判断变化的次数和负数个数的关系<ul>\n<li>如果变化的次数小于等于负数的个数，k&lt;=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍</li>\n<li>如果变化的次数大于负数的个数，继续判断负数的个数是否为0<ol>\n<li>为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]</li>\n<li>不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数<ul>\n<li>temp为偶数，直接返回最大值</li>\n<li>temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则         return maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 统计负数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> largestSumAfterKNegations = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//负数的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> maxSum = <span class=\"number\">0</span>;<span class=\"comment\">//可能的最大和</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//原来的</span></span><br><span class=\"line\">\tnums.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</span><br><span class=\"line\">\tnums.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tcount ++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum += item;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;=count)&#123;</span><br><span class=\"line\">\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&gt;count)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!count)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum-<span class=\"number\">2</span>*nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp  = k-count;</span><br><span class=\"line\">\t\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">\t\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(count === nums.length)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum + <span class=\"number\">2</span>*(nums[nums.length-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum - <span class=\"number\">2</span>*<span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.abs(nums[count-<span class=\"number\">1</span>]),<span class=\"built_in\">Math</span>.abs(nums[count]))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1434,"excerpt":"","more":"<h1 id=\"1005-K-次取反后最大化的数组和-找到负数个数，条件判断\"><a href=\"#1005-K-次取反后最大化的数组和-找到负数个数，条件判断\" class=\"headerlink\" title=\"1005 K 次取反后最大化的数组和 找到负数个数，条件判断\"></a>1005 K 次取反后最大化的数组和 找到负数个数，条件判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>主要思想就是尽量多的把负数变为正数，负数不够变化时，变化最小的正数。</p>\n<ol>\n<li>先将数组排序，便于后续操作数组中的数据</li>\n<li>找出数组中负数的个数，记录到count中，并且计算原来数组的和记录到sum中</li>\n<li>开始判断变化的次数和负数个数的关系<ul>\n<li>如果变化的次数小于等于负数的个数，k&lt;=count，则直接找出最小的k个负数，最大和为sum + k个负数绝对值的二倍</li>\n<li>如果变化的次数大于负数的个数，继续判断负数的个数是否为0<ol>\n<li>为0，则判断k是否为偶数，如果为偶数则直接返回sum,如果为奇数，则直接返回sum - 二倍的nums[0]</li>\n<li>不为0，先求出将负数全变为正数的最大值，然后求出变化次数和负数个数的差值temp，继续判断temp是奇数还是偶数<ul>\n<li>temp为偶数，直接返回最大值</li>\n<li>temp为奇数，继续判断数组是否为全负数，如果是全负数 return maxSum + 2*(nums[nums.length-1])，如果不是则         return maxSum - 2*Math.min(Math.abs(nums[count-1]),Math.abs(nums[count]))。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 统计负数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> largestSumAfterKNegations = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//负数的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> maxSum = <span class=\"number\">0</span>;<span class=\"comment\">//可能的最大和</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//原来的</span></span><br><span class=\"line\">\tnums.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</span><br><span class=\"line\">\tnums.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tcount ++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum += item;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;=count)&#123;</span><br><span class=\"line\">\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&gt;count)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!count)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> sum-<span class=\"number\">2</span>*nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp  = k-count;</span><br><span class=\"line\">\t\t\tmaxSum = sum;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">\t\t\t\tmaxSum+=(-nums[i]*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp%<span class=\"number\">2</span>===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(count === nums.length)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum + <span class=\"number\">2</span>*(nums[nums.length-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxSum - <span class=\"number\">2</span>*<span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.abs(nums[count-<span class=\"number\">1</span>]),<span class=\"built_in\">Math</span>.abs(nums[count]))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1078. Bigram 分词","date":"2021-12-30T10:24:47.000Z","description":"1078. Bigram 分词","comments":1,"toc":true,"_content":"\n# 1078. Bigram 分词\n\n## [查看原题](https://leetcode-cn.com/problems/occurrences-after-bigram/)\n\n## 解题思路\n\n1. 将句子按空格分隔开\n2. 遍历寻找符合条件的就行\n\n## 代码\n\n```javascript\n/**\n * @param {string} text\n * @param {string} first\n * @param {string} second\n * @return {string[]}\n */\nvar findOcurrences = function(text, first, second) {\n\tlet thirdWord = [];//结果\n\t// 将字符串转为数组\n\tconst textArr = text.split(' ');\n\tfor(let i = 0 ;i<textArr.length-2;i++){\n\t\tif(textArr[i]===first &&textArr[i+1] === second){\n\t\t\tthirdWord.push(textArr[i+2])\n\t\t}\n\t}\n\treturn thirdWord;\n};\n```","source":"_posts/1078. Bigram 分词.md","raw":"---\ntitle: 1078. Bigram 分词\ndate: 2021-12-30 18:24:47\ndescription: 1078. Bigram 分词\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1078. Bigram 分词\n\n## [查看原题](https://leetcode-cn.com/problems/occurrences-after-bigram/)\n\n## 解题思路\n\n1. 将句子按空格分隔开\n2. 遍历寻找符合条件的就行\n\n## 代码\n\n```javascript\n/**\n * @param {string} text\n * @param {string} first\n * @param {string} second\n * @return {string[]}\n */\nvar findOcurrences = function(text, first, second) {\n\tlet thirdWord = [];//结果\n\t// 将字符串转为数组\n\tconst textArr = text.split(' ');\n\tfor(let i = 0 ;i<textArr.length-2;i++){\n\t\tif(textArr[i]===first &&textArr[i+1] === second){\n\t\t\tthirdWord.push(textArr[i+2])\n\t\t}\n\t}\n\treturn thirdWord;\n};\n```","slug":"1078. Bigram 分词","published":1,"updated":"2021-12-30T14:19:52.501Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5he0003isaxck8cazr7","content":"<h1 id=\"1078-Bigram-分词\"><a href=\"#1078-Bigram-分词\" class=\"headerlink\" title=\"1078. Bigram 分词\"></a>1078. Bigram 分词</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/occurrences-after-bigram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将句子按空格分隔开</li>\n<li>遍历寻找符合条件的就行</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">text</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">first</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">second</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findOcurrences = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, first, second</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> thirdWord = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> textArr = text.split(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ;i&lt;textArr.length-<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(textArr[i]===first &amp;&amp;textArr[i+<span class=\"number\">1</span>] === second)&#123;</span><br><span class=\"line\">\t\t\tthirdWord.push(textArr[i+<span class=\"number\">2</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> thirdWord;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":475,"excerpt":"","more":"<h1 id=\"1078-Bigram-分词\"><a href=\"#1078-Bigram-分词\" class=\"headerlink\" title=\"1078. Bigram 分词\"></a>1078. Bigram 分词</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/occurrences-after-bigram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将句子按空格分隔开</li>\n<li>遍历寻找符合条件的就行</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">text</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">first</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">second</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findOcurrences = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, first, second</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> thirdWord = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> textArr = text.split(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ;i&lt;textArr.length-<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(textArr[i]===first &amp;&amp;textArr[i+<span class=\"number\">1</span>] === second)&#123;</span><br><span class=\"line\">\t\t\tthirdWord.push(textArr[i+<span class=\"number\">2</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> thirdWord;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1122. 数组的相对排序 利用Map集合和数组排序","date":"2021-12-30T10:24:47.000Z","description":"1122. 数组的相对排序 利用Map集合和数组排序","comments":1,"toc":true,"_content":"\n# 1122. 数组的相对排序 利用Map集合和数组排序\n\n## [查看原题](https://leetcode-cn.com/problems/relative-sort-array/)\n\n## 解题思路\n1. 先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值\n2. 遍历arr2将map中的元素全部取出，顺序排列，注意要\n```\tjs\n\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t}\n```\n将每一项都取出，防止遗漏重复项，取出一项后记得删除\n3. 再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number[]}\n */\nvar relativeSortArray = function(arr1, arr2) {\n\t// 将arr1映射到Map集合中值为元素的个数\n\tconst map = new Map();\n\tarr1.forEach(item=>{\n\t\tif(map.has(item)){\n\t\t\tmap.set(item,map.get(item)+1);\n\t\t}else{\n\t\t\tmap.set(item,1);\n\t\t}\n\t});\n\tlet result  =[];\n\t//遍历数组arr2按顺序将map中的值push到result中\n\tarr2.forEach(item=>{\n\t\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t\t}\n\t\tmap.delete(item);\n\t});\n\tlet other = [];\n\tfor (const [key,value] of map){\n\t\tfor(let i = 0;i<value;i++){\n\t\t\tother.push(key);\n\t\t}\n\t}\n\tresult.push(...other.sort((a,b)=>a-b)) ;\n\treturn result;\n};\n\n```","source":"_posts/1122. 数组的相对排序.md","raw":"---\ntitle: 1122. 数组的相对排序 利用Map集合和数组排序\ndate: 2021-12-30 18:24:47\ndescription: 1122. 数组的相对排序 利用Map集合和数组排序\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1122. 数组的相对排序 利用Map集合和数组排序\n\n## [查看原题](https://leetcode-cn.com/problems/relative-sort-array/)\n\n## 解题思路\n1. 先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值\n2. 遍历arr2将map中的元素全部取出，顺序排列，注意要\n```\tjs\n\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t}\n```\n将每一项都取出，防止遗漏重复项，取出一项后记得删除\n3. 再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number[]}\n */\nvar relativeSortArray = function(arr1, arr2) {\n\t// 将arr1映射到Map集合中值为元素的个数\n\tconst map = new Map();\n\tarr1.forEach(item=>{\n\t\tif(map.has(item)){\n\t\t\tmap.set(item,map.get(item)+1);\n\t\t}else{\n\t\t\tmap.set(item,1);\n\t\t}\n\t});\n\tlet result  =[];\n\t//遍历数组arr2按顺序将map中的值push到result中\n\tarr2.forEach(item=>{\n\t\tfor(let i = 0;i<map.get(item);i++){\n\t\t\tresult.push(item);\n\t\t}\n\t\tmap.delete(item);\n\t});\n\tlet other = [];\n\tfor (const [key,value] of map){\n\t\tfor(let i = 0;i<value;i++){\n\t\t\tother.push(key);\n\t\t}\n\t}\n\tresult.push(...other.sort((a,b)=>a-b)) ;\n\treturn result;\n};\n\n```","slug":"1122. 数组的相对排序","published":1,"updated":"2021-12-30T14:20:09.913Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hk0007isax44lr5vf2","content":"<h1 id=\"1122-数组的相对排序-利用Map集合和数组排序\"><a href=\"#1122-数组的相对排序-利用Map集合和数组排序\" class=\"headerlink\" title=\"1122. 数组的相对排序 利用Map集合和数组排序\"></a>1122. 数组的相对排序 利用Map集合和数组排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-sort-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值</li>\n<li>遍历arr2将map中的元素全部取出，顺序排列，注意要<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\tresult.push(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n将每一项都取出，防止遗漏重复项，取出一项后记得删除</li>\n<li>再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> relativeSortArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将arr1映射到Map集合中值为元素的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\tarr1.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,map.get(item)+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result  =[];</span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组arr2按顺序将map中的值push到result中</span></span><br><span class=\"line\">\tarr2.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\t\tresult.push(item);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmap.delete(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> other = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;value;i++)&#123;</span><br><span class=\"line\">\t\t\tother.push(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresult.push(...other.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":918,"excerpt":"","more":"<h1 id=\"1122-数组的相对排序-利用Map集合和数组排序\"><a href=\"#1122-数组的相对排序-利用Map集合和数组排序\" class=\"headerlink\" title=\"1122. 数组的相对排序 利用Map集合和数组排序\"></a>1122. 数组的相对排序 利用Map集合和数组排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-sort-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先将数组arr1映射到map对象中，用数组的值为键，数组每个值得个数为值</li>\n<li>遍历arr2将map中的元素全部取出，顺序排列，注意要<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\tresult.push(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n将每一项都取出，防止遗漏重复项，取出一项后记得删除</li>\n<li>再次遍历map取出arr1特有的元素，进行排序再push到大数组中返回</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> relativeSortArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将arr1映射到Map集合中值为元素的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\tarr1.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,map.get(item)+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result  =[];</span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组arr2按顺序将map中的值push到result中</span></span><br><span class=\"line\">\tarr2.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;map.get(item);i++)&#123;</span><br><span class=\"line\">\t\t\tresult.push(item);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmap.delete(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> other = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;value;i++)&#123;</span><br><span class=\"line\">\t\t\tother.push(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresult.push(...other.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"1154. 一年中的第几天 打表求解","date":"2021-12-30T10:24:47.000Z","description":"1154. 一年中的第几天 打表求解","comments":1,"toc":true,"_content":"\n# 1154. 一年中的第几天 打表求解\n\n## [查看原题](https://leetcode-cn.com/problems/day-of-the-year/)\n\n## 解题思路\n\n先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。\n\n## 代码\n\n```javascript\n\n/**\n * @param {string} date\n * @return {number}\n */\nvar dayOfYear = function(date) {\n\tlet count = 0;\n\tlet months = [31,28,31,30,31,30,31,31,30,31,30,31];\n\t// 年月日拆开\n\tconst nums = date.split('-');\n\n\tconst year = parseInt(nums[0]);\n\tconst month = parseInt(nums[1]);\n\tconst day = parseInt(nums[2])\n\t// 判断是不是闰年\n\tif((year % 4 === 0 && year % 100 !== 0)||year % 400 === 0){\n\t\tif(month > 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(let i = 1;i<month;i++){\n\t\tcount += months[i-1];\n\t}\n\tcount += day;\n\treturn count;\n```","source":"_posts/1154. 一年中的第几天.md","raw":"---\ntitle: 1154. 一年中的第几天 打表求解\ndate: 2021-12-30 18:24:47\ndescription: 1154. 一年中的第几天 打表求解\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 1154. 一年中的第几天 打表求解\n\n## [查看原题](https://leetcode-cn.com/problems/day-of-the-year/)\n\n## 解题思路\n\n先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。\n\n## 代码\n\n```javascript\n\n/**\n * @param {string} date\n * @return {number}\n */\nvar dayOfYear = function(date) {\n\tlet count = 0;\n\tlet months = [31,28,31,30,31,30,31,31,30,31,30,31];\n\t// 年月日拆开\n\tconst nums = date.split('-');\n\n\tconst year = parseInt(nums[0]);\n\tconst month = parseInt(nums[1]);\n\tconst day = parseInt(nums[2])\n\t// 判断是不是闰年\n\tif((year % 4 === 0 && year % 100 !== 0)||year % 400 === 0){\n\t\tif(month > 2){\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(let i = 1;i<month;i++){\n\t\tcount += months[i-1];\n\t}\n\tcount += day;\n\treturn count;\n```","slug":"1154. 一年中的第几天","published":1,"updated":"2021-12-30T14:21:05.911Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hm0009isax3lp3afrg","content":"<h1 id=\"1154-一年中的第几天-打表求解\"><a href=\"#1154-一年中的第几天-打表求解\" class=\"headerlink\" title=\"1154. 一年中的第几天 打表求解\"></a>1154. 一年中的第几天 打表求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/day-of-the-year/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">date</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dayOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">date</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> months = [<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 年月日拆开</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> nums = date.split(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> year = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> month = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> day = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"comment\">// 判断是不是闰年</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((year % <span class=\"number\">4</span> === <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> !== <span class=\"number\">0</span>)||year % <span class=\"number\">400</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(month &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;month;i++)&#123;</span><br><span class=\"line\">\t\tcount += months[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcount += day;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":569,"excerpt":"","more":"<h1 id=\"1154-一年中的第几天-打表求解\"><a href=\"#1154-一年中的第几天-打表求解\" class=\"headerlink\" title=\"1154. 一年中的第几天 打表求解\"></a>1154. 一年中的第几天 打表求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/day-of-the-year/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先将每个月份的天数存到数组中，再判断该年是不是闰年，闰年的2月份是29天。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">date</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dayOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">date</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> months = [<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 年月日拆开</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> nums = date.split(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> year = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> month = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> day = <span class=\"built_in\">parseInt</span>(nums[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"comment\">// 判断是不是闰年</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((year % <span class=\"number\">4</span> === <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> !== <span class=\"number\">0</span>)||year % <span class=\"number\">400</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(month &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;month;i++)&#123;</span><br><span class=\"line\">\t\tcount += months[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcount += day;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br></pre></td></tr></table></figure>"},{"title":"118. 杨辉三角 循环遍历，一层一层计算","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"118. 杨辉三角 循环遍历，一层一层计算","_content":"\n# 118. 杨辉三角 循环遍历，一层一层计算\n## 解题思路\n1. 定义一个空数组result存放返回值\n2. 循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数\n    - 参数为1则不在temp最后一项push（1）\n    - 不为1则push（1）\n3. 将temp添加都result中\n\n## [原题](https://leetcode-cn.com/problems/pascals-triangle/)\n## 代码\n\n```javascript\n/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let result = [];\n    for (let i = 1; i <= numRows; i++) {\n        let temp = [1];\n        for (let j = 1; j < i - 1; j++) {\n            temp.push(result[i - 2][j - 1] + result[i - 2][j]);\n        }\n        if (i !== 1) {\n            temp.push(1);\n        }\n        result.push(temp);\n    }\n    return result;\n};\n```","source":"_posts/118. 杨辉三角.md","raw":"---\ntitle: 118. 杨辉三角 循环遍历，一层一层计算\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 118. 杨辉三角 循环遍历，一层一层计算\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 118. 杨辉三角 循环遍历，一层一层计算\n## 解题思路\n1. 定义一个空数组result存放返回值\n2. 循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数\n    - 参数为1则不在temp最后一项push（1）\n    - 不为1则push（1）\n3. 将temp添加都result中\n\n## [原题](https://leetcode-cn.com/problems/pascals-triangle/)\n## 代码\n\n```javascript\n/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let result = [];\n    for (let i = 1; i <= numRows; i++) {\n        let temp = [1];\n        for (let j = 1; j < i - 1; j++) {\n            temp.push(result[i - 2][j - 1] + result[i - 2][j]);\n        }\n        if (i !== 1) {\n            temp.push(1);\n        }\n        result.push(temp);\n    }\n    return result;\n};\n```","slug":"118. 杨辉三角","published":1,"updated":"2021-12-30T14:38:22.529Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hn000bisax4aw8h0x2","content":"<h1 id=\"118-杨辉三角-循环遍历，一层一层计算\"><a href=\"#118-杨辉三角-循环遍历，一层一层计算\" class=\"headerlink\" title=\"118. 杨辉三角 循环遍历，一层一层计算\"></a>118. 杨辉三角 循环遍历，一层一层计算</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个空数组result存放返回值</li>\n<li>循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数<ul>\n<li>参数为1则不在temp最后一项push（1）</li>\n<li>不为1则push（1）</li>\n</ul>\n</li>\n<li>将temp添加都result中</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/pascals-triangle/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= numRows; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = [<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            temp.push(result[i - <span class=\"number\">2</span>][j - <span class=\"number\">1</span>] + result[i - <span class=\"number\">2</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":477,"excerpt":"","more":"<h1 id=\"118-杨辉三角-循环遍历，一层一层计算\"><a href=\"#118-杨辉三角-循环遍历，一层一层计算\" class=\"headerlink\" title=\"118. 杨辉三角 循环遍历，一层一层计算\"></a>118. 杨辉三角 循环遍历，一层一层计算</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个空数组result存放返回值</li>\n<li>循环，定义一个新数组temp ，先将数组第一项赋值为1，在循环计算，再判断参数<ul>\n<li>参数为1则不在temp最后一项push（1）</li>\n<li>不为1则push（1）</li>\n</ul>\n</li>\n<li>将temp添加都result中</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/pascals-triangle/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= numRows; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = [<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            temp.push(result[i - <span class=\"number\">2</span>][j - <span class=\"number\">1</span>] + result[i - <span class=\"number\">2</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"136. 只出现一次的数字 循环利用indexOf求解","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"136. 只出现一次的数字 循环利用indexOf求解","_content":"\n# 136. 只出现一次的数字 循环利用indexOf求解\n\n## [查看原题](https://leetcode-cn.com/problems/single-number/)\n\n## 解题思路\n这种方法时间复杂度较高\n利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums.indexOf(nums[i], i + 1) === -1 && nums.indexOf(nums[i]) === i) {\n            return nums[i]\n        }\n    }\n};\n```\n\n## 解题思路\n1. 将数组转为set集合，set集合没有重复项\n2. 对set集合每一项求和 sum1\n3. 对数组求和 sum2\n4. set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const set = new Set(nums); //将nums转为集合\n    let sum1 = 0; //求set集合各项的和\n    let sum2 = 0; //求数组的各项和\n    for (const item of set) {\n        sum1 += item;\n    }\n    nums.forEach(vaule => {\n        sum2 += vaule;\n    })\n    return (2 * sum1) - sum2;\n};\n```","source":"_posts/136. 只出现一次的数字.md","raw":"---\ntitle: 136. 只出现一次的数字 循环利用indexOf求解\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 136. 只出现一次的数字 循环利用indexOf求解\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 136. 只出现一次的数字 循环利用indexOf求解\n\n## [查看原题](https://leetcode-cn.com/problems/single-number/)\n\n## 解题思路\n这种方法时间复杂度较高\n利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums.indexOf(nums[i], i + 1) === -1 && nums.indexOf(nums[i]) === i) {\n            return nums[i]\n        }\n    }\n};\n```\n\n## 解题思路\n1. 将数组转为set集合，set集合没有重复项\n2. 对set集合每一项求和 sum1\n3. 对数组求和 sum2\n4. set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    const set = new Set(nums); //将nums转为集合\n    let sum1 = 0; //求set集合各项的和\n    let sum2 = 0; //求数组的各项和\n    for (const item of set) {\n        sum1 += item;\n    }\n    nums.forEach(vaule => {\n        sum2 += vaule;\n    })\n    return (2 * sum1) - sum2;\n};\n```","slug":"136. 只出现一次的数字","published":1,"updated":"2021-12-30T14:58:57.102Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hq000fisaxh53g2spu","content":"<h1 id=\"136-只出现一次的数字-循环利用indexOf求解\"><a href=\"#136-只出现一次的数字-循环利用indexOf求解\" class=\"headerlink\" title=\"136. 只出现一次的数字 循环利用indexOf求解\"></a>136. 只出现一次的数字 循环利用indexOf求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法时间复杂度较高<br>利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.indexOf(nums[i], i + <span class=\"number\">1</span>) === -<span class=\"number\">1</span> &amp;&amp; nums.indexOf(nums[i]) === i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set集合，set集合没有重复项</li>\n<li>对set集合每一项求和 sum1</li>\n<li>对数组求和 sum2</li>\n<li>set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums); <span class=\"comment\">//将nums转为集合</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>; <span class=\"comment\">//求set集合各项的和</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum2 = <span class=\"number\">0</span>; <span class=\"comment\">//求数组的各项和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">        sum1 += item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums.forEach(<span class=\"function\"><span class=\"params\">vaule</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum2 += vaule;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * sum1) - sum2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":778,"excerpt":"","more":"<h1 id=\"136-只出现一次的数字-循环利用indexOf求解\"><a href=\"#136-只出现一次的数字-循环利用indexOf求解\" class=\"headerlink\" title=\"136. 只出现一次的数字 循环利用indexOf求解\"></a>136. 只出现一次的数字 循环利用indexOf求解</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法时间复杂度较高<br>利用indexOf方法判断数组当前项在前后是否还能找到与他一样的数，如果不能找到，这个数即为所求。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.indexOf(nums[i], i + <span class=\"number\">1</span>) === -<span class=\"number\">1</span> &amp;&amp; nums.indexOf(nums[i]) === i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set集合，set集合没有重复项</li>\n<li>对set集合每一项求和 sum1</li>\n<li>对数组求和 sum2</li>\n<li>set集合的和sum1表示数组不重复项的和，乘以2再减去sum2即为那个只出现一次的数</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums); <span class=\"comment\">//将nums转为集合</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>; <span class=\"comment\">//求set集合各项的和</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum2 = <span class=\"number\">0</span>; <span class=\"comment\">//求数组的各项和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">        sum1 += item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums.forEach(<span class=\"function\"><span class=\"params\">vaule</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum2 += vaule;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * sum1) - sum2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"119. 杨辉三角 II 排列组合","date":"2021-12-30T10:24:47.000Z","comments":1,"description":"119. 杨辉三角 II 排列组合","toc":true,"_content":"\n# 119. 杨辉三角 II 排列组合\n## 解题思路\n找出排列组合关系题就写出来了\n\n[原题](https://leetcode-cn.com/problems/pascals-triangle-ii/)\n## 代码\n\n```javascript\n/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    const result = []; //存放结果\n\n    result.push(1); //第一个特殊处理\n    for (let i = 1; i <= rowIndex; i++) {\n        let t = 1; //分子\n        let b = 1; //分母\n        for (let j = 0; j < i; j++) {\n            t *= (rowIndex - j);\n        }\n        for (let j = 1; j <= i; j++) {\n            b *= j;\n        }\n\n\n        result.push(t / b);\n    }\n    return result;\n};\n```","source":"_posts/119. 杨辉三角.md","raw":"---\ntitle: 119. 杨辉三角 II 排列组合\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ndescription: 119. 杨辉三角 II 排列组合\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 119. 杨辉三角 II 排列组合\n## 解题思路\n找出排列组合关系题就写出来了\n\n[原题](https://leetcode-cn.com/problems/pascals-triangle-ii/)\n## 代码\n\n```javascript\n/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    const result = []; //存放结果\n\n    result.push(1); //第一个特殊处理\n    for (let i = 1; i <= rowIndex; i++) {\n        let t = 1; //分子\n        let b = 1; //分母\n        for (let j = 0; j < i; j++) {\n            t *= (rowIndex - j);\n        }\n        for (let j = 1; j <= i; j++) {\n            b *= j;\n        }\n\n\n        result.push(t / b);\n    }\n    return result;\n};\n```","slug":"119. 杨辉三角","published":1,"updated":"2021-12-30T14:58:13.071Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hs000gisax91ya17rl","content":"<h1 id=\"119-杨辉三角-II-排列组合\"><a href=\"#119-杨辉三角-II-排列组合\" class=\"headerlink\" title=\"119. 杨辉三角 II 排列组合\"></a>119. 杨辉三角 II 排列组合</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>找出排列组合关系题就写出来了</p>\n<p><a href=\"https://leetcode-cn.com/problems/pascals-triangle-ii/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">rowIndex</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []; <span class=\"comment\">//存放结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result.push(<span class=\"number\">1</span>); <span class=\"comment\">//第一个特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            t *= (rowIndex - j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">            b *= j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(t / b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":409,"excerpt":"","more":"<h1 id=\"119-杨辉三角-II-排列组合\"><a href=\"#119-杨辉三角-II-排列组合\" class=\"headerlink\" title=\"119. 杨辉三角 II 排列组合\"></a>119. 杨辉三角 II 排列组合</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>找出排列组合关系题就写出来了</p>\n<p><a href=\"https://leetcode-cn.com/problems/pascals-triangle-ii/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">rowIndex</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []; <span class=\"comment\">//存放结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result.push(<span class=\"number\">1</span>); <span class=\"comment\">//第一个特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            t *= (rowIndex - j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">            b *= j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(t / b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1446. 连续字符","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1446. 连续字符 滑动窗口","_content":"\n# 1446. 连续字符 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/consecutive-characters/)\n\n## 解题思路\n1. 定义一个总的最大值max = 1，一个局部最大值temp = 1；\n2. 循环字符串的每一项，判断当前项与前一项是否相等\n\t- 相等，则局部最大值temp++\n\t- 不相等，则说明要重新开始寻找相同的字符串了，将temp=1;\n3. 注意循环要从 1 开始\n4. 要不断判断temp 与max的大小，更新max\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar maxPower = function(s) {\n\tlet max = 1;\n\tlet temp = 1;\n\tlet i ;\n\t// 遍历字符串，遇到不是一样的字符据重新计算\n\tfor(i= 1;i<s.length;i++){\n\t\tif(s.charAt(i)===s.charAt(i-1)){\n\t\t\ttemp++;\n\t\t}else{\n\t\t\ttemp = 1;\n\t\t}\n\t\tif(temp > max){\n\t\t\tmax =  temp;\n\t\t}\n\n\t}\n\treturn max;\n};\n```","source":"_posts/1446. 连续字符.md","raw":"---\ntitle: 1446. 连续字符\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1446. 连续字符 滑动窗口\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 1446. 连续字符 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/consecutive-characters/)\n\n## 解题思路\n1. 定义一个总的最大值max = 1，一个局部最大值temp = 1；\n2. 循环字符串的每一项，判断当前项与前一项是否相等\n\t- 相等，则局部最大值temp++\n\t- 不相等，则说明要重新开始寻找相同的字符串了，将temp=1;\n3. 注意循环要从 1 开始\n4. 要不断判断temp 与max的大小，更新max\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar maxPower = function(s) {\n\tlet max = 1;\n\tlet temp = 1;\n\tlet i ;\n\t// 遍历字符串，遇到不是一样的字符据重新计算\n\tfor(i= 1;i<s.length;i++){\n\t\tif(s.charAt(i)===s.charAt(i-1)){\n\t\t\ttemp++;\n\t\t}else{\n\t\t\ttemp = 1;\n\t\t}\n\t\tif(temp > max){\n\t\t\tmax =  temp;\n\t\t}\n\n\t}\n\treturn max;\n};\n```","slug":"1446. 连续字符","published":1,"updated":"2021-12-30T14:59:08.263Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hv000kisax4djg4if4","content":"<h1 id=\"1446-连续字符-滑动窗口\"><a href=\"#1446-连续字符-滑动窗口\" class=\"headerlink\" title=\"1446. 连续字符 滑动窗口\"></a>1446. 连续字符 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/consecutive-characters/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个总的最大值max = 1，一个局部最大值temp = 1；</li>\n<li>循环字符串的每一项，判断当前项与前一项是否相等<ul>\n<li>相等，则局部最大值temp++</li>\n<li>不相等，则说明要重新开始寻找相同的字符串了，将temp=1;</li>\n</ul>\n</li>\n<li>注意循环要从 1 开始</li>\n<li>要不断判断temp 与max的大小，更新max</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxPower = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> max = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i ;</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历字符串，遇到不是一样的字符据重新计算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i= <span class=\"number\">1</span>;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.charAt(i)===s.charAt(i-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\ttemp++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\ttemp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp &gt; max)&#123;</span><br><span class=\"line\">\t\t\tmax =  temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":482,"excerpt":"","more":"<h1 id=\"1446-连续字符-滑动窗口\"><a href=\"#1446-连续字符-滑动窗口\" class=\"headerlink\" title=\"1446. 连续字符 滑动窗口\"></a>1446. 连续字符 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/consecutive-characters/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义一个总的最大值max = 1，一个局部最大值temp = 1；</li>\n<li>循环字符串的每一项，判断当前项与前一项是否相等<ul>\n<li>相等，则局部最大值temp++</li>\n<li>不相等，则说明要重新开始寻找相同的字符串了，将temp=1;</li>\n</ul>\n</li>\n<li>注意循环要从 1 开始</li>\n<li>要不断判断temp 与max的大小，更新max</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxPower = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> max = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i ;</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历字符串，遇到不是一样的字符据重新计算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i= <span class=\"number\">1</span>;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.charAt(i)===s.charAt(i-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">\t\t\ttemp++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\ttemp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp &gt; max)&#123;</span><br><span class=\"line\">\t\t\tmax =  temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1518. 换酒问题","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1518. 换酒问题 不断更新当前瓶子的个数","_content":"# 1518. 换酒问题 不断更新当前瓶子的个数\n\n## [查看原题](https://leetcode-cn.com/problems/water-bottles/)\n\n## 解题思路\n1. 定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子\n2. 循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数\n3. 更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数\n4. 更新count的值\n\n## 代码\n\n```javascript\n/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar numWaterBottles = function(numBottles, numExchange) {\n\tlet count = numBottles;//可以喝多少瓶酒\n\tlet bottles = numBottles;//有多少瓶子\n\twhile (bottles >= numExchange){\n\t\tlet temp = Math.floor(bottles / numExchange);//当前的瓶子可以换多少瓶酒\n\t\tbottles = temp + (bottles - temp * numExchange);\n\t\tcount += temp;\n\t}\n\treturn count;\n};\n```","source":"_posts/1518. 换酒问题.md","raw":"---\ntitle: 1518. 换酒问题\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1518. 换酒问题 不断更新当前瓶子的个数\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n# 1518. 换酒问题 不断更新当前瓶子的个数\n\n## [查看原题](https://leetcode-cn.com/problems/water-bottles/)\n\n## 解题思路\n1. 定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子\n2. 循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数\n3. 更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数\n4. 更新count的值\n\n## 代码\n\n```javascript\n/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar numWaterBottles = function(numBottles, numExchange) {\n\tlet count = numBottles;//可以喝多少瓶酒\n\tlet bottles = numBottles;//有多少瓶子\n\twhile (bottles >= numExchange){\n\t\tlet temp = Math.floor(bottles / numExchange);//当前的瓶子可以换多少瓶酒\n\t\tbottles = temp + (bottles - temp * numExchange);\n\t\tcount += temp;\n\t}\n\treturn count;\n};\n```","slug":"1518. 换酒问题","published":1,"updated":"2021-12-30T14:59:19.707Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hw000misax38lv49tf","content":"<h1 id=\"1518-换酒问题-不断更新当前瓶子的个数\"><a href=\"#1518-换酒问题-不断更新当前瓶子的个数\" class=\"headerlink\" title=\"1518. 换酒问题 不断更新当前瓶子的个数\"></a>1518. 换酒问题 不断更新当前瓶子的个数</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/water-bottles/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子</li>\n<li>循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数</li>\n<li>更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数</li>\n<li>更新count的值</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numBottles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numExchange</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numWaterBottles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numBottles, numExchange</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = numBottles;<span class=\"comment\">//可以喝多少瓶酒</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> bottles = numBottles;<span class=\"comment\">//有多少瓶子</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (bottles &gt;= numExchange)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = <span class=\"built_in\">Math</span>.floor(bottles / numExchange);<span class=\"comment\">//当前的瓶子可以换多少瓶酒</span></span><br><span class=\"line\">\t\tbottles = temp + (bottles - temp * numExchange);</span><br><span class=\"line\">\t\tcount += temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":546,"excerpt":"","more":"<h1 id=\"1518-换酒问题-不断更新当前瓶子的个数\"><a href=\"#1518-换酒问题-不断更新当前瓶子的个数\" class=\"headerlink\" title=\"1518. 换酒问题 不断更新当前瓶子的个数\"></a>1518. 换酒问题 不断更新当前瓶子的个数</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/water-bottles/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>定义变量count表示可以喝的总瓶数，bottles表示当前有多少空瓶子</li>\n<li>循环，不断将瓶子换酒在换酒，结束条件为当前的瓶子数小于能兑换一瓶酒的最小瓶子数</li>\n<li>更新当前的瓶子数为换到的酒的数量加上不够一瓶酒的瓶子数</li>\n<li>更新count的值</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numBottles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numExchange</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numWaterBottles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numBottles, numExchange</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = numBottles;<span class=\"comment\">//可以喝多少瓶酒</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> bottles = numBottles;<span class=\"comment\">//有多少瓶子</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (bottles &gt;= numExchange)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = <span class=\"built_in\">Math</span>.floor(bottles / numExchange);<span class=\"comment\">//当前的瓶子可以换多少瓶酒</span></span><br><span class=\"line\">\t\tbottles = temp + (bottles - temp * numExchange);</span><br><span class=\"line\">\t\tcount += temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"189. 轮转数组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"189. 轮转数组 利用数组内置方法splice和unshift","_content":"\n# 189. 轮转数组 利用数组内置方法splice和unshift\n## [查看原题](https://leetcode-cn.com/problems/rotate-array/)\n\n## 解题思路\n1. 判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度\n2. 找到第一个要轮转开始的地方 数组长度- 要轮转的长度\n3. 截取整个部分再用 unshift方法插入到数组的最前面就行\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\n var rotate = function(nums, k) {\n    let length = nums.length;\n    let k1 = k % length;\n    nums.unshift(...nums.splice(length - k1))\n    return nums\n};\n```","source":"_posts/189. 轮转数组.md","raw":"---\ntitle: 189. 轮转数组\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 189. 轮转数组 利用数组内置方法splice和unshift\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 189. 轮转数组 利用数组内置方法splice和unshift\n## [查看原题](https://leetcode-cn.com/problems/rotate-array/)\n\n## 解题思路\n1. 判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度\n2. 找到第一个要轮转开始的地方 数组长度- 要轮转的长度\n3. 截取整个部分再用 unshift方法插入到数组的最前面就行\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\n var rotate = function(nums, k) {\n    let length = nums.length;\n    let k1 = k % length;\n    nums.unshift(...nums.splice(length - k1))\n    return nums\n};\n```","slug":"189. 轮转数组","published":1,"updated":"2021-12-30T14:59:50.842Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5hy000qisaxg7due5dd","content":"<h1 id=\"189-轮转数组-利用数组内置方法splice和unshift\"><a href=\"#189-轮转数组-利用数组内置方法splice和unshift\" class=\"headerlink\" title=\"189. 轮转数组 利用数组内置方法splice和unshift\"></a>189. 轮转数组 利用数组内置方法splice和unshift</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度</li>\n<li>找到第一个要轮转开始的地方 数组长度- 要轮转的长度</li>\n<li>截取整个部分再用 unshift方法插入到数组的最前面就行<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> k1 = k % length;</span><br><span class=\"line\">    nums.unshift(...nums.splice(length - k1))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":399,"excerpt":"","more":"<h1 id=\"189-轮转数组-利用数组内置方法splice和unshift\"><a href=\"#189-轮转数组-利用数组内置方法splice和unshift\" class=\"headerlink\" title=\"189. 轮转数组 利用数组内置方法splice和unshift\"></a>189. 轮转数组 利用数组内置方法splice和unshift</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>判断出哪些部分是要向右轮转的，用 k % nums.length求出要轮转的长度</li>\n<li>找到第一个要轮转开始的地方 数组长度- 要轮转的长度</li>\n<li>截取整个部分再用 unshift方法插入到数组的最前面就行<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> k1 = k % length;</span><br><span class=\"line\">    nums.unshift(...nums.splice(length - k1))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"167. 两数之和 II - 输入有序数组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解","_content":"\n# 167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解\n## 解题思路\n两层循环暴力求解\n\n##[原题](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if (numbers[j] + numbers[i] === target) {\n                result.push(i + 1, j + 1);\n                return result;\n            }\n        }\n    }\n\n};\n```\n\n## 解题思路\n二分法求解\n1. 循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，\n2. 在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回\n3. 这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let left = 0,\n        right = 0; //左右边界\n    for (let i = 0; i < length; i++) {\n        let target1 = target - numbers[i]; //另个数的大小\n        right = length - 1;\n        left = i + 1;\n        let mid = Math.floor((left + right) / 2);\n        while (left <= right) {\n            if (target1 < numbers[mid]) {\n                right = mid - 1;\n            } else if (target1 > numbers[mid]) {\n                left = mid + 1;\n            } else {\n                return [i + 1, mid + 1]\n            }\n            mid = Math.floor((left + right) / 2)\n        }\n    }\n\n};\n```","source":"_posts/167. 两数之和 II - 输入有序数组.md","raw":"---\ntitle: 167. 两数之和 II - 输入有序数组  \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 167. 两数之和 II - 输入有序数组  双重循环暴力求解&二分求解\n## 解题思路\n两层循环暴力求解\n\n##[原题](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if (numbers[j] + numbers[i] === target) {\n                result.push(i + 1, j + 1);\n                return result;\n            }\n        }\n    }\n\n};\n```\n\n## 解题思路\n二分法求解\n1. 循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，\n2. 在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回\n3. 这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）\n```javascript\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const length = numbers.length;\n    let left = 0,\n        right = 0; //左右边界\n    for (let i = 0; i < length; i++) {\n        let target1 = target - numbers[i]; //另个数的大小\n        right = length - 1;\n        left = i + 1;\n        let mid = Math.floor((left + right) / 2);\n        while (left <= right) {\n            if (target1 < numbers[mid]) {\n                right = mid - 1;\n            } else if (target1 > numbers[mid]) {\n                left = mid + 1;\n            } else {\n                return [i + 1, mid + 1]\n            }\n            mid = Math.floor((left + right) / 2)\n        }\n    }\n\n};\n```","slug":"167. 两数之和 II - 输入有序数组","published":1,"updated":"2021-12-30T14:59:30.837Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i0000tisax74y7ehep","content":"<h1 id=\"167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\"><a href=\"#167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\" class=\"headerlink\" title=\"167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解\"></a>167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层循环暴力求解</p>\n<p>##<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[j] + numbers[i] === target) &#123;</span><br><span class=\"line\">                result.push(i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分法求解</p>\n<ol>\n<li>循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，</li>\n<li>在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回</li>\n<li>这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = <span class=\"number\">0</span>; <span class=\"comment\">//左右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target1 = target - numbers[i]; <span class=\"comment\">//另个数的大小</span></span><br><span class=\"line\">        right = length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target1 &lt; numbers[mid]) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target1 &gt; numbers[mid]) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i + <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1112,"excerpt":"","more":"<h1 id=\"167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\"><a href=\"#167-两数之和-II-输入有序数组-双重循环暴力求解-amp-二分求解\" class=\"headerlink\" title=\"167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解\"></a>167. 两数之和 II - 输入有序数组  双重循环暴力求解&amp;二分求解</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层循环暴力求解</p>\n<p>##<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[j] + numbers[i] === target) &#123;</span><br><span class=\"line\">                result.push(i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分法求解</p>\n<ol>\n<li>循环数组假设当前下标 i 为其中一个正确的值计算出另一个值，</li>\n<li>在 i+1 到 数组长度length-1 的这段距离中二分查找，找到符合条件的直接返回</li>\n<li>这种方法比直接双重暴力循环时间复杂度降低，从(N^2)  降为（NlogN）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = numbers.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = <span class=\"number\">0</span>; <span class=\"comment\">//左右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target1 = target - numbers[i]; <span class=\"comment\">//另个数的大小</span></span><br><span class=\"line\">        right = length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target1 &lt; numbers[mid]) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target1 &gt; numbers[mid]) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i + <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"1816. 截断句子","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1816. 截断句子 split方法和循环判断","_content":"\n# 1816. 截断句子 split方法和循环判断\n\n## [查看原题](https://leetcode-cn.com/problems/truncate-sentence/)\n\n## 直接调用内置方法\n\n### 解题思路\n1. 先将字符串用split转为数组\n2. 用slice截取数组的0到k部分再用join连接\n\n### 代码\n```javascript\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    // 将字符串转为数组后截取\n    return s.split(' ').splice(0,k).join(' ')\n};\n\n```\n\n## 循环判断\n\n### 解题思路\n1. 新定义一个空字符result，定义count=0用来存储找到了几个空格\n2. 循环字符串，判断这一项是不是空格，如果是空格则count++\n3. 判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中\n\n\n### 代码\n```\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    const length = s.length;\n    let result = '';\n    let count = 0;\n    for(let i = 0;i<length;i++){\n        if(s.charAt(i)===' '){\n            count++;\n        }\n        if(count === k){\n            break;\n        }else{\n            result += s.charAt(i);\n        }\n        \n    }\n    return result;\n};\n```","source":"_posts/1816. 截断句子.md","raw":"---\ntitle: 1816. 截断句子\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1816. 截断句子 split方法和循环判断\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 1816. 截断句子 split方法和循环判断\n\n## [查看原题](https://leetcode-cn.com/problems/truncate-sentence/)\n\n## 直接调用内置方法\n\n### 解题思路\n1. 先将字符串用split转为数组\n2. 用slice截取数组的0到k部分再用join连接\n\n### 代码\n```javascript\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    // 将字符串转为数组后截取\n    return s.split(' ').splice(0,k).join(' ')\n};\n\n```\n\n## 循环判断\n\n### 解题思路\n1. 新定义一个空字符result，定义count=0用来存储找到了几个空格\n2. 循环字符串，判断这一项是不是空格，如果是空格则count++\n3. 判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中\n\n\n### 代码\n```\n/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    const length = s.length;\n    let result = '';\n    let count = 0;\n    for(let i = 0;i<length;i++){\n        if(s.charAt(i)===' '){\n            count++;\n        }\n        if(count === k){\n            break;\n        }else{\n            result += s.charAt(i);\n        }\n        \n    }\n    return result;\n};\n```","slug":"1816. 截断句子","published":1,"updated":"2021-12-30T14:59:40.912Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i1000xisax3kpe7d4x","content":"<h1 id=\"1816-截断句子-split方法和循环判断\"><a href=\"#1816-截断句子-split方法和循环判断\" class=\"headerlink\" title=\"1816. 截断句子 split方法和循环判断\"></a>1816. 截断句子 split方法和循环判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/truncate-sentence/\">查看原题</a></h2><h2 id=\"直接调用内置方法\"><a href=\"#直接调用内置方法\" class=\"headerlink\" title=\"直接调用内置方法\"></a>直接调用内置方法</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>先将字符串用split转为数组</li>\n<li>用slice截取数组的0到k部分再用join连接</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> truncateSentence = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组后截取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.split(<span class=\"string\">&#x27; &#x27;</span>).splice(<span class=\"number\">0</span>,k).join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环判断\"><a href=\"#循环判断\" class=\"headerlink\" title=\"循环判断\"></a>循环判断</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>新定义一个空字符result，定义count=0用来存储找到了几个空格</li>\n<li>循环字符串，判断这一项是不是空格，如果是空格则count++</li>\n<li>判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @param &#123;number&#125; k</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var truncateSentence = function(s, k) &#123;</span><br><span class=\"line\">    const length = s.length;</span><br><span class=\"line\">    let result = &#x27;&#x27;;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    for(let i = 0;i&lt;length;i++)&#123;</span><br><span class=\"line\">        if(s.charAt(i)===&#x27; &#x27;)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(count === k)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result += s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":813,"excerpt":"","more":"<h1 id=\"1816-截断句子-split方法和循环判断\"><a href=\"#1816-截断句子-split方法和循环判断\" class=\"headerlink\" title=\"1816. 截断句子 split方法和循环判断\"></a>1816. 截断句子 split方法和循环判断</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/truncate-sentence/\">查看原题</a></h2><h2 id=\"直接调用内置方法\"><a href=\"#直接调用内置方法\" class=\"headerlink\" title=\"直接调用内置方法\"></a>直接调用内置方法</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>先将字符串用split转为数组</li>\n<li>用slice截取数组的0到k部分再用join连接</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> truncateSentence = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组后截取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.split(<span class=\"string\">&#x27; &#x27;</span>).splice(<span class=\"number\">0</span>,k).join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环判断\"><a href=\"#循环判断\" class=\"headerlink\" title=\"循环判断\"></a>循环判断</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>新定义一个空字符result，定义count=0用来存储找到了几个空格</li>\n<li>循环字符串，判断这一项是不是空格，如果是空格则count++</li>\n<li>判断count和k的关系，如果count===k说明单词已经找够，break退出循环，else则将当前项加到result中</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @param &#123;number&#125; k</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var truncateSentence = function(s, k) &#123;</span><br><span class=\"line\">    const length = s.length;</span><br><span class=\"line\">    let result = &#x27;&#x27;;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    for(let i = 0;i&lt;length;i++)&#123;</span><br><span class=\"line\">        if(s.charAt(i)===&#x27; &#x27;)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(count === k)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result += s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"1995. 统计特殊四元组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"1995. 统计特殊四元组","_content":"\n# 1995. 统计特殊四元组\n\n## [查看原题](https://leetcode-cn.com/problems/count-special-quadruplets/)\n\n## 解题思路\n\n四层循环直接判断\n\n## 代码\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countQuadruplets = function(nums) {\n\tlet count = 0;\n\n\tfor(let i = 0;i<nums.length-3;i++){\n\t\tfor(let j = i+1;j<nums.length-2;j++){\n\t\t\tfor(let t = j+1;t<nums.length-1;t++){\n\t\t\t\tfor(let l = t+1;l<nums.length;l++){\n\t\t\t\t\tif(nums[i] + nums[j] + nums[t] === nums[l]){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n};\n\n```","source":"_posts/1995. 统计特殊四元组.md","raw":"---\ntitle: 1995. 统计特殊四元组\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 1995. 统计特殊四元组\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 1995. 统计特殊四元组\n\n## [查看原题](https://leetcode-cn.com/problems/count-special-quadruplets/)\n\n## 解题思路\n\n四层循环直接判断\n\n## 代码\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countQuadruplets = function(nums) {\n\tlet count = 0;\n\n\tfor(let i = 0;i<nums.length-3;i++){\n\t\tfor(let j = i+1;j<nums.length-2;j++){\n\t\t\tfor(let t = j+1;t<nums.length-1;t++){\n\t\t\t\tfor(let l = t+1;l<nums.length;l++){\n\t\t\t\t\tif(nums[i] + nums[j] + nums[t] === nums[l]){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n};\n\n```","slug":"1995. 统计特殊四元组","published":1,"updated":"2021-12-30T14:59:59.608Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i20010isaxffiq19uw","content":"<h1 id=\"1995-统计特殊四元组\"><a href=\"#1995-统计特殊四元组\" class=\"headerlink\" title=\"1995. 统计特殊四元组\"></a>1995. 统计特殊四元组</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/count-special-quadruplets/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>四层循环直接判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countQuadruplets = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;j&lt;nums.length-<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> t = j+<span class=\"number\">1</span>;t&lt;nums.length-<span class=\"number\">1</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> l = t+<span class=\"number\">1</span>;l&lt;nums.length;l++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(nums[i] + nums[j] + nums[t] === nums[l])&#123;</span><br><span class=\"line\">\t\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":440,"excerpt":"","more":"<h1 id=\"1995-统计特殊四元组\"><a href=\"#1995-统计特殊四元组\" class=\"headerlink\" title=\"1995. 统计特殊四元组\"></a>1995. 统计特殊四元组</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/count-special-quadruplets/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>四层循环直接判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countQuadruplets = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;j&lt;nums.length-<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> t = j+<span class=\"number\">1</span>;t&lt;nums.length-<span class=\"number\">1</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> l = t+<span class=\"number\">1</span>;l&lt;nums.length;l++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(nums[i] + nums[j] + nums[t] === nums[l])&#123;</span><br><span class=\"line\">\t\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"242. 有效的字母异位词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"242. 有效的字母异位词 转为数组排序后比较","_content":"\n# 242. 有效的字母异位词 转为数组排序后比较\n## [查看原题](https://leetcode-cn.com/problems/valid-anagram/)\n## 解题思路\n1. 先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false\n2. 执行这这以后说明字符串长度一样则将他们转为数组\n3. 可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用\n4. 循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    // 如果两个字符串长度不一样则不可能满足条件\n    if (s.length !== t.length) {\n        return false;\n    }\n    // 将字符串转为数组\n    const arr1 = Array.from(s);\n    const arr2 = Array.from(t);\n    arr1.sort();\n    arr2.sort();\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n```","source":"_posts/242. 有效的字母异位词.md","raw":"---\ntitle: 242. 有效的字母异位词\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 242. 有效的字母异位词 转为数组排序后比较\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 242. 有效的字母异位词 转为数组排序后比较\n## [查看原题](https://leetcode-cn.com/problems/valid-anagram/)\n## 解题思路\n1. 先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false\n2. 执行这这以后说明字符串长度一样则将他们转为数组\n3. 可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用\n4. 循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    // 如果两个字符串长度不一样则不可能满足条件\n    if (s.length !== t.length) {\n        return false;\n    }\n    // 将字符串转为数组\n    const arr1 = Array.from(s);\n    const arr2 = Array.from(t);\n    arr1.sort();\n    arr2.sort();\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n```","slug":"242. 有效的字母异位词","published":1,"updated":"2021-12-30T15:00:57.186Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i40014isax5txgcn2p","content":"<h1 id=\"242-有效的字母异位词-转为数组排序后比较\"><a href=\"#242-有效的字母异位词-转为数组排序后比较\" class=\"headerlink\" title=\"242. 有效的字母异位词 转为数组排序后比较\"></a>242. 有效的字母异位词 转为数组排序后比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-anagram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false</li>\n<li>执行这这以后说明字符串长度一样则将他们转为数组</li>\n<li>可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用</li>\n<li>循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">t</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不一样则不可能满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== t.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr1 = <span class=\"built_in\">Array</span>.from(s);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr2 = <span class=\"built_in\">Array</span>.from(t);</span><br><span class=\"line\">    arr1.sort();</span><br><span class=\"line\">    arr2.sort();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr1[i] !== arr2[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":587,"excerpt":"","more":"<h1 id=\"242-有效的字母异位词-转为数组排序后比较\"><a href=\"#242-有效的字母异位词-转为数组排序后比较\" class=\"headerlink\" title=\"242. 有效的字母异位词 转为数组排序后比较\"></a>242. 有效的字母异位词 转为数组排序后比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-anagram/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否一样，不一样则肯定不是有效的字母异位词，直接返回false</li>\n<li>执行这这以后说明字符串长度一样则将他们转为数组</li>\n<li>可将数组排序，可直接使用sort ，因为sort是按ASCII码排序，所以可以直接使用</li>\n<li>循环数组，判断两个数组的每一项是否相等，不相等则说明两个字符串中右的字母个数不一样</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">t</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不一样则不可能满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== t.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr1 = <span class=\"built_in\">Array</span>.from(s);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr2 = <span class=\"built_in\">Array</span>.from(t);</span><br><span class=\"line\">    arr1.sort();</span><br><span class=\"line\">    arr2.sort();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr1[i] !== arr2[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"217. 存在重复元素","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"217. 存在重复元素 利用set来和数组长度比较&排序比较","_content":"\n# 217. 存在重复元素 利用set来和数组长度比较&排序比较\n\n## [查看原题](https://leetcode-cn.com/problems/contains-duplicate/)\n## 解题思路\n利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    const set = new Set(nums);\n    let sum1 = 0,\n        sum2 = 0;\n    if (set.size === nums.length) {\n        return false;\n    } else {\n        return true;\n    }\n};\n```\n\n## 解题思路\n1. 可以先讲数组从小到大排序，则重复的数字会相邻。\n2. 循环判断数组的当前项是否等于下一项\n    - 等于则直接返回\n    - 不等于就继续判断\n3. 循环结束return false，到此还没返回说明数组里面不会有重复值\n\n## 代码\n\n```javascript\n\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    nums.sort((a, b) => a - b); //将数组排序\n    // 如果数组中存在重复元素，则排序后应该相邻\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n```","source":"_posts/217. 存在重复元素.md","raw":"---\ntitle: 217. 存在重复元素\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 217. 存在重复元素 利用set来和数组长度比较&排序比较\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 217. 存在重复元素 利用set来和数组长度比较&排序比较\n\n## [查看原题](https://leetcode-cn.com/problems/contains-duplicate/)\n## 解题思路\n利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    const set = new Set(nums);\n    let sum1 = 0,\n        sum2 = 0;\n    if (set.size === nums.length) {\n        return false;\n    } else {\n        return true;\n    }\n};\n```\n\n## 解题思路\n1. 可以先讲数组从小到大排序，则重复的数字会相邻。\n2. 循环判断数组的当前项是否等于下一项\n    - 等于则直接返回\n    - 不等于就继续判断\n3. 循环结束return false，到此还没返回说明数组里面不会有重复值\n\n## 代码\n\n```javascript\n\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    nums.sort((a, b) => a - b); //将数组排序\n    // 如果数组中存在重复元素，则排序后应该相邻\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n```","slug":"217. 存在重复元素","published":1,"updated":"2021-12-30T15:00:23.407Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i50017isaxcznv8s09","content":"<h1 id=\"217-存在重复元素-利用set来和数组长度比较-amp-排序比较\"><a href=\"#217-存在重复元素-利用set来和数组长度比较-amp-排序比较\" class=\"headerlink\" title=\"217. 存在重复元素 利用set来和数组长度比较&amp;排序比较\"></a>217. 存在重复元素 利用set来和数组长度比较&amp;排序比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/contains-duplicate/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>,</span><br><span class=\"line\">        sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.size === nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>可以先讲数组从小到大排序，则重复的数字会相邻。</li>\n<li>循环判断数组的当前项是否等于下一项<ul>\n<li>等于则直接返回</li>\n<li>不等于就继续判断</li>\n</ul>\n</li>\n<li>循环结束return false，到此还没返回说明数组里面不会有重复值</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b); <span class=\"comment\">//将数组排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果数组中存在重复元素，则排序后应该相邻</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] === nums[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":765,"excerpt":"","more":"<h1 id=\"217-存在重复元素-利用set来和数组长度比较-amp-排序比较\"><a href=\"#217-存在重复元素-利用set来和数组长度比较-amp-排序比较\" class=\"headerlink\" title=\"217. 存在重复元素 利用set来和数组长度比较&amp;排序比较\"></a>217. 存在重复元素 利用set来和数组长度比较&amp;排序比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/contains-duplicate/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用集合set来保证传入的数字元素唯一，再比较set的长度和数组的长度，如果两者长度一样则说明，数组转为集合时没有取出重复元素，也即数组中的元素都是不重复的，返回false，否者返回true</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum1 = <span class=\"number\">0</span>,</span><br><span class=\"line\">        sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.size === nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>可以先讲数组从小到大排序，则重复的数字会相邻。</li>\n<li>循环判断数组的当前项是否等于下一项<ul>\n<li>等于则直接返回</li>\n<li>不等于就继续判断</li>\n</ul>\n</li>\n<li>循环结束return false，到此还没返回说明数组里面不会有重复值</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b); <span class=\"comment\">//将数组排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果数组中存在重复元素，则排序后应该相邻</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] === nums[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"202. 快乐数","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"202. 快乐数  while循环找到结束条件","_content":"\n# 202. 快乐数  while循环找到结束条件\n## [查看原题](https://leetcode-cn.com/problems/happy-number/)\n## 解题思路\n首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件\n1. 先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber\n2. 根据得到的数字每一项计算平方和，将其存放到一个数组中 temp\n3. 先判断结果是否为 1\n    - 为 1 则证明是快乐数，返回 true \n    - 不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）\n        - 如果出现了则返回false ，循环结束\n        - 没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n\n    let temp = []; //存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环\n    while (1) {\n        const nums = getEachNumber(n); //将数字每一项放在数组里;\n        let result = nums.map(item => item ** 2); //将数字每一项平方\n        let sum = 0; //每一次计算的各项平方和结果\n        result.forEach(item => sum += item);\n        if (sum === 1) {\n            return true;\n        }\n        if (temp.indexOf(sum) != -1) {\n            // 结果形成了循环不会再等于 1 了\n            return false;\n        }\n        temp.push(sum);\n        n = sum;\n    }\n};\n/**\n * 取出数字的每一项\n * @param {number} n 传入要处理的数字\n * @param {Array}\n */\nfunction getEachNumber(n) {\n    let nums = [];\n    while (n > 0) {\n        nums.push(Math.floor(n % 10))\n        n = Math.floor(n / 10)\n    }\n    return nums;\n}\n```","source":"_posts/202. 快乐数.md","raw":"---\ntitle: 202. 快乐数\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 202. 快乐数  while循环找到结束条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 202. 快乐数  while循环找到结束条件\n## [查看原题](https://leetcode-cn.com/problems/happy-number/)\n## 解题思路\n首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件\n1. 先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber\n2. 根据得到的数字每一项计算平方和，将其存放到一个数组中 temp\n3. 先判断结果是否为 1\n    - 为 1 则证明是快乐数，返回 true \n    - 不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）\n        - 如果出现了则返回false ，循环结束\n        - 没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n\n    let temp = []; //存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环\n    while (1) {\n        const nums = getEachNumber(n); //将数字每一项放在数组里;\n        let result = nums.map(item => item ** 2); //将数字每一项平方\n        let sum = 0; //每一次计算的各项平方和结果\n        result.forEach(item => sum += item);\n        if (sum === 1) {\n            return true;\n        }\n        if (temp.indexOf(sum) != -1) {\n            // 结果形成了循环不会再等于 1 了\n            return false;\n        }\n        temp.push(sum);\n        n = sum;\n    }\n};\n/**\n * 取出数字的每一项\n * @param {number} n 传入要处理的数字\n * @param {Array}\n */\nfunction getEachNumber(n) {\n    let nums = [];\n    while (n > 0) {\n        nums.push(Math.floor(n % 10))\n        n = Math.floor(n / 10)\n    }\n    return nums;\n}\n```","slug":"202. 快乐数","published":1,"updated":"2021-12-30T15:00:08.754Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i7001bisax450dhuqf","content":"<h1 id=\"202-快乐数-while循环找到结束条件\"><a href=\"#202-快乐数-while循环找到结束条件\" class=\"headerlink\" title=\"202. 快乐数  while循环找到结束条件\"></a>202. 快乐数  while循环找到结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/happy-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件</p>\n<ol>\n<li>先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber</li>\n<li>根据得到的数字每一项计算平方和，将其存放到一个数组中 temp</li>\n<li>先判断结果是否为 1<ul>\n<li>为 1 则证明是快乐数，返回 true </li>\n<li>不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）<ul>\n<li>如果出现了则返回false ，循环结束</li>\n<li>没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nums = getEachNumber(n); <span class=\"comment\">//将数字每一项放在数组里;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item ** <span class=\"number\">2</span>); <span class=\"comment\">//将数字每一项平方</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//每一次计算的各项平方和结果</span></span><br><span class=\"line\">        result.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> sum += item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.indexOf(sum) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 结果形成了循环不会再等于 1 了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.push(sum);</span><br><span class=\"line\">        n = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出数字的每一项</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> </span>n 传入要处理的数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEachNumber</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        nums.push(<span class=\"built_in\">Math</span>.floor(n % <span class=\"number\">10</span>))</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":933,"excerpt":"","more":"<h1 id=\"202-快乐数-while循环找到结束条件\"><a href=\"#202-快乐数-while循环找到结束条件\" class=\"headerlink\" title=\"202. 快乐数  while循环找到结束条件\"></a>202. 快乐数  while循环找到结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/happy-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>首先要明白一个数不是快乐数，则其中的计算过程会出现循环，要以此为结束条件</p>\n<ol>\n<li>先将数字的每一项取出来，存到一个数组中，因为会反复用到，所以建议写成一个方法 getEachNumber</li>\n<li>根据得到的数字每一项计算平方和，将其存放到一个数组中 temp</li>\n<li>先判断结果是否为 1<ul>\n<li>为 1 则证明是快乐数，返回 true </li>\n<li>不为1 则继续判断temp 是否出现过该数（判断是否出现了循环）<ul>\n<li>如果出现了则返回false ，循环结束</li>\n<li>没出现过讲 n 值更新为上一次计算的各项平凡和，继续循环</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//存放每一次计算的结果，如果一个数不是快乐数说明到后面会形成循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nums = getEachNumber(n); <span class=\"comment\">//将数字每一项放在数组里;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item ** <span class=\"number\">2</span>); <span class=\"comment\">//将数字每一项平方</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//每一次计算的各项平方和结果</span></span><br><span class=\"line\">        result.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> sum += item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.indexOf(sum) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 结果形成了循环不会再等于 1 了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.push(sum);</span><br><span class=\"line\">        n = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出数字的每一项</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> </span>n 传入要处理的数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEachNumber</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        nums.push(<span class=\"built_in\">Math</span>.floor(n % <span class=\"number\">10</span>))</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"258. 各位相加","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"258. 各位相加  双层while循环","_content":"\n# 258. 各位相加  双层while循环\n## [查看原题](https://leetcode-cn.com/problems/add-digits/)\n## 解题思路\n两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；\n每次循环计算求和都更新外层的num 为数字各项计算总和sum。\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    while (num > 9) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10)\n        }\n        num = sum;\n    }\n    return num;\n};\n```","source":"_posts/258. 各位相加 .md","raw":"---\ntitle: 258. 各位相加\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 258. 各位相加  双层while循环\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 258. 各位相加  双层while循环\n## [查看原题](https://leetcode-cn.com/problems/add-digits/)\n## 解题思路\n两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；\n每次循环计算求和都更新外层的num 为数字各项计算总和sum。\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    while (num > 9) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10)\n        }\n        num = sum;\n    }\n    return num;\n};\n```","slug":"258. 各位相加 ","published":1,"updated":"2021-12-30T15:01:06.898Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5i8001eisax57c05f60","content":"<h1 id=\"258-各位相加-双层while循环\"><a href=\"#258-各位相加-双层while循环\" class=\"headerlink\" title=\"258. 各位相加  双层while循环\"></a>258. 各位相加  双层while循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/add-digits/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；<br>每次循环计算求和都更新外层的num 为数字各项计算总和sum。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addDigits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">            num = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":334,"excerpt":"","more":"<h1 id=\"258-各位相加-双层while循环\"><a href=\"#258-各位相加-双层while循环\" class=\"headerlink\" title=\"258. 各位相加  双层while循环\"></a>258. 各位相加  双层while循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/add-digits/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>两层while循环控制，外层循环控计算结束，里层while控制将数字各项拆开计算求和；<br>每次循环计算求和都更新外层的num 为数字各项计算总和sum。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addDigits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">            num = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"278. 第一个错误的版本","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"278. 第一个错误的版本  二分法，注意判断结束条件","_content":"\n# 278. 第一个错误的版本  二分法，注意判断结束条件\n## [查看原题](https://leetcode-cn.com/problems/first-bad-version/)\n## 解题思路\n二分算法判断\n如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1\n如果当前是错误版本，则需要继续判断当前是不是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环\n\n## 代码\n\n```javascript\n/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        let left = 1;\n        let right = n;\n        while(left <= right) {\n            mid = Math.floor((left + right) / 2)\n            if(!isBadVersion(mid)){\n                left = mid+1;\n            }else if(isBadVersion(mid)){\n                if(isBadVersion(mid - 1)){\n                    right = mid-1;\n                }else{\n                    return mid;\n                }\n            }\n        }\n    };\n};\n```","source":"_posts/278. 第一个错误的版本.md","raw":"---\ntitle: 278. 第一个错误的版本\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 278. 第一个错误的版本  二分法，注意判断结束条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 278. 第一个错误的版本  二分法，注意判断结束条件\n## [查看原题](https://leetcode-cn.com/problems/first-bad-version/)\n## 解题思路\n二分算法判断\n如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1\n如果当前是错误版本，则需要继续判断当前是不是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本\n    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环\n\n## 代码\n\n```javascript\n/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        let left = 1;\n        let right = n;\n        while(left <= right) {\n            mid = Math.floor((left + right) / 2)\n            if(!isBadVersion(mid)){\n                left = mid+1;\n            }else if(isBadVersion(mid)){\n                if(isBadVersion(mid - 1)){\n                    right = mid-1;\n                }else{\n                    return mid;\n                }\n            }\n        }\n    };\n};\n```","slug":"278. 第一个错误的版本","published":1,"updated":"2021-12-30T15:01:16.223Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ia001iisax9idr3ryi","content":"<h1 id=\"278-第一个错误的版本-二分法，注意判断结束条件\"><a href=\"#278-第一个错误的版本-二分法，注意判断结束条件\" class=\"headerlink\" title=\"278. 第一个错误的版本  二分法，注意判断结束条件\"></a>278. 第一个错误的版本  二分法，注意判断结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/first-bad-version/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法判断<br>如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1<br>如果当前是错误版本，则需要继续判断当前是不是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>version number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span> </span>whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;function&#125;</span> </span>isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;integer&#125;</span> </span>The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isBadVersion(mid))&#123;</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isBadVersion(mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isBadVersion(mid - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    right = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":883,"excerpt":"","more":"<h1 id=\"278-第一个错误的版本-二分法，注意判断结束条件\"><a href=\"#278-第一个错误的版本-二分法，注意判断结束条件\" class=\"headerlink\" title=\"278. 第一个错误的版本  二分法，注意判断结束条件\"></a>278. 第一个错误的版本  二分法，注意判断结束条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/first-bad-version/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法判断<br>如果当前项不是错误版本，说明错误版本在后面更新 right = mid + 1<br>如果当前是错误版本，则需要继续判断当前是不是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 不是错误版本，则说明mid是第一个错误版本<br>    - 如果当前是错误版本且第 mid - 1 是错误版本，则继续循环</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>version number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span> </span>whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;function&#125;</span> </span>isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;integer&#125;</span> </span>n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;integer&#125;</span> </span>The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isBadVersion(mid))&#123;</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isBadVersion(mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isBadVersion(mid - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    right = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"283. 移动零","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"283. 移动零","_content":"\n# 283. 移动零 \n## [查看原题](https://leetcode-cn.com/problems/move-zeroes/)\n## 解题思路\n1. 将right赋值为nums.length-1,代表当前连续0开始的位置\n2. lef赋值为 0 表示当前数组扫描的位置\n3. 从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right-- ,不在更新left，防止有连续的0，再次回到这个位置\n4. 如果当前项不是0 则更新left++\n\n## 代码\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let left; //左指针，开始循环\n    let length = nums.length;\n    let right = length - 1; //右指针的最开始位置\n    for (left = 0; left <= right;) {\n        // 如果当前项是0则将当前项之后的数值向前移一位\n        if (nums[left] === 0) {\n            for (let j = left + 1; j <= right; j++) {\n                nums[j - 1] = nums[j]\n            }\n            nums[right] = 0;\n            right--;\n        } else {\n            left++;\n        }\n    }\n};\n```","source":"_posts/283. 移动零.md","raw":"---\ntitle: 283. 移动零 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 283. 移动零 \ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 283. 移动零 \n## [查看原题](https://leetcode-cn.com/problems/move-zeroes/)\n## 解题思路\n1. 将right赋值为nums.length-1,代表当前连续0开始的位置\n2. lef赋值为 0 表示当前数组扫描的位置\n3. 从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right-- ,不在更新left，防止有连续的0，再次回到这个位置\n4. 如果当前项不是0 则更新left++\n\n## 代码\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let left; //左指针，开始循环\n    let length = nums.length;\n    let right = length - 1; //右指针的最开始位置\n    for (left = 0; left <= right;) {\n        // 如果当前项是0则将当前项之后的数值向前移一位\n        if (nums[left] === 0) {\n            for (let j = left + 1; j <= right; j++) {\n                nums[j - 1] = nums[j]\n            }\n            nums[right] = 0;\n            right--;\n        } else {\n            left++;\n        }\n    }\n};\n```","slug":"283. 移动零","published":1,"updated":"2021-12-30T15:01:27.143Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ib001lisax9w00d5yr","content":"<h1 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283. 移动零\"></a>283. 移动零</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/move-zeroes/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将right赋值为nums.length-1,代表当前连续0开始的位置</li>\n<li>lef赋值为 0 表示当前数组扫描的位置</li>\n<li>从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right– ,不在更新left，防止有连续的0，再次回到这个位置</li>\n<li>如果当前项不是0 则更新left++</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left; <span class=\"comment\">//左指针，开始循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = length - <span class=\"number\">1</span>; <span class=\"comment\">//右指针的最开始位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (left = <span class=\"number\">0</span>; left &lt;= right;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前项是0则将当前项之后的数值向前移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[left] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = left + <span class=\"number\">1</span>; j &lt;= right; j++) &#123;</span><br><span class=\"line\">                nums[j - <span class=\"number\">1</span>] = nums[j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[right] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":625,"excerpt":"","more":"<h1 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283. 移动零\"></a>283. 移动零</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/move-zeroes/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将right赋值为nums.length-1,代表当前连续0开始的位置</li>\n<li>lef赋值为 0 表示当前数组扫描的位置</li>\n<li>从左到右扫描数组，如果当前项是 0 则将从数组当前项到连续0开始位置之间的数组项都向前移动一位，然后在后面补0，同时更新 right– ,不在更新left，防止有连续的0，再次回到这个位置</li>\n<li>如果当前项不是0 则更新left++</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left; <span class=\"comment\">//左指针，开始循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = length - <span class=\"number\">1</span>; <span class=\"comment\">//右指针的最开始位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (left = <span class=\"number\">0</span>; left &lt;= right;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前项是0则将当前项之后的数值向前移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[left] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = left + <span class=\"number\">1</span>; j &lt;= right; j++) &#123;</span><br><span class=\"line\">                nums[j - <span class=\"number\">1</span>] = nums[j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[right] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"318. 最大单词长度乘积","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"318. 最大单词长度乘积 暴力循环","_content":"\n# 318. 最大单词长度乘积 暴力循环\n## [查看原题](https://leetcode-cn.com/problems/maximum-product-of-word-lengths/)\n\n## 解题思路\n直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值\n## 代码\n```javascript\nfunction maxProduct(words) {\n    let i, j;\n    let max = 0;\n    for (i = 0; i < words.length; i++) {\n        for (j = i + 1; j < words.length; j++) {\n            let flag = 0; //表示有无重复\n            const set = new Set(words[i]);\n            const set1 = new Set(words[j]);\n            for (const item of set1) {\n                if (set.has(item)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (!flag) {\n                if ((words[i].length * words[j].length) > max) {\n                    max = words[i].length * words[j].length\n                }\n            }\n        }\n    }\n    return max;\n}\n```","source":"_posts/318. 最大单词长度乘积.md","raw":"---\ntitle: 318. 最大单词长度乘积 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 318. 最大单词长度乘积 暴力循环\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 318. 最大单词长度乘积 暴力循环\n## [查看原题](https://leetcode-cn.com/problems/maximum-product-of-word-lengths/)\n\n## 解题思路\n直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值\n## 代码\n```javascript\nfunction maxProduct(words) {\n    let i, j;\n    let max = 0;\n    for (i = 0; i < words.length; i++) {\n        for (j = i + 1; j < words.length; j++) {\n            let flag = 0; //表示有无重复\n            const set = new Set(words[i]);\n            const set1 = new Set(words[j]);\n            for (const item of set1) {\n                if (set.has(item)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (!flag) {\n                if ((words[i].length * words[j].length) > max) {\n                    max = words[i].length * words[j].length\n                }\n            }\n        }\n    }\n    return max;\n}\n```","slug":"318. 最大单词长度乘积","published":1,"updated":"2021-12-30T15:01:36.685Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5id001pisaxfltpbw66","content":"<h1 id=\"318-最大单词长度乘积-暴力循环\"><a href=\"#318-最大单词长度乘积-暴力循环\" class=\"headerlink\" title=\"318. 最大单词长度乘积 暴力循环\"></a>318. 最大单词长度乘积 暴力循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">words</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> flag = <span class=\"number\">0</span>; <span class=\"comment\">//表示有无重复</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[i]);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[j]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.has(item)) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((words[i].length * words[j].length) &gt; max) &#123;</span><br><span class=\"line\">                    max = words[i].length * words[j].length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":516,"excerpt":"","more":"<h1 id=\"318-最大单词长度乘积-暴力循环\"><a href=\"#318-最大单词长度乘积-暴力循环\" class=\"headerlink\" title=\"318. 最大单词长度乘积 暴力循环\"></a>318. 最大单词长度乘积 暴力循环</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>直接双层循环判断两项是否有字符一样，如果不一样则计算长度的乘积，并与最大值比较，不断更新最大值</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">words</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> flag = <span class=\"number\">0</span>; <span class=\"comment\">//表示有无重复</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[i]);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words[j]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.has(item)) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((words[i].length * words[j].length) &gt; max) &#123;</span><br><span class=\"line\">                    max = words[i].length * words[j].length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"344. 反转字符串","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"344. 反转字符串 reverse&双指针&splice","_content":"\n# 344. 反转字符串 reverse&双指针&splice\n# [查看原题](https://leetcode-cn.com/problems/reverse-string/)\n\n## 解题思路\n每次将数组最后一个pop再用splice插入到数组中\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < len; i++) {\n        s.splice(i, 0, s.pop());\n    }\n};\n```\n\n## 解题思路\n双指针，找出交换后的位置进行交换\n\n## 代码\n\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < Math.floor(len / 2); i++) {\n        let temp = s[i];\n        s[i] = s[len - 1 - i];\n        s[len - i - 1] = temp;\n    }\n};\n```\n\n## 解题思路\n使用reverse方法\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    s.reverse();\n};\n```","source":"_posts/344. 反转字符串.md","raw":"---\ntitle: 344. 反转字符串\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 344. 反转字符串 reverse&双指针&splice\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 344. 反转字符串 reverse&双指针&splice\n# [查看原题](https://leetcode-cn.com/problems/reverse-string/)\n\n## 解题思路\n每次将数组最后一个pop再用splice插入到数组中\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < len; i++) {\n        s.splice(i, 0, s.pop());\n    }\n};\n```\n\n## 解题思路\n双指针，找出交换后的位置进行交换\n\n## 代码\n\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    let len = s.length;\n    for (let i = 0; i < Math.floor(len / 2); i++) {\n        let temp = s[i];\n        s[i] = s[len - 1 - i];\n        s[len - i - 1] = temp;\n    }\n};\n```\n\n## 解题思路\n使用reverse方法\n\n## 代码\n```javascript\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    s.reverse();\n};\n```","slug":"344. 反转字符串","published":1,"updated":"2021-12-30T15:01:46.512Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ie001sisax25hv7tpc","content":"<h1 id=\"344-反转字符串-reverse-amp-双指针-amp-splice\"><a href=\"#344-反转字符串-reverse-amp-双指针-amp-splice\" class=\"headerlink\" title=\"344. 反转字符串 reverse&amp;双指针&amp;splice\"></a>344. 反转字符串 reverse&amp;双指针&amp;splice</h1><h1 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-string/\">查看原题</a></h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>每次将数组最后一个pop再用splice插入到数组中</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        s.splice(i, <span class=\"number\">0</span>, s.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>双指针，找出交换后的位置进行交换</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = s[i];</span><br><span class=\"line\">        s[i] = s[len - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">        s[len - i - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用reverse方法</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s.reverse();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":772,"excerpt":"","more":"<h1 id=\"344-反转字符串-reverse-amp-双指针-amp-splice\"><a href=\"#344-反转字符串-reverse-amp-双指针-amp-splice\" class=\"headerlink\" title=\"344. 反转字符串 reverse&amp;双指针&amp;splice\"></a>344. 反转字符串 reverse&amp;双指针&amp;splice</h1><h1 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-string/\">查看原题</a></h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>每次将数组最后一个pop再用splice插入到数组中</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        s.splice(i, <span class=\"number\">0</span>, s.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>双指针，找出交换后的位置进行交换</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = s[i];</span><br><span class=\"line\">        s[i] = s[len - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">        s[len - i - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用reverse方法</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s.reverse();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"35. 搜索插入位置","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"35. 搜索插入位置 二分注意细分判断条件","_content":"\n# 35. 搜索插入位置 二分注意细分判断条件\n## [查看原题](https://leetcode-cn.com/problems/search-insert-position/)\n## 解题思路\n二分算法，注意不同的判断条件\n1. left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1\n2. 注意while的循环条件为 left<= right ， mid = Math.floor((left + right) / 2);\n3. 开始判断nums[mid] 和target的关系\n    1. 如果nums[mid] > target \n        - 继续判断mid是否在数组的第一项了\n            1. 如果不是第一项则 right = mid - 1;\n            2. 如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位\n    2. 如果nums[mid] < target\n         - 继续判断mid是否在数组的最后一项了\n            1. 如果不是最后一项则 left = mid + 1;\n            2. 如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位\n    3. 如果nums[mid] === target \n        - 直接返回 mid\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    let left = 0,\n        right = nums.length - 1;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (nums[mid] > target) {\n            if (mid != 0) {\n                right = mid - 1;\n            } else {\n                return 0;\n            }\n        } else if (nums[mid] < target) {\n            if (nums[mid + 1] > target) {\n                return mid + 1;\n            } else {\n                if (mid != nums.length - 1) {\n                    left = mid + 1;\n                } else {\n                    return nums.length;\n                }\n            }\n        } else {\n            return mid;\n        }\n    }\n};\n\n```","source":"_posts/35. 搜索插入位置.md","raw":"---\ntitle: 35. 搜索插入位置\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 35. 搜索插入位置 二分注意细分判断条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n# 35. 搜索插入位置 二分注意细分判断条件\n## [查看原题](https://leetcode-cn.com/problems/search-insert-position/)\n## 解题思路\n二分算法，注意不同的判断条件\n1. left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1\n2. 注意while的循环条件为 left<= right ， mid = Math.floor((left + right) / 2);\n3. 开始判断nums[mid] 和target的关系\n    1. 如果nums[mid] > target \n        - 继续判断mid是否在数组的第一项了\n            1. 如果不是第一项则 right = mid - 1;\n            2. 如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位\n    2. 如果nums[mid] < target\n         - 继续判断mid是否在数组的最后一项了\n            1. 如果不是最后一项则 left = mid + 1;\n            2. 如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位\n    3. 如果nums[mid] === target \n        - 直接返回 mid\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    let left = 0,\n        right = nums.length - 1;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (nums[mid] > target) {\n            if (mid != 0) {\n                right = mid - 1;\n            } else {\n                return 0;\n            }\n        } else if (nums[mid] < target) {\n            if (nums[mid + 1] > target) {\n                return mid + 1;\n            } else {\n                if (mid != nums.length - 1) {\n                    left = mid + 1;\n                } else {\n                    return nums.length;\n                }\n            }\n        } else {\n            return mid;\n        }\n    }\n};\n\n```","slug":"35. 搜索插入位置","published":1,"updated":"2021-12-30T15:01:56.404Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ig001wisaxfqkhc66a","content":"<h1 id=\"35-搜索插入位置-二分注意细分判断条件\"><a href=\"#35-搜索插入位置-二分注意细分判断条件\" class=\"headerlink\" title=\"35. 搜索插入位置 二分注意细分判断条件\"></a>35. 搜索插入位置 二分注意细分判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/search-insert-position/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，注意不同的判断条件</p>\n<ol>\n<li>left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1</li>\n<li>注意while的循环条件为 left&lt;= right ， mid = Math.floor((left + right) / 2);</li>\n<li>开始判断nums[mid] 和target的关系<ol>\n<li>如果nums[mid] &gt; target <ul>\n<li>继续判断mid是否在数组的第一项了<ol>\n<li>如果不是第一项则 right = mid - 1;</li>\n<li>如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] &lt; target<ul>\n<li>继续判断mid是否在数组的最后一项了<ol>\n<li>如果不是最后一项则 left = mid + 1;</li>\n<li>如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] === target <ul>\n<li>直接返回 mid</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid + <span class=\"number\">1</span>] &gt; target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid != nums.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1022,"excerpt":"","more":"<h1 id=\"35-搜索插入位置-二分注意细分判断条件\"><a href=\"#35-搜索插入位置-二分注意细分判断条件\" class=\"headerlink\" title=\"35. 搜索插入位置 二分注意细分判断条件\"></a>35. 搜索插入位置 二分注意细分判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/search-insert-position/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，注意不同的判断条件</p>\n<ol>\n<li>left 为左边界初始值为 0 ，right 为右边界 初始值为 nums.length - 1</li>\n<li>注意while的循环条件为 left&lt;= right ， mid = Math.floor((left + right) / 2);</li>\n<li>开始判断nums[mid] 和target的关系<ol>\n<li>如果nums[mid] &gt; target <ul>\n<li>继续判断mid是否在数组的第一项了<ol>\n<li>如果不是第一项则 right = mid - 1;</li>\n<li>如果是第一项应该直接结束，说明此时数组中没有target，且小于nums[0],则应该插在第0位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] &lt; target<ul>\n<li>继续判断mid是否在数组的最后一项了<ol>\n<li>如果不是最后一项则 left = mid + 1;</li>\n<li>如果是最后一项应该直接结束，说明此时数组中没有target，且大于nums[nums.length -1],则直接插在第 nums.length 位</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>如果nums[mid] === target <ul>\n<li>直接返回 mid</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid + <span class=\"number\">1</span>] &gt; target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid != nums.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"391. 完美矩形","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"391. 完美矩形 map哈希","_content":"\n\n# 391. 完美矩形 map哈希\n## [查看原题](https://leetcode-cn.com/problems/perfect-rectangle/)\n## 解题思路\n### 只要满足两个条件就是完美矩形：\n1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n\n### 判断矩形总面积是否等于围住所有矩形的大矩形的面积\n1. 先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标\n2. 找出大矩形的左下和右上坐标\n3. 求出大矩形的面积\n4. 求出每个小矩形的面积求和\n5. 判断是否相等，不相等直接返回 false 相等则进入下一判断\n\n### 判断是否有重叠\n1. 将每个小矩形的坐标存到一个大数组中\n2. 循环数组，用map哈希将每个坐标点的重复次数映射\n3.判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）\n3. 最后返回true ，此处返回说明前面的条件都满足\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\n\n//  只要满足两个条件就是完美矩形：\n// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n//  */\nvar isRectangleCover = function(rectangles) {\n    let nums1 = [],\n        nums2 = [],\n        nums3 = [],\n        nums4 = [];\n    for (let i = 0; i < rectangles.length; i++) {\n        nums1.push(rectangles[i][0]);\n        nums2.push(rectangles[i][1]);\n        nums3.push(rectangles[i][2]);\n        nums4.push(rectangles[i][3]);\n    }\n    const minNum1 = Math.min(...nums1);\n    const minNum2 = Math.min(...nums2);\n    const maxNum1 = Math.max(...nums3);\n    const maxNum2 = Math.max(...nums4);\n    const maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);\n    let sum = 0;\n    rectangles.forEach(item => {\n        sum += ((item[3] - item[1]) * (item[2] - item[0]));\n    })\n    let a = []; //存放每个坐标的字符串\n    if (sum === maxArear) {\n        for (let i = 0; i < rectangles.length; i++) {\n            // 将四个角的坐标加入\n            a.push(nums1[i] + \",\" + nums2[i]);\n            a.push(nums1[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums2[i]);\n        }\n        let map = new Map();\n        for (let i = 0; i < a.length; i++) {\n            if (map.has(a[i])) {\n                map.set(a[i], map.get(a[i]) + 1);\n            } else {\n                map.set(a[i], 1);\n            }\n        }\n        // 判断四个顶点是否重复一次\n        // 四个顶点\n        const leftBottom = minNum1 + ',' + minNum2;\n        const leftTop = minNum1 + ',' + maxNum2;\n        const rightBottom = maxNum1 + ',' + minNum2;\n        const rightTop = maxNum1 + ',' + maxNum2;\n        const four = [leftBottom, leftTop, rightBottom, rightTop];\n        //遍历map对象判断\n        for (const [key, value] of map) {\n            if (value == 1) {\n                if (four.indexOf(key) === -1) {\n                    return false;\n                }\n            } else if (value == 2) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else if (value == 4) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n```","source":"_posts/391. 完美矩形.md","raw":"---\ntitle: 391. 完美矩形\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 391. 完美矩形 map哈希\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 391. 完美矩形 map哈希\n## [查看原题](https://leetcode-cn.com/problems/perfect-rectangle/)\n## 解题思路\n### 只要满足两个条件就是完美矩形：\n1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n\n### 判断矩形总面积是否等于围住所有矩形的大矩形的面积\n1. 先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标\n2. 找出大矩形的左下和右上坐标\n3. 求出大矩形的面积\n4. 求出每个小矩形的面积求和\n5. 判断是否相等，不相等直接返回 false 相等则进入下一判断\n\n### 判断是否有重叠\n1. 将每个小矩形的坐标存到一个大数组中\n2. 循环数组，用map哈希将每个坐标点的重复次数映射\n3.判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）\n3. 最后返回true ，此处返回说明前面的条件都满足\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\n\n//  只要满足两个条件就是完美矩形：\n// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积\n// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。\n//  */\nvar isRectangleCover = function(rectangles) {\n    let nums1 = [],\n        nums2 = [],\n        nums3 = [],\n        nums4 = [];\n    for (let i = 0; i < rectangles.length; i++) {\n        nums1.push(rectangles[i][0]);\n        nums2.push(rectangles[i][1]);\n        nums3.push(rectangles[i][2]);\n        nums4.push(rectangles[i][3]);\n    }\n    const minNum1 = Math.min(...nums1);\n    const minNum2 = Math.min(...nums2);\n    const maxNum1 = Math.max(...nums3);\n    const maxNum2 = Math.max(...nums4);\n    const maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);\n    let sum = 0;\n    rectangles.forEach(item => {\n        sum += ((item[3] - item[1]) * (item[2] - item[0]));\n    })\n    let a = []; //存放每个坐标的字符串\n    if (sum === maxArear) {\n        for (let i = 0; i < rectangles.length; i++) {\n            // 将四个角的坐标加入\n            a.push(nums1[i] + \",\" + nums2[i]);\n            a.push(nums1[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums4[i]);\n            a.push(nums3[i] + \",\" + nums2[i]);\n        }\n        let map = new Map();\n        for (let i = 0; i < a.length; i++) {\n            if (map.has(a[i])) {\n                map.set(a[i], map.get(a[i]) + 1);\n            } else {\n                map.set(a[i], 1);\n            }\n        }\n        // 判断四个顶点是否重复一次\n        // 四个顶点\n        const leftBottom = minNum1 + ',' + minNum2;\n        const leftTop = minNum1 + ',' + maxNum2;\n        const rightBottom = maxNum1 + ',' + minNum2;\n        const rightTop = maxNum1 + ',' + maxNum2;\n        const four = [leftBottom, leftTop, rightBottom, rightTop];\n        //遍历map对象判断\n        for (const [key, value] of map) {\n            if (value == 1) {\n                if (four.indexOf(key) === -1) {\n                    return false;\n                }\n            } else if (value == 2) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else if (value == 4) {\n                if (four.indexOf(key) != -1) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n```","slug":"391. 完美矩形","published":1,"updated":"2021-12-30T15:02:21.988Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ih001zisaxdnufacc3","content":"<h1 id=\"391-完美矩形-map哈希\"><a href=\"#391-完美矩形-map哈希\" class=\"headerlink\" title=\"391. 完美矩形 map哈希\"></a>391. 完美矩形 map哈希</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-rectangle/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"只要满足两个条件就是完美矩形：\"><a href=\"#只要满足两个条件就是完美矩形：\" class=\"headerlink\" title=\"只要满足两个条件就是完美矩形：\"></a>只要满足两个条件就是完美矩形：</h3><p>1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积<br>2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</p>\n<h3 id=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"><a href=\"#判断矩形总面积是否等于围住所有矩形的大矩形的面积\" class=\"headerlink\" title=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"></a>判断矩形总面积是否等于围住所有矩形的大矩形的面积</h3><ol>\n<li>先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标</li>\n<li>找出大矩形的左下和右上坐标</li>\n<li>求出大矩形的面积</li>\n<li>求出每个小矩形的面积求和</li>\n<li>判断是否相等，不相等直接返回 false 相等则进入下一判断</li>\n</ol>\n<h3 id=\"判断是否有重叠\"><a href=\"#判断是否有重叠\" class=\"headerlink\" title=\"判断是否有重叠\"></a>判断是否有重叠</h3><ol>\n<li>将每个小矩形的坐标存到一个大数组中</li>\n<li>循环数组，用map哈希将每个坐标点的重复次数映射</li>\n<li>判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）</li>\n<li>最后返回true ，此处返回说明前面的条件都满足</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">rectangles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  只要满足两个条件就是完美矩形：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积</span></span><br><span class=\"line\"><span class=\"comment\">// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRectangleCover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rectangles</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums1 = [],</span><br><span class=\"line\">        nums2 = [],</span><br><span class=\"line\">        nums3 = [],</span><br><span class=\"line\">        nums4 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">        nums1.push(rectangles[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        nums2.push(rectangles[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        nums3.push(rectangles[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        nums4.push(rectangles[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum1 = <span class=\"built_in\">Math</span>.min(...nums1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum2 = <span class=\"built_in\">Math</span>.min(...nums2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum1 = <span class=\"built_in\">Math</span>.max(...nums3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum2 = <span class=\"built_in\">Math</span>.max(...nums4);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rectangles.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum += ((item[<span class=\"number\">3</span>] - item[<span class=\"number\">1</span>]) * (item[<span class=\"number\">2</span>] - item[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = []; <span class=\"comment\">//存放每个坐标的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === maxArear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将四个角的坐标加入</span></span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.has(a[i])) &#123;</span><br><span class=\"line\">                map.set(a[i], map.get(a[i]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.set(a[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断四个顶点是否重复一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 四个顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftBottom = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftTop = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightBottom = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightTop = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> four = [leftBottom, leftTop, rightBottom, rightTop];</span><br><span class=\"line\">        <span class=\"comment\">//遍历map对象判断</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2359,"excerpt":"","more":"<h1 id=\"391-完美矩形-map哈希\"><a href=\"#391-完美矩形-map哈希\" class=\"headerlink\" title=\"391. 完美矩形 map哈希\"></a>391. 完美矩形 map哈希</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-rectangle/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"只要满足两个条件就是完美矩形：\"><a href=\"#只要满足两个条件就是完美矩形：\" class=\"headerlink\" title=\"只要满足两个条件就是完美矩形：\"></a>只要满足两个条件就是完美矩形：</h3><p>1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积<br>2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</p>\n<h3 id=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"><a href=\"#判断矩形总面积是否等于围住所有矩形的大矩形的面积\" class=\"headerlink\" title=\"判断矩形总面积是否等于围住所有矩形的大矩形的面积\"></a>判断矩形总面积是否等于围住所有矩形的大矩形的面积</h3><ol>\n<li>先将大的数组拆开为四个小数组，每个数组表示左下和右上两个点的横纵坐标</li>\n<li>找出大矩形的左下和右上坐标</li>\n<li>求出大矩形的面积</li>\n<li>求出每个小矩形的面积求和</li>\n<li>判断是否相等，不相等直接返回 false 相等则进入下一判断</li>\n</ol>\n<h3 id=\"判断是否有重叠\"><a href=\"#判断是否有重叠\" class=\"headerlink\" title=\"判断是否有重叠\"></a>判断是否有重叠</h3><ol>\n<li>将每个小矩形的坐标存到一个大数组中</li>\n<li>循环数组，用map哈希将每个坐标点的重复次数映射</li>\n<li>判断每个坐标点的情况（大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。）</li>\n<li>最后返回true ，此处返回说明前面的条件都满足</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">rectangles</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  只要满足两个条件就是完美矩形：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.所有矩形总面积 == 恰好围住所有矩形的大矩形的面积</span></span><br><span class=\"line\"><span class=\"comment\">// 2.任意两个矩形都没有重叠。这种情况下由于所有矩形是镶嵌的，所以位于大矩形内（除了大矩形的四个角）的任何位置的小矩形顶点数只可能为0,2,4。其他任何情况都代表有重叠。而大矩形四个顶点处的小矩形顶点数量只能为1。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRectangleCover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rectangles</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nums1 = [],</span><br><span class=\"line\">        nums2 = [],</span><br><span class=\"line\">        nums3 = [],</span><br><span class=\"line\">        nums4 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">        nums1.push(rectangles[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        nums2.push(rectangles[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        nums3.push(rectangles[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        nums4.push(rectangles[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum1 = <span class=\"built_in\">Math</span>.min(...nums1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minNum2 = <span class=\"built_in\">Math</span>.min(...nums2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum1 = <span class=\"built_in\">Math</span>.max(...nums3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxNum2 = <span class=\"built_in\">Math</span>.max(...nums4);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxArear = (maxNum2 - minNum2) * (maxNum1 - minNum1);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rectangles.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        sum += ((item[<span class=\"number\">3</span>] - item[<span class=\"number\">1</span>]) * (item[<span class=\"number\">2</span>] - item[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = []; <span class=\"comment\">//存放每个坐标的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === maxArear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rectangles.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将四个角的坐标加入</span></span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">            a.push(nums1[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums4[i]);</span><br><span class=\"line\">            a.push(nums3[i] + <span class=\"string\">&quot;,&quot;</span> + nums2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.has(a[i])) &#123;</span><br><span class=\"line\">                map.set(a[i], map.get(a[i]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.set(a[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断四个顶点是否重复一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 四个顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftBottom = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftTop = minNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightBottom = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + minNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightTop = maxNum1 + <span class=\"string\">&#x27;,&#x27;</span> + maxNum2;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> four = [leftBottom, leftTop, rightBottom, rightTop];</span><br><span class=\"line\">        <span class=\"comment\">//遍历map对象判断</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (four.indexOf(key) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"383. 赎金信","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"383. 赎金信 哈希表","_content":"\n\n# 383. 赎金信 哈希表\n\n## [查看原题](https://leetcode-cn.com/problems/ransom-note/)\n\n## 解题思路\n\n1. 将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；\n2. 将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；\n3. 遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。\n\n## 代码\n\n```javascript\n/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n\t// 将杂志字符串映射到map集合\n\tconst map = new Map();\n\tfor(let i = 0;i<magazine.length;i++){\n\t\tif(map.has(magazine.charAt(i))){\n\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+1);\n\t\t}else{\n\t\t\tmap.set(magazine[i],1);\n\t\t}\n\t}\n\t// 将赎金信映射到map1中\n\tconst map1 = new Map();\n\tfor(let i = 0;i<ransomNote.length;i++){\n\t\tif(map1.has(ransomNote.charAt(i))){\n\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+1);\n\t\t}else{\n\t\t\tmap1.set(ransomNote[i],1);\n\t\t}\n\t}\n\tfor (const [key,value] of map1){\n\t\tif(map.has(key) && map.get(key)>=value){\n\t\t\tcontinue;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\t\n};\n\n```","source":"_posts/383. 赎金信.md","raw":"---\ntitle: 383. 赎金信\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 383. 赎金信 哈希表\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 383. 赎金信 哈希表\n\n## [查看原题](https://leetcode-cn.com/problems/ransom-note/)\n\n## 解题思路\n\n1. 将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；\n2. 将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；\n3. 遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。\n\n## 代码\n\n```javascript\n/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n\t// 将杂志字符串映射到map集合\n\tconst map = new Map();\n\tfor(let i = 0;i<magazine.length;i++){\n\t\tif(map.has(magazine.charAt(i))){\n\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+1);\n\t\t}else{\n\t\t\tmap.set(magazine[i],1);\n\t\t}\n\t}\n\t// 将赎金信映射到map1中\n\tconst map1 = new Map();\n\tfor(let i = 0;i<ransomNote.length;i++){\n\t\tif(map1.has(ransomNote.charAt(i))){\n\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+1);\n\t\t}else{\n\t\t\tmap1.set(ransomNote[i],1);\n\t\t}\n\t}\n\tfor (const [key,value] of map1){\n\t\tif(map.has(key) && map.get(key)>=value){\n\t\t\tcontinue;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\t\n};\n\n```","slug":"383. 赎金信","published":1,"updated":"2021-12-30T15:02:08.153Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ii0023isaxejv15yj8","content":"<h1 id=\"383-赎金信-哈希表\"><a href=\"#383-赎金信-哈希表\" class=\"headerlink\" title=\"383. 赎金信 哈希表\"></a>383. 赎金信 哈希表</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/ransom-note/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；</li>\n<li>将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；</li>\n<li>遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">ransomNote</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">magazine</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canConstruct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ransomNote, magazine</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将杂志字符串映射到map集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;magazine.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(magazine.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将赎金信映射到map1中</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;ransomNote.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map1.has(ransomNote.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map1)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(key) &amp;&amp; map.get(key)&gt;=value)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":946,"excerpt":"","more":"<h1 id=\"383-赎金信-哈希表\"><a href=\"#383-赎金信-哈希表\" class=\"headerlink\" title=\"383. 赎金信 哈希表\"></a>383. 赎金信 哈希表</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/ransom-note/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将 magazine字符串映射到map集合中，键为字符的种类，值为字符的个数；</li>\n<li>将 ransomNote字符串映射到map1集合中，键为字符的种类，值为字符的个数；</li>\n<li>遍历map1，查找map中是否存在对应的键，且值大于等于map1中对应的值。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">ransomNote</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">magazine</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canConstruct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ransomNote, magazine</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将杂志字符串映射到map集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;magazine.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(magazine.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine.charAt(i),map.get(magazine[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap.set(magazine[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将赎金信映射到map1中</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;ransomNote.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map1.has(ransomNote.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote.charAt(i),map1.get(ransomNote[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tmap1.set(ransomNote[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> map1)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(key) &amp;&amp; map.get(key)&gt;=value)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"414. 第三大的数","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"414. 第三大的数  利用set数组去重和sort排序","_content":"\n\n# 414. 第三大的数  利用set数组去重和sort排序\n\n## [查看原题](https://leetcode-cn.com/problems/third-maximum-number/)\n## 解题思路\n1. 将数组转为set 集合去除重复值，再转为数组\n2. 将数组降序排序\n3. 判断数组的长度\n    - 长度大于 3 则直接返回数组的第3大的数\n    - 长度小于 3 直接返回数组的最大值即最大项\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar thirdMax = function(nums) {\n    //将数组去重\n    const newNums = [...new Set(nums)];\n    newNums.sort((a, b) => b - a);\n    if (newNums.length >= 3) {\n        return newNums[2];\n    } else {\n        return newNums[0]\n    }\n};\n\n```","source":"_posts/414. 第三大的数.md","raw":"---\ntitle: 414. 第三大的数\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 414. 第三大的数  利用set数组去重和sort排序\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 414. 第三大的数  利用set数组去重和sort排序\n\n## [查看原题](https://leetcode-cn.com/problems/third-maximum-number/)\n## 解题思路\n1. 将数组转为set 集合去除重复值，再转为数组\n2. 将数组降序排序\n3. 判断数组的长度\n    - 长度大于 3 则直接返回数组的第3大的数\n    - 长度小于 3 直接返回数组的最大值即最大项\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar thirdMax = function(nums) {\n    //将数组去重\n    const newNums = [...new Set(nums)];\n    newNums.sort((a, b) => b - a);\n    if (newNums.length >= 3) {\n        return newNums[2];\n    } else {\n        return newNums[0]\n    }\n};\n\n```","slug":"414. 第三大的数","published":1,"updated":"2021-12-30T15:02:38.532Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ij0026isax56q1gyxb","content":"<h1 id=\"414-第三大的数-利用set数组去重和sort排序\"><a href=\"#414-第三大的数-利用set数组去重和sort排序\" class=\"headerlink\" title=\"414. 第三大的数  利用set数组去重和sort排序\"></a>414. 第三大的数  利用set数组去重和sort排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/third-maximum-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set 集合去除重复值，再转为数组</li>\n<li>将数组降序排序</li>\n<li>判断数组的长度<ul>\n<li>长度大于 3 则直接返回数组的第3大的数</li>\n<li>长度小于 3 直接返回数组的最大值即最大项</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将数组去重</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNums = [...new <span class=\"built_in\">Set</span>(nums)];</span><br><span class=\"line\">    newNums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNums.length &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":380,"excerpt":"","more":"<h1 id=\"414-第三大的数-利用set数组去重和sort排序\"><a href=\"#414-第三大的数-利用set数组去重和sort排序\" class=\"headerlink\" title=\"414. 第三大的数  利用set数组去重和sort排序\"></a>414. 第三大的数  利用set数组去重和sort排序</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/third-maximum-number/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组转为set 集合去除重复值，再转为数组</li>\n<li>将数组降序排序</li>\n<li>判断数组的长度<ul>\n<li>长度大于 3 则直接返回数组的第3大的数</li>\n<li>长度小于 3 直接返回数组的最大值即最大项</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将数组去重</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNums = [...new <span class=\"built_in\">Set</span>(nums)];</span><br><span class=\"line\">    newNums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNums.length &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newNums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"438. 找到字符串中所有字母异位词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"438. 找到字符串中所有字母异位词 滑动窗口","_content":"\n\n# 438. 找到字符串中所有字母异位词 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)\n\n## 解题思路\n这是最容易想到的，循环，无用功太多，结果自然是g了\n**超出时间限制**\n1. 先将p转为数组排序后再转为字符串\n2. 循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等\n3. 如果相等就push到结果数组中\n\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst arr = s.split('');\n\tconst p1 = p.split('').sort().join('');//将p转为数组排序后再转为字符串\n\tfor(let i = 0;i<=slength - plength;i++){\n\t\tlet temp = arr.slice(i,plength+i)\n\t\tif(temp.sort().join('') === p1)\n\t\tresult.push(i)\n\t}\n\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。\n1. 将字符串p中的字母和字母的个数映射到map集合中\n2. 循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0\n3. 每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建\n4. ```!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0```这是判断条件，为true则直接break，为false则更新temp集合```temp.set(s.charAt(j),temp.get(s.charAt(j))-1)```\n5. 判断```j===i+plength```，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。\n\n## 代码\n\n```javascript\n\n\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst pmap = new Map();\n\t// 将字符串p的单词和个数映射到map对象中\n\tfor(let i = 0;i<plength;i++){\n\t\tif(pmap.has(p.charAt(i))){\n\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+1)\n\t\t}else{\n\t\t\tpmap.set(p.charAt(i),1);\n\t\t}\n\t}\n\tfor(let i = 0;i<=slength-plength;i++){\n\t\tconst temp = new Map(pmap);\n\t\tlet j;\n\t\tfor( j = i;j<i+plength;j++){\n\t\t\n\t\t\tif(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0){\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-1);\n\t\t\t}\n\t\t}\n\t\tif(j===i+plength){\n\t\t\tresult.push(i)\n\t\t}\n\t}\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路效率就比较高了，当然是参考别人的了\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    if (!s || !p) return [];\n    let need = {}, window = {}, ans = [];\n    [...p].forEach(c => need[c] ? need[c]++ : need[c] = 1);\n    let l = 0, r = 0, cnt = 0, nkLen = Object.keys(need).length;\n    while (r < s.length) {\n        let c1 = s[r];\n        if (need[c1]) {\n            window[c1] ? window[c1]++ : window[c1] = 1;\n            if (window[c1] === need[c1]) cnt++;\n        }\n        r++;\n        while (cnt === nkLen) {\n            let c2 = s[l];\n            if ((r - l) == p.length) ans.push(l);\n            if (need[c2]) {\n                window[c2]--;\n                if (window[c2] < need[c2]) cnt--;\n            }\n            l++;\n        }\n    }\n    return ans;\n};\n```","source":"_posts/438. 找到字符串中所有字母异位词.md","raw":"---\ntitle: 438. 找到字符串中所有字母异位词\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 438. 找到字符串中所有字母异位词 滑动窗口\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 438. 找到字符串中所有字母异位词 滑动窗口\n\n## [查看原题](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)\n\n## 解题思路\n这是最容易想到的，循环，无用功太多，结果自然是g了\n**超出时间限制**\n1. 先将p转为数组排序后再转为字符串\n2. 循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等\n3. 如果相等就push到结果数组中\n\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst arr = s.split('');\n\tconst p1 = p.split('').sort().join('');//将p转为数组排序后再转为字符串\n\tfor(let i = 0;i<=slength - plength;i++){\n\t\tlet temp = arr.slice(i,plength+i)\n\t\tif(temp.sort().join('') === p1)\n\t\tresult.push(i)\n\t}\n\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。\n1. 将字符串p中的字母和字母的个数映射到map集合中\n2. 循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0\n3. 每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建\n4. ```!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0```这是判断条件，为true则直接break，为false则更新temp集合```temp.set(s.charAt(j),temp.get(s.charAt(j))-1)```\n5. 判断```j===i+plength```，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。\n\n## 代码\n\n```javascript\n\n\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\tlet result = [];//结果\n\tconst slength = s.length;\n\tconst plength = p.length;\n\tconst pmap = new Map();\n\t// 将字符串p的单词和个数映射到map对象中\n\tfor(let i = 0;i<plength;i++){\n\t\tif(pmap.has(p.charAt(i))){\n\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+1)\n\t\t}else{\n\t\t\tpmap.set(p.charAt(i),1);\n\t\t}\n\t}\n\tfor(let i = 0;i<=slength-plength;i++){\n\t\tconst temp = new Map(pmap);\n\t\tlet j;\n\t\tfor( j = i;j<i+plength;j++){\n\t\t\n\t\t\tif(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0){\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-1);\n\t\t\t}\n\t\t}\n\t\tif(j===i+plength){\n\t\t\tresult.push(i)\n\t\t}\n\t}\n\treturn result;\n};\n```\n\n## 解题思路\n这种思路效率就比较高了，当然是参考别人的了\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    if (!s || !p) return [];\n    let need = {}, window = {}, ans = [];\n    [...p].forEach(c => need[c] ? need[c]++ : need[c] = 1);\n    let l = 0, r = 0, cnt = 0, nkLen = Object.keys(need).length;\n    while (r < s.length) {\n        let c1 = s[r];\n        if (need[c1]) {\n            window[c1] ? window[c1]++ : window[c1] = 1;\n            if (window[c1] === need[c1]) cnt++;\n        }\n        r++;\n        while (cnt === nkLen) {\n            let c2 = s[l];\n            if ((r - l) == p.length) ans.push(l);\n            if (need[c2]) {\n                window[c2]--;\n                if (window[c2] < need[c2]) cnt--;\n            }\n            l++;\n        }\n    }\n    return ans;\n};\n```","slug":"438. 找到字符串中所有字母异位词","published":1,"updated":"2021-12-30T15:02:49.648Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5io002aisax4fdz66em","content":"<h1 id=\"438-找到字符串中所有字母异位词-滑动窗口\"><a href=\"#438-找到字符串中所有字母异位词-滑动窗口\" class=\"headerlink\" title=\"438. 找到字符串中所有字母异位词 滑动窗口\"></a>438. 找到字符串中所有字母异位词 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这是最容易想到的，循环，无用功太多，结果自然是g了<br><strong>超出时间限制</strong></p>\n<ol>\n<li>先将p转为数组排序后再转为字符串</li>\n<li>循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等</li>\n<li>如果相等就push到结果数组中</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> p1 = p.split(<span class=\"string\">&#x27;&#x27;</span>).sort().join(<span class=\"string\">&#x27;&#x27;</span>);<span class=\"comment\">//将p转为数组排序后再转为字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength - plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = arr.slice(i,plength+i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp.sort().join(<span class=\"string\">&#x27;&#x27;</span>) === p1)</span><br><span class=\"line\">\t\tresult.push(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。</p>\n<ol>\n<li>将字符串p中的字母和字母的个数映射到map集合中</li>\n<li>循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0</li>\n<li>每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建</li>\n<li><code>!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0</code>这是判断条件，为true则直接break，为false则更新temp集合<code>temp.set(s.charAt(j),temp.get(s.charAt(j))-1)</code></li>\n<li>判断<code>j===i+plength</code>，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> pmap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串p的单词和个数映射到map对象中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pmap.has(p.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength-plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(pmap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>( j = i;j&lt;i+plength;j++)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j===i+plength)&#123;</span><br><span class=\"line\">\t\t\tresult.push(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路效率就比较高了，当然是参考别人的了</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!s || !p) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> need = &#123;&#125;, <span class=\"built_in\">window</span> = &#123;&#125;, ans = [];</span><br><span class=\"line\">    [...p].forEach(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> need[c] ? need[c]++ : need[c] = <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, nkLen = <span class=\"built_in\">Object</span>.keys(need).length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r &lt; s.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c1 = s[r];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (need[c1]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>[c1] ? <span class=\"built_in\">window</span>[c1]++ : <span class=\"built_in\">window</span>[c1] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c1] === need[c1]) cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cnt === nkLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> c2 = s[l];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((r - l) == p.length) ans.push(l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (need[c2]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">window</span>[c2]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c2] &lt; need[c2]) cnt--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2386,"excerpt":"","more":"<h1 id=\"438-找到字符串中所有字母异位词-滑动窗口\"><a href=\"#438-找到字符串中所有字母异位词-滑动窗口\" class=\"headerlink\" title=\"438. 找到字符串中所有字母异位词 滑动窗口\"></a>438. 找到字符串中所有字母异位词 滑动窗口</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这是最容易想到的，循环，无用功太多，结果自然是g了<br><strong>超出时间限制</strong></p>\n<ol>\n<li>先将p转为数组排序后再转为字符串</li>\n<li>循环s利用字符串方法slice截取和p等长的字符串，再进行排序最后比较是否相等</li>\n<li>如果相等就push到结果数组中</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> p1 = p.split(<span class=\"string\">&#x27;&#x27;</span>).sort().join(<span class=\"string\">&#x27;&#x27;</span>);<span class=\"comment\">//将p转为数组排序后再转为字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength - plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> temp = arr.slice(i,plength+i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp.sort().join(<span class=\"string\">&#x27;&#x27;</span>) === p1)</span><br><span class=\"line\">\t\tresult.push(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路使用了滑动窗口，虽然能解决问题，能通过测试，但效率还是有点低。</p>\n<ol>\n<li>将字符串p中的字母和字母的个数映射到map集合中</li>\n<li>循环字符串s取出和p等长的一段，判断map集合中是否右当前元素，且元素的数量不是0</li>\n<li>每次符合条件都要更新temp里面的数据，注意这个temp每次都要新建,通过p映射的那个map集合创建</li>\n<li><code>!temp.has(s.charAt(j))||temp.get(s.charAt(j))===0</code>这是判断条件，为true则直接break，为false则更新temp集合<code>temp.set(s.charAt(j),temp.get(s.charAt(j))-1)</code></li>\n<li>判断<code>j===i+plength</code>，来说明循环是否正常走完，为false则不是正常走完，说明不符合条件；为true说明正常走完了循环，则将 i push到结果数组中。</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];<span class=\"comment\">//结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slength = s.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> plength = p.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> pmap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串p的单词和个数映射到map对象中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pmap.has(p.charAt(i)))&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),pmap.get(p.charAt(i))+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tpmap.set(p.charAt(i),<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=slength-plength;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(pmap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>( j = i;j&lt;i+plength;j++)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!temp.has(s.charAt(j))||temp.get(s.charAt(j))===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(s.charAt(j),temp.get(s.charAt(j))-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j===i+plength)&#123;</span><br><span class=\"line\">\t\t\tresult.push(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种思路效率就比较高了，当然是参考别人的了</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">p</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, p</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!s || !p) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> need = &#123;&#125;, <span class=\"built_in\">window</span> = &#123;&#125;, ans = [];</span><br><span class=\"line\">    [...p].forEach(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> need[c] ? need[c]++ : need[c] = <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, nkLen = <span class=\"built_in\">Object</span>.keys(need).length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r &lt; s.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c1 = s[r];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (need[c1]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>[c1] ? <span class=\"built_in\">window</span>[c1]++ : <span class=\"built_in\">window</span>[c1] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c1] === need[c1]) cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cnt === nkLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> c2 = s[l];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((r - l) == p.length) ans.push(l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (need[c2]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">window</span>[c2]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>[c2] &lt; need[c2]) cnt--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"48. 旋转图像","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"48. 旋转图像 另开空间和直接旋转","_content":"\n\n# 48. 旋转图像 另开空间和直接旋转\n## [查看原题](https://leetcode-cn.com/problems/rotate-image/)\n\n## 解题思路\n1. 新开一个二维数组，存放交换后的数据\n2. 遍历原数组，将交换后的值存放到相应位置 ```temp[j][length-i-1] = matrix[i][j];```\n3. 将新数组的值再次赋给原数组\n4. 这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)\n\n## 代码\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tconst temp = (new Array(length).fill(0)).map(item=>new Array(length));\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\ttemp[j][length-i-1] = matrix[i][j];\n\t\t}\n\t}\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\tmatrix[i][j] = temp[i][j]\n\t\t}\n\t}\n};\n\n```\n\n## 解题思路\n1. 不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为```matrix[j][length-i-1] = matrix[i][j];```\n2. 但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。\n```javascript\n\tlet temp = matrix[i][j];\n\tmatrix[i][j] = matrix[length-1-j][i];\n\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\tmatrix[j][length-1-i] = temp;\n```\n3. 判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tfor(let i = 0;i<Math.floor(length/2);i++){\n\t\tfor(let j = 0;j<Math.floor((length+1)/2);j++){\n\t\t\tlet temp = matrix[i][j];\n\t\t\tmatrix[i][j] = matrix[length-1-j][i];\n\t\t\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\t\t\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\t\t\tmatrix[j][length-1-i] = temp;\n\t\t}\n\t}\n};\n```","source":"_posts/48. 旋转图像.md","raw":"---\ntitle: 48. 旋转图像\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 48. 旋转图像 另开空间和直接旋转\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 48. 旋转图像 另开空间和直接旋转\n## [查看原题](https://leetcode-cn.com/problems/rotate-image/)\n\n## 解题思路\n1. 新开一个二维数组，存放交换后的数据\n2. 遍历原数组，将交换后的值存放到相应位置 ```temp[j][length-i-1] = matrix[i][j];```\n3. 将新数组的值再次赋给原数组\n4. 这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)\n\n## 代码\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tconst temp = (new Array(length).fill(0)).map(item=>new Array(length));\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\ttemp[j][length-i-1] = matrix[i][j];\n\t\t}\n\t}\n\tfor(let i = 0;i<length;i++){\n\t\tfor(let j = 0;j<length;j++){\n\t\t\tmatrix[i][j] = temp[i][j]\n\t\t}\n\t}\n};\n\n```\n\n## 解题思路\n1. 不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为```matrix[j][length-i-1] = matrix[i][j];```\n2. 但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。\n```javascript\n\tlet temp = matrix[i][j];\n\tmatrix[i][j] = matrix[length-1-j][i];\n\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\tmatrix[j][length-1-i] = temp;\n```\n3. 判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)\n\n## 代码\n\n```javascript\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\t// 矩阵的宽度\n\tconst length =  matrix.length;\n\tfor(let i = 0;i<Math.floor(length/2);i++){\n\t\tfor(let j = 0;j<Math.floor((length+1)/2);j++){\n\t\t\tlet temp = matrix[i][j];\n\t\t\tmatrix[i][j] = matrix[length-1-j][i];\n\t\t\tmatrix[length-1-j][i] = matrix[length-1-i][length-1-j];\n\t\t\tmatrix[length-1-i][length-1-j] = matrix[j][length-1-i];\n\t\t\tmatrix[j][length-1-i] = temp;\n\t\t}\n\t}\n};\n```","slug":"48. 旋转图像","published":1,"updated":"2021-12-30T15:02:59.452Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ip002disax6gi96cgq","content":"<h1 id=\"48-旋转图像-另开空间和直接旋转\"><a href=\"#48-旋转图像-另开空间和直接旋转\" class=\"headerlink\" title=\"48. 旋转图像 另开空间和直接旋转\"></a>48. 旋转图像 另开空间和直接旋转</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-image/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个二维数组，存放交换后的数据</li>\n<li>遍历原数组，将交换后的值存放到相应位置 <code>temp[j][length-i-1] = matrix[i][j];</code></li>\n<li>将新数组的值再次赋给原数组</li>\n<li>这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = (<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length).fill(<span class=\"number\">0</span>)).map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\ttemp[j][length-i-<span class=\"number\">1</span>] = matrix[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\tmatrix[i][j] = temp[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为<code>matrix[j][length-i-1] = matrix[i][j];</code></li>\n<li>但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">matrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">matrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br></pre></td></tr></table></figure></li>\n<li>判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"built_in\">Math</span>.floor(length/<span class=\"number\">2</span>);i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"built_in\">Math</span>.floor((length+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">\t\t\tmatrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">\t\t\tmatrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1546,"excerpt":"","more":"<h1 id=\"48-旋转图像-另开空间和直接旋转\"><a href=\"#48-旋转图像-另开空间和直接旋转\" class=\"headerlink\" title=\"48. 旋转图像 另开空间和直接旋转\"></a>48. 旋转图像 另开空间和直接旋转</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/rotate-image/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个二维数组，存放交换后的数据</li>\n<li>遍历原数组，将交换后的值存放到相应位置 <code>temp[j][length-i-1] = matrix[i][j];</code></li>\n<li>将新数组的值再次赋给原数组</li>\n<li>这种思路，时间复杂度为 O(N^2),空间复杂度为 O(N^2)</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = (<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length).fill(<span class=\"number\">0</span>)).map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\ttemp[j][length-i-<span class=\"number\">1</span>] = matrix[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">\t\t\tmatrix[i][j] = temp[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>不开辟新数组，找出新矩阵的每一项的对应的原矩阵的位置为<code>matrix[j][length-i-1] = matrix[i][j];</code></li>\n<li>但是这样会发现交换之后会把原有位置上的数据覆盖，所以应该先把原有位置上的数据移动到应该的位置。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">matrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">matrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br></pre></td></tr></table></figure></li>\n<li>判断哪些应该交换，当数组的长度length为偶数时：需要交换n^2/4=(n/2)×(n/2) 个位置;当length 为奇数是：需要交换(n^2−1)/4=((n−1)/2)×((n+1)/2)</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">matrix</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify matrix in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 矩阵的宽度</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> length =  matrix.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"built_in\">Math</span>.floor(length/<span class=\"number\">2</span>);i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"built_in\">Math</span>.floor((length+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> temp = matrix[i][j];</span><br><span class=\"line\">\t\t\tmatrix[i][j] = matrix[length-<span class=\"number\">1</span>-j][i];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-j][i] = matrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j];</span><br><span class=\"line\">\t\t\tmatrix[length-<span class=\"number\">1</span>-i][length-<span class=\"number\">1</span>-j] = matrix[j][length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">\t\t\tmatrix[j][length-<span class=\"number\">1</span>-i] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"506. 相对名次","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"506. 相对名次 排序后switch","_content":"\n\n# 506. 相对名次 排序后switch\n\n## [查看原题](https://leetcode-cn.com/problems/relative-ranks/)\n\n## 解题思路\n\n1. 深克隆一个数组temp，将temp降序排序；\n2. 遍历原数组，判断每一项，前三名特殊处理；\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n\tconst temp = [...score];//得到一个为新数组\n\ttemp.sort((a,b)=>b-a);//将数组降序排列，得到正确的名次\n\tlet result = [];\n\tscore.forEach(item=>{\n\t\tconst index = temp.indexOf(item);//得到当前元素的排名\n\t\tswitch (index){\n\t\t\tcase 0:\n\t\t\t\tresult.push('Gold Medal');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tresult.push('Silver Medal');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tresult.push('Bronze Medal');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult.push(`${index+1}`)\n\t\t}\n\t\t\n\t})\n\treturn result;\n\t\n};\n\nconsole.log(findRelativeRanks(score = [5,4,3,2,1]));\n```\n","source":"_posts/506. 相对名次 .md","raw":"---\ntitle: 506. 相对名次\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription:  506. 相对名次 排序后switch\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 506. 相对名次 排序后switch\n\n## [查看原题](https://leetcode-cn.com/problems/relative-ranks/)\n\n## 解题思路\n\n1. 深克隆一个数组temp，将temp降序排序；\n2. 遍历原数组，判断每一项，前三名特殊处理；\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n\tconst temp = [...score];//得到一个为新数组\n\ttemp.sort((a,b)=>b-a);//将数组降序排列，得到正确的名次\n\tlet result = [];\n\tscore.forEach(item=>{\n\t\tconst index = temp.indexOf(item);//得到当前元素的排名\n\t\tswitch (index){\n\t\t\tcase 0:\n\t\t\t\tresult.push('Gold Medal');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tresult.push('Silver Medal');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tresult.push('Bronze Medal');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult.push(`${index+1}`)\n\t\t}\n\t\t\n\t})\n\treturn result;\n\t\n};\n\nconsole.log(findRelativeRanks(score = [5,4,3,2,1]));\n```\n","slug":"506. 相对名次 ","published":1,"updated":"2021-12-30T15:03:33.590Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ir002hisax7hkbcffm","content":"<h1 id=\"506-相对名次-排序后switch\"><a href=\"#506-相对名次-排序后switch\" class=\"headerlink\" title=\"506. 相对名次 排序后switch\"></a>506. 相对名次 排序后switch</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-ranks/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>深克隆一个数组temp，将temp降序排序；</li>\n<li>遍历原数组，判断每一项，前三名特殊处理；</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">score</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRelativeRanks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">score</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = [...score];<span class=\"comment\">//得到一个为新数组</span></span><br><span class=\"line\">\ttemp.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a);<span class=\"comment\">//将数组降序排列，得到正确的名次</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tscore.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = temp.indexOf(item);<span class=\"comment\">//得到当前元素的排名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (index)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Gold Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Silver Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Bronze Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">`<span class=\"subst\">$&#123;index+<span class=\"number\">1</span>&#125;</span>`</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findRelativeRanks(score = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":673,"excerpt":"","more":"<h1 id=\"506-相对名次-排序后switch\"><a href=\"#506-相对名次-排序后switch\" class=\"headerlink\" title=\"506. 相对名次 排序后switch\"></a>506. 相对名次 排序后switch</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/relative-ranks/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>深克隆一个数组temp，将temp降序排序；</li>\n<li>遍历原数组，判断每一项，前三名特殊处理；</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">score</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRelativeRanks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">score</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = [...score];<span class=\"comment\">//得到一个为新数组</span></span><br><span class=\"line\">\ttemp.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a);<span class=\"comment\">//将数组降序排列，得到正确的名次</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tscore.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = temp.indexOf(item);<span class=\"comment\">//得到当前元素的排名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (index)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Gold Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Silver Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">&#x27;Bronze Medal&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tresult.push(<span class=\"string\">`<span class=\"subst\">$&#123;index+<span class=\"number\">1</span>&#125;</span>`</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findRelativeRanks(score = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n"},{"title":"520. 检测大写字母","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"520. 检测大写字母   求出大小写字母的个数","_content":"\n\n# 520. 检测大写字母   求出大小写字母的个数\n## 解题思路\n1. 统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) >= 'A' && word.charAt(i) <= 'Z'）判断是否是大写字母\n2. 根据大小写字母的数量判断是否合法\n    - 如果大写字母个数为0 或小写字母个数为0则合法\n    - 如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法\n    - 其他情况均为不合法\n\n## [原题](https://leetcode-cn.com/problems/detect-capital/)\n\n## 代码\n\n```javascript\n/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    const length = word.length;\n    let upper = 0; //计算有多少个大写字母\n    let lower = 0; //有多少小写字母\n    for (let i = 0; i < length; i++) {\n        if (word.charAt(i) >= 'A' && word.charAt(i) <= 'Z') {\n            upper++;\n        } else {\n            lower++;\n        }\n    }\n    if (lower === 0 || upper === 0) {\n        return true;\n    } else if (upper === 1 && (word.charAt(0) >= 'A' && word.charAt(0) <= 'Z')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","source":"_posts/520. 检测大写字母.md","raw":"---\ntitle: 520. 检测大写字母\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 520. 检测大写字母   求出大小写字母的个数\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 520. 检测大写字母   求出大小写字母的个数\n## 解题思路\n1. 统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) >= 'A' && word.charAt(i) <= 'Z'）判断是否是大写字母\n2. 根据大小写字母的数量判断是否合法\n    - 如果大写字母个数为0 或小写字母个数为0则合法\n    - 如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法\n    - 其他情况均为不合法\n\n## [原题](https://leetcode-cn.com/problems/detect-capital/)\n\n## 代码\n\n```javascript\n/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    const length = word.length;\n    let upper = 0; //计算有多少个大写字母\n    let lower = 0; //有多少小写字母\n    for (let i = 0; i < length; i++) {\n        if (word.charAt(i) >= 'A' && word.charAt(i) <= 'Z') {\n            upper++;\n        } else {\n            lower++;\n        }\n    }\n    if (lower === 0 || upper === 0) {\n        return true;\n    } else if (upper === 1 && (word.charAt(0) >= 'A' && word.charAt(0) <= 'Z')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","slug":"520. 检测大写字母","published":1,"updated":"2021-12-30T15:03:42.086Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5is002kisaxf79p0z1b","content":"<h1 id=\"520-检测大写字母-求出大小写字母的个数\"><a href=\"#520-检测大写字母-求出大小写字母的个数\" class=\"headerlink\" title=\"520. 检测大写字母   求出大小写字母的个数\"></a>520. 检测大写字母   求出大小写字母的个数</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) &gt;= ‘A’ &amp;&amp; word.charAt(i) &lt;= ‘Z’）判断是否是大写字母</li>\n<li>根据大小写字母的数量判断是否合法<ul>\n<li>如果大写字母个数为0 或小写字母个数为0则合法</li>\n<li>如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法</li>\n<li>其他情况均为不合法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/detect-capital/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">word</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> detectCapitalUse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = word.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> upper = <span class=\"number\">0</span>; <span class=\"comment\">//计算有多少个大写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lower = <span class=\"number\">0</span>; <span class=\"comment\">//有多少小写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (word.charAt(i) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(i) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            upper++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            lower++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lower === <span class=\"number\">0</span> || upper === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (upper === <span class=\"number\">1</span> &amp;&amp; (word.charAt(<span class=\"number\">0</span>) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(<span class=\"number\">0</span>) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":779,"excerpt":"","more":"<h1 id=\"520-检测大写字母-求出大小写字母的个数\"><a href=\"#520-检测大写字母-求出大小写字母的个数\" class=\"headerlink\" title=\"520. 检测大写字母   求出大小写字母的个数\"></a>520. 检测大写字母   求出大小写字母的个数</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>统计出单词中大写字母和小写字母的个数，使用（word.charAt(i) &gt;= ‘A’ &amp;&amp; word.charAt(i) &lt;= ‘Z’）判断是否是大写字母</li>\n<li>根据大小写字母的数量判断是否合法<ul>\n<li>如果大写字母个数为0 或小写字母个数为0则合法</li>\n<li>如果大写字母的个数为1则继续判断单词的第一个字母是不是大写的，如果是则合法，不是就不合法</li>\n<li>其他情况均为不合法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/detect-capital/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">word</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> detectCapitalUse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = word.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> upper = <span class=\"number\">0</span>; <span class=\"comment\">//计算有多少个大写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lower = <span class=\"number\">0</span>; <span class=\"comment\">//有多少小写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (word.charAt(i) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(i) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            upper++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            lower++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lower === <span class=\"number\">0</span> || upper === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (upper === <span class=\"number\">1</span> &amp;&amp; (word.charAt(<span class=\"number\">0</span>) &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; word.charAt(<span class=\"number\">0</span>) &lt;= <span class=\"string\">&#x27;Z&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"495.提莫攻击","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"495.提莫攻击","_content":"\n\n# 495.提莫攻击\n## 解题思路\n1. 根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；\n2. 循环数组判断当前项是不是数组的最后一项\n    - 如果是最后一项则不需要判断，直接加上中毒持续时间duration即可\n3. 如果不是最后则分两种情况判断\n    - 这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration\n    - 这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间\n\n## [原题](https://leetcode-cn.com/problems/teemo-attacking/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} timeSeries\n * @param {number} duration\n * @return {number}\n */\nvar findPoisonedDuration = function(timeSeries, duration) {\n    let sum = 0;\n    const length = timeSeries.length;\n    for (let i = 0; i < length; i++) {\n        if ((i !== length - 1) && ((timeSeries[i] + duration - 1) < timeSeries[i + 1])) {\n            sum += duration;\n        } else if ((i !== length - 1) && ((timeSeries[i] + duration - 1) >= timeSeries[i + 1])) {\n            sum += (timeSeries[i + 1] - timeSeries[i]);\n        } else if (i === length - 1) {\n            sum += duration;\n        }\n    }\n    return sum;\n};\n```","source":"_posts/495.提莫攻击.md","raw":"---\ntitle: 495.提莫攻击\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 495.提莫攻击\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 495.提莫攻击\n## 解题思路\n1. 根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；\n2. 循环数组判断当前项是不是数组的最后一项\n    - 如果是最后一项则不需要判断，直接加上中毒持续时间duration即可\n3. 如果不是最后则分两种情况判断\n    - 这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration\n    - 这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间\n\n## [原题](https://leetcode-cn.com/problems/teemo-attacking/)\n## 代码\n\n```javascript\n/**\n * @param {number[]} timeSeries\n * @param {number} duration\n * @return {number}\n */\nvar findPoisonedDuration = function(timeSeries, duration) {\n    let sum = 0;\n    const length = timeSeries.length;\n    for (let i = 0; i < length; i++) {\n        if ((i !== length - 1) && ((timeSeries[i] + duration - 1) < timeSeries[i + 1])) {\n            sum += duration;\n        } else if ((i !== length - 1) && ((timeSeries[i] + duration - 1) >= timeSeries[i + 1])) {\n            sum += (timeSeries[i + 1] - timeSeries[i]);\n        } else if (i === length - 1) {\n            sum += duration;\n        }\n    }\n    return sum;\n};\n```","slug":"495.提莫攻击","published":1,"updated":"2021-12-30T15:03:11.660Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5iu002oisaxexre1qb0","content":"<h1 id=\"495-提莫攻击\"><a href=\"#495-提莫攻击\" class=\"headerlink\" title=\"495.提莫攻击\"></a>495.提莫攻击</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；</li>\n<li>循环数组判断当前项是不是数组的最后一项<ul>\n<li>如果是最后一项则不需要判断，直接加上中毒持续时间duration即可</li>\n</ul>\n</li>\n<li>如果不是最后则分两种情况判断<ul>\n<li>这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration</li>\n<li>这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/teemo-attacking/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">timeSeries</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">duration</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPoisonedDuration = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">timeSeries, duration</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = timeSeries.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &lt; timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &gt;= timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += (timeSeries[i + <span class=\"number\">1</span>] - timeSeries[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i === length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":758,"excerpt":"","more":"<h1 id=\"495-提莫攻击\"><a href=\"#495-提莫攻击\" class=\"headerlink\" title=\"495.提莫攻击\"></a>495.提莫攻击</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>根据题意肯定是根据不同的情况加上不同的数值，先定义一个存储结果的变量；</li>\n<li>循环数组判断当前项是不是数组的最后一项<ul>\n<li>如果是最后一项则不需要判断，直接加上中毒持续时间duration即可</li>\n</ul>\n</li>\n<li>如果不是最后则分两种情况判断<ul>\n<li>这次中毒结束完还没开始下一次的中毒，则需要加上中毒的持续时间爱duration</li>\n<li>这次中毒还没结束下次就开始了，则需要用下次的开始时间减去这次的时间即为本次中毒时间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/teemo-attacking/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">timeSeries</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">duration</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPoisonedDuration = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">timeSeries, duration</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = timeSeries.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &lt; timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((i !== length - <span class=\"number\">1</span>) &amp;&amp; ((timeSeries[i] + duration - <span class=\"number\">1</span>) &gt;= timeSeries[i + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            sum += (timeSeries[i + <span class=\"number\">1</span>] - timeSeries[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i === length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum += duration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"563. 二叉树的坡度","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"563. 二叉树的坡度   树的深度优先搜索","_content":"\n\n# 563. 二叉树的坡度   树的深度优先搜索\n## [查看原题](https://leetcode-cn.com/problems/binary-tree-tilt/)\n## 解题思路\n树的深度优先搜索\n\n## 代码\n\n```javascript\nvar findTilt = function(root) {\n    let sum = 0;\n\n    function dfs(node) {\n        if (!node) {\n            return 0;\n        }\n        const leftNum = dfs(node.left);\n        const rightNum = dfs(node.right);\n        sum += Math.abs(leftNum - rightNum);\n        return leftNum + rightNum + node.val;\n    }\n    dfs(root);\n    return sum;\n};\n\n```","source":"_posts/563. 二叉树的坡度.md","raw":"---\ntitle: 563. 二叉树的坡度\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 563. 二叉树的坡度   树的深度优先搜索\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 563. 二叉树的坡度   树的深度优先搜索\n## [查看原题](https://leetcode-cn.com/problems/binary-tree-tilt/)\n## 解题思路\n树的深度优先搜索\n\n## 代码\n\n```javascript\nvar findTilt = function(root) {\n    let sum = 0;\n\n    function dfs(node) {\n        if (!node) {\n            return 0;\n        }\n        const leftNum = dfs(node.left);\n        const rightNum = dfs(node.right);\n        sum += Math.abs(leftNum - rightNum);\n        return leftNum + rightNum + node.val;\n    }\n    dfs(root);\n    return sum;\n};\n\n```","slug":"563. 二叉树的坡度","published":1,"updated":"2021-12-30T15:04:00.470Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5iv002risax39kv2jy8","content":"<h1 id=\"563-二叉树的坡度-树的深度优先搜索\"><a href=\"#563-二叉树的坡度-树的深度优先搜索\" class=\"headerlink\" title=\"563. 二叉树的坡度   树的深度优先搜索\"></a>563. 二叉树的坡度   树的深度优先搜索</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-tilt/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>树的深度优先搜索</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findTilt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftNum = dfs(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightNum = dfs(node.right);</span><br><span class=\"line\">        sum += <span class=\"built_in\">Math</span>.abs(leftNum - rightNum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftNum + rightNum + node.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":307,"excerpt":"","more":"<h1 id=\"563-二叉树的坡度-树的深度优先搜索\"><a href=\"#563-二叉树的坡度-树的深度优先搜索\" class=\"headerlink\" title=\"563. 二叉树的坡度   树的深度优先搜索\"></a>563. 二叉树的坡度   树的深度优先搜索</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-tilt/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>树的深度优先搜索</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findTilt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> leftNum = dfs(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rightNum = dfs(node.right);</span><br><span class=\"line\">        sum += <span class=\"built_in\">Math</span>.abs(leftNum - rightNum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftNum + rightNum + node.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"557. 反转字符串中的单词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换","_content":"\n\n# 557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换\n## [查看原题](https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/)\n\n## 解题思路\n1. 将字符串按空格使用split分割为数组\n2. 遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串\n3. 将数组使用join(' ')转为字符串\n\n## 代码\n\n```javascript\n/**\n * @param {string} \n * @return {string}\n */\nvar reverseWords = function(s) {\n    const arr = s.split(' '); //将字符串转为数组\n    let result = arr.map(item => item.split('').reverse().join(''))\n    return result.join(' ')\n};\n```\n\n## 解题思路\n1. 新开一个数组，用来存放结果\n2. 遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ' '\n    - 是，则sum++（sum统计单词的长度）\n    - 不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个' ' ,\n    最后将大数组转为字符串，返回。\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    const length = s.length;\n    let result = [];\n    let sum = 0; //一个单词的长度\n    // 要多处理一个判断长度\n    for (let i = 0; i <= length; i++) {\n        // 如果不等于空格则说明是一个单词，统一处理\n        if (s[i] !== ' ' && i !== length) {\n            sum++;\n        } else {\n            // 将一个单词翻转\n            let temp = [];\n            for (let j = sum - 1; j >= 0; j--) {\n                temp.push(s[i - sum + j]);\n            }\n            sum = 0;\n            result.push(temp.join(''));\n            if (i !== length) {\n                result.push(' ')\n            }\n        }\n    }\n    return result.join('');\n};\n```\n","source":"_posts/557. 反转字符串中的单词 III.md","raw":"---\ntitle: 557. 反转字符串中的单词 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 557. 反转字符串中的单词 III 转为数组逆序在转为字符&循环交换\n## [查看原题](https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/)\n\n## 解题思路\n1. 将字符串按空格使用split分割为数组\n2. 遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串\n3. 将数组使用join(' ')转为字符串\n\n## 代码\n\n```javascript\n/**\n * @param {string} \n * @return {string}\n */\nvar reverseWords = function(s) {\n    const arr = s.split(' '); //将字符串转为数组\n    let result = arr.map(item => item.split('').reverse().join(''))\n    return result.join(' ')\n};\n```\n\n## 解题思路\n1. 新开一个数组，用来存放结果\n2. 遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ' '\n    - 是，则sum++（sum统计单词的长度）\n    - 不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个' ' ,\n    最后将大数组转为字符串，返回。\n\n## 代码\n\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    const length = s.length;\n    let result = [];\n    let sum = 0; //一个单词的长度\n    // 要多处理一个判断长度\n    for (let i = 0; i <= length; i++) {\n        // 如果不等于空格则说明是一个单词，统一处理\n        if (s[i] !== ' ' && i !== length) {\n            sum++;\n        } else {\n            // 将一个单词翻转\n            let temp = [];\n            for (let j = sum - 1; j >= 0; j--) {\n                temp.push(s[i - sum + j]);\n            }\n            sum = 0;\n            result.push(temp.join(''));\n            if (i !== length) {\n                result.push(' ')\n            }\n        }\n    }\n    return result.join('');\n};\n```\n","slug":"557. 反转字符串中的单词 III","published":1,"updated":"2021-12-30T15:03:50.553Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ix002visaxgj4j3flu","content":"<h1 id=\"557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\"><a href=\"#557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\" class=\"headerlink\" title=\"557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换\"></a>557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将字符串按空格使用split分割为数组</li>\n<li>遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串</li>\n<li>将数组使用join(‘ ‘)转为字符串</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">//将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个数组，用来存放结果</li>\n<li>遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ‘ ‘<ul>\n<li>是，则sum++（sum统计单词的长度）</li>\n<li>不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个’ ‘ ,<br>最后将大数组转为字符串，返回。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//一个单词的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 要多处理一个判断长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不等于空格则说明是一个单词，统一处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] !== <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; i !== length) &#123;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将一个单词翻转</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = sum - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                temp.push(s[i - sum + j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result.push(temp.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== length) &#123;</span><br><span class=\"line\">                result.push(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1127,"excerpt":"","more":"<h1 id=\"557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\"><a href=\"#557-反转字符串中的单词-III-转为数组逆序在转为字符-amp-循环交换\" class=\"headerlink\" title=\"557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换\"></a>557. 反转字符串中的单词 III 转为数组逆序在转为字符&amp;循环交换</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将字符串按空格使用split分割为数组</li>\n<li>遍历数组每一项，再用split转为数组，使用reverse逆序，再使用join合并为字符串</li>\n<li>将数组使用join(‘ ‘)转为字符串</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = s.split(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">//将字符串转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>新开一个数组，用来存放结果</li>\n<li>遍历原数组，计算每一个单词的长度，方法如下：判断当前项是不是 ‘ ‘<ul>\n<li>是，则sum++（sum统计单词的长度）</li>\n<li>不是则新定义一个临时数组temp，将根据刚才计算的单词的长度，push到temp中，再将其转为字符串后加入到大数组中，最后判断当前项是不是最后一个单词，如果不是最后一个则需要再给大数组push一个’ ‘ ,<br>最后将大数组转为字符串，返回。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//一个单词的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 要多处理一个判断长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不等于空格则说明是一个单词，统一处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] !== <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; i !== length) &#123;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将一个单词翻转</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = sum - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                temp.push(s[i - sum + j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result.push(temp.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== length) &#123;</span><br><span class=\"line\">                result.push(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"567. 字符串的排列","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"567. 字符串的排列","_content":"\n\n# 567. 字符串的排列\n\n## [查看原题](https://leetcode-cn.com/problems/permutation-in-string/)\n\n## 解题思路\n\n1. 先求出s1里面各个字符的个数存储到数组arr1中\n2. 再遍历数组s2注意结束条件是 ```let i = 0;i<=s2.length - s1.length;i++```,当个数少于```s2.length - s1.length```不会再有结果\n3. 统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true\n4. 直接返回false，说明前面没有符合条件的\n\n## 代码\n\n```javascript\n/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n\tlet arr1 = new Array(26).fill(0);\n\n\tfor (const item of s1){\n\t\tarr1[item.charCodeAt() - 97]++;\n\t}\n\t\n\tfor(let i = 0;i<=s2.length - s1.length;i++){\n\t\tlet arr2 = new Array(26).fill(0);\n\n\t\tfor(let j = 0;j<s1.length;j++){\n\t\t\tarr2[s2.charCodeAt(i+j) - 97]++;\n\t\t}\n\n\t\tlet t = 0;\n\t\tfor(t = 0;t<26;t++){\n\t\t\tif(arr2[t] !== arr1[t]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(t===26){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n```","source":"_posts/567. 字符串的排列.md","raw":"---\ntitle: 567. 字符串的排列\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 567. 字符串的排列\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 567. 字符串的排列\n\n## [查看原题](https://leetcode-cn.com/problems/permutation-in-string/)\n\n## 解题思路\n\n1. 先求出s1里面各个字符的个数存储到数组arr1中\n2. 再遍历数组s2注意结束条件是 ```let i = 0;i<=s2.length - s1.length;i++```,当个数少于```s2.length - s1.length```不会再有结果\n3. 统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true\n4. 直接返回false，说明前面没有符合条件的\n\n## 代码\n\n```javascript\n/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n\tlet arr1 = new Array(26).fill(0);\n\n\tfor (const item of s1){\n\t\tarr1[item.charCodeAt() - 97]++;\n\t}\n\t\n\tfor(let i = 0;i<=s2.length - s1.length;i++){\n\t\tlet arr2 = new Array(26).fill(0);\n\n\t\tfor(let j = 0;j<s1.length;j++){\n\t\t\tarr2[s2.charCodeAt(i+j) - 97]++;\n\t\t}\n\n\t\tlet t = 0;\n\t\tfor(t = 0;t<26;t++){\n\t\t\tif(arr2[t] !== arr1[t]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(t===26){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n```","slug":"567. 字符串的排列","published":1,"updated":"2021-12-30T15:04:10.038Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5iy002yisax7dbr0vrz","content":"<h1 id=\"567-字符串的排列\"><a href=\"#567-字符串的排列\" class=\"headerlink\" title=\"567. 字符串的排列\"></a>567. 字符串的排列</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/permutation-in-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先求出s1里面各个字符的个数存储到数组arr1中</li>\n<li>再遍历数组s2注意结束条件是 <code>let i = 0;i&lt;=s2.length - s1.length;i++</code>,当个数少于<code>s2.length - s1.length</code>不会再有结果</li>\n<li>统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true</li>\n<li>直接返回false，说明前面没有符合条件的</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkInclusion = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> s1)&#123;</span><br><span class=\"line\">\t\tarr1[item.charCodeAt() - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=s2.length - s1.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;s1.length;j++)&#123;</span><br><span class=\"line\">\t\t\tarr2[s2.charCodeAt(i+j) - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(t = <span class=\"number\">0</span>;t&lt;<span class=\"number\">26</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr2[t] !== arr1[t])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t===<span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":757,"excerpt":"","more":"<h1 id=\"567-字符串的排列\"><a href=\"#567-字符串的排列\" class=\"headerlink\" title=\"567. 字符串的排列\"></a>567. 字符串的排列</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/permutation-in-string/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先求出s1里面各个字符的个数存储到数组arr1中</li>\n<li>再遍历数组s2注意结束条件是 <code>let i = 0;i&lt;=s2.length - s1.length;i++</code>,当个数少于<code>s2.length - s1.length</code>不会再有结果</li>\n<li>统计s2中每个s1.length长度区间的各个字符的个数，与s1中的比较，如果元素个数都一样则符合条件返回true</li>\n<li>直接返回false，说明前面没有符合条件的</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkInclusion = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> s1)&#123;</span><br><span class=\"line\">\t\tarr1[item.charCodeAt() - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;=s2.length - s1.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;s1.length;j++)&#123;</span><br><span class=\"line\">\t\t\tarr2[s2.charCodeAt(i+j) - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(t = <span class=\"number\">0</span>;t&lt;<span class=\"number\">26</span>;t++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr2[t] !== arr1[t])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t===<span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"594. 最长和谐子序列","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"594. 最长和谐子序列 Map对象","_content":"\n\n# 594. 最长和谐子序列 Map对象\n\n## [查看原题](https://leetcode-cn.com/problems/longest-harmonious-subsequence/)\n\n## 解题思路\n1. 将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值\n2. 使用forof循环取出对象的每一项\n3. ```const right = map.get(key + 1) ? map.get(key + 1) : 0;```\n     ```const left = map.get(key - 1) ? map.get(key + 1) : 0;```\n    将当前项得左右两项做出判断\n4. 求出左右项得最大值\n5. 判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n    let result = 0; //返回结果\n    const map = new Map();\n    for (const num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1)\n        }\n    }\n    for (const [key, value] of map) {\n        const right = map.get(key + 1) ? map.get(key + 1) : 0;\n        const left = map.get(key - 1) ? map.get(key + 1) : 0;\n        let max = Math.max(left, right);\n        if ((max + value) > result && max > 0) {\n            result = max + value;\n        }\n    }\n    return result;\n};\n\n`\n``","source":"_posts/594. 最长和谐子序列.md","raw":"---\ntitle: 594. 最长和谐子序列\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 594. 最长和谐子序列 Map对象\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 594. 最长和谐子序列 Map对象\n\n## [查看原题](https://leetcode-cn.com/problems/longest-harmonious-subsequence/)\n\n## 解题思路\n1. 将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值\n2. 使用forof循环取出对象的每一项\n3. ```const right = map.get(key + 1) ? map.get(key + 1) : 0;```\n     ```const left = map.get(key - 1) ? map.get(key + 1) : 0;```\n    将当前项得左右两项做出判断\n4. 求出左右项得最大值\n5. 判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n    let result = 0; //返回结果\n    const map = new Map();\n    for (const num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1)\n        }\n    }\n    for (const [key, value] of map) {\n        const right = map.get(key + 1) ? map.get(key + 1) : 0;\n        const left = map.get(key - 1) ? map.get(key + 1) : 0;\n        let max = Math.max(left, right);\n        if ((max + value) > result && max > 0) {\n            result = max + value;\n        }\n    }\n    return result;\n};\n\n`\n``","slug":"594. 最长和谐子序列","published":1,"updated":"2021-12-30T15:04:18.330Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j10031isaxc2qpcj1f","content":"<h1 id=\"594-最长和谐子序列-Map对象\"><a href=\"#594-最长和谐子序列-Map对象\" class=\"headerlink\" title=\"594. 最长和谐子序列 Map对象\"></a>594. 最长和谐子序列 Map对象</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/longest-harmonious-subsequence/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值</li>\n<li>使用forof循环取出对象的每一项</li>\n<li><code>const right = map.get(key + 1) ? map.get(key + 1) : 0;</code><br>  <code>const left = map.get(key - 1) ? map.get(key + 1) : 0;</code><br> 将当前项得左右两项做出判断</li>\n<li>求出左右项得最大值</li>\n<li>判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>```javascript<br>/**</p>\n<ul>\n<li>@param {number[]} nums</li>\n<li>@return {number}</li>\n<li>/<br>var findLHS = function(nums) {<br>  let result = 0; //返回结果<br>  const map = new Map();<br>  for (const num of nums) {<pre><code>  if (map.has(num)) &#123;\n      map.set(num, map.get(num) + 1);\n  &#125; else &#123;\n      map.set(num, 1)\n  &#125;\n</code></pre>\n  }<br>  for (const [key, value] of map) {<pre><code>  const right = map.get(key + 1) ? map.get(key + 1) : 0;\n  const left = map.get(key - 1) ? map.get(key + 1) : 0;\n  let max = Math.max(left, right);\n  if ((max + value) &gt; result &amp;&amp; max &gt; 0) &#123;\n      result = max + value;\n  &#125;\n</code></pre>\n  }<br>  return result;<br>};</li>\n</ul>\n<p>`<br>``</p>\n","site":{"data":{}},"length":680,"excerpt":"","more":"<h1 id=\"594-最长和谐子序列-Map对象\"><a href=\"#594-最长和谐子序列-Map对象\" class=\"headerlink\" title=\"594. 最长和谐子序列 Map对象\"></a>594. 最长和谐子序列 Map对象</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/longest-harmonious-subsequence/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>将数组映射到Map对象中，以数组的值为键，以数组值得个数为Map对象的值</li>\n<li>使用forof循环取出对象的每一项</li>\n<li><code>const right = map.get(key + 1) ? map.get(key + 1) : 0;</code><br>  <code>const left = map.get(key - 1) ? map.get(key + 1) : 0;</code><br> 将当前项得左右两项做出判断</li>\n<li>求出左右项得最大值</li>\n<li>判断是否要更新总的最大值（条件是左右两项至少存在一个，且两者之和大于当前的总最大值）</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>```javascript<br>/**</p>\n<ul>\n<li>@param {number[]} nums</li>\n<li>@return {number}</li>\n<li>/<br>var findLHS = function(nums) {<br>  let result = 0; //返回结果<br>  const map = new Map();<br>  for (const num of nums) {<pre><code>  if (map.has(num)) &#123;\n      map.set(num, map.get(num) + 1);\n  &#125; else &#123;\n      map.set(num, 1)\n  &#125;\n</code></pre>\n  }<br>  for (const [key, value] of map) {<pre><code>  const right = map.get(key + 1) ? map.get(key + 1) : 0;\n  const left = map.get(key - 1) ? map.get(key + 1) : 0;\n  let max = Math.max(left, right);\n  if ((max + value) &gt; result &amp;&amp; max &gt; 0) &#123;\n      result = max + value;\n  &#125;\n</code></pre>\n  }<br>  return result;<br>};</li>\n</ul>\n<p>`<br>``</p>\n"},{"title":"704. 二分查找","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"704. 二分查找  二分","_content":"\n\n# 704. 二分查找  二分\n## 解题思路\n二分算法，\n1. 求左右边界left 和 right 的中间值mid\n2. 判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系\n    - 大，则更新右边界right = mid - 1\n    - 小，则更新左边界left = mid +1\n    - 相等，直接返回mid\n3. 循环判断直到 left<= right\n4. 直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标\n\n## [原题](https://leetcode-cn.com/problems/binary-search/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    let left = 0;\n    let right = nums.length-1;\n    while (left <= right) {\n        let mid = parseInt((left + right) / 2);\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n\n    }\n    return -1;\n};\n\n```","source":"_posts/704. 二分查找.md","raw":"---\ntitle: 704. 二分查找 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 704. 二分查找  二分\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 704. 二分查找  二分\n## 解题思路\n二分算法，\n1. 求左右边界left 和 right 的中间值mid\n2. 判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系\n    - 大，则更新右边界right = mid - 1\n    - 小，则更新左边界left = mid +1\n    - 相等，直接返回mid\n3. 循环判断直到 left<= right\n4. 直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标\n\n## [原题](https://leetcode-cn.com/problems/binary-search/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    let left = 0;\n    let right = nums.length-1;\n    while (left <= right) {\n        let mid = parseInt((left + right) / 2);\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n\n    }\n    return -1;\n};\n\n```","slug":"704. 二分查找","published":1,"updated":"2021-12-30T15:04:27.591Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j30034isax4mlmbtk7","content":"<h1 id=\"704-二分查找-二分\"><a href=\"#704-二分查找-二分\" class=\"headerlink\" title=\"704. 二分查找  二分\"></a>704. 二分查找  二分</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，</p>\n<ol>\n<li>求左右边界left 和 right 的中间值mid</li>\n<li>判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系<ul>\n<li>大，则更新右边界right = mid - 1</li>\n<li>小，则更新左边界left = mid +1</li>\n<li>相等，直接返回mid</li>\n</ul>\n</li>\n<li>循环判断直到 left&lt;= right</li>\n<li>直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-search/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":582,"excerpt":"","more":"<h1 id=\"704-二分查找-二分\"><a href=\"#704-二分查找-二分\" class=\"headerlink\" title=\"704. 二分查找  二分\"></a>704. 二分查找  二分</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分算法，</p>\n<ol>\n<li>求左右边界left 和 right 的中间值mid</li>\n<li>判断中心值对应的数组值 nums[mid] 与要比较的值target大小关系<ul>\n<li>大，则更新右边界right = mid - 1</li>\n<li>小，则更新左边界left = mid +1</li>\n<li>相等，直接返回mid</li>\n</ul>\n</li>\n<li>循环判断直到 left&lt;= right</li>\n<li>直接返回-1，这里返回说明前面肯定没有返回，说明没找到对应的下标</li>\n</ol>\n<h2 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode-cn.com/problems/binary-search/\">原题</a></h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"748. 最短补全词","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"748. 最短补全词 循环遍历每一个单词，比较是否符合","_content":"\n\n# 748. 最短补全词 循环遍历每一个单词，比较是否符合\n\n## [查看原题](https://leetcode-cn.com/problems/shortest-completing-word/)\n\n## 解题思路\n\n使用了map集合来判断\n\n1. 先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数\n2. 遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短\n\n## 代码\n\n```javascript\n/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n\t// 将字符串全转为小写字母\n\tconst temp = licensePlate.toLowerCase();\n\tlet map = new Map();//统计各个单词的个数\n\tfor (const item of temp){\n\t\t// 将小写字母过滤\n\t\tif(item>='a' && item<='z'){\n\t\t\tif(map.has(item)){\n\t\t\t\tmap.set(item,map.get(item) + 1)\n\t\t\t}else{\n\t\t\t\tmap.set(item,1);\n\t\t\t}\n\t\t}\n\t}\n\n\tlet index = null;//最短词的下标\n\tfor(let i =0 ;i<words.length;i++){\n\t\tconst temp = new Map(map);\n\t\tfor(const word of words[i]){\n\t\t\tif(temp.has(word)){\n\t\t\t\ttemp.set(word,temp.get(word) - 1 );\n\t\t\t}\n\t\t}\n\t\tlet flag = true;//为true说明该单词是补全词\n\t\tfor (const [key,value] of temp){\n\t\t\tif(value > 0){\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\n\t\t// 进入此if说明是补全词，接下来判断是否要更新最短的补全词\n\t\tif(flag){\n\t\t\tif(index===null || words[i].length < words[index].length){\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn words[index];\n};\n\n```\n\n\n\n","source":"_posts/748. 最短补全词.md","raw":"---\ntitle: 748. 最短补全词 \ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 748. 最短补全词 循环遍历每一个单词，比较是否符合\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 748. 最短补全词 循环遍历每一个单词，比较是否符合\n\n## [查看原题](https://leetcode-cn.com/problems/shortest-completing-word/)\n\n## 解题思路\n\n使用了map集合来判断\n\n1. 先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数\n2. 遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短\n\n## 代码\n\n```javascript\n/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n\t// 将字符串全转为小写字母\n\tconst temp = licensePlate.toLowerCase();\n\tlet map = new Map();//统计各个单词的个数\n\tfor (const item of temp){\n\t\t// 将小写字母过滤\n\t\tif(item>='a' && item<='z'){\n\t\t\tif(map.has(item)){\n\t\t\t\tmap.set(item,map.get(item) + 1)\n\t\t\t}else{\n\t\t\t\tmap.set(item,1);\n\t\t\t}\n\t\t}\n\t}\n\n\tlet index = null;//最短词的下标\n\tfor(let i =0 ;i<words.length;i++){\n\t\tconst temp = new Map(map);\n\t\tfor(const word of words[i]){\n\t\t\tif(temp.has(word)){\n\t\t\t\ttemp.set(word,temp.get(word) - 1 );\n\t\t\t}\n\t\t}\n\t\tlet flag = true;//为true说明该单词是补全词\n\t\tfor (const [key,value] of temp){\n\t\t\tif(value > 0){\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\n\t\t// 进入此if说明是补全词，接下来判断是否要更新最短的补全词\n\t\tif(flag){\n\t\t\tif(index===null || words[i].length < words[index].length){\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn words[index];\n};\n\n```\n\n\n\n","slug":"748. 最短补全词","published":1,"updated":"2021-12-30T15:04:36.337Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j60037isaxhdjh2jny","content":"<h1 id=\"748-最短补全词-循环遍历每一个单词，比较是否符合\"><a href=\"#748-最短补全词-循环遍历每一个单词，比较是否符合\" class=\"headerlink\" title=\"748. 最短补全词 循环遍历每一个单词，比较是否符合\"></a>748. 最短补全词 循环遍历每一个单词，比较是否符合</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/shortest-completing-word/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用了map集合来判断</p>\n<ol>\n<li>先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数</li>\n<li>遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">licensePlate</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shortestCompletingWord = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">licensePlate, words</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串全转为小写字母</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = licensePlate.toLowerCase();</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();<span class=\"comment\">//统计各个单词的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将小写字母过滤</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item&gt;=<span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; item&lt;=<span class=\"string\">&#x27;z&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,map.get(item) + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> index = <span class=\"literal\">null</span>;<span class=\"comment\">//最短词的下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i&lt;words.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(map);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> word <span class=\"keyword\">of</span> words[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.has(word))&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(word,temp.get(word) - <span class=\"number\">1</span> );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;<span class=\"comment\">//为true说明该单词是补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 进入此if说明是补全词，接下来判断是否要更新最短的补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(index===<span class=\"literal\">null</span> || words[i].length &lt; words[index].length)&#123;</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> words[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"length":1100,"excerpt":"","more":"<h1 id=\"748-最短补全词-循环遍历每一个单词，比较是否符合\"><a href=\"#748-最短补全词-循环遍历每一个单词，比较是否符合\" class=\"headerlink\" title=\"748. 最短补全词 循环遍历每一个单词，比较是否符合\"></a>748. 最短补全词 循环遍历每一个单词，比较是否符合</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/shortest-completing-word/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>使用了map集合来判断</p>\n<ol>\n<li>先将licensePlate的大写字母转为小写字母，再统计里面每一个小写单词的个数</li>\n<li>遍历words分别对每一个元素做出判断，该元素是否是补全词，该元素是补全词的话是否比前面的补全词更短</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">licensePlate</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shortestCompletingWord = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">licensePlate, words</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串全转为小写字母</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> temp = licensePlate.toLowerCase();</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();<span class=\"comment\">//统计各个单词的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将小写字母过滤</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item&gt;=<span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; item&lt;=<span class=\"string\">&#x27;z&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(map.has(item))&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,map.get(item) + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tmap.set(item,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> index = <span class=\"literal\">null</span>;<span class=\"comment\">//最短词的下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i&lt;words.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(map);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> word <span class=\"keyword\">of</span> words[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.has(word))&#123;</span><br><span class=\"line\">\t\t\t\ttemp.set(word,temp.get(word) - <span class=\"number\">1</span> );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;<span class=\"comment\">//为true说明该单词是补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key,value] <span class=\"keyword\">of</span> temp)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(value &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 进入此if说明是补全词，接下来判断是否要更新最短的补全词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(index===<span class=\"literal\">null</span> || words[i].length &lt; words[index].length)&#123;</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> words[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"859. 亲密字符串","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"859. 亲密字符串 遍历比较","_content":"\n\n# 859. 亲密字符串 遍历比较\n\n## [查看原题](https://leetcode-cn.com/problems/buddy-strings/)\n\n## 解题思路\n1. 先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false\n2. 遍历字符串求出每一项的差值存到数组temp中\n3. 先判断一下交换的数据是否相等\n4. 过滤出temp中值为0的项\n5. 判断比较temp的长度\n    - temp的长度为2，则比较temp[0] + temp[1] === 0\n    - temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1\n    - 以上情况返回true\n6. 其他情况返回false\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} goal\n * @return {boolean}\n */\n var buddyStrings = function(s, goal) {\n    // 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串\n    if (s.length !== goal.length || s.length === 1) {\n        return false;\n    }\n    let temp = []; //用来存放两个字符串的每一项的差值\n    for (let i = 0; i < s.length; i++) {\n        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));\n    }\n    let a = -1;\n    for (let i = 0; i < temp.length; i++) {\n        if (temp[i] !== 0 && a === -1) {\n            a = i;\n        } else if (temp[i] !== 0 && a !== -1) {\n            if (goal.charAt(a) !== s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    temp = temp.filter(item => item);\n    if (((temp.length === 2) && (temp[0] + temp[1] === 0)) || (temp.length === 0 && ((new Set(s.split('')).size === 1) || (new Set(s.split('')).size !== s.length)))) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","source":"_posts/859. 亲密字符串.md","raw":"---\ntitle: 859. 亲密字符串\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 859. 亲密字符串 遍历比较\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 859. 亲密字符串 遍历比较\n\n## [查看原题](https://leetcode-cn.com/problems/buddy-strings/)\n\n## 解题思路\n1. 先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false\n2. 遍历字符串求出每一项的差值存到数组temp中\n3. 先判断一下交换的数据是否相等\n4. 过滤出temp中值为0的项\n5. 判断比较temp的长度\n    - temp的长度为2，则比较temp[0] + temp[1] === 0\n    - temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1\n    - 以上情况返回true\n6. 其他情况返回false\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {string} goal\n * @return {boolean}\n */\n var buddyStrings = function(s, goal) {\n    // 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串\n    if (s.length !== goal.length || s.length === 1) {\n        return false;\n    }\n    let temp = []; //用来存放两个字符串的每一项的差值\n    for (let i = 0; i < s.length; i++) {\n        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));\n    }\n    let a = -1;\n    for (let i = 0; i < temp.length; i++) {\n        if (temp[i] !== 0 && a === -1) {\n            a = i;\n        } else if (temp[i] !== 0 && a !== -1) {\n            if (goal.charAt(a) !== s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    temp = temp.filter(item => item);\n    if (((temp.length === 2) && (temp[0] + temp[1] === 0)) || (temp.length === 0 && ((new Set(s.split('')).size === 1) || (new Set(s.split('')).size !== s.length)))) {\n        return true;\n    } else {\n        return false;\n    }\n};\n```","slug":"859. 亲密字符串","published":1,"updated":"2021-12-30T15:04:59.075Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5j8003aisax4z32fpx7","content":"<h1 id=\"859-亲密字符串-遍历比较\"><a href=\"#859-亲密字符串-遍历比较\" class=\"headerlink\" title=\"859. 亲密字符串 遍历比较\"></a>859. 亲密字符串 遍历比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/buddy-strings/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false</li>\n<li>遍历字符串求出每一项的差值存到数组temp中</li>\n<li>先判断一下交换的数据是否相等</li>\n<li>过滤出temp中值为0的项</li>\n<li>判断比较temp的长度<ul>\n<li>temp的长度为2，则比较temp[0] + temp[1] === 0</li>\n<li>temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1</li>\n<li>以上情况返回true</li>\n</ul>\n</li>\n<li>其他情况返回false<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">goal</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> buddyStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, goal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== goal.length || s.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//用来存放两个字符串的每一项的差值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            a = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (goal.charAt(a) !== s.charAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp = temp.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((temp.length === <span class=\"number\">2</span>) &amp;&amp; (temp[<span class=\"number\">0</span>] + temp[<span class=\"number\">1</span>] === <span class=\"number\">0</span>)) || (temp.length === <span class=\"number\">0</span> &amp;&amp; ((<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size === <span class=\"number\">1</span>) || (<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size !== s.length)))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1081,"excerpt":"","more":"<h1 id=\"859-亲密字符串-遍历比较\"><a href=\"#859-亲密字符串-遍历比较\" class=\"headerlink\" title=\"859. 亲密字符串 遍历比较\"></a>859. 亲密字符串 遍历比较</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/buddy-strings/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>先判断两个字符串长度是否相等或者长度都为1，如果不相等或者长度为1，则肯定不满足，直接返回false</li>\n<li>遍历字符串求出每一项的差值存到数组temp中</li>\n<li>先判断一下交换的数据是否相等</li>\n<li>过滤出temp中值为0的项</li>\n<li>判断比较temp的长度<ul>\n<li>temp的长度为2，则比较temp[0] + temp[1] === 0</li>\n<li>temp的长度为0，则判断字符串的长度是否为一串一样的数字，且长度大于1</li>\n<li>以上情况返回true</li>\n</ul>\n</li>\n<li>其他情况返回false<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">goal</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> buddyStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, goal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个字符串长度不相等或者其中一个长度为1，则肯定不是亲密字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== goal.length || s.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []; <span class=\"comment\">//用来存放两个字符串的每一项的差值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        temp.push(s.charCodeAt(i) - goal.charCodeAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            a = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp[i] !== <span class=\"number\">0</span> &amp;&amp; a !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (goal.charAt(a) !== s.charAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp = temp.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((temp.length === <span class=\"number\">2</span>) &amp;&amp; (temp[<span class=\"number\">0</span>] + temp[<span class=\"number\">1</span>] === <span class=\"number\">0</span>)) || (temp.length === <span class=\"number\">0</span> &amp;&amp; ((<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size === <span class=\"number\">1</span>) || (<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(s.split(<span class=\"string\">&#x27;&#x27;</span>)).size !== s.length)))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"794. 有效的井字游戏","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"794. 有效的井字游戏  找出判断条件","_content":"\n\n# 794. 有效的井字游戏  找出判断条件\n\n## [查看原题](https://leetcode-cn.com/problems/valid-tic-tac-toe-state/)\n\n## 解题思路\n\n### 棋盘可能达到的状态是：\n1. 玩家一下的 'X'个数 等于玩家二下的 ''O' 的个数或 'O'的个数加一\n2. 只能有一个玩家赢\n3. 当玩家一赢的时候，棋局上 'X'的个数等于'O'的个数加一\n4. 当玩家二赢的时候，棋局上'O'的个数等于'X'的个数\n\n### 关键步骤：\n1. 求出棋盘上'X'和'O'的个数\n2. 判断是否符合条件一\n3. 若符合条件一继续执行，不符合则直接```return false```\n4. 接下来判断是否有玩家获胜\n5. 当两个玩家都获胜则不符合条件\n6. 当只有玩家一获胜，判断棋局上 'X'的个数是否等于'O'的个数加一\n7. 当只有玩家二获胜，判断棋局上'O'的个数是否等于'X'的个数\n\n\n### 玩家获胜的情况\n\n1. 水平的三个字符都一样： ```board[i][0] === board[i][1] && board[i][1] === board[i][2]```\n2. 垂直的三个字符都一样：```board[0][i] === board[1][i] && board[1][i] === board[2][i]```\n3. 正对角线的三个字符一样：```board[0][0] === board[1][1] && board[1][1]=== board[2][2]```\n4. 反对角线的三个字符都一样:```board[0][2] === board[1][1] && board[1][1]=== board[2][0] ```\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {string[]} board\n * @return {boolean}\n */\nvar validTicTacToe = function(board) {\n\tlet XNumber = 0;//X的个数\n\tlet ONumber = 0;//O的个数\n\tlet player1Win = false;\n\tlet player2Win = false;\n\n\t// 统计X和O的个数\n\tfor(let i = 0;i<board.length;i++){\n\t\tfor(let j = 0;j<board[i].length;j++){\n\t\t\tif(board[i].charAt(j) === 'X'){\n\t\t\t\tXNumber++;\n\t\t\t}else if(board[i].charAt(j) === 'O'){\n\t\t\t\tONumber++;\n\t\t\t}\n\t\t}\n\t}\n\tif(XNumber === ONumber+1 || XNumber === ONumber){\n\t\t// 判读是否有玩家获胜\n\t\t//判断一行\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[i][0] === board[i][1] && board[i][1] === board[i][2]){\n\t\t\t\tif(board[i][0] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[i][0] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 判断一列\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[0][i] === board[1][i] && board[1][i] === board[2][i]){\n\t\t\t\tif(board[0][i] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[0][i] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 判断对角线\n\t\tif(board[0][0] === board[1][1] && board[1][1]=== board[2][2]){\n\t\t\tif(board[0][0] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][0] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\tif(board[0][2] === board[1][1] && board[1][1]=== board[2][0]){\n\t\t\tif(board[0][2] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][2] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家一玩家二都赢\n\t\tif(player1Win && player2Win){\n\t\t\treturn false;\n\t\t}\n\n\n\t\t// 玩家一赢，玩家二不赢\n\t\tif(player1Win && !player2Win){\n\t\t\tif(XNumber === ONumber + 1){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家二赢，玩家一不赢\n\t\tif(!player1Win && player2Win){\n\t\t\tif(XNumber === ONumber){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 都不赢\n\t\tif(!player1Win && !player2Win){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n```","source":"_posts/794. 有效的井字游戏.md","raw":"---\ntitle: 794. 有效的井字游戏\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 794. 有效的井字游戏  找出判断条件\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 794. 有效的井字游戏  找出判断条件\n\n## [查看原题](https://leetcode-cn.com/problems/valid-tic-tac-toe-state/)\n\n## 解题思路\n\n### 棋盘可能达到的状态是：\n1. 玩家一下的 'X'个数 等于玩家二下的 ''O' 的个数或 'O'的个数加一\n2. 只能有一个玩家赢\n3. 当玩家一赢的时候，棋局上 'X'的个数等于'O'的个数加一\n4. 当玩家二赢的时候，棋局上'O'的个数等于'X'的个数\n\n### 关键步骤：\n1. 求出棋盘上'X'和'O'的个数\n2. 判断是否符合条件一\n3. 若符合条件一继续执行，不符合则直接```return false```\n4. 接下来判断是否有玩家获胜\n5. 当两个玩家都获胜则不符合条件\n6. 当只有玩家一获胜，判断棋局上 'X'的个数是否等于'O'的个数加一\n7. 当只有玩家二获胜，判断棋局上'O'的个数是否等于'X'的个数\n\n\n### 玩家获胜的情况\n\n1. 水平的三个字符都一样： ```board[i][0] === board[i][1] && board[i][1] === board[i][2]```\n2. 垂直的三个字符都一样：```board[0][i] === board[1][i] && board[1][i] === board[2][i]```\n3. 正对角线的三个字符一样：```board[0][0] === board[1][1] && board[1][1]=== board[2][2]```\n4. 反对角线的三个字符都一样:```board[0][2] === board[1][1] && board[1][1]=== board[2][0] ```\n\n\n\n## 代码\n\n```javascript\n/**\n * @param {string[]} board\n * @return {boolean}\n */\nvar validTicTacToe = function(board) {\n\tlet XNumber = 0;//X的个数\n\tlet ONumber = 0;//O的个数\n\tlet player1Win = false;\n\tlet player2Win = false;\n\n\t// 统计X和O的个数\n\tfor(let i = 0;i<board.length;i++){\n\t\tfor(let j = 0;j<board[i].length;j++){\n\t\t\tif(board[i].charAt(j) === 'X'){\n\t\t\t\tXNumber++;\n\t\t\t}else if(board[i].charAt(j) === 'O'){\n\t\t\t\tONumber++;\n\t\t\t}\n\t\t}\n\t}\n\tif(XNumber === ONumber+1 || XNumber === ONumber){\n\t\t// 判读是否有玩家获胜\n\t\t//判断一行\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[i][0] === board[i][1] && board[i][1] === board[i][2]){\n\t\t\t\tif(board[i][0] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[i][0] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 判断一列\n\t\tfor(let i = 0;i<board.length;i++){\n\t\t\tif(board[0][i] === board[1][i] && board[1][i] === board[2][i]){\n\t\t\t\tif(board[0][i] === 'X'){\n\t\t\t\t\tplayer1Win = true;\n\t\t\t\t}else if(board[0][i] === 'O'){\n\t\t\t\t\tplayer2Win = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 判断对角线\n\t\tif(board[0][0] === board[1][1] && board[1][1]=== board[2][2]){\n\t\t\tif(board[0][0] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][0] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\tif(board[0][2] === board[1][1] && board[1][1]=== board[2][0]){\n\t\t\tif(board[0][2] === 'X'){\n\t\t\t\tplayer1Win = true;\n\t\t\t}else if(board[0][2] === 'O'){\n\t\t\t\tplayer2Win = true;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家一玩家二都赢\n\t\tif(player1Win && player2Win){\n\t\t\treturn false;\n\t\t}\n\n\n\t\t// 玩家一赢，玩家二不赢\n\t\tif(player1Win && !player2Win){\n\t\t\tif(XNumber === ONumber + 1){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 玩家二赢，玩家一不赢\n\t\tif(!player1Win && player2Win){\n\t\t\tif(XNumber === ONumber){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 都不赢\n\t\tif(!player1Win && !player2Win){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n```","slug":"794. 有效的井字游戏","published":1,"updated":"2021-12-30T15:04:45.944Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5ja003disaxbo3k7xfl","content":"<h1 id=\"794-有效的井字游戏-找出判断条件\"><a href=\"#794-有效的井字游戏-找出判断条件\" class=\"headerlink\" title=\"794. 有效的井字游戏  找出判断条件\"></a>794. 有效的井字游戏  找出判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-tic-tac-toe-state/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"棋盘可能达到的状态是：\"><a href=\"#棋盘可能达到的状态是：\" class=\"headerlink\" title=\"棋盘可能达到的状态是：\"></a>棋盘可能达到的状态是：</h3><ol>\n<li>玩家一下的 ‘X’个数 等于玩家二下的 ‘’O’ 的个数或 ‘O’的个数加一</li>\n<li>只能有一个玩家赢</li>\n<li>当玩家一赢的时候，棋局上 ‘X’的个数等于’O’的个数加一</li>\n<li>当玩家二赢的时候，棋局上’O’的个数等于’X’的个数</li>\n</ol>\n<h3 id=\"关键步骤：\"><a href=\"#关键步骤：\" class=\"headerlink\" title=\"关键步骤：\"></a>关键步骤：</h3><ol>\n<li>求出棋盘上’X’和’O’的个数</li>\n<li>判断是否符合条件一</li>\n<li>若符合条件一继续执行，不符合则直接<code>return false</code></li>\n<li>接下来判断是否有玩家获胜</li>\n<li>当两个玩家都获胜则不符合条件</li>\n<li>当只有玩家一获胜，判断棋局上 ‘X’的个数是否等于’O’的个数加一</li>\n<li>当只有玩家二获胜，判断棋局上’O’的个数是否等于’X’的个数</li>\n</ol>\n<h3 id=\"玩家获胜的情况\"><a href=\"#玩家获胜的情况\" class=\"headerlink\" title=\"玩家获胜的情况\"></a>玩家获胜的情况</h3><ol>\n<li>水平的三个字符都一样： <code>board[i][0] === board[i][1] &amp;&amp; board[i][1] === board[i][2]</code></li>\n<li>垂直的三个字符都一样：<code>board[0][i] === board[1][i] &amp;&amp; board[1][i] === board[2][i]</code></li>\n<li>正对角线的三个字符一样：<code>board[0][0] === board[1][1] &amp;&amp; board[1][1]=== board[2][2]</code></li>\n<li>反对角线的三个字符都一样:<code>board[0][2] === board[1][1] &amp;&amp; board[1][1]=== board[2][0] </code></li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">board</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validTicTacToe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">board</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> XNumber = <span class=\"number\">0</span>;<span class=\"comment\">//X的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ONumber = <span class=\"number\">0</span>;<span class=\"comment\">//O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player1Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player2Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 统计X和O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;board[i].length;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tXNumber++;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tONumber++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(XNumber === ONumber+<span class=\"number\">1</span> || XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判读是否有玩家获胜</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断一行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === board[i][<span class=\"number\">1</span>] &amp;&amp; board[i][<span class=\"number\">1</span>] === board[i][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断一列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === board[<span class=\"number\">1</span>][i] &amp;&amp; board[<span class=\"number\">1</span>][i] === board[<span class=\"number\">2</span>][i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断对角线</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一玩家二都赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一赢，玩家二不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家二赢，玩家一不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 都不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2538,"excerpt":"","more":"<h1 id=\"794-有效的井字游戏-找出判断条件\"><a href=\"#794-有效的井字游戏-找出判断条件\" class=\"headerlink\" title=\"794. 有效的井字游戏  找出判断条件\"></a>794. 有效的井字游戏  找出判断条件</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/valid-tic-tac-toe-state/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"棋盘可能达到的状态是：\"><a href=\"#棋盘可能达到的状态是：\" class=\"headerlink\" title=\"棋盘可能达到的状态是：\"></a>棋盘可能达到的状态是：</h3><ol>\n<li>玩家一下的 ‘X’个数 等于玩家二下的 ‘’O’ 的个数或 ‘O’的个数加一</li>\n<li>只能有一个玩家赢</li>\n<li>当玩家一赢的时候，棋局上 ‘X’的个数等于’O’的个数加一</li>\n<li>当玩家二赢的时候，棋局上’O’的个数等于’X’的个数</li>\n</ol>\n<h3 id=\"关键步骤：\"><a href=\"#关键步骤：\" class=\"headerlink\" title=\"关键步骤：\"></a>关键步骤：</h3><ol>\n<li>求出棋盘上’X’和’O’的个数</li>\n<li>判断是否符合条件一</li>\n<li>若符合条件一继续执行，不符合则直接<code>return false</code></li>\n<li>接下来判断是否有玩家获胜</li>\n<li>当两个玩家都获胜则不符合条件</li>\n<li>当只有玩家一获胜，判断棋局上 ‘X’的个数是否等于’O’的个数加一</li>\n<li>当只有玩家二获胜，判断棋局上’O’的个数是否等于’X’的个数</li>\n</ol>\n<h3 id=\"玩家获胜的情况\"><a href=\"#玩家获胜的情况\" class=\"headerlink\" title=\"玩家获胜的情况\"></a>玩家获胜的情况</h3><ol>\n<li>水平的三个字符都一样： <code>board[i][0] === board[i][1] &amp;&amp; board[i][1] === board[i][2]</code></li>\n<li>垂直的三个字符都一样：<code>board[0][i] === board[1][i] &amp;&amp; board[1][i] === board[2][i]</code></li>\n<li>正对角线的三个字符一样：<code>board[0][0] === board[1][1] &amp;&amp; board[1][1]=== board[2][2]</code></li>\n<li>反对角线的三个字符都一样:<code>board[0][2] === board[1][1] &amp;&amp; board[1][1]=== board[2][0] </code></li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">board</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validTicTacToe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">board</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> XNumber = <span class=\"number\">0</span>;<span class=\"comment\">//X的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ONumber = <span class=\"number\">0</span>;<span class=\"comment\">//O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player1Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> player2Win = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 统计X和O的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;board[i].length;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tXNumber++;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i].charAt(j) === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tONumber++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(XNumber === ONumber+<span class=\"number\">1</span> || XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判读是否有玩家获胜</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断一行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === board[i][<span class=\"number\">1</span>] &amp;&amp; board[i][<span class=\"number\">1</span>] === board[i][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断一列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;board.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === board[<span class=\"number\">1</span>][i] &amp;&amp; board[<span class=\"number\">1</span>][i] === board[<span class=\"number\">2</span>][i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][i] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断对角线</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === board[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &amp;&amp; board[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=== board[<span class=\"number\">2</span>][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;X&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer1Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[<span class=\"number\">0</span>][<span class=\"number\">2</span>] === <span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tplayer2Win = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一玩家二都赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家一赢，玩家二不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 玩家二赢，玩家一不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(XNumber === ONumber)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 都不赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!player1Win &amp;&amp; !player2Win)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"876. 链表的中间结点","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"876. 链表的中间结点 先找到链表的长度，再返回对应一半的值","_content":"\n\n# 876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\n\n## [查看原题](https://leetcode-cn.com/problems/middle-of-the-linked-list/)\n\n## 解题思路\n1. 遍历列表进行链表长度的统计\n2. 返回链表的一半长度后面的数据\n\n## 代码\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n    let count = 0; //链表的长度\n    let p = head;\n    let n = head;\n    while (p) {\n        count++;\n        p = p.next;\n    }\n    const mid = count % 2 ? Math.floor(count / 2) : Math.ceil(count / 2);\n    while (mid--) {\n        n = n.next;\n    }\n    return n;\n};\n\n```","source":"_posts/876. 链表的中间结点.md","raw":"---\ntitle: 876. 链表的中间结点\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\n\n## [查看原题](https://leetcode-cn.com/problems/middle-of-the-linked-list/)\n\n## 解题思路\n1. 遍历列表进行链表长度的统计\n2. 返回链表的一半长度后面的数据\n\n## 代码\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n    let count = 0; //链表的长度\n    let p = head;\n    let n = head;\n    while (p) {\n        count++;\n        p = p.next;\n    }\n    const mid = count % 2 ? Math.floor(count / 2) : Math.ceil(count / 2);\n    while (mid--) {\n        n = n.next;\n    }\n    return n;\n};\n\n```","slug":"876. 链表的中间结点","published":1,"updated":"2021-12-30T15:05:07.889Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5jb003gisaxh35wcajz","content":"<h1 id=\"876-链表的中间结点-先找到链表的长度，再返回对应一半的值\"><a href=\"#876-链表的中间结点-先找到链表的长度，再返回对应一半的值\" class=\"headerlink\" title=\"876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\"></a>876. 链表的中间结点 先找到链表的长度，再返回对应一半的值</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>遍历列表进行链表长度的统计</li>\n<li>返回链表的一半长度后面的数据</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">//链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = count % <span class=\"number\">2</span> ? <span class=\"built_in\">Math</span>.floor(count / <span class=\"number\">2</span>) : <span class=\"built_in\">Math</span>.ceil(count / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (mid--) &#123;</span><br><span class=\"line\">        n = n.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":535,"excerpt":"","more":"<h1 id=\"876-链表的中间结点-先找到链表的长度，再返回对应一半的值\"><a href=\"#876-链表的中间结点-先找到链表的长度，再返回对应一半的值\" class=\"headerlink\" title=\"876. 链表的中间结点 先找到链表的长度，再返回对应一半的值\"></a>876. 链表的中间结点 先找到链表的长度，再返回对应一半的值</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li>遍历列表进行链表长度的统计</li>\n<li>返回链表的一半长度后面的数据</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">//链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = count % <span class=\"number\">2</span> ? <span class=\"built_in\">Math</span>.floor(count / <span class=\"number\">2</span>) : <span class=\"built_in\">Math</span>.ceil(count / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (mid--) &#123;</span><br><span class=\"line\">        n = n.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"88. 合并两个有序数组","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"88. 合并两个有序数组 循环替换后排序","_content":"\n\n# 88. 合并两个有序数组 循环替换后排序\n## 解题思路\n注意不能改变num1的长度，不能能用pop\n将nums2先插入到nums1的末尾，再用sort排序\n\n[原题](https://leetcode-cn.com/problems/merge-sorted-array/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    for (let i = m; i < m + n; i++) {\n        nums1[i] = nums2[i - m]\n    }\n    nums1 = nums1.sort(function(a, b) { return a - b });\n    // console.log(nums1)\n};\n```","source":"_posts/88. 合并两个有序数组.md","raw":"---\ntitle: 88. 合并两个有序数组\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 88. 合并两个有序数组 循环替换后排序\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 88. 合并两个有序数组 循环替换后排序\n## 解题思路\n注意不能改变num1的长度，不能能用pop\n将nums2先插入到nums1的末尾，再用sort排序\n\n[原题](https://leetcode-cn.com/problems/merge-sorted-array/)\n\n## 代码\n\n```javascript\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    for (let i = m; i < m + n; i++) {\n        nums1[i] = nums2[i - m]\n    }\n    nums1 = nums1.sort(function(a, b) { return a - b });\n    // console.log(nums1)\n};\n```","slug":"88. 合并两个有序数组","published":1,"updated":"2021-12-30T15:05:17.410Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5jc003jisax1z7nfofv","content":"<h1 id=\"88-合并两个有序数组-循环替换后排序\"><a href=\"#88-合并两个有序数组-循环替换后排序\" class=\"headerlink\" title=\"88. 合并两个有序数组 循环替换后排序\"></a>88. 合并两个有序数组 循环替换后排序</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>注意不能改变num1的长度，不能能用pop<br>将nums2先插入到nums1的末尾，再用sort排序</p>\n<p><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = m; i &lt; m + n; i++) &#123;</span><br><span class=\"line\">        nums1[i] = nums2[i - m]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums1 = nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a - b &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(nums1)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":460,"excerpt":"","more":"<h1 id=\"88-合并两个有序数组-循环替换后排序\"><a href=\"#88-合并两个有序数组-循环替换后排序\" class=\"headerlink\" title=\"88. 合并两个有序数组 循环替换后排序\"></a>88. 合并两个有序数组 循环替换后排序</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>注意不能改变num1的长度，不能能用pop<br>将nums2先插入到nums1的末尾，再用sort排序</p>\n<p><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">原题</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = m; i &lt; m + n; i++) &#123;</span><br><span class=\"line\">        nums1[i] = nums2[i - m]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums1 = nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a - b &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(nums1)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"997. 找到小镇的法官","date":"2021-12-30T10:24:47.000Z","comments":1,"toc":true,"description":"997. 找到小镇的法官 图的入度出度和普通方法运算","_content":"\n\n# 997. 找到小镇的法官 图的入度出度和普通方法运算\n\n## [查看原题](https://leetcode-cn.com/problems/find-the-town-judge/)\n\n## 解题思路\n\n这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。\n1. 利用map集合筛选出可能是法官的那些人\n2. 遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官\n3. 循环完毕返回-1，说明此时没有真正的法官\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet map = new Map();\n\tfor(let i = 1;i<=n;i++){\n\t\tmap.set(i,0);\n\t}\n\tfor(let i =0;i<trust.length;i++){\n\t\tif(map.has(trust[i][0])){\n\t\t\tmap.delete(trust[i][0])\n\t\t}\n\t}\n\tif(map.size === 0){\n\t\treturn -1;\n\t}else{\n\t\tfor (const key of map.keys()){\n\t\t\tlet count=0;\n\t\t\ttrust.forEach(item=>{\n\t\t\t\tif(item[1] === key){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t})\n\t\t\tconsole.log(count)\n\t\t\tif(count === n-1){\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n};\n\n```\n\n## 解题思路\n\n利用图论里面的出度和入度\n\n1. 循环trust 将每个人相信的个人的入度加一，自己的出度加一\n2. 循环判断一个人的出度=0，且入度=n-1，则这个人就是法官\n3. 返回-1，说明没有法官\n\n\n## 代码\n\n```js\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet input = new Array(n+1).fill(0);\n\tlet output= new Array(n+1).fill(0);\n\n\tfor(let i=0;i<trust.length;i++){\n\t\tinput[trust[i][1]]++;\n\t\toutput[trust[i][0]]++;\n\t}\n\tfor(let i =1;i<=n;i++){\n\t\tif(input[i] === n-1 && output[i] === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n```","source":"_posts/997. 找到小镇的法官.md","raw":"---\ntitle: 997. 找到小镇的法官\ndate: 2021-12-30 18:24:47\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ndescription: 997. 找到小镇的法官 图的入度出度和普通方法运算\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n    - js\n    - leetcode\n    - 算法\n---\n\n\n# 997. 找到小镇的法官 图的入度出度和普通方法运算\n\n## [查看原题](https://leetcode-cn.com/problems/find-the-town-judge/)\n\n## 解题思路\n\n这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。\n1. 利用map集合筛选出可能是法官的那些人\n2. 遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官\n3. 循环完毕返回-1，说明此时没有真正的法官\n\n## 代码\n\n```javascript\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet map = new Map();\n\tfor(let i = 1;i<=n;i++){\n\t\tmap.set(i,0);\n\t}\n\tfor(let i =0;i<trust.length;i++){\n\t\tif(map.has(trust[i][0])){\n\t\t\tmap.delete(trust[i][0])\n\t\t}\n\t}\n\tif(map.size === 0){\n\t\treturn -1;\n\t}else{\n\t\tfor (const key of map.keys()){\n\t\t\tlet count=0;\n\t\t\ttrust.forEach(item=>{\n\t\t\t\tif(item[1] === key){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t})\n\t\t\tconsole.log(count)\n\t\t\tif(count === n-1){\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n};\n\n```\n\n## 解题思路\n\n利用图论里面的出度和入度\n\n1. 循环trust 将每个人相信的个人的入度加一，自己的出度加一\n2. 循环判断一个人的出度=0，且入度=n-1，则这个人就是法官\n3. 返回-1，说明没有法官\n\n\n## 代码\n\n```js\n/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n\tlet input = new Array(n+1).fill(0);\n\tlet output= new Array(n+1).fill(0);\n\n\tfor(let i=0;i<trust.length;i++){\n\t\tinput[trust[i][1]]++;\n\t\toutput[trust[i][0]]++;\n\t}\n\tfor(let i =1;i<=n;i++){\n\t\tif(input[i] === n-1 && output[i] === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n```","slug":"997. 找到小镇的法官","published":1,"updated":"2021-12-30T15:05:28.420Z","layout":"post","photos":[],"link":"","_id":"ckxt3o5jd003misax35a27iwf","content":"<h1 id=\"997-找到小镇的法官-图的入度出度和普通方法运算\"><a href=\"#997-找到小镇的法官-图的入度出度和普通方法运算\" class=\"headerlink\" title=\"997. 找到小镇的法官 图的入度出度和普通方法运算\"></a>997. 找到小镇的法官 图的入度出度和普通方法运算</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-the-town-judge/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。</p>\n<ol>\n<li>利用map集合筛选出可能是法官的那些人</li>\n<li>遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官</li>\n<li>循环完毕返回-1，说明此时没有真正的法官</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tmap.set(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(trust[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\tmap.delete(trust[i][<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.size === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> map.keys())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\ttrust.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(item[<span class=\"number\">1</span>] === key)&#123;</span><br><span class=\"line\">\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count === n-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> key;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用图论里面的出度和入度</p>\n<ol>\n<li>循环trust 将每个人相信的个人的入度加一，自己的出度加一</li>\n<li>循环判断一个人的出度=0，且入度=n-1，则这个人就是法官</li>\n<li>返回-1，说明没有法官</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> input = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> output= <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\tinput[trust[i][<span class=\"number\">1</span>]]++;</span><br><span class=\"line\">\t\toutput[trust[i][<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(input[i] === n-<span class=\"number\">1</span> &amp;&amp; output[i] === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1277,"excerpt":"","more":"<h1 id=\"997-找到小镇的法官-图的入度出度和普通方法运算\"><a href=\"#997-找到小镇的法官-图的入度出度和普通方法运算\" class=\"headerlink\" title=\"997. 找到小镇的法官 图的入度出度和普通方法运算\"></a>997. 找到小镇的法官 图的入度出度和普通方法运算</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/find-the-town-judge/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这种方法是先判断哪些可能是法官（不相信任何人），再判断这些可能法官中是否存在除自己外所有人都相信的真正法官。</p>\n<ol>\n<li>利用map集合筛选出可能是法官的那些人</li>\n<li>遍历这些可能是法官的的那批人，在判断他们是否有n-1个人相信，如果有说明他是真正的法官</li>\n<li>循环完毕返回-1，说明此时没有真正的法官</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tmap.set(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(map.has(trust[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\tmap.delete(trust[i][<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.size === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> map.keys())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\ttrust.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(item[<span class=\"number\">1</span>] === key)&#123;</span><br><span class=\"line\">\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count === n-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> key;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>利用图论里面的出度和入度</p>\n<ol>\n<li>循环trust 将每个人相信的个人的入度加一，自己的出度加一</li>\n<li>循环判断一个人的出度=0，且入度=n-1，则这个人就是法官</li>\n<li>返回-1，说明没有法官</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">trust</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findJudge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, trust</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> input = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> output= <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;trust.length;i++)&#123;</span><br><span class=\"line\">\t\tinput[trust[i][<span class=\"number\">1</span>]]++;</span><br><span class=\"line\">\t\toutput[trust[i][<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(input[i] === n-<span class=\"number\">1</span> &amp;&amp; output[i] === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Oracle期末知识点总结","date":"2021-12-30T10:53:02.000Z","description":"Oracle知识点总结","_content":"# Oracle知识点总结\n\n\n## [索引](https://www.cnblogs.com/wishyouhappy/p/3681771.html)\n\n### 创建索引\n```plsql\nCREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引\nON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引\n[ASC|DESC],…] | [express])\n[TABLESPACE tablespace_name]\n[PCTFREE n1]                                 --指定索引在数据块中空闲空间\n[STORAGE (INITIAL n2)]\n[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用\n[NOLINE]\n[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用\n```\n\n\n\n```plsql\n为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。\ncreate index DX1_02 on student1(注册日期 desc);\n```\n\n### 删除索引\n\n```plsql\ndrop index index_sno;\n```\n### 查看索引\n\n```plsql\nselect index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name ='tablename';\n\n -- eg:    \ncreate index index_sno on student('name');\nselect * from all_indexes where table_name='student';\n```\n\n\n## [同义词](https://www.cnblogs.com/moonsoft/p/12364941.html)\n\nOracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似\n\n### 创建公共同义词\n```plsql\ncreate public synonym synonym_name for table_name;\n```\n\n### 创建普通的同义词\n```plsql\ncreate  synonym synonym_name for table_name;\n```\n\n### 删除同义词\n```plsql\ndrop synonym synonym_name;\n```\n## [序列](https://www.cnblogs.com/CandiceW/p/10062413.html)\n\n序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。\n\n### 创建序列\n创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：\n```plsql\n　　CREATE SEQUENCE 序列名\n　　[INCREMENT BY n]\n　　[START WITH n]\n　　[{MAXVALUE/ MINVALUE n| NOMAXVALUE}]\n　　[{CYCLE|NOCYCLE}]\n　　[{CACHE n| NOCACHE}];\n```\n#### 其中：\n\n1. > INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。\n\n2. > START WITH 定义序列的初始值(即产生的第一个值)，默认为1。\n\n3. > MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。\n\n4. > MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。\n\n5. > CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。\n\n6. > CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。\n\n7. > NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。\n\n8. > CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。\n\n\n 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。\n```plsql\ncreate sequence DX1_06 increment by 10 start with 50 nocache;\n```\n\n创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。\n```plsql\ncreate sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;\n```\n\n### 修改序列\n **alter**\n\n修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。\n```plsql\nalter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;\n````\n\n### 删除序列\n**drop**\n\n删除序列seq_1。\n```plsql\ndrop sequence seq_1;\n```\n\n### 一些常用函数\n\n#### [查询一张表，而且要按照业务排序](https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html)\n  ```rank() over(partition)```\n\n### [从右边对字符串使用指定的字符进行填充 ](https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html)\n```rpad(string,padded_length,[pad_string]) 　```\n-  string 表示：被填充的字符串 　　\n-  padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　\n- pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　\n\n\n## [存储过程](https://blog.csdn.net/qq_39443053/article/details/104044530)\n\n### 存储过程的定义\n#### 无参数\n```plsql\ncreate or replace procedure 存储过程名\nas\nbegin\n  ----------------------------\nend;\n```\n\n#### 有参数\n```plsql\ncreate or replace procedure myDemo02(name in varchar,age in int)\nas\nbegin\n  dbms_output.put_line('name='||name||', age='||age);\nend;\n```\n\n## 知识点\n1. 主键的创建有三种方法\n2. 视图上不能完成的操作：在视图上定义新的基本表\n3. 在sql中子查询是嵌入到另一个查询语句之中的查询语句\n4. 减少外键能实现实体的完整性\n5. 在全文的搜索的函数中，用于指定被搜索的列是match()\n6. 中间连接不属于连接种类\n7. 连接种类有：外连接、内连接、交叉连接\n8. union可以组合多条SQL查询语句，形成组合查询\n9. 分组：grouped by     ？？？\n10. delete语句的使用DELETE FROM Person WHERE LastName = 'Wilson' \n11. 返回当前日期的函数：curdate()\n12. 数据模型：网状模型、层次模型、网络模型\n13. 交叉连接又可以看成笛卡尔连接\n14. 为数据表创建索引的目的是提高查询的检索性能\n15. SQL语言中的视图view是数据库的外模式\n16. 查看数据库中的所有表：show tables\n17. start transaction 表示一个新的事物处理快的开始\n18. 格式化日期的函数：DATE_FORMAT()\n19. SQL语言是非过程化语言\n20. 在正则表达式中匹配任意一个字符的符号是' . '\n21. DML语句就是数据库操作语句。包括update、 delete、select\n22. DDL数据库定义语言。包括create、alter、drop、truncate\n23. declimal是可变精度浮点值\n24. 逻辑运算符优先级：not / and / or\n25. [limit](https://www.yiibai.com/sql/sql-limit.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 索引\n\n### 创建\n\n#### 单索引\n\n``````sql\ncreate  bitmap  index   索引名  on 表名( 变量名 desc );\n\ndesc 表示降序排序。  bitmap 为 位图索引 正常可不加\n``````\n\n#### 组合索引\n\n               ``````sql\n               create index 索引名 on 表名(列名1,列名2);              \n               \n               ``````\n\n### 查看索引\n\n\n\n```sql\nselect * from user_indexes/user_ind_columns ;\n```\n\n\n\n### 删除索引\n\n\n\n```sql\ndrop index 索引名;\n```\n\n## 同义词\n\n### 创建同义词\n\n```sql\ncreate synonym 同义词 for 目标\n```\n\n### 查看同义词\n\n```sql\nselect * from user_synonyms;\nselect * from all_synonyms;\n```\n\n### 删除同义词\n\n```sql\ndrop synonym 同义词;\n```\n\n## 序列\n\n### 创建序列\n\n```sql\ncreate sequence 序列名称\n\nstart with 开始数字\n\nincrement by 增长数字\n\nminvalue 最小值\n\nmaxvalue 最大值\n\ncycle\n\nnocache\n```\n\n**详细说明：**\n\nstart with 开始数字à从几开始\n\nincrement by 增长à步长，每次增长几个数\n\nminvalue 最小值\n\nmaxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大\n\ncycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长\n\nnocache 不设缓存\n\n### 查看序列\n\n```sql\nselect *  from user_SEQUENCES、all_SEQUENCES;\n```\n\n\n\n### 引用序列\n\n   xx.nextval      /  xx.curval \n\n```sql\ninsert into xx表 values (  )  ,\n\ninsert into dept values( DX1_06.nextval,'ss','CN','s',NULL,NULL );\n\n```\n\n\n\n### 修改序列\n\n```sql\n alter sequence student_id -- 序列名 也可以更改\n minvalue 1   \n maxvalue 99999  \n start with 1   \n increment by 1  \n cycle    -- 到99999后，从头开始\n nocache；  \n\n```\n\n## 用户\n\n### 修改密码\n\n```sql\nalter user 用户名 identified by 密码;\n```\n\n### 创建用户\n\n```sql\ncreate  (c##)user username identified by password;    // 创建普通用户 需要添加 c##\n```\n\n\n\n\n\n### 锁定用户\n\n```sql\nALTER USER username ACCOUNT LOCK; 锁定\n\nALTER USER username ACCOUNT UNLOCK; 解锁\n```\n\n\n\n### 删除用户\n\n```sql\ndrop user username ;\n```\n\n\n\n## 新技能学习 如排序等\n\n### 排序\n\n\n\n```sql\n(DENSE_)RANK( ) OVER ([ query_partition_clause ] order_by_clause)\nrank():跳跃式，两个第1，下一个就是第3\ndense_rank():非跳跃式,两个第1,下一个是第2\n```\n\n\n\n```\n分为：（1）连续或不连续：dense_rank,rank\n\n     （2）分区或不分区：使用partition，不使用partition\n```\n\n\n\n# PL/SQL\n\n## .和/ 的差别\n\n**在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。**\n1\n```plsql\n\n在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。\n\n\nset serveroutput on 命令是打开COMMAND命令窗口中的输出流。\n\n不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！\n\n```\n\n\n\n| 分隔符                 | 描述                       |\n| ---------------------- | -------------------------- |\n| `+`,`-`, `*`, `/`      | 加法，减法/负，乘法，除法  |\n| `%`                    | 属性绑定                   |\n| `'`                    | 字符串分隔符               |\n| `.`                    | 组件选择符                 |\n| `(,)`                  | 表达式或列表分隔符         |\n| `:`                    | 主机变量指示符             |\n| `,`                    | 项目分隔符                 |\n| `\"`                    | 引用标识符分隔符           |\n| `=`                    | 关系运算符                 |\n| `@`                    | 远程访问指示符             |\n| `;`                    | 声明或语句终止符           |\n| `:=`                   | 赋值运算符                 |\n| `=>`                   | 关联运算符                 |\n| ΙΙ                     | 连接运算符                 |\n| `**`                   | 指数运算符                 |\n| `<<`, `>>`             | 标签分隔符(开始和结束)     |\n| `/*`, `*/`             | 多行注释分隔符(开始和结束) |\n| `--`                   | 单行注释指示符             |\n| `..`                   | 范围运算符                 |\n| `<`, `>`, `<=`, `>=`   | 关系运算符                 |\n| `<>`, `'=`, `~=`, `^=` | 不同版本的”不等于”运算符   |\n\n## 程序\n\n3、put：将内容写到内存，**等到put_line时一起输出**\n4、put_line：不用多说了，输出字符\n\n\n\n\n\n### 输出 语句\n\n```plsql\ndbms_output.put_line(  );   //  line 为换行\n\ndbms_output.put()  正常输出\n```\n\n\n\n### 创建过程\n\n\n\n```sql\nCREATE [OR REPLACE] PROCEDURE procedure_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \n{IS | AS} \nBEGIN \n  < procedure_body > \nEND procedure_name;\nSQL\n```\n\n\n\n### 执行过程\n\n- 使用EXECUTE关键字\n\n```sql\nEXECUTE 过程名;\n```\n\n\n\n- 从PL/SQL块调用过程的名称\n\n\n\n```sql\nbegin \n 过程名;\nend;\n```\n\n## 函数\n\n\n### 创建函数\n\n```sql\nCREATE [OR REPLACE] FUNCTION function_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \nRETURN return_datatype \n{IS | AS} \nBEGIN \n   < function_body > \nEND [function_name];\nSQL\n```\n\n**其中，**\n\n- **function-name是指定要创建的函数的名称。**\n- **[OR REPLACE]选项指示是否允许修改现有的函数。**\n- **可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。**\n- **函数必须包含一个返回(RETURN)语句。**\n- **RETURN子句指定要从函数返回的数据类型。**\n- **function-body包含可执行部分。**\n- **使用AS关键字代替IS关键字，用来创建独立的函数。**\n\n\n\n### 查询函数\n\n\n\n\n\n\n\n## 游标\n\n# 1 概述\n\n```sql\n1. 游标是什么？\n   用来存储多条查询数据的一种数据结构（'结果集'），\n   它有一个 '指针'，从上往下移动（'fetch'），从而能够 '遍历每条记录'\n   \n2. 优缺点\n   (1) 提高 sql '执行效率'\n   (2) 牺牲 '内存'\n```\n\n\n\n\n\n\n\n### 隐式游标\n\n\n\n\n\n\n\n\n\n### 显示游标\n\n使用显式游标包括以下步骤 -\n\n- 声明游标初始化内存\n- 打开游标分配内存\n- 从游标获取数据\n- 关闭游标以释放分配的内存\n\n\n\n声明游标\n\n声明游标使用名称和相关的SELECT语句来定义游标。 例如 -\n\n```sql\nCURSOR c_customers IS \n   SELECT id, name, address FROM customers;\nSQL\n```\n\n打开游标\n\n打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：\n\n```sql\nOPEN c_customers;\nSQL\n```\n\n获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：\n\n```sql\nFETCH c_customers INTO c_id, c_name, c_addr;\nSQL\n```\n\n关闭游标\n\n关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：\n\n```sql\nCLOSE c_customers;\nSQL\n```\n\n\n\n\n\n## 异常处理\n\n\n\n| 异常                 | Oracle错误代码 | SQLCODE  | 描述                                                         |\n| -------------------- | -------------- | -------- | ------------------------------------------------------------ |\n| `ACCESS_INTO_NULL`   | 06530          | `-6530`  | 当一个空对象被自动分配一个值时会引发它。                     |\n| `CASE_NOT_FOUND`     | 06592          | `-6592`  | 当没有选择`CASE`语句的`WHEN`子句中的任何选项时，会引发这个错误，并且没有`ELSE`子句。 |\n| `COLLECTION_IS_NULL` | 06531          | `-6531`  | 当程序尝试将`EXISTS`以外的集合方法应用于未初始化的嵌套表或`varray`时，或程序尝试将值分配给未初始化的嵌套表或`varray`的元素时，会引发此问题。 |\n| `DUP_VAL_ON_INDEX`   | 00001          | `-1`     | 当尝试将重复值存储在具有唯一索引的列中时引发此错误。         |\n| `INVALID_CURSOR`     | 01001          | `-1001`  | 当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。 |\n| `INVALID_NUMBER`     | 01722          | `-1722`  | 当字符串转换为数字时失败，因为字符串不代表有效的数字。       |\n| `LOGIN_DENIED`       | 01017          | `-1017`  | 当程序尝试使用无效的用户名或密码登录到数据库时引发。         |\n| `NO_DATA_FOUND`      | 01403          | `+100`   | 当`SELECT INTO`语句不返回任何行时会引发它。                  |\n| `NOT_LOGGED_ON`      | 01012          | `-1012`  | 当数据库调用没有连接到数据库时引发。                         |\n| `PROGRAM_ERROR`      | 06501          | `-6501`  | 当PL/SQL遇到内部问题时会引发。                               |\n| `ROWTYPE_MISMATCH`   | 06504          | `-6504`  | 当游标在具有不兼容数据类型的变量中获取值时引发。             |\n| `SELF_IS_NULL`       | 30625          | `-30625` | 当调用成员方法时引发，但对象类型的实例未初始化。             |\n| `STORAGE_ERROR`      | 06500          | `-6500`  | 当PL/SQL用尽内存或内存已损坏时引发。                         |\n| `TOO_MANY_ROWS`      | 01422          | `-1422`  | 当`SELECT INTO`语句返回多行时引发。                          |\n| `VALUE_ERROR`        | 06502          | `-6502`  | 当发生算术，转换，截断或者`sizeconstraint`错误时引发。       |\n| `ZERO_DIVIDE`        | 01476          | `1476`   | 当尝试将数字除以零时引发。                                   |\n\n\n\n\n\n\n\n\n\n## 异常处理的语法\n\n异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN...THEN处理，如下语法所示 -\n\n```sql\nDECLARE \n   <declarations section> \nBEGIN \n   <executable command(s)> \nEXCEPTION \n   <exception handling goes here > \n   WHEN exception1 THEN  \n      exception1-handling-statements  \n   WHEN exception2  THEN  \n      exception2-handling-statements  \n   WHEN exception3 THEN  \n      exception3-handling-statements \n   ........ \n   WHEN others THEN \n      exception3-handling-statements \nEND;\n```\n\n**示例**\n\n```sql\nSET SERVEROUTPUT ON SIZE 99999;\nDECLARE \n   c_id customers.id%type := 100; \n   c_name  customerS.name%type; \n   c_addr customers.address%type; \nBEGIN \n   SELECT  name, address INTO  c_name, c_addr \n   FROM customers \n   WHERE id = c_id;  \n   DBMS_OUTPUT.PUT_LINE ('姓名: '||  c_name); \n   DBMS_OUTPUT.PUT_LINE ('地址: ' || c_addr); \n\nEXCEPTION \n   WHEN no_data_found THEN \n      dbms_output.put_line('没有找到符合条件的客户信息!'); \n   WHEN others THEN \n      dbms_output.put_line('Error!'); \nEND; \n/\n```\n\n\n\n\n\n\n\n## 填充默认值。\n\nNVL( xx  ,  0 )  默认为0      zero\n\n \n\n**语法**\n\n**NVL(eExpression1, eExpression2)**\n\n**参数**\n**eExpression1, eExpression2**\n\n**如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。**\n\n\n\n## 删除 delete\n\n```sql\ndelete from xx  where \n```\n\n## 插入 insert\n\n```sql\ninsert into 表名 values(值1，值2，......);\n\ninsert into 表名(列1，列2，......)values(值1，值2，......);\n\ninsert into 表名2(列1，列2，......)select 值1，值2，...... from 表名1;  （表2必须存在，列1，列2，......必须存在）\n\ninsert into 表2 select * from 表1;\n\nselect 值1，值2，...... into 表名2 from 表名1; （表2不存在，插入时会自动创建表名2）\n```\n\n\n\n# 触发器\n\n## old / new\n\n\n1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png)\n\n2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png)\n\n3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png)\n\n\n\n\n\n## RAISE_APPLICATION_ERROR\n\n可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理\n我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。\n其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)\n","source":"_posts/Oracle期末知识点总结.md","raw":"---\ntitle: Oracle期末知识点总结\ndate: 2021-12-30 18:53:02\ndescription: Oracle知识点总结\ncategories: \"Oracle\" #分类\ntags:   #标签\n    - oracle\n    - 课程学习\n---\n# Oracle知识点总结\n\n\n## [索引](https://www.cnblogs.com/wishyouhappy/p/3681771.html)\n\n### 创建索引\n```plsql\nCREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引\nON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引\n[ASC|DESC],…] | [express])\n[TABLESPACE tablespace_name]\n[PCTFREE n1]                                 --指定索引在数据块中空闲空间\n[STORAGE (INITIAL n2)]\n[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用\n[NOLINE]\n[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用\n```\n\n\n\n```plsql\n为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。\ncreate index DX1_02 on student1(注册日期 desc);\n```\n\n### 删除索引\n\n```plsql\ndrop index index_sno;\n```\n### 查看索引\n\n```plsql\nselect index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name ='tablename';\n\n -- eg:    \ncreate index index_sno on student('name');\nselect * from all_indexes where table_name='student';\n```\n\n\n## [同义词](https://www.cnblogs.com/moonsoft/p/12364941.html)\n\nOracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似\n\n### 创建公共同义词\n```plsql\ncreate public synonym synonym_name for table_name;\n```\n\n### 创建普通的同义词\n```plsql\ncreate  synonym synonym_name for table_name;\n```\n\n### 删除同义词\n```plsql\ndrop synonym synonym_name;\n```\n## [序列](https://www.cnblogs.com/CandiceW/p/10062413.html)\n\n序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。\n\n### 创建序列\n创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：\n```plsql\n　　CREATE SEQUENCE 序列名\n　　[INCREMENT BY n]\n　　[START WITH n]\n　　[{MAXVALUE/ MINVALUE n| NOMAXVALUE}]\n　　[{CYCLE|NOCYCLE}]\n　　[{CACHE n| NOCACHE}];\n```\n#### 其中：\n\n1. > INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。\n\n2. > START WITH 定义序列的初始值(即产生的第一个值)，默认为1。\n\n3. > MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。\n\n4. > MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。\n\n5. > CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。\n\n6. > CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。\n\n7. > NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。\n\n8. > CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。\n\n\n 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。\n```plsql\ncreate sequence DX1_06 increment by 10 start with 50 nocache;\n```\n\n创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。\n```plsql\ncreate sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;\n```\n\n### 修改序列\n **alter**\n\n修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。\n```plsql\nalter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;\n````\n\n### 删除序列\n**drop**\n\n删除序列seq_1。\n```plsql\ndrop sequence seq_1;\n```\n\n### 一些常用函数\n\n#### [查询一张表，而且要按照业务排序](https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html)\n  ```rank() over(partition)```\n\n### [从右边对字符串使用指定的字符进行填充 ](https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html)\n```rpad(string,padded_length,[pad_string]) 　```\n-  string 表示：被填充的字符串 　　\n-  padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　\n- pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　\n\n\n## [存储过程](https://blog.csdn.net/qq_39443053/article/details/104044530)\n\n### 存储过程的定义\n#### 无参数\n```plsql\ncreate or replace procedure 存储过程名\nas\nbegin\n  ----------------------------\nend;\n```\n\n#### 有参数\n```plsql\ncreate or replace procedure myDemo02(name in varchar,age in int)\nas\nbegin\n  dbms_output.put_line('name='||name||', age='||age);\nend;\n```\n\n## 知识点\n1. 主键的创建有三种方法\n2. 视图上不能完成的操作：在视图上定义新的基本表\n3. 在sql中子查询是嵌入到另一个查询语句之中的查询语句\n4. 减少外键能实现实体的完整性\n5. 在全文的搜索的函数中，用于指定被搜索的列是match()\n6. 中间连接不属于连接种类\n7. 连接种类有：外连接、内连接、交叉连接\n8. union可以组合多条SQL查询语句，形成组合查询\n9. 分组：grouped by     ？？？\n10. delete语句的使用DELETE FROM Person WHERE LastName = 'Wilson' \n11. 返回当前日期的函数：curdate()\n12. 数据模型：网状模型、层次模型、网络模型\n13. 交叉连接又可以看成笛卡尔连接\n14. 为数据表创建索引的目的是提高查询的检索性能\n15. SQL语言中的视图view是数据库的外模式\n16. 查看数据库中的所有表：show tables\n17. start transaction 表示一个新的事物处理快的开始\n18. 格式化日期的函数：DATE_FORMAT()\n19. SQL语言是非过程化语言\n20. 在正则表达式中匹配任意一个字符的符号是' . '\n21. DML语句就是数据库操作语句。包括update、 delete、select\n22. DDL数据库定义语言。包括create、alter、drop、truncate\n23. declimal是可变精度浮点值\n24. 逻辑运算符优先级：not / and / or\n25. [limit](https://www.yiibai.com/sql/sql-limit.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 索引\n\n### 创建\n\n#### 单索引\n\n``````sql\ncreate  bitmap  index   索引名  on 表名( 变量名 desc );\n\ndesc 表示降序排序。  bitmap 为 位图索引 正常可不加\n``````\n\n#### 组合索引\n\n               ``````sql\n               create index 索引名 on 表名(列名1,列名2);              \n               \n               ``````\n\n### 查看索引\n\n\n\n```sql\nselect * from user_indexes/user_ind_columns ;\n```\n\n\n\n### 删除索引\n\n\n\n```sql\ndrop index 索引名;\n```\n\n## 同义词\n\n### 创建同义词\n\n```sql\ncreate synonym 同义词 for 目标\n```\n\n### 查看同义词\n\n```sql\nselect * from user_synonyms;\nselect * from all_synonyms;\n```\n\n### 删除同义词\n\n```sql\ndrop synonym 同义词;\n```\n\n## 序列\n\n### 创建序列\n\n```sql\ncreate sequence 序列名称\n\nstart with 开始数字\n\nincrement by 增长数字\n\nminvalue 最小值\n\nmaxvalue 最大值\n\ncycle\n\nnocache\n```\n\n**详细说明：**\n\nstart with 开始数字à从几开始\n\nincrement by 增长à步长，每次增长几个数\n\nminvalue 最小值\n\nmaxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大\n\ncycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长\n\nnocache 不设缓存\n\n### 查看序列\n\n```sql\nselect *  from user_SEQUENCES、all_SEQUENCES;\n```\n\n\n\n### 引用序列\n\n   xx.nextval      /  xx.curval \n\n```sql\ninsert into xx表 values (  )  ,\n\ninsert into dept values( DX1_06.nextval,'ss','CN','s',NULL,NULL );\n\n```\n\n\n\n### 修改序列\n\n```sql\n alter sequence student_id -- 序列名 也可以更改\n minvalue 1   \n maxvalue 99999  \n start with 1   \n increment by 1  \n cycle    -- 到99999后，从头开始\n nocache；  \n\n```\n\n## 用户\n\n### 修改密码\n\n```sql\nalter user 用户名 identified by 密码;\n```\n\n### 创建用户\n\n```sql\ncreate  (c##)user username identified by password;    // 创建普通用户 需要添加 c##\n```\n\n\n\n\n\n### 锁定用户\n\n```sql\nALTER USER username ACCOUNT LOCK; 锁定\n\nALTER USER username ACCOUNT UNLOCK; 解锁\n```\n\n\n\n### 删除用户\n\n```sql\ndrop user username ;\n```\n\n\n\n## 新技能学习 如排序等\n\n### 排序\n\n\n\n```sql\n(DENSE_)RANK( ) OVER ([ query_partition_clause ] order_by_clause)\nrank():跳跃式，两个第1，下一个就是第3\ndense_rank():非跳跃式,两个第1,下一个是第2\n```\n\n\n\n```\n分为：（1）连续或不连续：dense_rank,rank\n\n     （2）分区或不分区：使用partition，不使用partition\n```\n\n\n\n# PL/SQL\n\n## .和/ 的差别\n\n**在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。**\n1\n```plsql\n\n在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。\n\n\nset serveroutput on 命令是打开COMMAND命令窗口中的输出流。\n\n不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！\n\n```\n\n\n\n| 分隔符                 | 描述                       |\n| ---------------------- | -------------------------- |\n| `+`,`-`, `*`, `/`      | 加法，减法/负，乘法，除法  |\n| `%`                    | 属性绑定                   |\n| `'`                    | 字符串分隔符               |\n| `.`                    | 组件选择符                 |\n| `(,)`                  | 表达式或列表分隔符         |\n| `:`                    | 主机变量指示符             |\n| `,`                    | 项目分隔符                 |\n| `\"`                    | 引用标识符分隔符           |\n| `=`                    | 关系运算符                 |\n| `@`                    | 远程访问指示符             |\n| `;`                    | 声明或语句终止符           |\n| `:=`                   | 赋值运算符                 |\n| `=>`                   | 关联运算符                 |\n| ΙΙ                     | 连接运算符                 |\n| `**`                   | 指数运算符                 |\n| `<<`, `>>`             | 标签分隔符(开始和结束)     |\n| `/*`, `*/`             | 多行注释分隔符(开始和结束) |\n| `--`                   | 单行注释指示符             |\n| `..`                   | 范围运算符                 |\n| `<`, `>`, `<=`, `>=`   | 关系运算符                 |\n| `<>`, `'=`, `~=`, `^=` | 不同版本的”不等于”运算符   |\n\n## 程序\n\n3、put：将内容写到内存，**等到put_line时一起输出**\n4、put_line：不用多说了，输出字符\n\n\n\n\n\n### 输出 语句\n\n```plsql\ndbms_output.put_line(  );   //  line 为换行\n\ndbms_output.put()  正常输出\n```\n\n\n\n### 创建过程\n\n\n\n```sql\nCREATE [OR REPLACE] PROCEDURE procedure_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \n{IS | AS} \nBEGIN \n  < procedure_body > \nEND procedure_name;\nSQL\n```\n\n\n\n### 执行过程\n\n- 使用EXECUTE关键字\n\n```sql\nEXECUTE 过程名;\n```\n\n\n\n- 从PL/SQL块调用过程的名称\n\n\n\n```sql\nbegin \n 过程名;\nend;\n```\n\n## 函数\n\n\n### 创建函数\n\n```sql\nCREATE [OR REPLACE] FUNCTION function_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \nRETURN return_datatype \n{IS | AS} \nBEGIN \n   < function_body > \nEND [function_name];\nSQL\n```\n\n**其中，**\n\n- **function-name是指定要创建的函数的名称。**\n- **[OR REPLACE]选项指示是否允许修改现有的函数。**\n- **可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。**\n- **函数必须包含一个返回(RETURN)语句。**\n- **RETURN子句指定要从函数返回的数据类型。**\n- **function-body包含可执行部分。**\n- **使用AS关键字代替IS关键字，用来创建独立的函数。**\n\n\n\n### 查询函数\n\n\n\n\n\n\n\n## 游标\n\n# 1 概述\n\n```sql\n1. 游标是什么？\n   用来存储多条查询数据的一种数据结构（'结果集'），\n   它有一个 '指针'，从上往下移动（'fetch'），从而能够 '遍历每条记录'\n   \n2. 优缺点\n   (1) 提高 sql '执行效率'\n   (2) 牺牲 '内存'\n```\n\n\n\n\n\n\n\n### 隐式游标\n\n\n\n\n\n\n\n\n\n### 显示游标\n\n使用显式游标包括以下步骤 -\n\n- 声明游标初始化内存\n- 打开游标分配内存\n- 从游标获取数据\n- 关闭游标以释放分配的内存\n\n\n\n声明游标\n\n声明游标使用名称和相关的SELECT语句来定义游标。 例如 -\n\n```sql\nCURSOR c_customers IS \n   SELECT id, name, address FROM customers;\nSQL\n```\n\n打开游标\n\n打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：\n\n```sql\nOPEN c_customers;\nSQL\n```\n\n获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：\n\n```sql\nFETCH c_customers INTO c_id, c_name, c_addr;\nSQL\n```\n\n关闭游标\n\n关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：\n\n```sql\nCLOSE c_customers;\nSQL\n```\n\n\n\n\n\n## 异常处理\n\n\n\n| 异常                 | Oracle错误代码 | SQLCODE  | 描述                                                         |\n| -------------------- | -------------- | -------- | ------------------------------------------------------------ |\n| `ACCESS_INTO_NULL`   | 06530          | `-6530`  | 当一个空对象被自动分配一个值时会引发它。                     |\n| `CASE_NOT_FOUND`     | 06592          | `-6592`  | 当没有选择`CASE`语句的`WHEN`子句中的任何选项时，会引发这个错误，并且没有`ELSE`子句。 |\n| `COLLECTION_IS_NULL` | 06531          | `-6531`  | 当程序尝试将`EXISTS`以外的集合方法应用于未初始化的嵌套表或`varray`时，或程序尝试将值分配给未初始化的嵌套表或`varray`的元素时，会引发此问题。 |\n| `DUP_VAL_ON_INDEX`   | 00001          | `-1`     | 当尝试将重复值存储在具有唯一索引的列中时引发此错误。         |\n| `INVALID_CURSOR`     | 01001          | `-1001`  | 当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。 |\n| `INVALID_NUMBER`     | 01722          | `-1722`  | 当字符串转换为数字时失败，因为字符串不代表有效的数字。       |\n| `LOGIN_DENIED`       | 01017          | `-1017`  | 当程序尝试使用无效的用户名或密码登录到数据库时引发。         |\n| `NO_DATA_FOUND`      | 01403          | `+100`   | 当`SELECT INTO`语句不返回任何行时会引发它。                  |\n| `NOT_LOGGED_ON`      | 01012          | `-1012`  | 当数据库调用没有连接到数据库时引发。                         |\n| `PROGRAM_ERROR`      | 06501          | `-6501`  | 当PL/SQL遇到内部问题时会引发。                               |\n| `ROWTYPE_MISMATCH`   | 06504          | `-6504`  | 当游标在具有不兼容数据类型的变量中获取值时引发。             |\n| `SELF_IS_NULL`       | 30625          | `-30625` | 当调用成员方法时引发，但对象类型的实例未初始化。             |\n| `STORAGE_ERROR`      | 06500          | `-6500`  | 当PL/SQL用尽内存或内存已损坏时引发。                         |\n| `TOO_MANY_ROWS`      | 01422          | `-1422`  | 当`SELECT INTO`语句返回多行时引发。                          |\n| `VALUE_ERROR`        | 06502          | `-6502`  | 当发生算术，转换，截断或者`sizeconstraint`错误时引发。       |\n| `ZERO_DIVIDE`        | 01476          | `1476`   | 当尝试将数字除以零时引发。                                   |\n\n\n\n\n\n\n\n\n\n## 异常处理的语法\n\n异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN...THEN处理，如下语法所示 -\n\n```sql\nDECLARE \n   <declarations section> \nBEGIN \n   <executable command(s)> \nEXCEPTION \n   <exception handling goes here > \n   WHEN exception1 THEN  \n      exception1-handling-statements  \n   WHEN exception2  THEN  \n      exception2-handling-statements  \n   WHEN exception3 THEN  \n      exception3-handling-statements \n   ........ \n   WHEN others THEN \n      exception3-handling-statements \nEND;\n```\n\n**示例**\n\n```sql\nSET SERVEROUTPUT ON SIZE 99999;\nDECLARE \n   c_id customers.id%type := 100; \n   c_name  customerS.name%type; \n   c_addr customers.address%type; \nBEGIN \n   SELECT  name, address INTO  c_name, c_addr \n   FROM customers \n   WHERE id = c_id;  \n   DBMS_OUTPUT.PUT_LINE ('姓名: '||  c_name); \n   DBMS_OUTPUT.PUT_LINE ('地址: ' || c_addr); \n\nEXCEPTION \n   WHEN no_data_found THEN \n      dbms_output.put_line('没有找到符合条件的客户信息!'); \n   WHEN others THEN \n      dbms_output.put_line('Error!'); \nEND; \n/\n```\n\n\n\n\n\n\n\n## 填充默认值。\n\nNVL( xx  ,  0 )  默认为0      zero\n\n \n\n**语法**\n\n**NVL(eExpression1, eExpression2)**\n\n**参数**\n**eExpression1, eExpression2**\n\n**如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。**\n\n\n\n## 删除 delete\n\n```sql\ndelete from xx  where \n```\n\n## 插入 insert\n\n```sql\ninsert into 表名 values(值1，值2，......);\n\ninsert into 表名(列1，列2，......)values(值1，值2，......);\n\ninsert into 表名2(列1，列2，......)select 值1，值2，...... from 表名1;  （表2必须存在，列1，列2，......必须存在）\n\ninsert into 表2 select * from 表1;\n\nselect 值1，值2，...... into 表名2 from 表名1; （表2不存在，插入时会自动创建表名2）\n```\n\n\n\n# 触发器\n\n## old / new\n\n\n1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png)\n\n2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png)\n\n3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：\n\n![img](https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png)\n\n\n\n\n\n## RAISE_APPLICATION_ERROR\n\n可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理\n我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。\n其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)\n","slug":"Oracle期末知识点总结","published":1,"updated":"2021-12-30T15:06:01.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxt3o5je003pisaxhgwlhx2s","content":"<h1 id=\"Oracle知识点总结\"><a href=\"#Oracle知识点总结\" class=\"headerlink\" title=\"Oracle知识点总结\"></a>Oracle知识点总结</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a><a href=\"https://www.cnblogs.com/wishyouhappy/p/3681771.html\">索引</a></h2><h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引</span><br><span class=\"line\">ON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引</span><br><span class=\"line\">[ASC|DESC],…] | [express])</span><br><span class=\"line\">[TABLESPACE tablespace_name]</span><br><span class=\"line\">[PCTFREE n1]                                 --指定索引在数据块中空闲空间</span><br><span class=\"line\">[STORAGE (INITIAL n2)]</span><br><span class=\"line\">[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用</span><br><span class=\"line\">[NOLINE]</span><br><span class=\"line\">[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。</span><br><span class=\"line\">create index DX1_02 on student1(注册日期 desc);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop index index_sno;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name =&#x27;tablename&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"> -- eg:    </span><br><span class=\"line\">create index index_sno on student(&#x27;name&#x27;);</span><br><span class=\"line\">select * from all_indexes where table_name=&#x27;student&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"同义词\"><a href=\"#同义词\" class=\"headerlink\" title=\"同义词\"></a><a href=\"https://www.cnblogs.com/moonsoft/p/12364941.html\">同义词</a></h2><p>Oracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似</p>\n<h3 id=\"创建公共同义词\"><a href=\"#创建公共同义词\" class=\"headerlink\" title=\"创建公共同义词\"></a>创建公共同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create public synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建普通的同义词\"><a href=\"#创建普通的同义词\" class=\"headerlink\" title=\"创建普通的同义词\"></a>创建普通的同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词\"><a href=\"#删除同义词\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop synonym synonym_name;</span><br></pre></td></tr></table></figure>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a><a href=\"https://www.cnblogs.com/CandiceW/p/10062413.html\">序列</a></h2><p>序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。</p>\n<h3 id=\"创建序列\"><a href=\"#创建序列\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><p>创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　CREATE SEQUENCE 序列名</span><br><span class=\"line\">　　[INCREMENT BY n]</span><br><span class=\"line\">　　[START WITH n]</span><br><span class=\"line\">　　[&#123;MAXVALUE/ MINVALUE n| NOMAXVALUE&#125;]</span><br><span class=\"line\">　　[&#123;CYCLE|NOCYCLE&#125;]</span><br><span class=\"line\">　　[&#123;CACHE n| NOCACHE&#125;];</span><br></pre></td></tr></table></figure>\n<h4 id=\"其中：\"><a href=\"#其中：\" class=\"headerlink\" title=\"其中：\"></a>其中：</h4><ol>\n<li><blockquote>\n<p>INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>START WITH 定义序列的初始值(即产生的第一个值)，默认为1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。</p>\n</blockquote>\n</li>\n</ol>\n<p> 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence DX1_06 increment by 10 start with 50 nocache;</span><br></pre></td></tr></table></figure>\n\n<p>创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改序列\"><a href=\"#修改序列\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><p> <strong>alter</strong></p>\n<p>修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">### 删除序列</span><br><span class=\"line\">**drop**</span><br><span class=\"line\"></span><br><span class=\"line\">删除序列seq_1。</span><br><span class=\"line\">```plsql</span><br><span class=\"line\">drop sequence seq_1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些常用函数\"><a href=\"#一些常用函数\" class=\"headerlink\" title=\"一些常用函数\"></a>一些常用函数</h3><h4 id=\"查询一张表，而且要按照业务排序\"><a href=\"#查询一张表，而且要按照业务排序\" class=\"headerlink\" title=\"查询一张表，而且要按照业务排序\"></a><a href=\"https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html\">查询一张表，而且要按照业务排序</a></h4><p>  <code>rank() over(partition)</code></p>\n<h3 id=\"从右边对字符串使用指定的字符进行填充\"><a href=\"#从右边对字符串使用指定的字符进行填充\" class=\"headerlink\" title=\"从右边对字符串使用指定的字符进行填充 \"></a><a href=\"https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html\">从右边对字符串使用指定的字符进行填充 </a></h3><p><code>rpad(string,padded_length,[pad_string]) 　</code></p>\n<ul>\n<li> string 表示：被填充的字符串 　　</li>\n<li> padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　</li>\n<li>pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　</li>\n</ul>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a><a href=\"https://blog.csdn.net/qq_39443053/article/details/104044530\">存储过程</a></h2><h3 id=\"存储过程的定义\"><a href=\"#存储过程的定义\" class=\"headerlink\" title=\"存储过程的定义\"></a>存储过程的定义</h3><h4 id=\"无参数\"><a href=\"#无参数\" class=\"headerlink\" title=\"无参数\"></a>无参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure 存储过程名</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  ----------------------------</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有参数\"><a href=\"#有参数\" class=\"headerlink\" title=\"有参数\"></a>有参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure myDemo02(name in varchar,age in int)</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  dbms_output.put_line(&#x27;name=&#x27;||name||&#x27;, age=&#x27;||age);</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li>主键的创建有三种方法</li>\n<li>视图上不能完成的操作：在视图上定义新的基本表</li>\n<li>在sql中子查询是嵌入到另一个查询语句之中的查询语句</li>\n<li>减少外键能实现实体的完整性</li>\n<li>在全文的搜索的函数中，用于指定被搜索的列是match()</li>\n<li>中间连接不属于连接种类</li>\n<li>连接种类有：外连接、内连接、交叉连接</li>\n<li>union可以组合多条SQL查询语句，形成组合查询</li>\n<li>分组：grouped by     ？？？</li>\n<li>delete语句的使用DELETE FROM Person WHERE LastName = ‘Wilson’ </li>\n<li>返回当前日期的函数：curdate()</li>\n<li>数据模型：网状模型、层次模型、网络模型</li>\n<li>交叉连接又可以看成笛卡尔连接</li>\n<li>为数据表创建索引的目的是提高查询的检索性能</li>\n<li>SQL语言中的视图view是数据库的外模式</li>\n<li>查看数据库中的所有表：show tables</li>\n<li>start transaction 表示一个新的事物处理快的开始</li>\n<li>格式化日期的函数：DATE_FORMAT()</li>\n<li>SQL语言是非过程化语言</li>\n<li>在正则表达式中匹配任意一个字符的符号是’ . ‘</li>\n<li>DML语句就是数据库操作语句。包括update、 delete、select</li>\n<li>DDL数据库定义语言。包括create、alter、drop、truncate</li>\n<li>declimal是可变精度浮点值</li>\n<li>逻辑运算符优先级：not / and / or</li>\n<li><a href=\"https://www.yiibai.com/sql/sql-limit.html\">limit</a></li>\n</ol>\n<h2 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"单索引\"><a href=\"#单索引\" class=\"headerlink\" title=\"单索引\"></a>单索引</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  bitmap  index   索引名  <span class=\"keyword\">on</span> 表名( 变量名 <span class=\"keyword\">desc</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">desc</span> 表示降序排序。  bitmap 为 位图索引 正常可不加</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合索引\"><a href=\"#组合索引\" class=\"headerlink\" title=\"组合索引\"></a>组合索引</h4><pre><code>           <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> index 索引名 <span class=\"keyword\">on</span> 表名(列名<span class=\"number\">1</span>,列名<span class=\"number\">2</span>);              </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"查看索引-1\"><a href=\"#查看索引-1\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_indexes<span class=\"operator\">/</span>user_ind_columns ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除索引-1\"><a href=\"#删除索引-1\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index 索引名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同义词-1\"><a href=\"#同义词-1\" class=\"headerlink\" title=\"同义词\"></a>同义词</h2><h3 id=\"创建同义词\"><a href=\"#创建同义词\" class=\"headerlink\" title=\"创建同义词\"></a>创建同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> synonym 同义词 <span class=\"keyword\">for</span> 目标</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看同义词\"><a href=\"#查看同义词\" class=\"headerlink\" title=\"查看同义词\"></a>查看同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_synonyms;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_synonyms;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词-1\"><a href=\"#删除同义词-1\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> synonym 同义词;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列-1\"><a href=\"#序列-1\" class=\"headerlink\" title=\"序列\"></a>序列</h2><h3 id=\"创建序列-1\"><a href=\"#创建序列-1\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> sequence 序列名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> 开始数字</span><br><span class=\"line\"></span><br><span class=\"line\">increment <span class=\"keyword\">by</span> 增长数字</span><br><span class=\"line\"></span><br><span class=\"line\">minvalue 最小值</span><br><span class=\"line\"></span><br><span class=\"line\">maxvalue 最大值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">nocache</span><br></pre></td></tr></table></figure>\n\n<p><strong>详细说明：</strong></p>\n<p>start with 开始数字à从几开始</p>\n<p>increment by 增长à步长，每次增长几个数</p>\n<p>minvalue 最小值</p>\n<p>maxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大</p>\n<p>cycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长</p>\n<p>nocache 不设缓存</p>\n<h3 id=\"查看序列\"><a href=\"#查看序列\" class=\"headerlink\" title=\"查看序列\"></a>查看序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span>  <span class=\"keyword\">from</span> user_SEQUENCES、all_SEQUENCES;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"引用序列\"><a href=\"#引用序列\" class=\"headerlink\" title=\"引用序列\"></a>引用序列</h3><p>   xx.nextval      /  xx.curval </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> xx表 <span class=\"keyword\">values</span> (  )  ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>( DX1_06.nextval,<span class=\"string\">&#x27;ss&#x27;</span>,<span class=\"string\">&#x27;CN&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>,<span class=\"keyword\">NULL</span>,<span class=\"keyword\">NULL</span> );</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改序列-1\"><a href=\"#修改序列-1\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> sequence student_id <span class=\"comment\">-- 序列名 也可以更改</span></span><br><span class=\"line\">minvalue <span class=\"number\">1</span>   </span><br><span class=\"line\">maxvalue <span class=\"number\">99999</span>  </span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> <span class=\"number\">1</span>   </span><br><span class=\"line\">increment <span class=\"keyword\">by</span> <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"keyword\">cycle</span>    <span class=\"comment\">-- 到99999后，从头开始</span></span><br><span class=\"line\">nocache；  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> 用户名 identified <span class=\"keyword\">by</span> 密码;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  (c##)<span class=\"keyword\">user</span> username identified <span class=\"keyword\">by</span> password;    <span class=\"operator\">/</span><span class=\"operator\">/</span> 创建普通用户 需要添加 c##</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"锁定用户\"><a href=\"#锁定用户\" class=\"headerlink\" title=\"锁定用户\"></a>锁定用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT LOCK; 锁定</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT UNLOCK; 解锁</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> username ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新技能学习-如排序等\"><a href=\"#新技能学习-如排序等\" class=\"headerlink\" title=\"新技能学习 如排序等\"></a>新技能学习 如排序等</h2><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(DENSE_)<span class=\"built_in\">RANK</span>( ) <span class=\"keyword\">OVER</span> ([ query_partition_clause ] order_by_clause)</span><br><span class=\"line\"><span class=\"built_in\">rank</span>():跳跃式，两个第<span class=\"number\">1</span>，下一个就是第<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">dense_rank</span>():非跳跃式,两个第<span class=\"number\">1</span>,下一个是第<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分为：（1）连续或不连续：dense_rank,rank</span><br><span class=\"line\"></span><br><span class=\"line\">     （2）分区或不分区：使用partition，不使用partition</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PL-SQL\"><a href=\"#PL-SQL\" class=\"headerlink\" title=\"PL/SQL\"></a>PL/SQL</h1><h2 id=\"和-的差别\"><a href=\"#和-的差别\" class=\"headerlink\" title=\".和/ 的差别\"></a>.和/ 的差别</h2><p><strong>在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</strong><br>1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set serveroutput on 命令是打开COMMAND命令窗口中的输出流。</span><br><span class=\"line\"></span><br><span class=\"line\">不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>分隔符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>+</code>,<code>-</code>, <code>*</code>, <code>/</code></td>\n<td>加法，减法/负，乘法，除法</td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td>属性绑定</td>\n</tr>\n<tr>\n<td><code>&#39;</code></td>\n<td>字符串分隔符</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>组件选择符</td>\n</tr>\n<tr>\n<td><code>(,)</code></td>\n<td>表达式或列表分隔符</td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td>主机变量指示符</td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td>项目分隔符</td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td>引用标识符分隔符</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>@</code></td>\n<td>远程访问指示符</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td>声明或语句终止符</td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td>赋值运算符</td>\n</tr>\n<tr>\n<td><code>=&gt;</code></td>\n<td>关联运算符</td>\n</tr>\n<tr>\n<td>ΙΙ</td>\n<td>连接运算符</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>\n<td>标签分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>/*</code>, <code>*/</code></td>\n<td>多行注释分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td>单行注释指示符</td>\n</tr>\n<tr>\n<td><code>..</code></td>\n<td>范围运算符</td>\n</tr>\n<tr>\n<td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code>, <code>&#39;=</code>, <code>~=</code>, <code>^=</code></td>\n<td>不同版本的”不等于”运算符</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>3、put：将内容写到内存，<strong>等到put_line时一起输出</strong><br>4、put_line：不用多说了，输出字符</p>\n<h3 id=\"输出-语句\"><a href=\"#输出-语句\" class=\"headerlink\" title=\"输出 语句\"></a>输出 语句</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbms_output.put_line(  );   //  line 为换行</span><br><span class=\"line\"></span><br><span class=\"line\">dbms_output.put()  正常输出</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建过程\"><a href=\"#创建过程\" class=\"headerlink\" title=\"创建过程\"></a>创建过程</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">PROCEDURE</span> procedure_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">  <span class=\"operator\">&lt;</span> procedure_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> procedure_name;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ul>\n<li>使用EXECUTE关键字</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> 过程名;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>从PL/SQL块调用过程的名称</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"> 过程名;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">FUNCTION</span> function_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> return_datatype </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span> function_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> [function_name];</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>其中，</strong></p>\n<ul>\n<li><strong>function-name是指定要创建的函数的名称。</strong></li>\n<li><strong>[OR REPLACE]选项指示是否允许修改现有的函数。</strong></li>\n<li><strong>可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。</strong></li>\n<li><strong>函数必须包含一个返回(RETURN)语句。</strong></li>\n<li><strong>RETURN子句指定要从函数返回的数据类型。</strong></li>\n<li><strong>function-body包含可执行部分。</strong></li>\n<li><strong>使用AS关键字代替IS关键字，用来创建独立的函数。</strong></li>\n</ul>\n<h3 id=\"查询函数\"><a href=\"#查询函数\" class=\"headerlink\" title=\"查询函数\"></a>查询函数</h3><h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 游标是什么？</span><br><span class=\"line\">   用来存储多条查询数据的一种数据结构（<span class=\"string\">&#x27;结果集&#x27;</span>），</span><br><span class=\"line\">   它有一个 <span class=\"string\">&#x27;指针&#x27;</span>，从上往下移动（<span class=\"string\">&#x27;fetch&#x27;</span>），从而能够 <span class=\"string\">&#x27;遍历每条记录&#x27;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"number\">2.</span> 优缺点</span><br><span class=\"line\">   (<span class=\"number\">1</span>) 提高 <span class=\"keyword\">sql</span> <span class=\"string\">&#x27;执行效率&#x27;</span></span><br><span class=\"line\">   (<span class=\"number\">2</span>) 牺牲 <span class=\"string\">&#x27;内存&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"隐式游标\"><a href=\"#隐式游标\" class=\"headerlink\" title=\"隐式游标\"></a>隐式游标</h3><h3 id=\"显示游标\"><a href=\"#显示游标\" class=\"headerlink\" title=\"显示游标\"></a>显示游标</h3><p>使用显式游标包括以下步骤 -</p>\n<ul>\n<li>声明游标初始化内存</li>\n<li>打开游标分配内存</li>\n<li>从游标获取数据</li>\n<li>关闭游标以释放分配的内存</li>\n</ul>\n<p>声明游标</p>\n<p>声明游标使用名称和相关的SELECT语句来定义游标。 例如 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CURSOR</span> c_customers <span class=\"keyword\">IS</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span> id, name, address <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>打开游标</p>\n<p>打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">OPEN</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FETCH</span> c_customers <span class=\"keyword\">INTO</span> c_id, c_name, c_addr;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭游标</p>\n<p>关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CLOSE</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>Oracle错误代码</th>\n<th>SQLCODE</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ACCESS_INTO_NULL</code></td>\n<td>06530</td>\n<td><code>-6530</code></td>\n<td>当一个空对象被自动分配一个值时会引发它。</td>\n</tr>\n<tr>\n<td><code>CASE_NOT_FOUND</code></td>\n<td>06592</td>\n<td><code>-6592</code></td>\n<td>当没有选择<code>CASE</code>语句的<code>WHEN</code>子句中的任何选项时，会引发这个错误，并且没有<code>ELSE</code>子句。</td>\n</tr>\n<tr>\n<td><code>COLLECTION_IS_NULL</code></td>\n<td>06531</td>\n<td><code>-6531</code></td>\n<td>当程序尝试将<code>EXISTS</code>以外的集合方法应用于未初始化的嵌套表或<code>varray</code>时，或程序尝试将值分配给未初始化的嵌套表或<code>varray</code>的元素时，会引发此问题。</td>\n</tr>\n<tr>\n<td><code>DUP_VAL_ON_INDEX</code></td>\n<td>00001</td>\n<td><code>-1</code></td>\n<td>当尝试将重复值存储在具有唯一索引的列中时引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_CURSOR</code></td>\n<td>01001</td>\n<td><code>-1001</code></td>\n<td>当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_NUMBER</code></td>\n<td>01722</td>\n<td><code>-1722</code></td>\n<td>当字符串转换为数字时失败，因为字符串不代表有效的数字。</td>\n</tr>\n<tr>\n<td><code>LOGIN_DENIED</code></td>\n<td>01017</td>\n<td><code>-1017</code></td>\n<td>当程序尝试使用无效的用户名或密码登录到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>NO_DATA_FOUND</code></td>\n<td>01403</td>\n<td><code>+100</code></td>\n<td>当<code>SELECT INTO</code>语句不返回任何行时会引发它。</td>\n</tr>\n<tr>\n<td><code>NOT_LOGGED_ON</code></td>\n<td>01012</td>\n<td><code>-1012</code></td>\n<td>当数据库调用没有连接到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>PROGRAM_ERROR</code></td>\n<td>06501</td>\n<td><code>-6501</code></td>\n<td>当PL/SQL遇到内部问题时会引发。</td>\n</tr>\n<tr>\n<td><code>ROWTYPE_MISMATCH</code></td>\n<td>06504</td>\n<td><code>-6504</code></td>\n<td>当游标在具有不兼容数据类型的变量中获取值时引发。</td>\n</tr>\n<tr>\n<td><code>SELF_IS_NULL</code></td>\n<td>30625</td>\n<td><code>-30625</code></td>\n<td>当调用成员方法时引发，但对象类型的实例未初始化。</td>\n</tr>\n<tr>\n<td><code>STORAGE_ERROR</code></td>\n<td>06500</td>\n<td><code>-6500</code></td>\n<td>当PL/SQL用尽内存或内存已损坏时引发。</td>\n</tr>\n<tr>\n<td><code>TOO_MANY_ROWS</code></td>\n<td>01422</td>\n<td><code>-1422</code></td>\n<td>当<code>SELECT INTO</code>语句返回多行时引发。</td>\n</tr>\n<tr>\n<td><code>VALUE_ERROR</code></td>\n<td>06502</td>\n<td><code>-6502</code></td>\n<td>当发生算术，转换，截断或者<code>sizeconstraint</code>错误时引发。</td>\n</tr>\n<tr>\n<td><code>ZERO_DIVIDE</code></td>\n<td>01476</td>\n<td><code>1476</code></td>\n<td>当尝试将数字除以零时引发。</td>\n</tr>\n</tbody></table>\n<h2 id=\"异常处理的语法\"><a href=\"#异常处理的语法\" class=\"headerlink\" title=\"异常处理的语法\"></a>异常处理的语法</h2><p>异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN…THEN处理，如下语法所示 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>declarations section<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>executable command(s)<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>exception handling goes here <span class=\"operator\">&gt;</span> </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception1 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception1<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception2  <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception2<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception3 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\">   ........ </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> SIZE <span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   c_id customers.id<span class=\"operator\">%</span>type :<span class=\"operator\">=</span> <span class=\"number\">100</span>; </span><br><span class=\"line\">   c_name  customerS.name<span class=\"operator\">%</span>type; </span><br><span class=\"line\">   c_addr customers.address<span class=\"operator\">%</span>type; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span>  name, address <span class=\"keyword\">INTO</span>  c_name, c_addr </span><br><span class=\"line\">   <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\">   <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> c_id;  </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;姓名: &#x27;</span><span class=\"operator\">||</span>  c_name); </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;地址: &#x27;</span> <span class=\"operator\">||</span> c_addr); </span><br><span class=\"line\"></span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> no_data_found <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;没有找到符合条件的客户信息!&#x27;</span>); </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;Error!&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">END</span>; </span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"填充默认值。\"><a href=\"#填充默认值。\" class=\"headerlink\" title=\"填充默认值。\"></a>填充默认值。</h2><p>NVL( xx  ,  0 )  默认为0      zero</p>\n<p><strong>语法</strong></p>\n<p><strong>NVL(eExpression1, eExpression2)</strong></p>\n<p><strong>参数</strong><br><strong>eExpression1, eExpression2</strong></p>\n<p><strong>如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。</strong></p>\n<h2 id=\"删除-delete\"><a href=\"#删除-delete\" class=\"headerlink\" title=\"删除 delete\"></a>删除 delete</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> xx  <span class=\"keyword\">where</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入-insert\"><a href=\"#插入-insert\" class=\"headerlink\" title=\"插入 insert\"></a>插入 insert</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 <span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span>(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>;  （表<span class=\"number\">2</span>必须存在，列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......必须存在）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表<span class=\"number\">2</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>; （表<span class=\"number\">2</span>不存在，插入时会自动创建表名<span class=\"number\">2</span>）</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><h2 id=\"old-new\"><a href=\"#old-new\" class=\"headerlink\" title=\"old / new\"></a>old / new</h2><p>1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png\" alt=\"img\"></p>\n<p>2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png\" alt=\"img\"></p>\n<p>3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png\" alt=\"img\"></p>\n<h2 id=\"RAISE-APPLICATION-ERROR\"><a href=\"#RAISE-APPLICATION-ERROR\" class=\"headerlink\" title=\"RAISE_APPLICATION_ERROR\"></a>RAISE_APPLICATION_ERROR</h2><p>可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理<br>我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。<br>其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)</p>\n","site":{"data":{}},"length":8729,"excerpt":"","more":"<h1 id=\"Oracle知识点总结\"><a href=\"#Oracle知识点总结\" class=\"headerlink\" title=\"Oracle知识点总结\"></a>Oracle知识点总结</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a><a href=\"https://www.cnblogs.com/wishyouhappy/p/3681771.html\">索引</a></h2><h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE [UNIQUE] | [BITMAP] INDEX index_name  --unique表示唯一索引</span><br><span class=\"line\">ON table_name([column1 [ASC|DESC],column2    --bitmap，创建位图索引</span><br><span class=\"line\">[ASC|DESC],…] | [express])</span><br><span class=\"line\">[TABLESPACE tablespace_name]</span><br><span class=\"line\">[PCTFREE n1]                                 --指定索引在数据块中空闲空间</span><br><span class=\"line\">[STORAGE (INITIAL n2)]</span><br><span class=\"line\">[NOLOGGING]                                  --表示创建和重建索引时允许对表做DML操作，默认情况下不应该使用</span><br><span class=\"line\">[NOLINE]</span><br><span class=\"line\">[NOSORT];                                    --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为student1表的“注册日期”创建索引，并以降序排列，索引名为“DX1_02”。</span><br><span class=\"line\">create index DX1_02 on student1(注册日期 desc);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop index index_sno;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select index_name,index-type, tablespace_name, uniqueness from all_indexes where table_name =&#x27;tablename&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"> -- eg:    </span><br><span class=\"line\">create index index_sno on student(&#x27;name&#x27;);</span><br><span class=\"line\">select * from all_indexes where table_name=&#x27;student&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"同义词\"><a href=\"#同义词\" class=\"headerlink\" title=\"同义词\"></a><a href=\"https://www.cnblogs.com/moonsoft/p/12364941.html\">同义词</a></h2><p>Oracle的同义词（synonyms）从字面上理解就是别名的意思，和视图的功能类似</p>\n<h3 id=\"创建公共同义词\"><a href=\"#创建公共同义词\" class=\"headerlink\" title=\"创建公共同义词\"></a>创建公共同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create public synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建普通的同义词\"><a href=\"#创建普通的同义词\" class=\"headerlink\" title=\"创建普通的同义词\"></a>创建普通的同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  synonym synonym_name for table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词\"><a href=\"#删除同义词\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop synonym synonym_name;</span><br></pre></td></tr></table></figure>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a><a href=\"https://www.cnblogs.com/CandiceW/p/10062413.html\">序列</a></h2><p>序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。</p>\n<h3 id=\"创建序列\"><a href=\"#创建序列\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><p>创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　CREATE SEQUENCE 序列名</span><br><span class=\"line\">　　[INCREMENT BY n]</span><br><span class=\"line\">　　[START WITH n]</span><br><span class=\"line\">　　[&#123;MAXVALUE/ MINVALUE n| NOMAXVALUE&#125;]</span><br><span class=\"line\">　　[&#123;CYCLE|NOCYCLE&#125;]</span><br><span class=\"line\">　　[&#123;CACHE n| NOCACHE&#125;];</span><br></pre></td></tr></table></figure>\n<h4 id=\"其中：\"><a href=\"#其中：\" class=\"headerlink\" title=\"其中：\"></a>其中：</h4><ol>\n<li><blockquote>\n<p>INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>START WITH 定义序列的初始值(即产生的第一个值)，默认为1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。</p>\n</blockquote>\n</li>\n</ol>\n<p> 创建序列，该序列起始值50，步长为10，不缓冲，序列名为“DX1_06”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence DX1_06 increment by 10 start with 50 nocache;</span><br></pre></td></tr></table></figure>\n\n<p>创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create sequence seq_1 increment by 2 start with 1000  maxvalue 10000 nocycle;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改序列\"><a href=\"#修改序列\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><p> <strong>alter</strong></p>\n<p>修改序列“DX1_06”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter sequence DX1_06 maxvalue 82000 minvalue 10 increment by 5;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">### 删除序列</span><br><span class=\"line\">**drop**</span><br><span class=\"line\"></span><br><span class=\"line\">删除序列seq_1。</span><br><span class=\"line\">```plsql</span><br><span class=\"line\">drop sequence seq_1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些常用函数\"><a href=\"#一些常用函数\" class=\"headerlink\" title=\"一些常用函数\"></a>一些常用函数</h3><h4 id=\"查询一张表，而且要按照业务排序\"><a href=\"#查询一张表，而且要按照业务排序\" class=\"headerlink\" title=\"查询一张表，而且要按照业务排序\"></a><a href=\"https://www.cnblogs.com/mycoding/archive/2010/05/29/1747065.html\">查询一张表，而且要按照业务排序</a></h4><p>  <code>rank() over(partition)</code></p>\n<h3 id=\"从右边对字符串使用指定的字符进行填充\"><a href=\"#从右边对字符串使用指定的字符进行填充\" class=\"headerlink\" title=\"从右边对字符串使用指定的字符进行填充 \"></a><a href=\"https://www.cnblogs.com/BetterWF/archive/2012/07/18/2597472.html\">从右边对字符串使用指定的字符进行填充 </a></h3><p><code>rpad(string,padded_length,[pad_string]) 　</code></p>\n<ul>\n<li> string 表示：被填充的字符串 　　</li>\n<li> padded_length 表示：字符的长度，是返回的字符串的数量，如果这个数量比原字符串的长度要短，rpad函数将会把字符串截取成从左到右的n个字符; 　　</li>\n<li>pad_string 是个可选参数，这个字符串是要粘贴到string的右边，如果这个参数未写，lpad函数将会在string的右边粘贴空格。 　</li>\n</ul>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a><a href=\"https://blog.csdn.net/qq_39443053/article/details/104044530\">存储过程</a></h2><h3 id=\"存储过程的定义\"><a href=\"#存储过程的定义\" class=\"headerlink\" title=\"存储过程的定义\"></a>存储过程的定义</h3><h4 id=\"无参数\"><a href=\"#无参数\" class=\"headerlink\" title=\"无参数\"></a>无参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure 存储过程名</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  ----------------------------</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有参数\"><a href=\"#有参数\" class=\"headerlink\" title=\"有参数\"></a>有参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure myDemo02(name in varchar,age in int)</span><br><span class=\"line\">as</span><br><span class=\"line\">begin</span><br><span class=\"line\">  dbms_output.put_line(&#x27;name=&#x27;||name||&#x27;, age=&#x27;||age);</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li>主键的创建有三种方法</li>\n<li>视图上不能完成的操作：在视图上定义新的基本表</li>\n<li>在sql中子查询是嵌入到另一个查询语句之中的查询语句</li>\n<li>减少外键能实现实体的完整性</li>\n<li>在全文的搜索的函数中，用于指定被搜索的列是match()</li>\n<li>中间连接不属于连接种类</li>\n<li>连接种类有：外连接、内连接、交叉连接</li>\n<li>union可以组合多条SQL查询语句，形成组合查询</li>\n<li>分组：grouped by     ？？？</li>\n<li>delete语句的使用DELETE FROM Person WHERE LastName = ‘Wilson’ </li>\n<li>返回当前日期的函数：curdate()</li>\n<li>数据模型：网状模型、层次模型、网络模型</li>\n<li>交叉连接又可以看成笛卡尔连接</li>\n<li>为数据表创建索引的目的是提高查询的检索性能</li>\n<li>SQL语言中的视图view是数据库的外模式</li>\n<li>查看数据库中的所有表：show tables</li>\n<li>start transaction 表示一个新的事物处理快的开始</li>\n<li>格式化日期的函数：DATE_FORMAT()</li>\n<li>SQL语言是非过程化语言</li>\n<li>在正则表达式中匹配任意一个字符的符号是’ . ‘</li>\n<li>DML语句就是数据库操作语句。包括update、 delete、select</li>\n<li>DDL数据库定义语言。包括create、alter、drop、truncate</li>\n<li>declimal是可变精度浮点值</li>\n<li>逻辑运算符优先级：not / and / or</li>\n<li><a href=\"https://www.yiibai.com/sql/sql-limit.html\">limit</a></li>\n</ol>\n<h2 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"单索引\"><a href=\"#单索引\" class=\"headerlink\" title=\"单索引\"></a>单索引</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  bitmap  index   索引名  <span class=\"keyword\">on</span> 表名( 变量名 <span class=\"keyword\">desc</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">desc</span> 表示降序排序。  bitmap 为 位图索引 正常可不加</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合索引\"><a href=\"#组合索引\" class=\"headerlink\" title=\"组合索引\"></a>组合索引</h4><pre><code>           <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> index 索引名 <span class=\"keyword\">on</span> 表名(列名<span class=\"number\">1</span>,列名<span class=\"number\">2</span>);              </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"查看索引-1\"><a href=\"#查看索引-1\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_indexes<span class=\"operator\">/</span>user_ind_columns ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除索引-1\"><a href=\"#删除索引-1\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index 索引名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同义词-1\"><a href=\"#同义词-1\" class=\"headerlink\" title=\"同义词\"></a>同义词</h2><h3 id=\"创建同义词\"><a href=\"#创建同义词\" class=\"headerlink\" title=\"创建同义词\"></a>创建同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> synonym 同义词 <span class=\"keyword\">for</span> 目标</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看同义词\"><a href=\"#查看同义词\" class=\"headerlink\" title=\"查看同义词\"></a>查看同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> user_synonyms;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> all_synonyms;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除同义词-1\"><a href=\"#删除同义词-1\" class=\"headerlink\" title=\"删除同义词\"></a>删除同义词</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> synonym 同义词;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列-1\"><a href=\"#序列-1\" class=\"headerlink\" title=\"序列\"></a>序列</h2><h3 id=\"创建序列-1\"><a href=\"#创建序列-1\" class=\"headerlink\" title=\"创建序列\"></a>创建序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> sequence 序列名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> 开始数字</span><br><span class=\"line\"></span><br><span class=\"line\">increment <span class=\"keyword\">by</span> 增长数字</span><br><span class=\"line\"></span><br><span class=\"line\">minvalue 最小值</span><br><span class=\"line\"></span><br><span class=\"line\">maxvalue 最大值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">nocache</span><br></pre></td></tr></table></figure>\n\n<p><strong>详细说明：</strong></p>\n<p>start with 开始数字à从几开始</p>\n<p>increment by 增长à步长，每次增长几个数</p>\n<p>minvalue 最小值</p>\n<p>maxvalue 最大值à可以不设置，不设置应写为nomaxvalue，也就是无穷大</p>\n<p>cycle 循环，也就是说当长增长到最大值后，再从最小值开始重新增长</p>\n<p>nocache 不设缓存</p>\n<h3 id=\"查看序列\"><a href=\"#查看序列\" class=\"headerlink\" title=\"查看序列\"></a>查看序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span>  <span class=\"keyword\">from</span> user_SEQUENCES、all_SEQUENCES;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"引用序列\"><a href=\"#引用序列\" class=\"headerlink\" title=\"引用序列\"></a>引用序列</h3><p>   xx.nextval      /  xx.curval </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> xx表 <span class=\"keyword\">values</span> (  )  ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>( DX1_06.nextval,<span class=\"string\">&#x27;ss&#x27;</span>,<span class=\"string\">&#x27;CN&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>,<span class=\"keyword\">NULL</span>,<span class=\"keyword\">NULL</span> );</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改序列-1\"><a href=\"#修改序列-1\" class=\"headerlink\" title=\"修改序列\"></a>修改序列</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> sequence student_id <span class=\"comment\">-- 序列名 也可以更改</span></span><br><span class=\"line\">minvalue <span class=\"number\">1</span>   </span><br><span class=\"line\">maxvalue <span class=\"number\">99999</span>  </span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">with</span> <span class=\"number\">1</span>   </span><br><span class=\"line\">increment <span class=\"keyword\">by</span> <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"keyword\">cycle</span>    <span class=\"comment\">-- 到99999后，从头开始</span></span><br><span class=\"line\">nocache；  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> 用户名 identified <span class=\"keyword\">by</span> 密码;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span>  (c##)<span class=\"keyword\">user</span> username identified <span class=\"keyword\">by</span> password;    <span class=\"operator\">/</span><span class=\"operator\">/</span> 创建普通用户 需要添加 c##</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"锁定用户\"><a href=\"#锁定用户\" class=\"headerlink\" title=\"锁定用户\"></a>锁定用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT LOCK; 锁定</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> username ACCOUNT UNLOCK; 解锁</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> username ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新技能学习-如排序等\"><a href=\"#新技能学习-如排序等\" class=\"headerlink\" title=\"新技能学习 如排序等\"></a>新技能学习 如排序等</h2><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(DENSE_)<span class=\"built_in\">RANK</span>( ) <span class=\"keyword\">OVER</span> ([ query_partition_clause ] order_by_clause)</span><br><span class=\"line\"><span class=\"built_in\">rank</span>():跳跃式，两个第<span class=\"number\">1</span>，下一个就是第<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">dense_rank</span>():非跳跃式,两个第<span class=\"number\">1</span>,下一个是第<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分为：（1）连续或不连续：dense_rank,rank</span><br><span class=\"line\"></span><br><span class=\"line\">     （2）分区或不分区：使用partition，不使用partition</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PL-SQL\"><a href=\"#PL-SQL\" class=\"headerlink\" title=\"PL/SQL\"></a>PL/SQL</h1><h2 id=\"和-的差别\"><a href=\"#和-的差别\" class=\"headerlink\" title=\".和/ 的差别\"></a>.和/ 的差别</h2><p><strong>在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</strong><br>1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在SQL*Plus中键入如下PL/SQL块，以点号（.）结束。如果想运行缓冲区的内容，那么可以使用“RUN”命令或者“ / ”命令。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set serveroutput on 命令是打开COMMAND命令窗口中的输出流。</span><br><span class=\"line\"></span><br><span class=\"line\">不搞的话没输出 非常恐怖！！！！！！！！！！！！！！！！！！！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>分隔符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>+</code>,<code>-</code>, <code>*</code>, <code>/</code></td>\n<td>加法，减法/负，乘法，除法</td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td>属性绑定</td>\n</tr>\n<tr>\n<td><code>&#39;</code></td>\n<td>字符串分隔符</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>组件选择符</td>\n</tr>\n<tr>\n<td><code>(,)</code></td>\n<td>表达式或列表分隔符</td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td>主机变量指示符</td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td>项目分隔符</td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td>引用标识符分隔符</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>@</code></td>\n<td>远程访问指示符</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td>声明或语句终止符</td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td>赋值运算符</td>\n</tr>\n<tr>\n<td><code>=&gt;</code></td>\n<td>关联运算符</td>\n</tr>\n<tr>\n<td>ΙΙ</td>\n<td>连接运算符</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>\n<td>标签分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>/*</code>, <code>*/</code></td>\n<td>多行注释分隔符(开始和结束)</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td>单行注释指示符</td>\n</tr>\n<tr>\n<td><code>..</code></td>\n<td>范围运算符</td>\n</tr>\n<tr>\n<td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code>, <code>&#39;=</code>, <code>~=</code>, <code>^=</code></td>\n<td>不同版本的”不等于”运算符</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>3、put：将内容写到内存，<strong>等到put_line时一起输出</strong><br>4、put_line：不用多说了，输出字符</p>\n<h3 id=\"输出-语句\"><a href=\"#输出-语句\" class=\"headerlink\" title=\"输出 语句\"></a>输出 语句</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbms_output.put_line(  );   //  line 为换行</span><br><span class=\"line\"></span><br><span class=\"line\">dbms_output.put()  正常输出</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建过程\"><a href=\"#创建过程\" class=\"headerlink\" title=\"创建过程\"></a>创建过程</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">PROCEDURE</span> procedure_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">  <span class=\"operator\">&lt;</span> procedure_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> procedure_name;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ul>\n<li>使用EXECUTE关键字</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> 过程名;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>从PL/SQL块调用过程的名称</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"> 过程名;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">OR</span> REPLACE] <span class=\"keyword\">FUNCTION</span> function_name </span><br><span class=\"line\">[(parameter_name [<span class=\"keyword\">IN</span> <span class=\"operator\">|</span> <span class=\"keyword\">OUT</span> <span class=\"operator\">|</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span>] type [, ...])] </span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> return_datatype </span><br><span class=\"line\">&#123;<span class=\"keyword\">IS</span> <span class=\"operator\">|</span> <span class=\"keyword\">AS</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span> function_body <span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">END</span> [function_name];</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>其中，</strong></p>\n<ul>\n<li><strong>function-name是指定要创建的函数的名称。</strong></li>\n<li><strong>[OR REPLACE]选项指示是否允许修改现有的函数。</strong></li>\n<li><strong>可选参数列表包含参数的名称，模式和类型。 IN表示将从外部传递的值，OUT表示将用于返回过程外的值的参数。</strong></li>\n<li><strong>函数必须包含一个返回(RETURN)语句。</strong></li>\n<li><strong>RETURN子句指定要从函数返回的数据类型。</strong></li>\n<li><strong>function-body包含可执行部分。</strong></li>\n<li><strong>使用AS关键字代替IS关键字，用来创建独立的函数。</strong></li>\n</ul>\n<h3 id=\"查询函数\"><a href=\"#查询函数\" class=\"headerlink\" title=\"查询函数\"></a>查询函数</h3><h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 游标是什么？</span><br><span class=\"line\">   用来存储多条查询数据的一种数据结构（<span class=\"string\">&#x27;结果集&#x27;</span>），</span><br><span class=\"line\">   它有一个 <span class=\"string\">&#x27;指针&#x27;</span>，从上往下移动（<span class=\"string\">&#x27;fetch&#x27;</span>），从而能够 <span class=\"string\">&#x27;遍历每条记录&#x27;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"number\">2.</span> 优缺点</span><br><span class=\"line\">   (<span class=\"number\">1</span>) 提高 <span class=\"keyword\">sql</span> <span class=\"string\">&#x27;执行效率&#x27;</span></span><br><span class=\"line\">   (<span class=\"number\">2</span>) 牺牲 <span class=\"string\">&#x27;内存&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"隐式游标\"><a href=\"#隐式游标\" class=\"headerlink\" title=\"隐式游标\"></a>隐式游标</h3><h3 id=\"显示游标\"><a href=\"#显示游标\" class=\"headerlink\" title=\"显示游标\"></a>显示游标</h3><p>使用显式游标包括以下步骤 -</p>\n<ul>\n<li>声明游标初始化内存</li>\n<li>打开游标分配内存</li>\n<li>从游标获取数据</li>\n<li>关闭游标以释放分配的内存</li>\n</ul>\n<p>声明游标</p>\n<p>声明游标使用名称和相关的SELECT语句来定义游标。 例如 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CURSOR</span> c_customers <span class=\"keyword\">IS</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span> id, name, address <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>打开游标</p>\n<p>打开游标将为游标分配内存，并使其准备好将SQL语句返回的行记录数据提取到其中。例如，打开上面定义的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">OPEN</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>获取游标获取游标一次仅访问一行。 例如，从上面打开的游标中获取行，如下所示代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FETCH</span> c_customers <span class=\"keyword\">INTO</span> c_id, c_name, c_addr;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭游标</p>\n<p>关闭游标意味着释放分配的内存。例如，关闭上面打开的游标，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CLOSE</span> c_customers;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>Oracle错误代码</th>\n<th>SQLCODE</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ACCESS_INTO_NULL</code></td>\n<td>06530</td>\n<td><code>-6530</code></td>\n<td>当一个空对象被自动分配一个值时会引发它。</td>\n</tr>\n<tr>\n<td><code>CASE_NOT_FOUND</code></td>\n<td>06592</td>\n<td><code>-6592</code></td>\n<td>当没有选择<code>CASE</code>语句的<code>WHEN</code>子句中的任何选项时，会引发这个错误，并且没有<code>ELSE</code>子句。</td>\n</tr>\n<tr>\n<td><code>COLLECTION_IS_NULL</code></td>\n<td>06531</td>\n<td><code>-6531</code></td>\n<td>当程序尝试将<code>EXISTS</code>以外的集合方法应用于未初始化的嵌套表或<code>varray</code>时，或程序尝试将值分配给未初始化的嵌套表或<code>varray</code>的元素时，会引发此问题。</td>\n</tr>\n<tr>\n<td><code>DUP_VAL_ON_INDEX</code></td>\n<td>00001</td>\n<td><code>-1</code></td>\n<td>当尝试将重复值存储在具有唯一索引的列中时引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_CURSOR</code></td>\n<td>01001</td>\n<td><code>-1001</code></td>\n<td>当尝试进行不允许的游标操作(例如关闭未打开的游标)时会引发此错误。</td>\n</tr>\n<tr>\n<td><code>INVALID_NUMBER</code></td>\n<td>01722</td>\n<td><code>-1722</code></td>\n<td>当字符串转换为数字时失败，因为字符串不代表有效的数字。</td>\n</tr>\n<tr>\n<td><code>LOGIN_DENIED</code></td>\n<td>01017</td>\n<td><code>-1017</code></td>\n<td>当程序尝试使用无效的用户名或密码登录到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>NO_DATA_FOUND</code></td>\n<td>01403</td>\n<td><code>+100</code></td>\n<td>当<code>SELECT INTO</code>语句不返回任何行时会引发它。</td>\n</tr>\n<tr>\n<td><code>NOT_LOGGED_ON</code></td>\n<td>01012</td>\n<td><code>-1012</code></td>\n<td>当数据库调用没有连接到数据库时引发。</td>\n</tr>\n<tr>\n<td><code>PROGRAM_ERROR</code></td>\n<td>06501</td>\n<td><code>-6501</code></td>\n<td>当PL/SQL遇到内部问题时会引发。</td>\n</tr>\n<tr>\n<td><code>ROWTYPE_MISMATCH</code></td>\n<td>06504</td>\n<td><code>-6504</code></td>\n<td>当游标在具有不兼容数据类型的变量中获取值时引发。</td>\n</tr>\n<tr>\n<td><code>SELF_IS_NULL</code></td>\n<td>30625</td>\n<td><code>-30625</code></td>\n<td>当调用成员方法时引发，但对象类型的实例未初始化。</td>\n</tr>\n<tr>\n<td><code>STORAGE_ERROR</code></td>\n<td>06500</td>\n<td><code>-6500</code></td>\n<td>当PL/SQL用尽内存或内存已损坏时引发。</td>\n</tr>\n<tr>\n<td><code>TOO_MANY_ROWS</code></td>\n<td>01422</td>\n<td><code>-1422</code></td>\n<td>当<code>SELECT INTO</code>语句返回多行时引发。</td>\n</tr>\n<tr>\n<td><code>VALUE_ERROR</code></td>\n<td>06502</td>\n<td><code>-6502</code></td>\n<td>当发生算术，转换，截断或者<code>sizeconstraint</code>错误时引发。</td>\n</tr>\n<tr>\n<td><code>ZERO_DIVIDE</code></td>\n<td>01476</td>\n<td><code>1476</code></td>\n<td>当尝试将数字除以零时引发。</td>\n</tr>\n</tbody></table>\n<h2 id=\"异常处理的语法\"><a href=\"#异常处理的语法\" class=\"headerlink\" title=\"异常处理的语法\"></a>异常处理的语法</h2><p>异常处理的一般语法如下。在这里，可以列举尽可能多的异常并且指定处理方式。默认的异常将使用WHEN…THEN处理，如下语法所示 -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>declarations section<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>executable command(s)<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"operator\">&lt;</span>exception handling goes here <span class=\"operator\">&gt;</span> </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception1 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception1<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception2  <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception2<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements  </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> exception3 <span class=\"keyword\">THEN</span>  </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\">   ........ </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      exception3<span class=\"operator\">-</span>handling<span class=\"operator\">-</span>statements </span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> SERVEROUTPUT <span class=\"keyword\">ON</span> SIZE <span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">   c_id customers.id<span class=\"operator\">%</span>type :<span class=\"operator\">=</span> <span class=\"number\">100</span>; </span><br><span class=\"line\">   c_name  customerS.name<span class=\"operator\">%</span>type; </span><br><span class=\"line\">   c_addr customers.address<span class=\"operator\">%</span>type; </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span>  name, address <span class=\"keyword\">INTO</span>  c_name, c_addr </span><br><span class=\"line\">   <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\">   <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> c_id;  </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;姓名: &#x27;</span><span class=\"operator\">||</span>  c_name); </span><br><span class=\"line\">   DBMS_OUTPUT.PUT_LINE (<span class=\"string\">&#x27;地址: &#x27;</span> <span class=\"operator\">||</span> c_addr); </span><br><span class=\"line\"></span><br><span class=\"line\">EXCEPTION </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> no_data_found <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;没有找到符合条件的客户信息!&#x27;</span>); </span><br><span class=\"line\">   <span class=\"keyword\">WHEN</span> others <span class=\"keyword\">THEN</span> </span><br><span class=\"line\">      dbms_output.put_line(<span class=\"string\">&#x27;Error!&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">END</span>; </span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"填充默认值。\"><a href=\"#填充默认值。\" class=\"headerlink\" title=\"填充默认值。\"></a>填充默认值。</h2><p>NVL( xx  ,  0 )  默认为0      zero</p>\n<p><strong>语法</strong></p>\n<p><strong>NVL(eExpression1, eExpression2)</strong></p>\n<p><strong>参数</strong><br><strong>eExpression1, eExpression2</strong></p>\n<p><strong>如果 eExpression1 的计算结果为 null 值，则 NVL( ) 返回 eExpression2。如果 eExpression1 的计算结果不是 null 值，则返回 eExpression1。eExpression1 和 eExpression2 可以是任意一种数据类型。如果 eExpression1 与 eExpression2 的结果皆为 null 值，则 NVL( ) 返回 .NULL.。</strong></p>\n<h2 id=\"删除-delete\"><a href=\"#删除-delete\" class=\"headerlink\" title=\"删除 delete\"></a>删除 delete</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> xx  <span class=\"keyword\">where</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入-insert\"><a href=\"#插入-insert\" class=\"headerlink\" title=\"插入 insert\"></a>插入 insert</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 <span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">values</span>(值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，......);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span>(列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......)<span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>;  （表<span class=\"number\">2</span>必须存在，列<span class=\"number\">1</span>，列<span class=\"number\">2</span>，......必须存在）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表<span class=\"number\">2</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> 值<span class=\"number\">1</span>，值<span class=\"number\">2</span>，...... <span class=\"keyword\">into</span> 表名<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名<span class=\"number\">1</span>; （表<span class=\"number\">2</span>不存在，插入时会自动创建表名<span class=\"number\">2</span>）</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><h2 id=\"old-new\"><a href=\"#old-new\" class=\"headerlink\" title=\"old / new\"></a>old / new</h2><p>1.当使用insert语句的时候，如果原表中没有数据的话，那么对于插入数据后表来说新插入的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111235809-1841558199.png\" alt=\"img\"></p>\n<p>2.当使用delete语句的时候，删除的那一条数据相对于删除数据后表的数据来说就是od，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111249215-346800140.png\" alt=\"img\"></p>\n<p>3.当使用update语句的时候，当修改原表数据的时候相对于修改数据后表的数据来说原表中修改的那条数据就是old，而修改数据后表被修改的那条数据就是new，如图所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/495456/201608/495456-20160804111301528-856490776.png\" alt=\"img\"></p>\n<h2 id=\"RAISE-APPLICATION-ERROR\"><a href=\"#RAISE-APPLICATION-ERROR\" class=\"headerlink\" title=\"RAISE_APPLICATION_ERROR\"></a>RAISE_APPLICATION_ERROR</h2><p>可能不是很多人知道 RAISE_APPLICATION_ERROR 的用途是什么，虽然从字面上已经猜到这个函数是干什么用的。平时用来测试的异常处理<br>我们都是通过dbms_output.put_line来输出异常信息，但是在实际的应用中，需要把异常信息返回给调用的客户端。<br>其实 RAISE_APPLICATION_ERROR 是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者其他前台开发语言)</p>\n"},{"title":"Linux期末知识点总结","date":"2021-12-30T10:50:45.000Z","description":"Linux知识点总结","_content":"\n\n# Linux知识点总结\n\n## Linux概述\n\n### Linux系统的优缺点\n\n1. 优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；\n2. 缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。\n\n### Linux系统的特点\n\n1. 一切皆文件\n2. 完全兼容可移植操作系统接口POSIX1.0标准\n3. 多用户、多任务\n4. 完全免费\n\n### Linux的含义\n\nLinux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。\n通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。\nLinux是类UNIX操作系统。\n\n### Linux的诞生、发展和成长过程依赖五个重要支柱\n\n1. UXIX操作系统\n2. MINIX操作系统\n3. GNU计划\n4. POSIX标准\n5. Internet\n\n\n### Linux内核的组成\n\n1. 内存管理器：对内存资源的访问控制。\n2. 进程管理器：对CPU的访问控制。\n3. 设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。\n4. 虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。\n5. 网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。\n\n### shell 分为\n\n1. GLI命令行界面\n2. GUI图用户界面\n\n### Linux文件系统\n\nLinux一切皆文件；\n文件系统是指文件存放在磁盘等存储设备上的组织方法。\n\n## Linux基本操作\n\n### 基本命令\n\n**命令格式**： command [options] [arguments]  ，命令名：[选项]：[参数]\n\n### 获取帮助\n\n```shell \nman [option] filename\n```\n\n```shell\n--help |more\n```\n### 日志\n\nLinux 日志文件存放在 /var/log目录下\n\n日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。\n\n## 文件系统和文件管理\n\n### Linux文件类型\n\n1. 普通文件\n2. 目录文件\n3. 链接文件\n4. 设备文件\n5. 管道文件\n\n\n#### 普通文件\n\n- 普通文件是指以**字节**为单位的**数据流**类型文件，其特点是不包含文件系统的结构信息。\n- 通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。\n- 按其内部结构分为文本文件和二进制文件。\n\n#### 目录文件\n\n- 目录文件不存放常规数据，它是用来**组织**、**访问**其他文件的，是内核组织文件系统的基本节点。\n- 目录文件可以包含下一级目录文件或普通文件。\n- 目录文件是一种文件，是Linux文件中的一种\n\n\n#### 链接文件\n\n- 链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。\n- 根据链接文件的不同，分为**硬链接**（Hard Link）文件和**符号链接**（Symbolic Link，又称为软链接）文件\n\n\n#### 设备文件\n- 设备文件是Linux中最特殊的文件，可以方便地访问外部设备。\n- Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。\n- 设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。\n- 根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。\n\n#### 管道文件\n- 管道文件是一种很特殊的文件，主要用于不同进程的信息传递。\n- 当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。\n\n### 文件类型判断\n```shell\nfile [option] filename\n```\n\n### 查看文件的详细属性\n\n使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等\n\n```shell\nstate [option] filename\n```\n\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 绝对路径和相对路径\n\n- 绝对路径是以根目录“/”开始，递归每级目录直到目标路径。\n- 相对路径是以当前目录为起点，到达目标的路径。\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -a\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n\nfind:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。\n\n```shell\nfind [pathname] [option] filename\n```\n\n\n### linux 文件链接\n\n#### 硬链接\n\n- 默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。\n- 创建一个硬链接时，也为这个文件创建了一个额外的目录条目。\n\n##### 硬链接的局限性\n（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。\n（2）硬链接无法引用目录。\n\n当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了\n\n#### 符号链接（软链接）\n\n符号链接指向的文件与符号链接自身几乎没有区别。\n\n### 文件时间\n\n在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。\n\n\n#### 1.访问时间（Access time）\n\n对文件内容进行一次读操作时间。\n\n#### 2.修改时间（Change time）\n\n文件内容被最后一次修改的时间。\n\nls -l 命令显示出来的文件时间就是这个时间\n\n#### 3.状态时间（Modify time）\n\n当文件的状态被改变时，状态时间就会改变\n\n## Linux用户管理\n\n超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。\n\nLinux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID\n\nid命令可以查看当前用户登录信息。\n- UID(User Identification)为用户的ID。\n- GID(Group Identification)为用户所属组的ID。\n- groups为用户属于的所有组的ID。\n\n\nps aux | less命令查看进程\n\n\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n#### 查看用户的分组\n1. groups命令查看。命令：\n```shell\ngroups\ngroups user1 user2\n```\n2. 查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。\n3. id命令法，只执行id命令就可以查看。命令：\n```shell\nid\nid user2\n```\n\n### 和用户相关的一些系统文件\n1. /etc/passwd文件保存用户信息。\n2. /etc/shadow文件保存加密的用户密码。\n3. /etc/group文件保存用户组信息。\n4. /etc/login.defs配置文件。\n\n**su root**可以返回root \n\n\n## 文件权限\n\n权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。\n\n### U G O\n\nU: owner为属主，文件所有者。\nG：group为属组，同组用户。\nO：other为其他用户。\n\n### UGO方式每组的3个字符具体意义如下：\n\nr:read，数字设定值为4\nw:write,数字设定值为2\nx:execute,数字设定值为1\n\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\n\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n\n## linux编程基础\n\nmake可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，\n\nmake通过makefile文件描述的内容自动维护编译工作。\n\n\n\n\n## shell编程\n\nShell脚本是一个包含一系列命令的文件。 \nShell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。\n\n### 用Shell脚本的原因：\n1. 效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 \n2. 简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。\n3. 可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。\n4. 开发容易：可以在短时间内完成一个功能强大又好用的脚本。\n\n### Shell分类：\n1. 用于用户交互接口的Shell称为交互式Shell。\n2. 作为命令解析器的Shell称为非交互式Shell。\n\n### ```#!/bin/bash```\n脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，\n\n\nShell的注释以“#”开头，注释的内容不会执行。\n\n\n给文件helloxiangtian.sh增加可执行权限\n```shell\nchomd +x helloxiangtan.sh\n```\n\n### Shell变量命名规则：\n\n变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 \n\n### shell变量分类\n\nShell变量分为自定义变量、环境变量、位置变量和预定义变量。\n\n根据工作要求临时定义的变量称为自定义变量。\n环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。\n从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。\n预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$\\*等。\n\nShell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。\n\n#### 自定义变量\n| | |\n|:---:|:---:|\n|定义自定义变量| 变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。|\n|使用自定义变量| $变量名|\n|查看自定义变量| echo $变量名 set（所有变量：自定义变量和环境变量）|\n|取消自定义变量| unset 变量名|\n|自定义变量作用范围|   仅在当前shell中有效|\n\n#### 环境变量\n\n在各种编程语言中会提及全局变量概念。\n全局变量可以在程序的任何地方使用。\n在Shell编程中该功能由环境变量实现。\n系统中的所有进程都可以使用环境变量。\n环境变量与全局变量区别：\n子进程对环境变量的修改不会传递到父进程中。\n\n|||\n|:---:|:---:|\n定义环境变量  |使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。|\n|使用环境变量  |$变量名或$｛变量名｝|\n|查看环境变量  |echo $变量名 或env，如env |grep back_dir|\n|取消环境变量  |unset 变量名|\n|环境变量作用范围   | 仅在当前shell和子shell中有效|\n\n#### 位置变量\n\n位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。\n执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。\n\n```shell\n$0代表命令本身，$1-$9代表接收的第1~9个参数，$10以上需要用{}括起来，如${20}代表接收的第20个参数。\n```\n\n#### 预定义变量\n\n预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。\n\n|预定义变量 |  说明|\n|:---:|:---|\n|$0|  脚本名|\n|$*|  所有的参数|\n|$@|  所有的参数|\n|$#|  参数的个数|\n|$$|  当前进程的PID|\n|$!|  上一个后台进程的PID|\n|$?|  上一个命令的返回值，0表示成功。|\n\n\n### 变量的操作\n变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。\n\n变量创建好后，可以用$变量名的方式获取变量的值。\n\n\n可以使用$符号获取变量的值。\n\n用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。\n\n#### 变量的删除\n\n|格式 | 说明|\n|:---:|:---:|\n|${变量名#关键字符} |变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名##关键字符}|    变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。|\n|${变量名%关键字符} |变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名%%关键字符}|    变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。|\n\n#### 变量的替换\n\n|格式  |说明|\n|:---:|：---：|\n|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|\n|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|\n\n#### 变量的替代\n\n```shell\n${变量名-新的变量名}\n```\n\n\n在Shell中，变量值的类型默认是字符串，不直接进行运算。\n\n用于整数运算的方法有expr、(())和$[]。\n\n\n### 运算\n```shell\nexpr expression\n例：\nn1 + n2\nexpr $n1 + $n2\n```\n运算符及用于计算的数字两边必须有空格，否则会执行失败。\n用expr进行乘法运算时，必须在*前用反斜线转义（Shell可能误解为*号）。\n\n\n\n“（（））”或“[ ]”数值运算命令\n双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符\n格式：\n“ ((expression))”，或“ [expression]”\n括号内部两侧可以有空格，也可省空格。\n需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符\n```shell\nn1+n2\n$(($n1+$n2))\n$[$n1+$n2]\n```\n\nlet数值运算命令\n\n```shell\nlet expression\n\n例：\nlet sum = n1+n2;\n```\n\nlet数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量\n\n### shell中的特殊符号\n\n#### 1. “#”表示注释。\n- 行首为#（#!是个例外）表示此行是注释。\n- 注释也可以放在本行命令的后面，需要注意的是#两边有空格。\n- 释也可以放在本行行首空白的后面。\n\n#### 2. \" ; \"\n\n- “;”在同一行中分隔两个或者两个以上的命令。\n- “;”也适用于循环语句\n\n#### 3. “;;”\n\n- 用于终止case语句\n\n#### 4. “:”\n\n- 空命令“:”和true命令作用相同。\n- 在while死循环和if/then中也可使用这个命令。\n\n\n#### 5. “.”\n\n- “.”等价于source命令，是bash中的一个内建命令。\n- “.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。\n- 当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。\n\n### 输入输出\n\n#### 输出\n\n##### echo\necho命令是最常用的，其功能是将字符串输出到屏幕\n\n```shell\necho [-ne] [string]\n```\n其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符\n\n##### printf\n\n输出命令printf的功能是格式化输出数据\n```shell\nprintf format [arguments...]\n```\n\nformat为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。\narguments为要输出的数据。\n\n#### 输入\n\n##### 1. 直接给变量赋值\n\n例如，name=liming\n\n##### 2. 从键盘读入赋值\n\n- read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。\n```shell\nread  [options] [variable…]\n```\n\n##### 3. 使用命令行参数赋值\n\n使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数......，这种赋值方法适用于参数经常变化且不需要交互的情况。\n\n##### 4. 利用命令的输出结果赋值\n\n- 在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。\n- 把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名\n\n##### 5. 从文件中读入数据赋值\n\n这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。\n\n#### 引用\n```\n1. 转义字符：用于引用任意的单个字符。\n2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。\n3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。\n```\n\n### 条件测试\n\n#### 文件测试\n1. test\n```shell\n“test  <expression>”\n```\n2. “<测试表达式>”\n\n也可以使用“<测试表达式>”，就是使用中括号。\n语法格式：\n“ [  <expression> ]”\n注意：[]与expression之间必须有空格。 \n通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。\n\n#### 整数测试\n\n整数测试通常用于数值之间的运算。\n```shell\n语法格式：\n       [ 整数1 操作符 整数2 ]\n或   test 整数1 操作符 整数2。\n```\n\n|操作符1  |  操作符2(部分能用)  意义|\n|:---:|:---:|\n|-eq ==|  等于（Equal）|\n|-ge >=|  大于等于（Greater or Equal）|\n|-gt > |  大于（Greater Than-le）|\n|-le <=|  小于等于（Lesser or Equal）|\n|-lt   |  <   小于（Lesser Than）|\n|-ne !=|  不等于（Not Equal）|\n\n#### 字符串测试\n\n字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。\n\n```shell\n[ 字符串1 = 字符串2 ]\n[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]\n```\n\n#### 逻辑运算符\n\n```shell\n[ expression1 op expression2 ]\nor       command1 op commnad2\n\n```\n\n|Operator |   意义|\n|:---:|:---:|\n|! expr | 如果表达式评估为假，则为真|\n|expr1 -a expr2 | 如果 expr1 和 expr2 都为真，则结果为真，&&|\n|expr1 -o expr2  |如果 expr1 或 expr2 为真，则结果为真，|||\n\n### if语句格式\n\n```shell\n语句格式：\nif [ expression ];then  code\nfi\n\n\nif [ expression ]  \nthen code\nfi\n```\n\n\n```shell\nif [ expression ];then  code1\nelse code2\nfi\n\n\nif [ expression ]  \nthen   code1\nelse  code2\n```\n\n```shell\nif expression; then\n command…\n[elif expression; then\n command…]\n[else\n command…]\nfi\n```\n\n### case\n```shell\ncase value in\n    [ expression1) code1\n    ;;\n    expression2) code2\n    ;;\n    …\n    *）code\n    ]\nesac\n```\n\n\n### 循环\n\n#### while 命令\n\n```shell\nwhile expression; do\n       command…\ndone   \n```\n#### until命令\n\n```shell\nuntil expression; do\n     command…\ndone\n```\n\n#### for循环\n```shell\nfor  variable in [in sequence]\ndo\n    code\ndone \n\n```\n```shell\nfor  变量名 in 取值列表；do     循环体 done\n\n```\n```shell\nfor variable [in sequence]; do\n          command…\n     done\n```\n```shell\nfor ((expression1; expression2; expression3;));do\n           command…\n     done\n```\n\n\n在循环后面加个 & 符号表示在后台执行\n\n\n### 数组\n\n#### 数组分为普通数组和关联数组。\n普通数组中的索引（下标）都是整数。\n关联数组的数组索引可以用任意的文本。\n\n两者最大区别：\n- 关联数组使用之前需要声明。\n- 关联数组是由特定格式的键值对组成\n\n#### 普通数组\n定义：\n```shell\narrayname=（value_table）\n```\n\nvalue_table中值之间用空格隔开。\n\n\n#### 关联数组\n定义：\n```shell\narrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)\n```\n其中：\nindexei可以用标识符表示。\n\n\n声明普通数组方法：\n#declare -a arrayname\n声明关联数组方法：\n#declare -A arrayname\n\n#### 数组定义方法\n\n- 直接定义数组\n- \n```shell\narrayname=(value1 value2 value3 ... valuen)\n```\n\n- 下标定义数组\n- \n```shell\narray_name=([index1]=value1 [index2]=value2 ...)\n```\n\n- 间接定义数组\n\n```shell\narray[0]=value1;array[1]=value2;....\n```\n\n- 从文件中读入定义数组。\n\n```shell\narray_name=($(command))\narray_name=($(`variable`))\n\nor \n\narray_name=(`command`)\narray_name=(`variable`)\n\n```\n\n#### 访问数组表达式\n\n\n\n| 语法                 | 描述                         |\n| -------------------- | ---------------------------- |\n| echo ${!array[*]}    | 访问数组所有索引             |\n| echo ${!array[@]}    | 访问数组所有索引             |\n| echo ${array[*]}     | 访问数组所有值               |\n| echo ${array[@]}     | 访问数组所有值               |\n| echo ${#array[@]}    | 统计数组元素个数             |\n| echo ${array[0]}     | 访问数组第0个元素            |\n| echo ${array[@]:1}   | 从数组下标1开始              |\n| echo ${array[@]:1:2} | 从数组下标1开始，访问2个元素 |\n| echo ${#array[#]}    | 第#个元素的字符个数          |\n| echo ${#array}       | 第0个元素的字符个数          |\n| echo ${array[#]}     | 显示第#个元素                |\n| echo ${array}        | 显示第0个元素                |\n\n\n#### 数组删除\n\n删除数组命令格式：\n```shell\nunset array\n```\n删除数组中指定元素命令格式：\n```shell\nunset array[subscript]\n```\n\n#### 数组的截取和替换\n\n- 通过${数组名[@或*]:起始位置:长度}切片原先数组，返回的是字符串，中间用空格分开。\n- 如果加上“()”，就可以得到切片数组。\n\n### 函数\n\n函数定义：\n\n```shell\nfunction name{\n     command…\n      [return]\n}\n\nor\n\nname(){\n   command…\n   [return]\n}\n```\n\nreturn只能用于函数中，表示将返回值提供给函数的调用命令。 \nexit可以用于程序的任意位置，表示退出当前程序并将退出状态返回到父进程。\n\n## Linux多命令协作(I/O重定向与管道）\n\n### 命令行shell数据流定义为\n\n1. 标准输入STDIN(standard input)：是用来采集信息的，命令是通过STDIN接收参数或数据，默认情况下，标准输入就是从键盘读入数据。\n\n2. 标准输出STDOUT(standard out)：是用来输出结果的。\n3. 标准错误STDERR(standard error)：是输出状态或错误信息等。\n\n\n### 重定向\n\n输入ls命令，会显示出当前目录下的文件和目录。如果在ls命令后加入“>”，并指向ls1.txt文件，那么结果就会写入ls1.txt文件中。\n\n\n#### 文件描述符\n\n每一个进程在运行中都会打开一些文件，每一个文件都会有一个指定的数字标识，这个标识就叫做文件描述符。\n\n- 0表示为标准输入，可以理解为键盘输入。\n- 1表示为标准输出，输出到终端。\n- 2表示为标准错误，输出到终端。\n- 3及以上为常规文件的描述符\n- \n#### 重定向标准输出\n\n默认情况下，标准输出在屏幕上显示，而重定向标准输出可以重新定义输出内容到文件。\n\n##### 重定向标准输出格式:\n\n- 重定向符“>”是把标准输出重定向到文件，即将标准输出内容保存到文件中，是覆盖操作。\n如果目标文件不存在，则创建文件并将标准输出内容保存进去；如果目标文件存在，则覆盖其中的内容。\n- 重定向符号“>>（中间没有空格）”是追加操作，实现连续保存文件中的内容。\n即原来的文本内容不会被覆盖，而是在文件尾部添加标准输出的内容。如果文件不存在，也会自动创建。\n\n\n#### 重定向标准输入\n\n默认情况下，标准输入就是从键盘读入数据，每次一行。\n重定向标准输入可以重新定义从文件中读入数据。\n\n通过重定向符“<”，可以把标准输入重定向到文件，即从文件中读入数据作为某条命令的输入数据。\n\n#### 重定向标准错误\n\n默认情况下，标准错误在屏幕上显示，而重定向标准错误可以重新定义输出错误内容到文件\n\n###### 重定向标准错误格式：\n通过重定向符“2>”把标准错误内容保存到文件中，是覆盖操作。\n\n- 如果目标文件不存在，则创建文件并将标准错误内容保存进去。\n- 如果目标文件存在，则覆盖其中的内容。\n- 此命令用于日志中，执行一条指令可能有很多步操作。如果只想保存报错信息，就可用此命令。\n重定向符号“2>&1（中间没有空格）”是将标准输出和标准错误结合在一起输出到文件，即将正确结果及错误全部输出到文件。\n\n#### Subshell\n\n- Subshell是指括在圆括号里的命令会在另外的进程中执行。\n- 当需要让一组命令在不同的目录下执行时，采用这种方法可以不修改主脚本的目录。\n- 对比不加圆括号的命令与加圆括号的命令。\n\n### 管道\n\n管道实际上也是一种重定向，重定向字符控制输出到文件，管道控制输出到其他程序。\n\n管道的作用是把上一个进程的输出作为下一个进程的输入，利用管道可以把若干个命令连接在一起。\n\n\n#### 统计字数命令wc\n\n```shell\nwc [option] [file]\n```\n\n| option | explanation                                                  |\n| ------ | ------------------------------------------------------------ |\n| 缺省   | 统计每个文件的行数、字数、字节数及其汇总。                   |\n| -c     | 统计字节数。                                                 |\n| -l     | 统计行数。                                                   |\n| -m     | 统计字符数。这个标志不能与 -c 标志一起使用。                 |\n| -w     | 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。 |\n| -L     | 打印最长行的长度。                                           |\n\n\n##### 行、单词、字符的定义如下：\n1. 行：以新行字符（如 Enter 键）结尾的一串字符。\n2. 单词：是一串连续的字符，用空格、制表符或新行字符分隔。\n3. 字符：字母、数字、标点符合、空格、制表符或新行字符。\n\n\n#### 管道线分流命令tee\n\ntee命令的作用是从标准输入读取数据，并向标准输出和一个或更多的文件发送数据\n\n```shell\ntee [-ai] [file...]\n```\n\n| option | explanation  |\n| ------ | ------------ |\n| 缺省   | 覆盖         |\n| -a     | 追加         |\n| -i     | 忽略中断信号 |\n\n\n#### 查找重复行命令uniq\n\n消除重复行、选取重复行、选取唯一行和统计重复行的数量。\n\n```shell\nuniq [option] [input [output]]\nuniq [选项]... [文件]\n```\n\ninput是输入文件，若指定了该参数，uniq命令从该文件读入数据。\noutput是输出文件，若指定了该参数，则uniq命令将输出结果保存到该文件中。\n\n| option                                          | explanation                                |\n| ----------------------------------------------- | ------------------------------------------ |\n| 缺省                                            | 匹配行将在首次出现处被合并。               |\n| -c, --count                                     | 在每行前加上表示相应行目出现次数的前缀编号 |\n| -d, --repeated                                  | 只输出重复的行                             |\n| -D, --all-repeated[=delimit-method              | 显示所有重复的行                           |\n| delimit-method={none(default),prepend,separate} | 以空行为界限                               |\n| -f, --skip-fields=N                             | 比较时跳过前N 列                           |\n| -i, --ignore-case                               | 在比较的时候不区分大小写                   |\n| -s, --skip-chars=N                              | 比较时跳过前N个字符                        |\n| -u, --unique                                    | 只显示唯一的行                             |\n| -z, --zero-terminated                           | 使用'\\0'作为行结束符，而不是新换行         |\n| -w, --check-chars=N                             | 对每行第N 个字符以后的内容不作对照         |\n\n\n\n\n## linux文本处理\n\n### 文本处理\n\n#### Vim有3种工作模式：\n命令模式、插入模式、末行模式\n\n##### 命令描述\n\nVim启动后，默认进入命令模式\n\n在任何模式下，都可以按Esc键返回到命令模\n\n在命令模式下，可以键入不同的命令完成选择、复制、粘贴、删除等操作，及进入Insert mode下，或者到 last line mode。\n\n##### 插入模式(Insert mode)\n只有在Insert mode下，才可以编辑文本内容，按ESC键可回到命令行模式。\n在命令行模式下按o、i、a等键可以进入插入模式。\n\n##### 末行模式（last line mode）\n在命令模式下按：键进入末行模式。\n光标会移到屏幕底部，将文件保存或退出Vim，也可以\n\n| Command    | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| h,j,k,l    | 光标上下左右移动。也可以用键盘自带方向键。                   |\n| 0和$       | 光标移动到行首、行尾。                                       |\n| gg和G      | 光标移动到第一行首个字符的位置和光标移动到最后一行首个字符的位置。 |\n| [:]/字符串 | 快速定位到字符所在的行。如果第一次找的关键字不是您想要的，可以一直按n会往后寻找到您要的关键字为止。 |\n| /^d        | 定位首字母为d的行。                                          |\n| /txt$      | 定位结尾为txt的行。                                          |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| yy      | 复制光标所在行到缓冲区。                                     |\n| #yy     | [6yy]表示拷贝从光标所在的该行\"往下数\"6行文字。               |\n| dd      | 删除当前行。                                                 |\n| 4dd     | 从光标所在行开始删除4行。                                    |\n| p       | 将缓冲区内的字符贴到光标所在位置。注意：所有与\"y\"有关的复制命令都必须与\"p\"配合才能完成复制与粘贴功能。 |\n| x       | 每按一次，删除光标所在的字符。                               |\n| D       | 从光标处删除到行尾。                                         |\n| u       | 取消操作。                                                   |\n| ^r      | 重做。                                                       |\n| r       | 可以用来修改一个字符。                                       |\n| yw      | 将光标所在之处到字尾的字符复制到缓冲区中。                   |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| i       | 切换进入插入模式，按\"i\"进入插入模式后是从光标当前位置开始输入文件。 |\n| a       | 进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字。 |\n| o       | 进入插入模式后，是插入新的一行，从行首开始输入文字。         |\n| :       | 进入「Last line mode」。                                     |\n| Esc     | 转到「命令行模式（command mode）」。                         |\n| V       | 进入可视模式。                                               |\n| v       | 进入可视模式。                                               |\n| ^v      | 进入可视块模式。                                             |\n| R       | 进入替换模式。                                               |\n\n| Command        | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| : w filename   | 将文章以指定的文件名filename保存                             |\n| : wq           | 存盘并退出vi                                                 |\n| : q!           | 不存盘强制退出vi(!为强制退出，可以与w合用)                   |\n| :w             | 存盘                                                         |\n| :q             | 退出                                                         |\n| :set nu        | 在文件中的每一行前面列出行号                                 |\n| :set nonu      | 在文件中的每一行前面不列出行号                               |\n| :15            | 跳到文章的第15行                                             |\n| :?关键字       | 查找，如果第一次找的关键字不是您想要的，可以一直按n会往前寻找到您要的关键字为止。 |\n| :1,10s/abc/def | 在第1行到第10行之间进行查找到每1行的第1个abc，并将其过分替换成def。 |\n\n\n### 文本切片和切块\n\n#### 剪切命令cut\n\ncut命令是用于在数据中提取需要的部分。\n注意：cut命令是以行为对象来进行操作的。\n\n```shell\ncut option [file]\n```\n\n在执行cut命令时，必须指定-b、-c、-f标志之一。\n\n\n#### 粘贴命令paste\n\npaste命令的作用与cut命令相反，是向文本中添加信息。\n\n```shell\npaste [option] [file1] [file2]\n```\n\n若使用paste命令的参数-s，则可以将一个文件中的多行数据合并成一行。\n注意：**“-s”只是将文件的内容调整了显示方式，并不会改变原文件的内容形式。**\n\n\n####  连接命令join\n\njoin命令的作用与paste类似，也就是向文本中添加信息\n\n```shell\njoin [option] filename1 filename2\n```\n\n其中option选项可以省略，filename1和filename2必须是有序的，且包含相同的列。\n\n| Option     | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| -a<1或2>   | 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行 |\n| -e<字符串> | 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串 |\n| -i         | 比较栏位内容时，忽略大小写的差异                             |\n| -o<格式>   | 按照指定的格式来显示结果                                     |\n| -t<字符>   | 使用栏位的分割字符                                           |\n| -v<1或2>   | 与-a相同，但是只显示文件中没有相同栏位的行                   |\n| -1<栏位>   | 连接[文件1]指定的栏位                                        |\n| -2<栏位>   | 连接[文件2]指定的栏位                                        |\n\n\n### 文本比较\n\n#### 有序文件逐行比较命令comm\n\ncomm功能是选择或拒绝两个已排序的文本文件的公共的行，是按行进行比较\n\n```shell\ncomm [option] filename1 filename2\n```\n其中option选项可以省略，其中-1、-2、-3分别针对comm输出结果中的第1、第2、第3列不显示。\n\n#### 逐行比较命令diff\n\n文件可以是无序的，可以是大的文件集比较，尤其是在程序开发过程中，修改过后，利用 diff可以很方便地查找版本之间的不同之处。\n\n```shell\ndiff [option] file\n```\n\n| Option                                                  | Explanation                                                  |\n| ------------------------------------------------------- | ------------------------------------------------------------ |\n| 缺省                                                    | 比较文件的异同                                               |\n| -<行数>                                                 | 指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。     |\n| -a或--text                                              | diff预设只会逐行比较文本文件。                               |\n| -b或--ignore-space-change                               | 不检查空格字符的不同。                                       |\n| -B或--ignore-blank-lines                                | 不检查空白行。                                               |\n| -c                                                      | 显示全部内容，并标出不同之处。                               |\n| -C<行数>或--context<行数>                               | 与执行“-c-<行数>”指令相同。                                  |\n| -d或--minimal                                           | 使用不同的演算法，以小的单位来做比较。                       |\n| -D<巨集名称>或ifdef<巨集名称>                           | 此参数的输出格式可用于前置处理器巨集。                       |\n| -e或--ed                                                | 此参数的输出格式可用于ed的script文件。                       |\n| -f或-forward-ed                                         | 输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。 |\n| -H或--speed-large-files                                 | 比较大文件时，可加快速度。                                   |\n| -l<字符或字符串>或--ignore-matching-lines<字符或字符串> | 若两个文件在某几行有所不同，而之际航同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。 |\n| -i或--ignore-case                                       | 不检查大小写的不同。                                         |\n| -l或--paginate                                          | 将结果交由pr程序来分页。                                     |\n| -n或——rcs                                               | 将比较结果以RCS的格式来显示。                                |\n| -N或--new-file                                          | 在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录，文件A 若使用-N参数，则diff会将文件A 与一个空白的文件比较。 |\n| -p                                                      | 若比较的文件为C语言的程序码文件时，显示差异所在的函数名称    |\n| -P或--unidirectional-new-file                           | 与-N类似，但只有当第二个目录包含了第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。 |\n| -q或--brief                                             | 仅显示有无差异，不显示详细的信息。                           |\n| -r或--recursive                                         | 比较子目录中的文件。                                         |\n| -s或--report-identical-files                            | 若没有发现任何差异，仍然显示信息。                           |\n| -S<文件>或--starting-file<文件>                         | 在比较目录时，从指定的文件开始比较。                         |\n| -t或--expand-tabs                                       | 在输出时，将tab字符展开。                                    |\n| -T或--initial-tab                                       | 在每行前面加上tab字符以便对齐。                              |\n| -u，-U<列数>或--unified=<列数>                          | 以合并的方式来显示文件内容的不同。                           |\n| -w或--ignore-all-space                                  | 忽略全部的空格字符。                                         |\n| -W<宽度>或--width<宽度>                                 | 在使用-y参数时，指定栏宽                                     |\n| -x<文件名或目录>或--exclude<文件名或目录>               | 不比较选项中所指定的文件或目录                               |\n| -X<文件>或--exclude-from<文件>                          | 可以将文件或目录类型存成文本文件，然后在=<文件>中指定此文本文件。 |\n| -y或--side-by-side                                      | 以并列的方式显示文件的异同之处。                             |\n| --left-column                                           | 在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。 |\n| --suppress-common-lines                                 | 在使用-y参数时，仅显示不同之处。                             |\n\n\n#### 格式化输出printf\n\n```shell\nprintf format [argument]\n```\n\n##### 参数选项表\n\n| Option | Explanation                           |\n| ------ | ------------------------------------- |\n| %s     | 字符串                                |\n| %f     | 浮点格式                              |\n| %c     | ASCII字符，即显示对应参数的第一个字符 |\n| %d,%i  | 十进制整数                            |\n| %o     | 八进制值                              |\n| %u     | 不带正负号的十进制值                  |\n| %x     | 十六进制值（a-f）                     |\n| %X     | 十六进制值（A-F）                     |\n| %%     | 表示%本身                             |\n\n##### 常用转义字符\n\n| 转义字符 | Explanation                                      |\n| -------- | ------------------------------------------------ |\n| \\a       | 警告字符，通常为ASCII的BEL字符。                 |\n| \\b       | 后退                                             |\n| \\f       | 换页                                             |\n| \\n       | 换行                                             |\n| \\r       | 回车                                             |\n| \\t       | 水平制表符                                       |\n| \\v       | 垂直制表符                                       |\n| \\\\       | 表示\\本身                                        |\n| \\ddd     | 表示1到3位数八进制值的字符。仅在格式字符串中有效 |\n| \\0ddd    | 表示1到3位的八进制值字符                         |\n\n\n\n#### 格式化段落fmt\n\nfmt命令的作用是格式化段落，使文本看上去更加整齐。\n\n```shell\nfmt [option] [filename]\n```\n\n#### 行标命令nl\n\nnl命令的功能是为文本创建行号，如果不保存，nl只会在输出中加入行号，阅读起来更加方便，不会影响原文件的文本内容。\n\n```shell\nnl [option] [filename]\n```\n\n\n#### 指定行长度命令fold\n\nfold命令是对行进行操作，将文本行进行折叠，长行分解成短行。\n\n```shell\nflod [option] [filename]\n```\n\n\n### 文本分析工具\n\n#### awk\nawk是一个文本处理工具，完成字符串查找、替换、加工等操作，还包含可以进行模式装入、流控制、数学运算、进程控制等语句。\n```shell\nawk ‘pattern {action}’ file\n```\nawk扫描file中的每一行，对符合模式 pattern的行执行操作action。也可以只有pattern或者action，\n\n\n## 进程管理\n\n### 进程基础\n\n#### 进程概念\n\n-Linux可以同时执行多个用户的多个程序。为了保证程序能够并发执行，需要对程序的执行过程进行动态控制。\n- 进程就是用来描述这一控制过程的，组织安排不同程序等待CPU的调度。\n- 进程是一个具有一定独立功能的程序或程序段在一组数据集合上的一次动态执行过程，同时也是程序能够并发执行的基础机制。\n- 各种资源的分配和管理都是以进程为单位\n\n\n#### 进程的基本组成结构\n\n- 进程控制块PCB(Processing Control Block)是进程动态特征的反映，主要包括进程的描述信息、控制信息、进程使用资源情况等。用于跟踪管理程序状态。\n- 程序段是该进程需要完成功能的程序代码。\n- 数据结构集是进程执行时需要访问的工作区和数据对象，即执行进程时需要的系统资源\n\n\n\n进程在创建时，会被内核赋予一个PID(非负整数)作为进程**唯一标识号。**\n进程PID可以重用，当进程终止后，Linux一般通过延迟重用算法，使得赋予新进程的PID不同于最近终止进程的PID\n\n#### 根据进程的特点和属性，将进程分为\n\n1. 交互进程：由Shell启动的进程，既可以在前台运行，也可以在后台运行，且必须由用户给出某些参数或者信息，进程才能继续执行。\n2. 批处理进程：与终端没有联系，是一个进程序列，负责按照顺序启动其他进程。\n3. 守护进程：执行系统特定功能或者执行系统相关任务的进程，并在后台运行。\n守护进程是一个特殊进程，不是内核的组成部分。\n大部分守护进程是在系统启动时启动，直到系统关闭时才停止运行。 \n\n\n#### 进程运行环境\n\n进程运行环境是由它的程序代码、程序运行所需的数据结构和硬件环境组成的\n\n\n##### 进程运行环境主要包括：\n\n1. 进程空间中的代码和数据、各种数据结构、进程堆栈和共享内存区等。\n2. 环境变量：提供进程运行所需的环境信息。\n3. 系统数据：进程空间中的对进程进行管理和控制所需的信息，包括进程任务结构体以及内核堆栈等。\n4. 进程访问设备或者文件时的权限。\n5. 各种硬件寄存器。\n6. 地址转换信息。\n\n\n进程的运行环境是动态变化的。\n\n在Linux中把系统提供给进程的处于动态变化的运行环境总和称为进程上下文。\n\n\n### 进程管理\n\n#### Linux进程状态\n\n运行状态、就绪状态、阻塞状态（睡眠状态、暂停状态、僵死状态）\n\n进程之间相互独立，一个进程不能改变另一个进程的状态\n\n\n##### 运行状态\n\n它是在run_queue队列里的状态，占有CPU处理进程任务，一个进程只能出现在一个CPU的可执行队列里。同一时刻允许有多个进程处于运行状态，但运行状态的进程总数应小于或等于处理器的个数。\n运行状态分为**用户运行态**和**内核运行态**两种，在内核态下运行的进程不能被其他进程抢占。\n\n##### 就绪状态\n\n就绪状态。该状态的进程已经拥有除CPU以外的所有请求资源，只等待被核心程序调度。\n只要被分配到CPU就可执行，在队列中按照进程优先级进行排队。\n\n##### 睡眠状态\n\n睡眠状态。处于该状态的进程需要被某一事件触发才可继续执行，分为可中断的睡眠状态和不可中断的睡眠状态。\n处于可中断的睡眠状态的进程，是在等待资源被释放，一旦得到资源，进程就会被唤醒进入就绪态。\n由于CPU数量有限，而进程数量众多，所以很多请求无法及时得到响应，因此大部分进程都处于可中断的睡眠状态。\n处于不可中断睡眠状态的进程，只能通过 wake_up( )函数唤醒。 \n\n##### 暂停状态\n\n暂停状态（跟踪状态）。是指进程从内核返回用户时，被核心程序抢先调度了另一个进程，该进程就处于暂停状态。\n处于暂停状态的进程只有等待下次调度，才能返回用户态。当进程收到信号SIGSTOP时会进入暂停状态，发送SIGCONT信号，进程可转换到运行状态。\n\n##### 僵死状态\n\n僵死状态。处于该状态的进程已经终止运行，等待父进程询问其状态，收集它的进程控制块所占资源。\n\n#### 三种基本状态\n\n![image-20211207104316412](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211207104316412.png)\n\n\n（1）运行态：已经分配到CPU，正在处理器上执行。\n（2）就绪态：已经具备运行条件，但所需 CPU资源被其他进程占用，需等待分配CPU。\n（3）阻塞态：尚不具备运行条件，需要等待某种事件的发生，即使CPU空闲，也无法使用。\n\n\n#### 查看进程\n\nps命令可以查看系统中正在运行的进程信息以及进程的状态\n\n```shell\nps [option]\n```\n\n| Option(part)   | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| a              | 显示现行终端机下的所有程序，包括其他用户的程序。             |\n| -A or -e       | 列出所有的行程                                               |\n| -w             | 显示加宽可以显示较多的资讯                                   |\n| -au            | 显示较详细的资讯                                             |\n| -aux           | 显示所有包含其他使用者的行程                                 |\n| c              | 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。 |\n| e              | 列出程序时，显示每个程序所使用的环境变量。                   |\n| f              | 用ASCII字符显示树状结构，表达程序间的相互关系。              |\n| -H             | 显示树状结构，表示程序间的相互关系。                         |\n| -N             | 显示所有的程序，除了执行ps指令终端机下的程序之外。           |\n| s              | 采用程序信号的格式显示程序状况。                             |\n| S              | 列出程序时，包括已中断的子程序资料。                         |\n| -t<终端机编号> | 指定终端机编号，并列出属于该终端机的程序的状况。             |\n| u              | 以用户为主的格式来显示程序状况。                             |\n| x              | 显示所有程序，不以终端机来区分。                             |\n| j              | BSD（Berkeley Software Distribution） job contorl format     |\n| -j             | BSD jobs format                                              |\n\n输出信息的意义\n\n| 名称    | 说明                                                         |\n| ------- | ------------------------------------------------------------ |\n| USER    | 行程拥有者                                                   |\n| PID     | pid                                                          |\n| %CPU    | 占用的CPU使用率                                              |\n| %MEM    | 占用的存储器使用率                                           |\n| VSZ     | 占用的虚拟记忆体大小                                         |\n| RSS     | 占用的存储器大小                                             |\n| TTY     | 终端的次要装置号码 (minor device number of tty)              |\n| STAT    | 该行程的状态                                                 |\n| START   | 行程开始时间                                                 |\n| TIME    | 执行的时间                                                   |\n| COMMAND | 所执行的指令                                                 |\n| PPID    | 父进程的ID                                                   |\n| PRI     | 指进程的执行优先权(Priority的简写)，其值越小越早被执行；     |\n| NI      | 这个进程的nice值，其表示进程可被执行的优先级的修正数值。     |\n| ADDR    | 这个是内核函数，指出该程序在内存的那个部分。如果是个执行 的程序，一般就是『 - 』。 |\n| SZ      | 使用掉的内存大小。                                           |\n| WCHAN   | 目前这个程序是否正在运作当中，若为 - 表示正在运作。          |\n\n| STAT | 该行程的状态说明               |\n| ---- | ------------------------------ |\n| D    | 不可中断的静止                 |\n| R    | 正在执行中                     |\n| S    | 静止状态                       |\n| T    | 暂停执行                       |\n| Z    | 不存在但暂时无法消除           |\n| W    | 没有足够的记忆体分页可分配     |\n| <    | 高优先序的行程                 |\n| N    | 低优先序的行程                 |\n| L    | 有记忆体分页分配并锁在记忆体内 |\n\n\n#### 查看指定进程PID的方法\n\n1. 使用cat命令\n ```shell\ncat /run/sshd.pid\n ```\n2. 使用pidof命令\n```shell\npidof sshd\n```\n3. 使用pgrep命令\n```shell\npgrep sshd\n```\n\n#### 实时动态显示进程信息命令top\n\ntop命令将按照进程活动顺序，持续更新显示当前系统进程的信息。\n\n\n#### kill命令\n\nkill命令用来终止指定进程的运行。\n首先使用ps/pidof/top等工具获取进程PID，然后使用kill命令来杀死该进程。\nkill命令是通过向进程发送指定的信号来结束相应的进程。\n在默认情况下，采用编号为15的TERM信号。\n\n常用信号\n\n| 信号编号 | 名称    | 特性及意义                                                   |\n| -------- | ------- | ------------------------------------------------------------ |\n| 1        | SIGHUP  | 启动被终止的进程，重新加载，PID不会发生变化。                |\n| 9        | SIGKILL | 强制终止进程，使用此信号可能导致进程无法再次启动。           |\n| 15       | SIGTERM | 默认信号，以正常流程终止进程，允许进程释放资源。若进程已经出现问题，无响应，此信号不起作用。 |\n| 18       | SIGCONT | 恢复进程。                                                   |\n| 19       | SIGSTOP | 暂停进程。                                                   |\n\n进程优先级是一个整数，动态优先级和静态优先级决定了进程被CPU处理的顺序。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 指令\n\n### 文件类型判断\n\n```shell\nfile [option] filename\n```\n|第一个字符|\t文件类型|\n|:---:|:---:|\n|-\t|普通文件（如文本文件、二进制文件、压缩文件、图片等）|\n|d\t|目录文件（蓝色）|\n|b\t|设备文件（块设备），存储设备硬盘、U盘、/dev/sda等|\n|c\t|设备文件（字符设备），打印机、终端、/dev/tty1、/dev/zero|\n|s\t|套接字文件|\n|p\t|管道文件|\n|l\t|链接文件（淡蓝色）|\n\n\n### 查看文件的详细属性\n\n```shell\nstate [option] filename\n```\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -[[a]]\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n```shell\nfind [pathname] [option] filename\n```\n\n### 查看用户登录信息\n\n```shell\nid [option][username]\n```\n\n### 查看进程\n\n```shell\nps aux | less命令查看进程\n```\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n","source":"_posts/Linux知识点总结.md","raw":"---\ntitle: Linux期末知识点总结\ndate: 2021-12-30 18:50:45\ndescription: Linux知识点总结\ncategories: \"Linux\" #分类\ntags:   #标签\n    - 课程学习\n    - Linux\n---\n\n\n# Linux知识点总结\n\n## Linux概述\n\n### Linux系统的优缺点\n\n1. 优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；\n2. 缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。\n\n### Linux系统的特点\n\n1. 一切皆文件\n2. 完全兼容可移植操作系统接口POSIX1.0标准\n3. 多用户、多任务\n4. 完全免费\n\n### Linux的含义\n\nLinux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。\n通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。\nLinux是类UNIX操作系统。\n\n### Linux的诞生、发展和成长过程依赖五个重要支柱\n\n1. UXIX操作系统\n2. MINIX操作系统\n3. GNU计划\n4. POSIX标准\n5. Internet\n\n\n### Linux内核的组成\n\n1. 内存管理器：对内存资源的访问控制。\n2. 进程管理器：对CPU的访问控制。\n3. 设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。\n4. 虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。\n5. 网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。\n\n### shell 分为\n\n1. GLI命令行界面\n2. GUI图用户界面\n\n### Linux文件系统\n\nLinux一切皆文件；\n文件系统是指文件存放在磁盘等存储设备上的组织方法。\n\n## Linux基本操作\n\n### 基本命令\n\n**命令格式**： command [options] [arguments]  ，命令名：[选项]：[参数]\n\n### 获取帮助\n\n```shell \nman [option] filename\n```\n\n```shell\n--help |more\n```\n### 日志\n\nLinux 日志文件存放在 /var/log目录下\n\n日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。\n\n## 文件系统和文件管理\n\n### Linux文件类型\n\n1. 普通文件\n2. 目录文件\n3. 链接文件\n4. 设备文件\n5. 管道文件\n\n\n#### 普通文件\n\n- 普通文件是指以**字节**为单位的**数据流**类型文件，其特点是不包含文件系统的结构信息。\n- 通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。\n- 按其内部结构分为文本文件和二进制文件。\n\n#### 目录文件\n\n- 目录文件不存放常规数据，它是用来**组织**、**访问**其他文件的，是内核组织文件系统的基本节点。\n- 目录文件可以包含下一级目录文件或普通文件。\n- 目录文件是一种文件，是Linux文件中的一种\n\n\n#### 链接文件\n\n- 链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。\n- 根据链接文件的不同，分为**硬链接**（Hard Link）文件和**符号链接**（Symbolic Link，又称为软链接）文件\n\n\n#### 设备文件\n- 设备文件是Linux中最特殊的文件，可以方便地访问外部设备。\n- Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。\n- 设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。\n- 根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。\n\n#### 管道文件\n- 管道文件是一种很特殊的文件，主要用于不同进程的信息传递。\n- 当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。\n\n### 文件类型判断\n```shell\nfile [option] filename\n```\n\n### 查看文件的详细属性\n\n使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等\n\n```shell\nstate [option] filename\n```\n\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 绝对路径和相对路径\n\n- 绝对路径是以根目录“/”开始，递归每级目录直到目标路径。\n- 相对路径是以当前目录为起点，到达目标的路径。\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -a\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n\nfind:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。\n\n```shell\nfind [pathname] [option] filename\n```\n\n\n### linux 文件链接\n\n#### 硬链接\n\n- 默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。\n- 创建一个硬链接时，也为这个文件创建了一个额外的目录条目。\n\n##### 硬链接的局限性\n（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。\n（2）硬链接无法引用目录。\n\n当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了\n\n#### 符号链接（软链接）\n\n符号链接指向的文件与符号链接自身几乎没有区别。\n\n### 文件时间\n\n在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。\n\n\n#### 1.访问时间（Access time）\n\n对文件内容进行一次读操作时间。\n\n#### 2.修改时间（Change time）\n\n文件内容被最后一次修改的时间。\n\nls -l 命令显示出来的文件时间就是这个时间\n\n#### 3.状态时间（Modify time）\n\n当文件的状态被改变时，状态时间就会改变\n\n## Linux用户管理\n\n超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。\n\nLinux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID\n\nid命令可以查看当前用户登录信息。\n- UID(User Identification)为用户的ID。\n- GID(Group Identification)为用户所属组的ID。\n- groups为用户属于的所有组的ID。\n\n\nps aux | less命令查看进程\n\n\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n#### 查看用户的分组\n1. groups命令查看。命令：\n```shell\ngroups\ngroups user1 user2\n```\n2. 查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。\n3. id命令法，只执行id命令就可以查看。命令：\n```shell\nid\nid user2\n```\n\n### 和用户相关的一些系统文件\n1. /etc/passwd文件保存用户信息。\n2. /etc/shadow文件保存加密的用户密码。\n3. /etc/group文件保存用户组信息。\n4. /etc/login.defs配置文件。\n\n**su root**可以返回root \n\n\n## 文件权限\n\n权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。\n\n### U G O\n\nU: owner为属主，文件所有者。\nG：group为属组，同组用户。\nO：other为其他用户。\n\n### UGO方式每组的3个字符具体意义如下：\n\nr:read，数字设定值为4\nw:write,数字设定值为2\nx:execute,数字设定值为1\n\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\n\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n\n## linux编程基础\n\nmake可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，\n\nmake通过makefile文件描述的内容自动维护编译工作。\n\n\n\n\n## shell编程\n\nShell脚本是一个包含一系列命令的文件。 \nShell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。\n\n### 用Shell脚本的原因：\n1. 效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 \n2. 简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。\n3. 可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。\n4. 开发容易：可以在短时间内完成一个功能强大又好用的脚本。\n\n### Shell分类：\n1. 用于用户交互接口的Shell称为交互式Shell。\n2. 作为命令解析器的Shell称为非交互式Shell。\n\n### ```#!/bin/bash```\n脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，\n\n\nShell的注释以“#”开头，注释的内容不会执行。\n\n\n给文件helloxiangtian.sh增加可执行权限\n```shell\nchomd +x helloxiangtan.sh\n```\n\n### Shell变量命名规则：\n\n变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 \n\n### shell变量分类\n\nShell变量分为自定义变量、环境变量、位置变量和预定义变量。\n\n根据工作要求临时定义的变量称为自定义变量。\n环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。\n从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。\n预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$\\*等。\n\nShell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。\n\n#### 自定义变量\n| | |\n|:---:|:---:|\n|定义自定义变量| 变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。|\n|使用自定义变量| $变量名|\n|查看自定义变量| echo $变量名 set（所有变量：自定义变量和环境变量）|\n|取消自定义变量| unset 变量名|\n|自定义变量作用范围|   仅在当前shell中有效|\n\n#### 环境变量\n\n在各种编程语言中会提及全局变量概念。\n全局变量可以在程序的任何地方使用。\n在Shell编程中该功能由环境变量实现。\n系统中的所有进程都可以使用环境变量。\n环境变量与全局变量区别：\n子进程对环境变量的修改不会传递到父进程中。\n\n|||\n|:---:|:---:|\n定义环境变量  |使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。|\n|使用环境变量  |$变量名或$｛变量名｝|\n|查看环境变量  |echo $变量名 或env，如env |grep back_dir|\n|取消环境变量  |unset 变量名|\n|环境变量作用范围   | 仅在当前shell和子shell中有效|\n\n#### 位置变量\n\n位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。\n执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。\n\n```shell\n$0代表命令本身，$1-$9代表接收的第1~9个参数，$10以上需要用{}括起来，如${20}代表接收的第20个参数。\n```\n\n#### 预定义变量\n\n预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。\n\n|预定义变量 |  说明|\n|:---:|:---|\n|$0|  脚本名|\n|$*|  所有的参数|\n|$@|  所有的参数|\n|$#|  参数的个数|\n|$$|  当前进程的PID|\n|$!|  上一个后台进程的PID|\n|$?|  上一个命令的返回值，0表示成功。|\n\n\n### 变量的操作\n变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。\n\n变量创建好后，可以用$变量名的方式获取变量的值。\n\n\n可以使用$符号获取变量的值。\n\n用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。\n\n#### 变量的删除\n\n|格式 | 说明|\n|:---:|:---:|\n|${变量名#关键字符} |变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名##关键字符}|    变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。|\n|${变量名%关键字符} |变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。|\n|${变量名%%关键字符}|    变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。|\n\n#### 变量的替换\n\n|格式  |说明|\n|:---:|：---：|\n|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|\n|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|\n\n#### 变量的替代\n\n```shell\n${变量名-新的变量名}\n```\n\n\n在Shell中，变量值的类型默认是字符串，不直接进行运算。\n\n用于整数运算的方法有expr、(())和$[]。\n\n\n### 运算\n```shell\nexpr expression\n例：\nn1 + n2\nexpr $n1 + $n2\n```\n运算符及用于计算的数字两边必须有空格，否则会执行失败。\n用expr进行乘法运算时，必须在*前用反斜线转义（Shell可能误解为*号）。\n\n\n\n“（（））”或“[ ]”数值运算命令\n双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符\n格式：\n“ ((expression))”，或“ [expression]”\n括号内部两侧可以有空格，也可省空格。\n需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符\n```shell\nn1+n2\n$(($n1+$n2))\n$[$n1+$n2]\n```\n\nlet数值运算命令\n\n```shell\nlet expression\n\n例：\nlet sum = n1+n2;\n```\n\nlet数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量\n\n### shell中的特殊符号\n\n#### 1. “#”表示注释。\n- 行首为#（#!是个例外）表示此行是注释。\n- 注释也可以放在本行命令的后面，需要注意的是#两边有空格。\n- 释也可以放在本行行首空白的后面。\n\n#### 2. \" ; \"\n\n- “;”在同一行中分隔两个或者两个以上的命令。\n- “;”也适用于循环语句\n\n#### 3. “;;”\n\n- 用于终止case语句\n\n#### 4. “:”\n\n- 空命令“:”和true命令作用相同。\n- 在while死循环和if/then中也可使用这个命令。\n\n\n#### 5. “.”\n\n- “.”等价于source命令，是bash中的一个内建命令。\n- “.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。\n- 当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。\n\n### 输入输出\n\n#### 输出\n\n##### echo\necho命令是最常用的，其功能是将字符串输出到屏幕\n\n```shell\necho [-ne] [string]\n```\n其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符\n\n##### printf\n\n输出命令printf的功能是格式化输出数据\n```shell\nprintf format [arguments...]\n```\n\nformat为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。\narguments为要输出的数据。\n\n#### 输入\n\n##### 1. 直接给变量赋值\n\n例如，name=liming\n\n##### 2. 从键盘读入赋值\n\n- read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。\n```shell\nread  [options] [variable…]\n```\n\n##### 3. 使用命令行参数赋值\n\n使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数......，这种赋值方法适用于参数经常变化且不需要交互的情况。\n\n##### 4. 利用命令的输出结果赋值\n\n- 在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。\n- 把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名\n\n##### 5. 从文件中读入数据赋值\n\n这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。\n\n#### 引用\n```\n1. 转义字符：用于引用任意的单个字符。\n2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。\n3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。\n```\n\n### 条件测试\n\n#### 文件测试\n1. test\n```shell\n“test  <expression>”\n```\n2. “<测试表达式>”\n\n也可以使用“<测试表达式>”，就是使用中括号。\n语法格式：\n“ [  <expression> ]”\n注意：[]与expression之间必须有空格。 \n通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。\n\n#### 整数测试\n\n整数测试通常用于数值之间的运算。\n```shell\n语法格式：\n       [ 整数1 操作符 整数2 ]\n或   test 整数1 操作符 整数2。\n```\n\n|操作符1  |  操作符2(部分能用)  意义|\n|:---:|:---:|\n|-eq ==|  等于（Equal）|\n|-ge >=|  大于等于（Greater or Equal）|\n|-gt > |  大于（Greater Than-le）|\n|-le <=|  小于等于（Lesser or Equal）|\n|-lt   |  <   小于（Lesser Than）|\n|-ne !=|  不等于（Not Equal）|\n\n#### 字符串测试\n\n字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。\n\n```shell\n[ 字符串1 = 字符串2 ]\n[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]\n```\n\n#### 逻辑运算符\n\n```shell\n[ expression1 op expression2 ]\nor       command1 op commnad2\n\n```\n\n|Operator |   意义|\n|:---:|:---:|\n|! expr | 如果表达式评估为假，则为真|\n|expr1 -a expr2 | 如果 expr1 和 expr2 都为真，则结果为真，&&|\n|expr1 -o expr2  |如果 expr1 或 expr2 为真，则结果为真，|||\n\n### if语句格式\n\n```shell\n语句格式：\nif [ expression ];then  code\nfi\n\n\nif [ expression ]  \nthen code\nfi\n```\n\n\n```shell\nif [ expression ];then  code1\nelse code2\nfi\n\n\nif [ expression ]  \nthen   code1\nelse  code2\n```\n\n```shell\nif expression; then\n command…\n[elif expression; then\n command…]\n[else\n command…]\nfi\n```\n\n### case\n```shell\ncase value in\n    [ expression1) code1\n    ;;\n    expression2) code2\n    ;;\n    …\n    *）code\n    ]\nesac\n```\n\n\n### 循环\n\n#### while 命令\n\n```shell\nwhile expression; do\n       command…\ndone   \n```\n#### until命令\n\n```shell\nuntil expression; do\n     command…\ndone\n```\n\n#### for循环\n```shell\nfor  variable in [in sequence]\ndo\n    code\ndone \n\n```\n```shell\nfor  变量名 in 取值列表；do     循环体 done\n\n```\n```shell\nfor variable [in sequence]; do\n          command…\n     done\n```\n```shell\nfor ((expression1; expression2; expression3;));do\n           command…\n     done\n```\n\n\n在循环后面加个 & 符号表示在后台执行\n\n\n### 数组\n\n#### 数组分为普通数组和关联数组。\n普通数组中的索引（下标）都是整数。\n关联数组的数组索引可以用任意的文本。\n\n两者最大区别：\n- 关联数组使用之前需要声明。\n- 关联数组是由特定格式的键值对组成\n\n#### 普通数组\n定义：\n```shell\narrayname=（value_table）\n```\n\nvalue_table中值之间用空格隔开。\n\n\n#### 关联数组\n定义：\n```shell\narrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)\n```\n其中：\nindexei可以用标识符表示。\n\n\n声明普通数组方法：\n#declare -a arrayname\n声明关联数组方法：\n#declare -A arrayname\n\n#### 数组定义方法\n\n- 直接定义数组\n- \n```shell\narrayname=(value1 value2 value3 ... valuen)\n```\n\n- 下标定义数组\n- \n```shell\narray_name=([index1]=value1 [index2]=value2 ...)\n```\n\n- 间接定义数组\n\n```shell\narray[0]=value1;array[1]=value2;....\n```\n\n- 从文件中读入定义数组。\n\n```shell\narray_name=($(command))\narray_name=($(`variable`))\n\nor \n\narray_name=(`command`)\narray_name=(`variable`)\n\n```\n\n#### 访问数组表达式\n\n\n\n| 语法                 | 描述                         |\n| -------------------- | ---------------------------- |\n| echo ${!array[*]}    | 访问数组所有索引             |\n| echo ${!array[@]}    | 访问数组所有索引             |\n| echo ${array[*]}     | 访问数组所有值               |\n| echo ${array[@]}     | 访问数组所有值               |\n| echo ${#array[@]}    | 统计数组元素个数             |\n| echo ${array[0]}     | 访问数组第0个元素            |\n| echo ${array[@]:1}   | 从数组下标1开始              |\n| echo ${array[@]:1:2} | 从数组下标1开始，访问2个元素 |\n| echo ${#array[#]}    | 第#个元素的字符个数          |\n| echo ${#array}       | 第0个元素的字符个数          |\n| echo ${array[#]}     | 显示第#个元素                |\n| echo ${array}        | 显示第0个元素                |\n\n\n#### 数组删除\n\n删除数组命令格式：\n```shell\nunset array\n```\n删除数组中指定元素命令格式：\n```shell\nunset array[subscript]\n```\n\n#### 数组的截取和替换\n\n- 通过${数组名[@或*]:起始位置:长度}切片原先数组，返回的是字符串，中间用空格分开。\n- 如果加上“()”，就可以得到切片数组。\n\n### 函数\n\n函数定义：\n\n```shell\nfunction name{\n     command…\n      [return]\n}\n\nor\n\nname(){\n   command…\n   [return]\n}\n```\n\nreturn只能用于函数中，表示将返回值提供给函数的调用命令。 \nexit可以用于程序的任意位置，表示退出当前程序并将退出状态返回到父进程。\n\n## Linux多命令协作(I/O重定向与管道）\n\n### 命令行shell数据流定义为\n\n1. 标准输入STDIN(standard input)：是用来采集信息的，命令是通过STDIN接收参数或数据，默认情况下，标准输入就是从键盘读入数据。\n\n2. 标准输出STDOUT(standard out)：是用来输出结果的。\n3. 标准错误STDERR(standard error)：是输出状态或错误信息等。\n\n\n### 重定向\n\n输入ls命令，会显示出当前目录下的文件和目录。如果在ls命令后加入“>”，并指向ls1.txt文件，那么结果就会写入ls1.txt文件中。\n\n\n#### 文件描述符\n\n每一个进程在运行中都会打开一些文件，每一个文件都会有一个指定的数字标识，这个标识就叫做文件描述符。\n\n- 0表示为标准输入，可以理解为键盘输入。\n- 1表示为标准输出，输出到终端。\n- 2表示为标准错误，输出到终端。\n- 3及以上为常规文件的描述符\n- \n#### 重定向标准输出\n\n默认情况下，标准输出在屏幕上显示，而重定向标准输出可以重新定义输出内容到文件。\n\n##### 重定向标准输出格式:\n\n- 重定向符“>”是把标准输出重定向到文件，即将标准输出内容保存到文件中，是覆盖操作。\n如果目标文件不存在，则创建文件并将标准输出内容保存进去；如果目标文件存在，则覆盖其中的内容。\n- 重定向符号“>>（中间没有空格）”是追加操作，实现连续保存文件中的内容。\n即原来的文本内容不会被覆盖，而是在文件尾部添加标准输出的内容。如果文件不存在，也会自动创建。\n\n\n#### 重定向标准输入\n\n默认情况下，标准输入就是从键盘读入数据，每次一行。\n重定向标准输入可以重新定义从文件中读入数据。\n\n通过重定向符“<”，可以把标准输入重定向到文件，即从文件中读入数据作为某条命令的输入数据。\n\n#### 重定向标准错误\n\n默认情况下，标准错误在屏幕上显示，而重定向标准错误可以重新定义输出错误内容到文件\n\n###### 重定向标准错误格式：\n通过重定向符“2>”把标准错误内容保存到文件中，是覆盖操作。\n\n- 如果目标文件不存在，则创建文件并将标准错误内容保存进去。\n- 如果目标文件存在，则覆盖其中的内容。\n- 此命令用于日志中，执行一条指令可能有很多步操作。如果只想保存报错信息，就可用此命令。\n重定向符号“2>&1（中间没有空格）”是将标准输出和标准错误结合在一起输出到文件，即将正确结果及错误全部输出到文件。\n\n#### Subshell\n\n- Subshell是指括在圆括号里的命令会在另外的进程中执行。\n- 当需要让一组命令在不同的目录下执行时，采用这种方法可以不修改主脚本的目录。\n- 对比不加圆括号的命令与加圆括号的命令。\n\n### 管道\n\n管道实际上也是一种重定向，重定向字符控制输出到文件，管道控制输出到其他程序。\n\n管道的作用是把上一个进程的输出作为下一个进程的输入，利用管道可以把若干个命令连接在一起。\n\n\n#### 统计字数命令wc\n\n```shell\nwc [option] [file]\n```\n\n| option | explanation                                                  |\n| ------ | ------------------------------------------------------------ |\n| 缺省   | 统计每个文件的行数、字数、字节数及其汇总。                   |\n| -c     | 统计字节数。                                                 |\n| -l     | 统计行数。                                                   |\n| -m     | 统计字符数。这个标志不能与 -c 标志一起使用。                 |\n| -w     | 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。 |\n| -L     | 打印最长行的长度。                                           |\n\n\n##### 行、单词、字符的定义如下：\n1. 行：以新行字符（如 Enter 键）结尾的一串字符。\n2. 单词：是一串连续的字符，用空格、制表符或新行字符分隔。\n3. 字符：字母、数字、标点符合、空格、制表符或新行字符。\n\n\n#### 管道线分流命令tee\n\ntee命令的作用是从标准输入读取数据，并向标准输出和一个或更多的文件发送数据\n\n```shell\ntee [-ai] [file...]\n```\n\n| option | explanation  |\n| ------ | ------------ |\n| 缺省   | 覆盖         |\n| -a     | 追加         |\n| -i     | 忽略中断信号 |\n\n\n#### 查找重复行命令uniq\n\n消除重复行、选取重复行、选取唯一行和统计重复行的数量。\n\n```shell\nuniq [option] [input [output]]\nuniq [选项]... [文件]\n```\n\ninput是输入文件，若指定了该参数，uniq命令从该文件读入数据。\noutput是输出文件，若指定了该参数，则uniq命令将输出结果保存到该文件中。\n\n| option                                          | explanation                                |\n| ----------------------------------------------- | ------------------------------------------ |\n| 缺省                                            | 匹配行将在首次出现处被合并。               |\n| -c, --count                                     | 在每行前加上表示相应行目出现次数的前缀编号 |\n| -d, --repeated                                  | 只输出重复的行                             |\n| -D, --all-repeated[=delimit-method              | 显示所有重复的行                           |\n| delimit-method={none(default),prepend,separate} | 以空行为界限                               |\n| -f, --skip-fields=N                             | 比较时跳过前N 列                           |\n| -i, --ignore-case                               | 在比较的时候不区分大小写                   |\n| -s, --skip-chars=N                              | 比较时跳过前N个字符                        |\n| -u, --unique                                    | 只显示唯一的行                             |\n| -z, --zero-terminated                           | 使用'\\0'作为行结束符，而不是新换行         |\n| -w, --check-chars=N                             | 对每行第N 个字符以后的内容不作对照         |\n\n\n\n\n## linux文本处理\n\n### 文本处理\n\n#### Vim有3种工作模式：\n命令模式、插入模式、末行模式\n\n##### 命令描述\n\nVim启动后，默认进入命令模式\n\n在任何模式下，都可以按Esc键返回到命令模\n\n在命令模式下，可以键入不同的命令完成选择、复制、粘贴、删除等操作，及进入Insert mode下，或者到 last line mode。\n\n##### 插入模式(Insert mode)\n只有在Insert mode下，才可以编辑文本内容，按ESC键可回到命令行模式。\n在命令行模式下按o、i、a等键可以进入插入模式。\n\n##### 末行模式（last line mode）\n在命令模式下按：键进入末行模式。\n光标会移到屏幕底部，将文件保存或退出Vim，也可以\n\n| Command    | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| h,j,k,l    | 光标上下左右移动。也可以用键盘自带方向键。                   |\n| 0和$       | 光标移动到行首、行尾。                                       |\n| gg和G      | 光标移动到第一行首个字符的位置和光标移动到最后一行首个字符的位置。 |\n| [:]/字符串 | 快速定位到字符所在的行。如果第一次找的关键字不是您想要的，可以一直按n会往后寻找到您要的关键字为止。 |\n| /^d        | 定位首字母为d的行。                                          |\n| /txt$      | 定位结尾为txt的行。                                          |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| yy      | 复制光标所在行到缓冲区。                                     |\n| #yy     | [6yy]表示拷贝从光标所在的该行\"往下数\"6行文字。               |\n| dd      | 删除当前行。                                                 |\n| 4dd     | 从光标所在行开始删除4行。                                    |\n| p       | 将缓冲区内的字符贴到光标所在位置。注意：所有与\"y\"有关的复制命令都必须与\"p\"配合才能完成复制与粘贴功能。 |\n| x       | 每按一次，删除光标所在的字符。                               |\n| D       | 从光标处删除到行尾。                                         |\n| u       | 取消操作。                                                   |\n| ^r      | 重做。                                                       |\n| r       | 可以用来修改一个字符。                                       |\n| yw      | 将光标所在之处到字尾的字符复制到缓冲区中。                   |\n\n| Command | Explanation                                                  |\n| ------- | ------------------------------------------------------------ |\n| i       | 切换进入插入模式，按\"i\"进入插入模式后是从光标当前位置开始输入文件。 |\n| a       | 进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字。 |\n| o       | 进入插入模式后，是插入新的一行，从行首开始输入文字。         |\n| :       | 进入「Last line mode」。                                     |\n| Esc     | 转到「命令行模式（command mode）」。                         |\n| V       | 进入可视模式。                                               |\n| v       | 进入可视模式。                                               |\n| ^v      | 进入可视块模式。                                             |\n| R       | 进入替换模式。                                               |\n\n| Command        | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| : w filename   | 将文章以指定的文件名filename保存                             |\n| : wq           | 存盘并退出vi                                                 |\n| : q!           | 不存盘强制退出vi(!为强制退出，可以与w合用)                   |\n| :w             | 存盘                                                         |\n| :q             | 退出                                                         |\n| :set nu        | 在文件中的每一行前面列出行号                                 |\n| :set nonu      | 在文件中的每一行前面不列出行号                               |\n| :15            | 跳到文章的第15行                                             |\n| :?关键字       | 查找，如果第一次找的关键字不是您想要的，可以一直按n会往前寻找到您要的关键字为止。 |\n| :1,10s/abc/def | 在第1行到第10行之间进行查找到每1行的第1个abc，并将其过分替换成def。 |\n\n\n### 文本切片和切块\n\n#### 剪切命令cut\n\ncut命令是用于在数据中提取需要的部分。\n注意：cut命令是以行为对象来进行操作的。\n\n```shell\ncut option [file]\n```\n\n在执行cut命令时，必须指定-b、-c、-f标志之一。\n\n\n#### 粘贴命令paste\n\npaste命令的作用与cut命令相反，是向文本中添加信息。\n\n```shell\npaste [option] [file1] [file2]\n```\n\n若使用paste命令的参数-s，则可以将一个文件中的多行数据合并成一行。\n注意：**“-s”只是将文件的内容调整了显示方式，并不会改变原文件的内容形式。**\n\n\n####  连接命令join\n\njoin命令的作用与paste类似，也就是向文本中添加信息\n\n```shell\njoin [option] filename1 filename2\n```\n\n其中option选项可以省略，filename1和filename2必须是有序的，且包含相同的列。\n\n| Option     | Explanation                                                  |\n| ---------- | ------------------------------------------------------------ |\n| -a<1或2>   | 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行 |\n| -e<字符串> | 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串 |\n| -i         | 比较栏位内容时，忽略大小写的差异                             |\n| -o<格式>   | 按照指定的格式来显示结果                                     |\n| -t<字符>   | 使用栏位的分割字符                                           |\n| -v<1或2>   | 与-a相同，但是只显示文件中没有相同栏位的行                   |\n| -1<栏位>   | 连接[文件1]指定的栏位                                        |\n| -2<栏位>   | 连接[文件2]指定的栏位                                        |\n\n\n### 文本比较\n\n#### 有序文件逐行比较命令comm\n\ncomm功能是选择或拒绝两个已排序的文本文件的公共的行，是按行进行比较\n\n```shell\ncomm [option] filename1 filename2\n```\n其中option选项可以省略，其中-1、-2、-3分别针对comm输出结果中的第1、第2、第3列不显示。\n\n#### 逐行比较命令diff\n\n文件可以是无序的，可以是大的文件集比较，尤其是在程序开发过程中，修改过后，利用 diff可以很方便地查找版本之间的不同之处。\n\n```shell\ndiff [option] file\n```\n\n| Option                                                  | Explanation                                                  |\n| ------------------------------------------------------- | ------------------------------------------------------------ |\n| 缺省                                                    | 比较文件的异同                                               |\n| -<行数>                                                 | 指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。     |\n| -a或--text                                              | diff预设只会逐行比较文本文件。                               |\n| -b或--ignore-space-change                               | 不检查空格字符的不同。                                       |\n| -B或--ignore-blank-lines                                | 不检查空白行。                                               |\n| -c                                                      | 显示全部内容，并标出不同之处。                               |\n| -C<行数>或--context<行数>                               | 与执行“-c-<行数>”指令相同。                                  |\n| -d或--minimal                                           | 使用不同的演算法，以小的单位来做比较。                       |\n| -D<巨集名称>或ifdef<巨集名称>                           | 此参数的输出格式可用于前置处理器巨集。                       |\n| -e或--ed                                                | 此参数的输出格式可用于ed的script文件。                       |\n| -f或-forward-ed                                         | 输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。 |\n| -H或--speed-large-files                                 | 比较大文件时，可加快速度。                                   |\n| -l<字符或字符串>或--ignore-matching-lines<字符或字符串> | 若两个文件在某几行有所不同，而之际航同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。 |\n| -i或--ignore-case                                       | 不检查大小写的不同。                                         |\n| -l或--paginate                                          | 将结果交由pr程序来分页。                                     |\n| -n或——rcs                                               | 将比较结果以RCS的格式来显示。                                |\n| -N或--new-file                                          | 在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录，文件A 若使用-N参数，则diff会将文件A 与一个空白的文件比较。 |\n| -p                                                      | 若比较的文件为C语言的程序码文件时，显示差异所在的函数名称    |\n| -P或--unidirectional-new-file                           | 与-N类似，但只有当第二个目录包含了第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。 |\n| -q或--brief                                             | 仅显示有无差异，不显示详细的信息。                           |\n| -r或--recursive                                         | 比较子目录中的文件。                                         |\n| -s或--report-identical-files                            | 若没有发现任何差异，仍然显示信息。                           |\n| -S<文件>或--starting-file<文件>                         | 在比较目录时，从指定的文件开始比较。                         |\n| -t或--expand-tabs                                       | 在输出时，将tab字符展开。                                    |\n| -T或--initial-tab                                       | 在每行前面加上tab字符以便对齐。                              |\n| -u，-U<列数>或--unified=<列数>                          | 以合并的方式来显示文件内容的不同。                           |\n| -w或--ignore-all-space                                  | 忽略全部的空格字符。                                         |\n| -W<宽度>或--width<宽度>                                 | 在使用-y参数时，指定栏宽                                     |\n| -x<文件名或目录>或--exclude<文件名或目录>               | 不比较选项中所指定的文件或目录                               |\n| -X<文件>或--exclude-from<文件>                          | 可以将文件或目录类型存成文本文件，然后在=<文件>中指定此文本文件。 |\n| -y或--side-by-side                                      | 以并列的方式显示文件的异同之处。                             |\n| --left-column                                           | 在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。 |\n| --suppress-common-lines                                 | 在使用-y参数时，仅显示不同之处。                             |\n\n\n#### 格式化输出printf\n\n```shell\nprintf format [argument]\n```\n\n##### 参数选项表\n\n| Option | Explanation                           |\n| ------ | ------------------------------------- |\n| %s     | 字符串                                |\n| %f     | 浮点格式                              |\n| %c     | ASCII字符，即显示对应参数的第一个字符 |\n| %d,%i  | 十进制整数                            |\n| %o     | 八进制值                              |\n| %u     | 不带正负号的十进制值                  |\n| %x     | 十六进制值（a-f）                     |\n| %X     | 十六进制值（A-F）                     |\n| %%     | 表示%本身                             |\n\n##### 常用转义字符\n\n| 转义字符 | Explanation                                      |\n| -------- | ------------------------------------------------ |\n| \\a       | 警告字符，通常为ASCII的BEL字符。                 |\n| \\b       | 后退                                             |\n| \\f       | 换页                                             |\n| \\n       | 换行                                             |\n| \\r       | 回车                                             |\n| \\t       | 水平制表符                                       |\n| \\v       | 垂直制表符                                       |\n| \\\\       | 表示\\本身                                        |\n| \\ddd     | 表示1到3位数八进制值的字符。仅在格式字符串中有效 |\n| \\0ddd    | 表示1到3位的八进制值字符                         |\n\n\n\n#### 格式化段落fmt\n\nfmt命令的作用是格式化段落，使文本看上去更加整齐。\n\n```shell\nfmt [option] [filename]\n```\n\n#### 行标命令nl\n\nnl命令的功能是为文本创建行号，如果不保存，nl只会在输出中加入行号，阅读起来更加方便，不会影响原文件的文本内容。\n\n```shell\nnl [option] [filename]\n```\n\n\n#### 指定行长度命令fold\n\nfold命令是对行进行操作，将文本行进行折叠，长行分解成短行。\n\n```shell\nflod [option] [filename]\n```\n\n\n### 文本分析工具\n\n#### awk\nawk是一个文本处理工具，完成字符串查找、替换、加工等操作，还包含可以进行模式装入、流控制、数学运算、进程控制等语句。\n```shell\nawk ‘pattern {action}’ file\n```\nawk扫描file中的每一行，对符合模式 pattern的行执行操作action。也可以只有pattern或者action，\n\n\n## 进程管理\n\n### 进程基础\n\n#### 进程概念\n\n-Linux可以同时执行多个用户的多个程序。为了保证程序能够并发执行，需要对程序的执行过程进行动态控制。\n- 进程就是用来描述这一控制过程的，组织安排不同程序等待CPU的调度。\n- 进程是一个具有一定独立功能的程序或程序段在一组数据集合上的一次动态执行过程，同时也是程序能够并发执行的基础机制。\n- 各种资源的分配和管理都是以进程为单位\n\n\n#### 进程的基本组成结构\n\n- 进程控制块PCB(Processing Control Block)是进程动态特征的反映，主要包括进程的描述信息、控制信息、进程使用资源情况等。用于跟踪管理程序状态。\n- 程序段是该进程需要完成功能的程序代码。\n- 数据结构集是进程执行时需要访问的工作区和数据对象，即执行进程时需要的系统资源\n\n\n\n进程在创建时，会被内核赋予一个PID(非负整数)作为进程**唯一标识号。**\n进程PID可以重用，当进程终止后，Linux一般通过延迟重用算法，使得赋予新进程的PID不同于最近终止进程的PID\n\n#### 根据进程的特点和属性，将进程分为\n\n1. 交互进程：由Shell启动的进程，既可以在前台运行，也可以在后台运行，且必须由用户给出某些参数或者信息，进程才能继续执行。\n2. 批处理进程：与终端没有联系，是一个进程序列，负责按照顺序启动其他进程。\n3. 守护进程：执行系统特定功能或者执行系统相关任务的进程，并在后台运行。\n守护进程是一个特殊进程，不是内核的组成部分。\n大部分守护进程是在系统启动时启动，直到系统关闭时才停止运行。 \n\n\n#### 进程运行环境\n\n进程运行环境是由它的程序代码、程序运行所需的数据结构和硬件环境组成的\n\n\n##### 进程运行环境主要包括：\n\n1. 进程空间中的代码和数据、各种数据结构、进程堆栈和共享内存区等。\n2. 环境变量：提供进程运行所需的环境信息。\n3. 系统数据：进程空间中的对进程进行管理和控制所需的信息，包括进程任务结构体以及内核堆栈等。\n4. 进程访问设备或者文件时的权限。\n5. 各种硬件寄存器。\n6. 地址转换信息。\n\n\n进程的运行环境是动态变化的。\n\n在Linux中把系统提供给进程的处于动态变化的运行环境总和称为进程上下文。\n\n\n### 进程管理\n\n#### Linux进程状态\n\n运行状态、就绪状态、阻塞状态（睡眠状态、暂停状态、僵死状态）\n\n进程之间相互独立，一个进程不能改变另一个进程的状态\n\n\n##### 运行状态\n\n它是在run_queue队列里的状态，占有CPU处理进程任务，一个进程只能出现在一个CPU的可执行队列里。同一时刻允许有多个进程处于运行状态，但运行状态的进程总数应小于或等于处理器的个数。\n运行状态分为**用户运行态**和**内核运行态**两种，在内核态下运行的进程不能被其他进程抢占。\n\n##### 就绪状态\n\n就绪状态。该状态的进程已经拥有除CPU以外的所有请求资源，只等待被核心程序调度。\n只要被分配到CPU就可执行，在队列中按照进程优先级进行排队。\n\n##### 睡眠状态\n\n睡眠状态。处于该状态的进程需要被某一事件触发才可继续执行，分为可中断的睡眠状态和不可中断的睡眠状态。\n处于可中断的睡眠状态的进程，是在等待资源被释放，一旦得到资源，进程就会被唤醒进入就绪态。\n由于CPU数量有限，而进程数量众多，所以很多请求无法及时得到响应，因此大部分进程都处于可中断的睡眠状态。\n处于不可中断睡眠状态的进程，只能通过 wake_up( )函数唤醒。 \n\n##### 暂停状态\n\n暂停状态（跟踪状态）。是指进程从内核返回用户时，被核心程序抢先调度了另一个进程，该进程就处于暂停状态。\n处于暂停状态的进程只有等待下次调度，才能返回用户态。当进程收到信号SIGSTOP时会进入暂停状态，发送SIGCONT信号，进程可转换到运行状态。\n\n##### 僵死状态\n\n僵死状态。处于该状态的进程已经终止运行，等待父进程询问其状态，收集它的进程控制块所占资源。\n\n#### 三种基本状态\n\n![image-20211207104316412](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211207104316412.png)\n\n\n（1）运行态：已经分配到CPU，正在处理器上执行。\n（2）就绪态：已经具备运行条件，但所需 CPU资源被其他进程占用，需等待分配CPU。\n（3）阻塞态：尚不具备运行条件，需要等待某种事件的发生，即使CPU空闲，也无法使用。\n\n\n#### 查看进程\n\nps命令可以查看系统中正在运行的进程信息以及进程的状态\n\n```shell\nps [option]\n```\n\n| Option(part)   | Explanation                                                  |\n| -------------- | ------------------------------------------------------------ |\n| a              | 显示现行终端机下的所有程序，包括其他用户的程序。             |\n| -A or -e       | 列出所有的行程                                               |\n| -w             | 显示加宽可以显示较多的资讯                                   |\n| -au            | 显示较详细的资讯                                             |\n| -aux           | 显示所有包含其他使用者的行程                                 |\n| c              | 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。 |\n| e              | 列出程序时，显示每个程序所使用的环境变量。                   |\n| f              | 用ASCII字符显示树状结构，表达程序间的相互关系。              |\n| -H             | 显示树状结构，表示程序间的相互关系。                         |\n| -N             | 显示所有的程序，除了执行ps指令终端机下的程序之外。           |\n| s              | 采用程序信号的格式显示程序状况。                             |\n| S              | 列出程序时，包括已中断的子程序资料。                         |\n| -t<终端机编号> | 指定终端机编号，并列出属于该终端机的程序的状况。             |\n| u              | 以用户为主的格式来显示程序状况。                             |\n| x              | 显示所有程序，不以终端机来区分。                             |\n| j              | BSD（Berkeley Software Distribution） job contorl format     |\n| -j             | BSD jobs format                                              |\n\n输出信息的意义\n\n| 名称    | 说明                                                         |\n| ------- | ------------------------------------------------------------ |\n| USER    | 行程拥有者                                                   |\n| PID     | pid                                                          |\n| %CPU    | 占用的CPU使用率                                              |\n| %MEM    | 占用的存储器使用率                                           |\n| VSZ     | 占用的虚拟记忆体大小                                         |\n| RSS     | 占用的存储器大小                                             |\n| TTY     | 终端的次要装置号码 (minor device number of tty)              |\n| STAT    | 该行程的状态                                                 |\n| START   | 行程开始时间                                                 |\n| TIME    | 执行的时间                                                   |\n| COMMAND | 所执行的指令                                                 |\n| PPID    | 父进程的ID                                                   |\n| PRI     | 指进程的执行优先权(Priority的简写)，其值越小越早被执行；     |\n| NI      | 这个进程的nice值，其表示进程可被执行的优先级的修正数值。     |\n| ADDR    | 这个是内核函数，指出该程序在内存的那个部分。如果是个执行 的程序，一般就是『 - 』。 |\n| SZ      | 使用掉的内存大小。                                           |\n| WCHAN   | 目前这个程序是否正在运作当中，若为 - 表示正在运作。          |\n\n| STAT | 该行程的状态说明               |\n| ---- | ------------------------------ |\n| D    | 不可中断的静止                 |\n| R    | 正在执行中                     |\n| S    | 静止状态                       |\n| T    | 暂停执行                       |\n| Z    | 不存在但暂时无法消除           |\n| W    | 没有足够的记忆体分页可分配     |\n| <    | 高优先序的行程                 |\n| N    | 低优先序的行程                 |\n| L    | 有记忆体分页分配并锁在记忆体内 |\n\n\n#### 查看指定进程PID的方法\n\n1. 使用cat命令\n ```shell\ncat /run/sshd.pid\n ```\n2. 使用pidof命令\n```shell\npidof sshd\n```\n3. 使用pgrep命令\n```shell\npgrep sshd\n```\n\n#### 实时动态显示进程信息命令top\n\ntop命令将按照进程活动顺序，持续更新显示当前系统进程的信息。\n\n\n#### kill命令\n\nkill命令用来终止指定进程的运行。\n首先使用ps/pidof/top等工具获取进程PID，然后使用kill命令来杀死该进程。\nkill命令是通过向进程发送指定的信号来结束相应的进程。\n在默认情况下，采用编号为15的TERM信号。\n\n常用信号\n\n| 信号编号 | 名称    | 特性及意义                                                   |\n| -------- | ------- | ------------------------------------------------------------ |\n| 1        | SIGHUP  | 启动被终止的进程，重新加载，PID不会发生变化。                |\n| 9        | SIGKILL | 强制终止进程，使用此信号可能导致进程无法再次启动。           |\n| 15       | SIGTERM | 默认信号，以正常流程终止进程，允许进程释放资源。若进程已经出现问题，无响应，此信号不起作用。 |\n| 18       | SIGCONT | 恢复进程。                                                   |\n| 19       | SIGSTOP | 暂停进程。                                                   |\n\n进程优先级是一个整数，动态优先级和静态优先级决定了进程被CPU处理的顺序。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 指令\n\n### 文件类型判断\n\n```shell\nfile [option] filename\n```\n|第一个字符|\t文件类型|\n|:---:|:---:|\n|-\t|普通文件（如文本文件、二进制文件、压缩文件、图片等）|\n|d\t|目录文件（蓝色）|\n|b\t|设备文件（块设备），存储设备硬盘、U盘、/dev/sda等|\n|c\t|设备文件（字符设备），打印机、终端、/dev/tty1、/dev/zero|\n|s\t|套接字文件|\n|p\t|管道文件|\n|l\t|链接文件（淡蓝色）|\n\n\n### 查看文件的详细属性\n\n```shell\nstate [option] filename\n```\n\n### 显示当前工作目录\n\n```shell\npwd\n```\n\n### 显示目录下的文件结构\n\n```shell\ntree filename\n```\n\n### 切换目录\n\n```shell\ncd [directory]\n```\n```cd - ```表示返回到上次目录。\n```cd ..```表示返回到上一级目录\n\n### ls命令\n\n```shell\nls [option] [names]\n\n```\n- 显示所有隐藏文件\n```shell\nls -[[a]]\n```\n- 显示所有以a开头的文件\n```shell\nls a*\n```\n\n### 目录的创建和删除\n\n#### 创建\n\n```shell\nmkdir [option] [dirname]\n```\ndirname : 目录名称\n参数：-p :创建多层目录，-v：显示创建过程信息\n#### 删除\n\n**rmdir命令只能用来删除空目录**\n\n```shell\nrmdir [option] [dirname]\n```\ndirname : 目录名称\n\n\n\n### 文件的创建、查看、复制、移动、删除、排序\n\n#### 创建\n\n```shell\ntouch [option] filename\n```\n\n#### 查看\n```\n cat [option] filename\n```\n- 用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。\n- 能够用来连接两个或者多个文件，形成新文件。\n\nmore命令以逐页的方式显示文件的内容.\nless命令也是对文件或其他输出进行分页显示。\nhead命令可以查看文件的前几行的内容。\ntail命令查看文件的后几行的内容\n\n#### 复制\n\n```shell\ncp [option] source  dest\n```\nsource表示需要复制的文件，dest 表示需要复制到的目录。\n\n#### 移动\n\n```shell\nmv [option] source dest\n```\n为文件或目录改名或者将文件由一个目录移动到另一个目录中\n\n\n#### 删除\n```shell\nrm [option] filename\n```\n- 删除一个目录中的一个或者多个文件。\n- 将某个目录及其下的所有文件及子目录均删除。\n- 对于链接文件，只是删除了链接，原有文件均保持不变\n\n#### 排序\n\n对文件中的各行进行排序。\n```shell\nsort [option] filename\n```\n\n### 文件查找\n\n```shell\ngrep [-abcEFGhHilLnqrsvVwxy][-A<显示列数>][-B<显示列数>][-C<显示列数>][-d<进行动作>][-e<范本样式>][-f<范本文件>][–help][范本样式][文件或目录…]\n```\n\n```shell\nfind [pathname] [option] filename\n```\n\n### 查看用户登录信息\n\n```shell\nid [option][username]\n```\n\n### 查看进程\n\n```shell\nps aux | less命令查看进程\n```\n\n### 用户分类\n\n1. root用户：拥有最高权限，ID为0。\n2. 普通用户：可以登录，由管理员创建，使用权限有限。\n3. 系统用户：不具有登录的能力，但是系统运行不可或缺的。\n\n\n### 管理用户组\n\n- useradd用来添加用户。\n- passwd修改用户口令。\n- usermod修改用户信息。\n- userdel删除用户。\n\n#### 添加用户\n\n添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。\n\n```shell\nuseradd [option] username\n```\nusername表示新账号的登录名\n\n#### 修改用户口令\n\n用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。\n\n```shell\npasswd [option] [username]\n```\n\n- username参数没有指定时，表示修改当前用户的口令。\n- 如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限\n\n#### 删除用户\n\n删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）\n\n```shell\nuserdel [option] username\n```\n\n#### 修改用户信息\n\n修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。\n\n```shell\nusermod [option] username\n```\n\ngpasswd命令--从用户组中移出一个用户\n```shell\ngpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname\n```\n\n### 管理用户组\n\n用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户\n\n#### 添加用户组\n```shell\ngroupadd [option] group_name\n```\n\n\n#### 删除用户组\n```shell\ngroupdel group_name\n```\n\n#### 修改用户组\n```shell\ngroupmod [option] group_name\n```\n\n### 设置文件属性和权限\n\n#### 改变文件所属用户命令chown\n文件所有者修改为指定的用户\n```shell\nchown [-cfhvR] [--help] [--version] user[:group] file...\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c | 显示更改的部分的信息|\n|-f | 忽略错误信息|\n|-h |修复符号链接|\n|-v  |显示详细的处理信息|\n|-R  |处理指定目录以及其子目录下的所有文件|\n|--help|  显示辅助说明|\n|--version|   显示版本|\n\n\n#### 改变文件所在组命令chgrp\n\n变更目录和文件的所属组，只有超级用户才拥有此权限。\n\n```shell\nchgrp [option] group file\n```\n\n|option | explanation|\n|:---:|:---:|\n|-c或–changes   |  效果类似”-v”参数，但仅回报更改部分。|\n|-f或–quiet或–silent|   不显示错误信息。|\n|-h或–no-dereference|  只对符号连接的文件作修改，而不更动其他任何相关文件。|\n|-R或–recursive   |递归处理，将指定目录下的所有文件及子目录一并处理。|\n|-v或–verbose |显示指令执行过程。|\n|–reference=&lt  |参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。|\n\n#### 修改文件或目录的权限chmod\n\n```shell\nchmod [ugoa...][[+-=][rwxX]...][,...]\n```\nu表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。\n+表示增加权限、-表示取消权限、=表示唯一设定权限。\nr表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n\n##### 修改文件权限的方法有2种\n1. 符号法（表达式法）\n```shell\nchmod [who] [operator] [mode] file\n```\n- who指定用户身份，若此参数省略，则表示对所有用户进行操作。\n- operator表示添加或取消某个权限，取值为“+”或“-”。\n- mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。\n\n2. 数字法\n```shell\nchmod 数字 file\n```\n\n### 基础权限ACL\n\n主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。\n\n#### getfacl命令\n\n```shell\ngetfacl [-aceEsRLPtpndvh] file ...\n```\n\n#### setfacl命令可以设置ACL权限\n```shell\nsetfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...\n```\n","slug":"Linux知识点总结","published":1,"updated":"2021-12-30T15:05:38.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxt3o5jf003sisaxfa6yc5xl","content":"<h1 id=\"Linux知识点总结\"><a href=\"#Linux知识点总结\" class=\"headerlink\" title=\"Linux知识点总结\"></a>Linux知识点总结</h1><h2 id=\"Linux概述\"><a href=\"#Linux概述\" class=\"headerlink\" title=\"Linux概述\"></a>Linux概述</h2><h3 id=\"Linux系统的优缺点\"><a href=\"#Linux系统的优缺点\" class=\"headerlink\" title=\"Linux系统的优缺点\"></a>Linux系统的优缺点</h3><ol>\n<li>优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；</li>\n<li>缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。</li>\n</ol>\n<h3 id=\"Linux系统的特点\"><a href=\"#Linux系统的特点\" class=\"headerlink\" title=\"Linux系统的特点\"></a>Linux系统的特点</h3><ol>\n<li>一切皆文件</li>\n<li>完全兼容可移植操作系统接口POSIX1.0标准</li>\n<li>多用户、多任务</li>\n<li>完全免费</li>\n</ol>\n<h3 id=\"Linux的含义\"><a href=\"#Linux的含义\" class=\"headerlink\" title=\"Linux的含义\"></a>Linux的含义</h3><p>Linux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。<br>通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。<br>Linux是类UNIX操作系统。</p>\n<h3 id=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"><a href=\"#Linux的诞生、发展和成长过程依赖五个重要支柱\" class=\"headerlink\" title=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"></a>Linux的诞生、发展和成长过程依赖五个重要支柱</h3><ol>\n<li>UXIX操作系统</li>\n<li>MINIX操作系统</li>\n<li>GNU计划</li>\n<li>POSIX标准</li>\n<li>Internet</li>\n</ol>\n<h3 id=\"Linux内核的组成\"><a href=\"#Linux内核的组成\" class=\"headerlink\" title=\"Linux内核的组成\"></a>Linux内核的组成</h3><ol>\n<li>内存管理器：对内存资源的访问控制。</li>\n<li>进程管理器：对CPU的访问控制。</li>\n<li>设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。</li>\n<li>虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。</li>\n<li>网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。</li>\n</ol>\n<h3 id=\"shell-分为\"><a href=\"#shell-分为\" class=\"headerlink\" title=\"shell 分为\"></a>shell 分为</h3><ol>\n<li>GLI命令行界面</li>\n<li>GUI图用户界面</li>\n</ol>\n<h3 id=\"Linux文件系统\"><a href=\"#Linux文件系统\" class=\"headerlink\" title=\"Linux文件系统\"></a>Linux文件系统</h3><p>Linux一切皆文件；<br>文件系统是指文件存放在磁盘等存储设备上的组织方法。</p>\n<h2 id=\"Linux基本操作\"><a href=\"#Linux基本操作\" class=\"headerlink\" title=\"Linux基本操作\"></a>Linux基本操作</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><p><strong>命令格式</strong>： command [options] [arguments]  ，命令名：[选项]：[参数]</p>\n<h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man [option] filename</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--help |more</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>Linux 日志文件存放在 /var/log目录下</p>\n<p>日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。</p>\n<h2 id=\"文件系统和文件管理\"><a href=\"#文件系统和文件管理\" class=\"headerlink\" title=\"文件系统和文件管理\"></a>文件系统和文件管理</h2><h3 id=\"Linux文件类型\"><a href=\"#Linux文件类型\" class=\"headerlink\" title=\"Linux文件类型\"></a>Linux文件类型</h3><ol>\n<li>普通文件</li>\n<li>目录文件</li>\n<li>链接文件</li>\n<li>设备文件</li>\n<li>管道文件</li>\n</ol>\n<h4 id=\"普通文件\"><a href=\"#普通文件\" class=\"headerlink\" title=\"普通文件\"></a>普通文件</h4><ul>\n<li>普通文件是指以<strong>字节</strong>为单位的<strong>数据流</strong>类型文件，其特点是不包含文件系统的结构信息。</li>\n<li>通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。</li>\n<li>按其内部结构分为文本文件和二进制文件。</li>\n</ul>\n<h4 id=\"目录文件\"><a href=\"#目录文件\" class=\"headerlink\" title=\"目录文件\"></a>目录文件</h4><ul>\n<li>目录文件不存放常规数据，它是用来<strong>组织</strong>、<strong>访问</strong>其他文件的，是内核组织文件系统的基本节点。</li>\n<li>目录文件可以包含下一级目录文件或普通文件。</li>\n<li>目录文件是一种文件，是Linux文件中的一种</li>\n</ul>\n<h4 id=\"链接文件\"><a href=\"#链接文件\" class=\"headerlink\" title=\"链接文件\"></a>链接文件</h4><ul>\n<li>链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。</li>\n<li>根据链接文件的不同，分为<strong>硬链接</strong>（Hard Link）文件和<strong>符号链接</strong>（Symbolic Link，又称为软链接）文件</li>\n</ul>\n<h4 id=\"设备文件\"><a href=\"#设备文件\" class=\"headerlink\" title=\"设备文件\"></a>设备文件</h4><ul>\n<li>设备文件是Linux中最特殊的文件，可以方便地访问外部设备。</li>\n<li>Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。</li>\n<li>设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。</li>\n<li>根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。</li>\n</ul>\n<h4 id=\"管道文件\"><a href=\"#管道文件\" class=\"headerlink\" title=\"管道文件\"></a>管道文件</h4><ul>\n<li>管道文件是一种很特殊的文件，主要用于不同进程的信息传递。</li>\n<li>当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。</li>\n</ul>\n<h3 id=\"文件类型判断\"><a href=\"#文件类型判断\" class=\"headerlink\" title=\"文件类型判断\"></a>文件类型判断</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件的详细属性\"><a href=\"#查看文件的详细属性\" class=\"headerlink\" title=\"查看文件的详细属性\"></a>查看文件的详细属性</h3><p>使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"显示当前工作目录\"><a href=\"#显示当前工作目录\" class=\"headerlink\" title=\"显示当前工作目录\"></a>显示当前工作目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绝对路径和相对路径\"><a href=\"#绝对路径和相对路径\" class=\"headerlink\" title=\"绝对路径和相对路径\"></a>绝对路径和相对路径</h3><ul>\n<li>绝对路径是以根目录“/”开始，递归每级目录直到目标路径。</li>\n<li>相对路径是以当前目录为起点，到达目标的路径。</li>\n</ul>\n<h3 id=\"显示目录下的文件结构\"><a href=\"#显示目录下的文件结构\" class=\"headerlink\" title=\"显示目录下的文件结构\"></a>显示目录下的文件结构</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree filename</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换目录\"><a href=\"#切换目录\" class=\"headerlink\" title=\"切换目录\"></a>切换目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [directory]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>- ```表示返回到上次目录。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cd ..```表示返回到上一级目录</span><br><span class=\"line\"></span><br><span class=\"line\">### ls命令</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">ls [option] [names]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示所有隐藏文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br></pre></td></tr></table></figure></li>\n<li>显示所有以a开头的文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls a*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"目录的创建和删除\"><a href=\"#目录的创建和删除\" class=\"headerlink\" title=\"目录的创建和删除\"></a>目录的创建和删除</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称<br>参数：-p :创建多层目录，-v：显示创建过程信息</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p><strong>rmdir命令只能用来删除空目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称</p>\n<h3 id=\"文件的创建、查看、复制、移动、删除、排序\"><a href=\"#文件的创建、查看、复制、移动、删除、排序\" class=\"headerlink\" title=\"文件的创建、查看、复制、移动、删除、排序\"></a>文件的创建、查看、复制、移动、删除、排序</h3><h4 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [option] filename</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。</li>\n<li>能够用来连接两个或者多个文件，形成新文件。</li>\n</ul>\n<p>more命令以逐页的方式显示文件的内容.<br>less命令也是对文件或其他输出进行分页显示。<br>head命令可以查看文件的前几行的内容。<br>tail命令查看文件的后几行的内容</p>\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [option] source  dest</span><br></pre></td></tr></table></figure>\n<p>source表示需要复制的文件，dest 表示需要复制到的目录。</p>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv [option] source dest</span><br></pre></td></tr></table></figure>\n<p>为文件或目录改名或者将文件由一个目录移动到另一个目录中</p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除一个目录中的一个或者多个文件。</li>\n<li>将某个目录及其下的所有文件及子目录均删除。</li>\n<li>对于链接文件，只是删除了链接，原有文件均保持不变</li>\n</ul>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>对文件中的各行进行排序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件查找\"><a href=\"#文件查找\" class=\"headerlink\" title=\"文件查找\"></a>文件查找</h3><p>以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][–help][范本样式][文件或目录…]</span><br></pre></td></tr></table></figure>\n\n\n<p>find:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [pathname] [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"linux-文件链接\"><a href=\"#linux-文件链接\" class=\"headerlink\" title=\"linux 文件链接\"></a>linux 文件链接</h3><h4 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h4><ul>\n<li>默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。</li>\n<li>创建一个硬链接时，也为这个文件创建了一个额外的目录条目。</li>\n</ul>\n<h5 id=\"硬链接的局限性\"><a href=\"#硬链接的局限性\" class=\"headerlink\" title=\"硬链接的局限性\"></a>硬链接的局限性</h5><p>（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。<br>（2）硬链接无法引用目录。</p>\n<p>当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了</p>\n<h4 id=\"符号链接（软链接）\"><a href=\"#符号链接（软链接）\" class=\"headerlink\" title=\"符号链接（软链接）\"></a>符号链接（软链接）</h4><p>符号链接指向的文件与符号链接自身几乎没有区别。</p>\n<h3 id=\"文件时间\"><a href=\"#文件时间\" class=\"headerlink\" title=\"文件时间\"></a>文件时间</h3><p>在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。</p>\n<h4 id=\"1-访问时间（Access-time）\"><a href=\"#1-访问时间（Access-time）\" class=\"headerlink\" title=\"1.访问时间（Access time）\"></a>1.访问时间（Access time）</h4><p>对文件内容进行一次读操作时间。</p>\n<h4 id=\"2-修改时间（Change-time）\"><a href=\"#2-修改时间（Change-time）\" class=\"headerlink\" title=\"2.修改时间（Change time）\"></a>2.修改时间（Change time）</h4><p>文件内容被最后一次修改的时间。</p>\n<p>ls -l 命令显示出来的文件时间就是这个时间</p>\n<h4 id=\"3-状态时间（Modify-time）\"><a href=\"#3-状态时间（Modify-time）\" class=\"headerlink\" title=\"3.状态时间（Modify time）\"></a>3.状态时间（Modify time）</h4><p>当文件的状态被改变时，状态时间就会改变</p>\n<h2 id=\"Linux用户管理\"><a href=\"#Linux用户管理\" class=\"headerlink\" title=\"Linux用户管理\"></a>Linux用户管理</h2><p>超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。</p>\n<p>Linux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID</p>\n<p>id命令可以查看当前用户登录信息。</p>\n<ul>\n<li>UID(User Identification)为用户的ID。</li>\n<li>GID(Group Identification)为用户所属组的ID。</li>\n<li>groups为用户属于的所有组的ID。</li>\n</ul>\n<p>ps aux | less命令查看进程</p>\n<h3 id=\"用户分类\"><a href=\"#用户分类\" class=\"headerlink\" title=\"用户分类\"></a>用户分类</h3><ol>\n<li>root用户：拥有最高权限，ID为0。</li>\n<li>普通用户：可以登录，由管理员创建，使用权限有限。</li>\n<li>系统用户：不具有登录的能力，但是系统运行不可或缺的。</li>\n</ol>\n<h3 id=\"管理用户组\"><a href=\"#管理用户组\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><ul>\n<li>useradd用来添加用户。</li>\n<li>passwd修改用户口令。</li>\n<li>usermod修改用户信息。</li>\n<li>userdel删除用户。</li>\n</ul>\n<h4 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h4><p>添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd [option] username</span><br></pre></td></tr></table></figure>\n<p>username表示新账号的登录名</p>\n<h4 id=\"修改用户口令\"><a href=\"#修改用户口令\" class=\"headerlink\" title=\"修改用户口令\"></a>修改用户口令</h4><p>用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd [option] [username]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>username参数没有指定时，表示修改当前用户的口令。</li>\n<li>如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限</li>\n</ul>\n<h4 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h4><p>删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel [option] username</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户信息\"><a href=\"#修改用户信息\" class=\"headerlink\" title=\"修改用户信息\"></a>修改用户信息</h4><p>修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod [option] username</span><br></pre></td></tr></table></figure>\n\n<p>gpasswd命令–从用户组中移出一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"管理用户组-1\"><a href=\"#管理用户组-1\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><p>用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户</p>\n<h4 id=\"添加用户组\"><a href=\"#添加用户组\" class=\"headerlink\" title=\"添加用户组\"></a>添加用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd [option] group_name</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"删除用户组\"><a href=\"#删除用户组\" class=\"headerlink\" title=\"删除用户组\"></a>删除用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户组\"><a href=\"#修改用户组\" class=\"headerlink\" title=\"修改用户组\"></a>修改用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod [option] group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看用户的分组\"><a href=\"#查看用户的分组\" class=\"headerlink\" title=\"查看用户的分组\"></a>查看用户的分组</h4><ol>\n<li>groups命令查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups</span><br><span class=\"line\">groups user1 user2</span><br></pre></td></tr></table></figure></li>\n<li>查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。</li>\n<li>id命令法，只执行id命令就可以查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br><span class=\"line\">id user2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"和用户相关的一些系统文件\"><a href=\"#和用户相关的一些系统文件\" class=\"headerlink\" title=\"和用户相关的一些系统文件\"></a>和用户相关的一些系统文件</h3><ol>\n<li>/etc/passwd文件保存用户信息。</li>\n<li>/etc/shadow文件保存加密的用户密码。</li>\n<li>/etc/group文件保存用户组信息。</li>\n<li>/etc/login.defs配置文件。</li>\n</ol>\n<p><strong>su root</strong>可以返回root </p>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><p>权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。</p>\n<h3 id=\"U-G-O\"><a href=\"#U-G-O\" class=\"headerlink\" title=\"U G O\"></a>U G O</h3><p>U: owner为属主，文件所有者。<br>G：group为属组，同组用户。<br>O：other为其他用户。</p>\n<h3 id=\"UGO方式每组的3个字符具体意义如下：\"><a href=\"#UGO方式每组的3个字符具体意义如下：\" class=\"headerlink\" title=\"UGO方式每组的3个字符具体意义如下：\"></a>UGO方式每组的3个字符具体意义如下：</h3><p>r:read，数字设定值为4<br>w:write,数字设定值为2<br>x:execute,数字设定值为1</p>\n<h3 id=\"设置文件属性和权限\"><a href=\"#设置文件属性和权限\" class=\"headerlink\" title=\"设置文件属性和权限\"></a>设置文件属性和权限</h3><h4 id=\"改变文件所属用户命令chown\"><a href=\"#改变文件所属用户命令chown\" class=\"headerlink\" title=\"改变文件所属用户命令chown\"></a>改变文件所属用户命令chown</h4><p>文件所有者修改为指定的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">显示更改的部分的信息</td>\n</tr>\n<tr>\n<td align=\"center\">-f</td>\n<td align=\"center\">忽略错误信息</td>\n</tr>\n<tr>\n<td align=\"center\">-h</td>\n<td align=\"center\">修复符号链接</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"center\">显示详细的处理信息</td>\n</tr>\n<tr>\n<td align=\"center\">-R</td>\n<td align=\"center\">处理指定目录以及其子目录下的所有文件</td>\n</tr>\n<tr>\n<td align=\"center\">–help</td>\n<td align=\"center\">显示辅助说明</td>\n</tr>\n<tr>\n<td align=\"center\">–version</td>\n<td align=\"center\">显示版本</td>\n</tr>\n</tbody></table>\n<h4 id=\"改变文件所在组命令chgrp\"><a href=\"#改变文件所在组命令chgrp\" class=\"headerlink\" title=\"改变文件所在组命令chgrp\"></a>改变文件所在组命令chgrp</h4><p>变更目录和文件的所属组，只有超级用户才拥有此权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp [option] group file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c或–changes</td>\n<td align=\"center\">效果类似”-v”参数，但仅回报更改部分。</td>\n</tr>\n<tr>\n<td align=\"center\">-f或–quiet或–silent</td>\n<td align=\"center\">不显示错误信息。</td>\n</tr>\n<tr>\n<td align=\"center\">-h或–no-dereference</td>\n<td align=\"center\">只对符号连接的文件作修改，而不更动其他任何相关文件。</td>\n</tr>\n<tr>\n<td align=\"center\">-R或–recursive</td>\n<td align=\"center\">递归处理，将指定目录下的所有文件及子目录一并处理。</td>\n</tr>\n<tr>\n<td align=\"center\">-v或–verbose</td>\n<td align=\"center\">显示指令执行过程。</td>\n</tr>\n<tr>\n<td align=\"center\">–reference=&amp;lt</td>\n<td align=\"center\">参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</td>\n</tr>\n</tbody></table>\n<h4 id=\"修改文件或目录的权限chmod\"><a href=\"#修改文件或目录的权限chmod\" class=\"headerlink\" title=\"修改文件或目录的权限chmod\"></a>修改文件或目录的权限chmod</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure>\n<p>u表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。<br>+表示增加权限、-表示取消权限、=表示唯一设定权限。<br>r表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p>\n<h5 id=\"修改文件权限的方法有2种\"><a href=\"#修改文件权限的方法有2种\" class=\"headerlink\" title=\"修改文件权限的方法有2种\"></a>修改文件权限的方法有2种</h5><ol>\n<li>符号法（表达式法）<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [who] [operator] [mode] file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>who指定用户身份，若此参数省略，则表示对所有用户进行操作。</li>\n<li>operator表示添加或取消某个权限，取值为“+”或“-”。</li>\n<li>mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。</li>\n</ul>\n<ol start=\"2\">\n<li>数字法<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 数字 file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"><a href=\"#存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\" class=\"headerlink\" title=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"></a>存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。</h3><h3 id=\"基础权限ACL\"><a href=\"#基础权限ACL\" class=\"headerlink\" title=\"基础权限ACL\"></a>基础权限ACL</h3><p>主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。</p>\n<h4 id=\"getfacl命令\"><a href=\"#getfacl命令\" class=\"headerlink\" title=\"getfacl命令\"></a>getfacl命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl [-aceEsRLPtpndvh] file ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"setfacl命令可以设置ACL权限\"><a href=\"#setfacl命令可以设置ACL权限\" class=\"headerlink\" title=\"setfacl命令可以设置ACL权限\"></a>setfacl命令可以设置ACL权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux编程基础\"><a href=\"#linux编程基础\" class=\"headerlink\" title=\"linux编程基础\"></a>linux编程基础</h2><p>make可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，</p>\n<p>make通过makefile文件描述的内容自动维护编译工作。</p>\n<h2 id=\"shell编程\"><a href=\"#shell编程\" class=\"headerlink\" title=\"shell编程\"></a>shell编程</h2><p>Shell脚本是一个包含一系列命令的文件。<br>Shell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。</p>\n<h3 id=\"用Shell脚本的原因：\"><a href=\"#用Shell脚本的原因：\" class=\"headerlink\" title=\"用Shell脚本的原因：\"></a>用Shell脚本的原因：</h3><ol>\n<li>效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 </li>\n<li>简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。</li>\n<li>可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。</li>\n<li>开发容易：可以在短时间内完成一个功能强大又好用的脚本。</li>\n</ol>\n<h3 id=\"Shell分类：\"><a href=\"#Shell分类：\" class=\"headerlink\" title=\"Shell分类：\"></a>Shell分类：</h3><ol>\n<li>用于用户交互接口的Shell称为交互式Shell。</li>\n<li>作为命令解析器的Shell称为非交互式Shell。</li>\n</ol>\n<h3 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h3><p>脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，</p>\n<p>Shell的注释以“#”开头，注释的内容不会执行。</p>\n<p>给文件helloxiangtian.sh增加可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chomd +x helloxiangtan.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shell变量命名规则：\"><a href=\"#Shell变量命名规则：\" class=\"headerlink\" title=\"Shell变量命名规则：\"></a>Shell变量命名规则：</h3><p>变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 </p>\n<h3 id=\"shell变量分类\"><a href=\"#shell变量分类\" class=\"headerlink\" title=\"shell变量分类\"></a>shell变量分类</h3><p>Shell变量分为自定义变量、环境变量、位置变量和预定义变量。</p>\n<p>根据工作要求临时定义的变量称为自定义变量。<br>环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。<br>从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。<br>预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$*等。</p>\n<p>Shell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。</p>\n<h4 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义自定义变量</td>\n<td align=\"center\">变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。</td>\n</tr>\n<tr>\n<td align=\"center\">使用自定义变量</td>\n<td align=\"center\">$变量名</td>\n</tr>\n<tr>\n<td align=\"center\">查看自定义变量</td>\n<td align=\"center\">echo $变量名 set（所有变量：自定义变量和环境变量）</td>\n</tr>\n<tr>\n<td align=\"center\">取消自定义变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">自定义变量作用范围</td>\n<td align=\"center\">仅在当前shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>在各种编程语言中会提及全局变量概念。<br>全局变量可以在程序的任何地方使用。<br>在Shell编程中该功能由环境变量实现。<br>系统中的所有进程都可以使用环境变量。<br>环境变量与全局变量区别：<br>子进程对环境变量的修改不会传递到父进程中。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义环境变量</td>\n<td align=\"center\">使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。</td>\n</tr>\n<tr>\n<td align=\"center\">使用环境变量</td>\n<td align=\"center\">$变量名或$｛变量名｝</td>\n</tr>\n<tr>\n<td align=\"center\">查看环境变量</td>\n<td align=\"center\">echo $变量名 或env，如env</td>\n</tr>\n<tr>\n<td align=\"center\">取消环境变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">环境变量作用范围</td>\n<td align=\"center\">仅在当前shell和子shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"位置变量\"><a href=\"#位置变量\" class=\"headerlink\" title=\"位置变量\"></a>位置变量</h4><p>位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。<br>执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">0代表命令本身，<span class=\"variable\">$1</span>-<span class=\"variable\">$9</span>代表接收的第1~9个参数，<span class=\"variable\">$10</span>以上需要用&#123;&#125;括起来，如<span class=\"variable\">$&#123;20&#125;</span>代表接收的第20个参数。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h4><p>预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">预定义变量</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"left\">脚本名</td>\n</tr>\n<tr>\n<td align=\"center\">$*</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$@</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$#</td>\n<td align=\"left\">参数的个数</td>\n</tr>\n<tr>\n<td align=\"center\">$$</td>\n<td align=\"left\">当前进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$!</td>\n<td align=\"left\">上一个后台进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$?</td>\n<td align=\"left\">上一个命令的返回值，0表示成功。</td>\n</tr>\n</tbody></table>\n<h3 id=\"变量的操作\"><a href=\"#变量的操作\" class=\"headerlink\" title=\"变量的操作\"></a>变量的操作</h3><p>变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。</p>\n<p>变量创建好后，可以用$变量名的方式获取变量的值。</p>\n<p>可以使用$符号获取变量的值。</p>\n<p>用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。</p>\n<h4 id=\"变量的删除\"><a href=\"#变量的删除\" class=\"headerlink\" title=\"变量的删除\"></a>变量的删除</h4><table>\n<thead>\n<tr>\n<th align=\"center\">格式</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">${变量名#关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名##关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n</tbody></table>\n<h4 id=\"变量的替换\"><a href=\"#变量的替换\" class=\"headerlink\" title=\"变量的替换\"></a>变量的替换</h4><p>|格式  |说明|<br>|:—:|：—：|<br>|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|<br>|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|</p>\n<h4 id=\"变量的替代\"><a href=\"#变量的替代\" class=\"headerlink\" title=\"变量的替代\"></a>变量的替代</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;变量名-新的变量名&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>在Shell中，变量值的类型默认是字符串，不直接进行运算。</p>\n<p>用于整数运算的方法有expr、(())和$[]。</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr expression</span><br><span class=\"line\">例：</span><br><span class=\"line\">n1 + n2</span><br><span class=\"line\">expr $n1 + $n2</span><br></pre></td></tr></table></figure>\n<p>运算符及用于计算的数字两边必须有空格，否则会执行失败。<br>用expr进行乘法运算时，必须在<em>前用反斜线转义（Shell可能误解为</em>号）。</p>\n<p>“（（））”或“[ ]”数值运算命令<br>双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符<br>格式：<br>“ ((expression))”，或“ [expression]”<br>括号内部两侧可以有空格，也可省空格。<br>需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1+n2</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">((<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>))</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">[<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>let数值运算命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let expression</span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\">let sum = n1+n2;</span><br></pre></td></tr></table></figure>\n\n<p>let数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量</p>\n<h3 id=\"shell中的特殊符号\"><a href=\"#shell中的特殊符号\" class=\"headerlink\" title=\"shell中的特殊符号\"></a>shell中的特殊符号</h3><h4 id=\"1-“-”表示注释。\"><a href=\"#1-“-”表示注释。\" class=\"headerlink\" title=\"1. “#”表示注释。\"></a>1. “#”表示注释。</h4><ul>\n<li>行首为#（#!是个例外）表示此行是注释。</li>\n<li>注释也可以放在本行命令的后面，需要注意的是#两边有空格。</li>\n<li>释也可以放在本行行首空白的后面。</li>\n</ul>\n<h4 id=\"2-“-“\"><a href=\"#2-“-“\" class=\"headerlink\" title=\"2. “ ; “\"></a>2. “ ; “</h4><ul>\n<li>“;”在同一行中分隔两个或者两个以上的命令。</li>\n<li>“;”也适用于循环语句</li>\n</ul>\n<h4 id=\"3-“-”\"><a href=\"#3-“-”\" class=\"headerlink\" title=\"3. “;;”\"></a>3. “;;”</h4><ul>\n<li>用于终止case语句</li>\n</ul>\n<h4 id=\"4-“-”\"><a href=\"#4-“-”\" class=\"headerlink\" title=\"4. “:”\"></a>4. “:”</h4><ul>\n<li>空命令“:”和true命令作用相同。</li>\n<li>在while死循环和if/then中也可使用这个命令。</li>\n</ul>\n<h4 id=\"5-“-”\"><a href=\"#5-“-”\" class=\"headerlink\" title=\"5. “.”\"></a>5. “.”</h4><ul>\n<li>“.”等价于source命令，是bash中的一个内建命令。</li>\n<li>“.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。</li>\n<li>当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。</li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><h5 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h5><p>echo命令是最常用的，其功能是将字符串输出到屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo [-ne] [string]</span><br></pre></td></tr></table></figure>\n<p>其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符</p>\n<h5 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h5><p>输出命令printf的功能是格式化输出数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf format [arguments...]</span><br></pre></td></tr></table></figure>\n\n<p>format为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。<br>arguments为要输出的数据。</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><h5 id=\"1-直接给变量赋值\"><a href=\"#1-直接给变量赋值\" class=\"headerlink\" title=\"1. 直接给变量赋值\"></a>1. 直接给变量赋值</h5><p>例如，name=liming</p>\n<h5 id=\"2-从键盘读入赋值\"><a href=\"#2-从键盘读入赋值\" class=\"headerlink\" title=\"2. 从键盘读入赋值\"></a>2. 从键盘读入赋值</h5><ul>\n<li>read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read  [options] [variable…]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-使用命令行参数赋值\"><a href=\"#3-使用命令行参数赋值\" class=\"headerlink\" title=\"3. 使用命令行参数赋值\"></a>3. 使用命令行参数赋值</h5><p>使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数……，这种赋值方法适用于参数经常变化且不需要交互的情况。</p>\n<h5 id=\"4-利用命令的输出结果赋值\"><a href=\"#4-利用命令的输出结果赋值\" class=\"headerlink\" title=\"4. 利用命令的输出结果赋值\"></a>4. 利用命令的输出结果赋值</h5><ul>\n<li>在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。</li>\n<li>把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名</li>\n</ul>\n<h5 id=\"5-从文件中读入数据赋值\"><a href=\"#5-从文件中读入数据赋值\" class=\"headerlink\" title=\"5. 从文件中读入数据赋值\"></a>5. 从文件中读入数据赋值</h5><p>这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 转义字符：用于引用任意的单个字符。</span><br><span class=\"line\">2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。</span><br><span class=\"line\">3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><h4 id=\"文件测试\"><a href=\"#文件测试\" class=\"headerlink\" title=\"文件测试\"></a>文件测试</h4><ol>\n<li>test<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“test  &lt;expression&gt;”</span><br></pre></td></tr></table></figure></li>\n<li>“&lt;测试表达式&gt;”</li>\n</ol>\n<p>也可以使用“&lt;测试表达式&gt;”，就是使用中括号。<br>语法格式：<br>“ [  <expression> ]”<br>注意：[]与expression之间必须有空格。<br>通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。</p>\n<h4 id=\"整数测试\"><a href=\"#整数测试\" class=\"headerlink\" title=\"整数测试\"></a>整数测试</h4><p>整数测试通常用于数值之间的运算。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">       [ 整数1 操作符 整数2 ]</span><br><span class=\"line\">或   test 整数1 操作符 整数2。</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符1</th>\n<th align=\"center\">操作符2(部分能用)  意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-eq ==</td>\n<td align=\"center\">等于（Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-ge &gt;=</td>\n<td align=\"center\">大于等于（Greater or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-gt &gt;</td>\n<td align=\"center\">大于（Greater Than-le）</td>\n</tr>\n<tr>\n<td align=\"center\">-le &lt;=</td>\n<td align=\"center\">小于等于（Lesser or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-lt</td>\n<td align=\"center\">&lt;   小于（Lesser Than）</td>\n</tr>\n<tr>\n<td align=\"center\">-ne !=</td>\n<td align=\"center\">不等于（Not Equal）</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串测试\"><a href=\"#字符串测试\" class=\"headerlink\" title=\"字符串测试\"></a>字符串测试</h4><p>字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 字符串1 = 字符串2 ]</span><br><span class=\"line\">[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression1 op expression2 ]</span><br><span class=\"line\">or       command1 op commnad2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">! expr</td>\n<td align=\"center\">如果表达式评估为假，则为真</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -a expr2</td>\n<td align=\"center\">如果 expr1 和 expr2 都为真，则结果为真，&amp;&amp;</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -o expr2</td>\n<td align=\"center\">如果 expr1 或 expr2 为真，则结果为真，</td>\n</tr>\n</tbody></table>\n<h3 id=\"if语句格式\"><a href=\"#if语句格式\" class=\"headerlink\" title=\"if语句格式\"></a>if语句格式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语句格式：</span><br><span class=\"line\">if [ expression ];then  code</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then code</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ expression ];then  code1</span><br><span class=\"line\">else code2</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then   code1</span><br><span class=\"line\">else  code2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if expression; then</span><br><span class=\"line\"> command…</span><br><span class=\"line\">[elif expression; then</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">[else</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case value in</span><br><span class=\"line\">    [ expression1) code1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    expression2) code2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    …</span><br><span class=\"line\">    *）code</span><br><span class=\"line\">    ]</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"while-命令\"><a href=\"#while-命令\" class=\"headerlink\" title=\"while 命令\"></a>while 命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while expression; do</span><br><span class=\"line\">       command…</span><br><span class=\"line\">done   </span><br></pre></td></tr></table></figure>\n<h4 id=\"until命令\"><a href=\"#until命令\" class=\"headerlink\" title=\"until命令\"></a>until命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until expression; do</span><br><span class=\"line\">     command…</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  variable in [in sequence]</span><br><span class=\"line\">do</span><br><span class=\"line\">    code</span><br><span class=\"line\">done </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  变量名 in 取值列表；do     循环体 done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable [in sequence]; do</span><br><span class=\"line\">          command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((expression1; expression2; expression3;));do</span><br><span class=\"line\">           command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n\n\n<p>在循环后面加个 &amp; 符号表示在后台执行</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"数组分为普通数组和关联数组。\"><a href=\"#数组分为普通数组和关联数组。\" class=\"headerlink\" title=\"数组分为普通数组和关联数组。\"></a>数组分为普通数组和关联数组。</h4><p>普通数组中的索引（下标）都是整数。<br>关联数组的数组索引可以用任意的文本。</p>\n<p>两者最大区别：</p>\n<ul>\n<li>关联数组使用之前需要声明。</li>\n<li>关联数组是由特定格式的键值对组成</li>\n</ul>\n<h4 id=\"普通数组\"><a href=\"#普通数组\" class=\"headerlink\" title=\"普通数组\"></a>普通数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（value_table）</span><br></pre></td></tr></table></figure>\n\n<p>value_table中值之间用空格隔开。</p>\n<h4 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)</span><br></pre></td></tr></table></figure>\n<p>其中：<br>indexei可以用标识符表示。</p>\n<p>声明普通数组方法：<br>#declare -a arrayname<br>声明关联数组方法：<br>#declare -A arrayname</p>\n<h4 id=\"数组定义方法\"><a href=\"#数组定义方法\" class=\"headerlink\" title=\"数组定义方法\"></a>数组定义方法</h4><ul>\n<li><p>直接定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=(value1 value2 value3 ... valuen)</span><br></pre></td></tr></table></figure></li>\n<li><p>下标定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=([index1]=value1 [index2]=value2 ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>间接定义数组</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0]=value1;array[1]=value2;....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从文件中读入定义数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=($(command))</span><br><span class=\"line\">array_name=($(`variable`))</span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\">array_name=(`command`)</span><br><span class=\"line\">array_name=(`variable`)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问数组表达式\"><a href=\"#访问数组表达式\" class=\"headerlink\" title=\"访问数组表达式\"></a>访问数组表达式</h4><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>echo ${!array[*]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${!array[@]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${array[*]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo ${array[@]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo $</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":10522,"excerpt":"","more":"<h1 id=\"Linux知识点总结\"><a href=\"#Linux知识点总结\" class=\"headerlink\" title=\"Linux知识点总结\"></a>Linux知识点总结</h1><h2 id=\"Linux概述\"><a href=\"#Linux概述\" class=\"headerlink\" title=\"Linux概述\"></a>Linux概述</h2><h3 id=\"Linux系统的优缺点\"><a href=\"#Linux系统的优缺点\" class=\"headerlink\" title=\"Linux系统的优缺点\"></a>Linux系统的优缺点</h3><ol>\n<li>优点：Linux系统主打网络服务，专业性强，免费开源，主要用于搭建服务器，性能稳定，长时间开机不出现卡顿，漏洞少，更安全；</li>\n<li>缺点：Linux式子专业系统，对业余人员不友好，操作难度较高。</li>\n</ol>\n<h3 id=\"Linux系统的特点\"><a href=\"#Linux系统的特点\" class=\"headerlink\" title=\"Linux系统的特点\"></a>Linux系统的特点</h3><ol>\n<li>一切皆文件</li>\n<li>完全兼容可移植操作系统接口POSIX1.0标准</li>\n<li>多用户、多任务</li>\n<li>完全免费</li>\n</ol>\n<h3 id=\"Linux的含义\"><a href=\"#Linux的含义\" class=\"headerlink\" title=\"Linux的含义\"></a>Linux的含义</h3><p>Linux是指在GPL协议下发行的遵循可移植性操作系统POSIX标准的操作系统内核。<br>通常说的Linux是指基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。<br>Linux是类UNIX操作系统。</p>\n<h3 id=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"><a href=\"#Linux的诞生、发展和成长过程依赖五个重要支柱\" class=\"headerlink\" title=\"Linux的诞生、发展和成长过程依赖五个重要支柱\"></a>Linux的诞生、发展和成长过程依赖五个重要支柱</h3><ol>\n<li>UXIX操作系统</li>\n<li>MINIX操作系统</li>\n<li>GNU计划</li>\n<li>POSIX标准</li>\n<li>Internet</li>\n</ol>\n<h3 id=\"Linux内核的组成\"><a href=\"#Linux内核的组成\" class=\"headerlink\" title=\"Linux内核的组成\"></a>Linux内核的组成</h3><ol>\n<li>内存管理器：对内存资源的访问控制。</li>\n<li>进程管理器：对CPU的访问控制。</li>\n<li>设备驱动程序：实际控制操作系统和硬件设备之间的交互，并且提供一组操作系统可理解的抽象接口，完成和操作系统之间的交互，与硬件相关的具体操作细节也由设备驱动程序完成。</li>\n<li>虚拟文件系统：VFS隐藏各种文件系统的具体细节，为文件系统提供统一的接口。</li>\n<li>网络管理：管理各种网络设备，并实现各种网络协议栈，最终通过网络连接其他系统。</li>\n</ol>\n<h3 id=\"shell-分为\"><a href=\"#shell-分为\" class=\"headerlink\" title=\"shell 分为\"></a>shell 分为</h3><ol>\n<li>GLI命令行界面</li>\n<li>GUI图用户界面</li>\n</ol>\n<h3 id=\"Linux文件系统\"><a href=\"#Linux文件系统\" class=\"headerlink\" title=\"Linux文件系统\"></a>Linux文件系统</h3><p>Linux一切皆文件；<br>文件系统是指文件存放在磁盘等存储设备上的组织方法。</p>\n<h2 id=\"Linux基本操作\"><a href=\"#Linux基本操作\" class=\"headerlink\" title=\"Linux基本操作\"></a>Linux基本操作</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><p><strong>命令格式</strong>： command [options] [arguments]  ，命令名：[选项]：[参数]</p>\n<h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man [option] filename</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--help |more</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>Linux 日志文件存放在 /var/log目录下</p>\n<p>日志记录了程序的运行状态，包括各种错误信息、警告信息和其他的提示信息。</p>\n<h2 id=\"文件系统和文件管理\"><a href=\"#文件系统和文件管理\" class=\"headerlink\" title=\"文件系统和文件管理\"></a>文件系统和文件管理</h2><h3 id=\"Linux文件类型\"><a href=\"#Linux文件类型\" class=\"headerlink\" title=\"Linux文件类型\"></a>Linux文件类型</h3><ol>\n<li>普通文件</li>\n<li>目录文件</li>\n<li>链接文件</li>\n<li>设备文件</li>\n<li>管道文件</li>\n</ol>\n<h4 id=\"普通文件\"><a href=\"#普通文件\" class=\"headerlink\" title=\"普通文件\"></a>普通文件</h4><ul>\n<li>普通文件是指以<strong>字节</strong>为单位的<strong>数据流</strong>类型文件，其特点是不包含文件系统的结构信息。</li>\n<li>通常用户接触到的文件，如图形文件、数据文件、文档文件、声音文件等都属于普通文件。</li>\n<li>按其内部结构分为文本文件和二进制文件。</li>\n</ul>\n<h4 id=\"目录文件\"><a href=\"#目录文件\" class=\"headerlink\" title=\"目录文件\"></a>目录文件</h4><ul>\n<li>目录文件不存放常规数据，它是用来<strong>组织</strong>、<strong>访问</strong>其他文件的，是内核组织文件系统的基本节点。</li>\n<li>目录文件可以包含下一级目录文件或普通文件。</li>\n<li>目录文件是一种文件，是Linux文件中的一种</li>\n</ul>\n<h4 id=\"链接文件\"><a href=\"#链接文件\" class=\"headerlink\" title=\"链接文件\"></a>链接文件</h4><ul>\n<li>链接文件是一种特殊的文件，是指向一个真实存在的文件链接(类似于Windows的快捷方式)。</li>\n<li>根据链接文件的不同，分为<strong>硬链接</strong>（Hard Link）文件和<strong>符号链接</strong>（Symbolic Link，又称为软链接）文件</li>\n</ul>\n<h4 id=\"设备文件\"><a href=\"#设备文件\" class=\"headerlink\" title=\"设备文件\"></a>设备文件</h4><ul>\n<li>设备文件是Linux中最特殊的文件，可以方便地访问外部设备。</li>\n<li>Linux为外部设备提供一种标准接口，将外部设备视为一种特殊的文件。用户可以像访问普通文件一样访问任何外部设备，使Linux系统可以很方便地适应不断变化的外部设备。</li>\n<li>设备文件放在/dev目录下，设备文件使用设备的主设备号和次设备号来指定某外部设备。</li>\n<li>根据访问数据方式的不同，设备文件分为：块设备和字符设备文件。</li>\n</ul>\n<h4 id=\"管道文件\"><a href=\"#管道文件\" class=\"headerlink\" title=\"管道文件\"></a>管道文件</h4><ul>\n<li>管道文件是一种很特殊的文件，主要用于不同进程的信息传递。</li>\n<li>当两个进程间需要传递数据或信息时，可以使用管道文件。一个进程将需传递的数据或信息写入管道的一端，另一进程则从管道另一端取得所需的数据或信息。</li>\n</ul>\n<h3 id=\"文件类型判断\"><a href=\"#文件类型判断\" class=\"headerlink\" title=\"文件类型判断\"></a>文件类型判断</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看文件的详细属性\"><a href=\"#查看文件的详细属性\" class=\"headerlink\" title=\"查看文件的详细属性\"></a>查看文件的详细属性</h3><p>使用stat命令，例如，文件的名称、大小、权限、atime、ctime、mtime等</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"显示当前工作目录\"><a href=\"#显示当前工作目录\" class=\"headerlink\" title=\"显示当前工作目录\"></a>显示当前工作目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绝对路径和相对路径\"><a href=\"#绝对路径和相对路径\" class=\"headerlink\" title=\"绝对路径和相对路径\"></a>绝对路径和相对路径</h3><ul>\n<li>绝对路径是以根目录“/”开始，递归每级目录直到目标路径。</li>\n<li>相对路径是以当前目录为起点，到达目标的路径。</li>\n</ul>\n<h3 id=\"显示目录下的文件结构\"><a href=\"#显示目录下的文件结构\" class=\"headerlink\" title=\"显示目录下的文件结构\"></a>显示目录下的文件结构</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree filename</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换目录\"><a href=\"#切换目录\" class=\"headerlink\" title=\"切换目录\"></a>切换目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [directory]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>- ```表示返回到上次目录。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cd ..```表示返回到上一级目录</span><br><span class=\"line\"></span><br><span class=\"line\">### ls命令</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">ls [option] [names]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示所有隐藏文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br></pre></td></tr></table></figure></li>\n<li>显示所有以a开头的文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls a*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"目录的创建和删除\"><a href=\"#目录的创建和删除\" class=\"headerlink\" title=\"目录的创建和删除\"></a>目录的创建和删除</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称<br>参数：-p :创建多层目录，-v：显示创建过程信息</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p><strong>rmdir命令只能用来删除空目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [option] [dirname]</span><br></pre></td></tr></table></figure>\n<p>dirname : 目录名称</p>\n<h3 id=\"文件的创建、查看、复制、移动、删除、排序\"><a href=\"#文件的创建、查看、复制、移动、删除、排序\" class=\"headerlink\" title=\"文件的创建、查看、复制、移动、删除、排序\"></a>文件的创建、查看、复制、移动、删除、排序</h3><h4 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [option] filename</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用来显示文件内容， 依次读取其后所指文件的内容并将其输出到标准输出设备上。</li>\n<li>能够用来连接两个或者多个文件，形成新文件。</li>\n</ul>\n<p>more命令以逐页的方式显示文件的内容.<br>less命令也是对文件或其他输出进行分页显示。<br>head命令可以查看文件的前几行的内容。<br>tail命令查看文件的后几行的内容</p>\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [option] source  dest</span><br></pre></td></tr></table></figure>\n<p>source表示需要复制的文件，dest 表示需要复制到的目录。</p>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv [option] source dest</span><br></pre></td></tr></table></figure>\n<p>为文件或目录改名或者将文件由一个目录移动到另一个目录中</p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [option] filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除一个目录中的一个或者多个文件。</li>\n<li>将某个目录及其下的所有文件及子目录均删除。</li>\n<li>对于链接文件，只是删除了链接，原有文件均保持不变</li>\n</ul>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>对文件中的各行进行排序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort [option] filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件查找\"><a href=\"#文件查找\" class=\"headerlink\" title=\"文件查找\"></a>文件查找</h3><p>以指定的查找模式搜索文件，通知用户在什么文件中搜索到与指定模式匹配的字符串，并且打印出所有包含该字符的文本行，该文本行的最前面是该行所在的文件名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][–help][范本样式][文件或目录…]</span><br></pre></td></tr></table></figure>\n\n\n<p>find:从指定的目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对其采取相关的操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [pathname] [option] filename</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"linux-文件链接\"><a href=\"#linux-文件链接\" class=\"headerlink\" title=\"linux 文件链接\"></a>linux 文件链接</h3><h4 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h4><ul>\n<li>默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。</li>\n<li>创建一个硬链接时，也为这个文件创建了一个额外的目录条目。</li>\n</ul>\n<h5 id=\"硬链接的局限性\"><a href=\"#硬链接的局限性\" class=\"headerlink\" title=\"硬链接的局限性\"></a>硬链接的局限性</h5><p>（1）硬链接不能引用自身文件系统之外的文件，即不能引用不在同一磁盘分区的文件。<br>（2）硬链接无法引用目录。</p>\n<p>当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在，除非该文件的所有链接都被删除了</p>\n<h4 id=\"符号链接（软链接）\"><a href=\"#符号链接（软链接）\" class=\"headerlink\" title=\"符号链接（软链接）\"></a>符号链接（软链接）</h4><p>符号链接指向的文件与符号链接自身几乎没有区别。</p>\n<h3 id=\"文件时间\"><a href=\"#文件时间\" class=\"headerlink\" title=\"文件时间\"></a>文件时间</h3><p>在Linux系统中，文件是没有创建时间的，如果新创建一个文件，它的三个时间都是与创建的时间相同。</p>\n<h4 id=\"1-访问时间（Access-time）\"><a href=\"#1-访问时间（Access-time）\" class=\"headerlink\" title=\"1.访问时间（Access time）\"></a>1.访问时间（Access time）</h4><p>对文件内容进行一次读操作时间。</p>\n<h4 id=\"2-修改时间（Change-time）\"><a href=\"#2-修改时间（Change-time）\" class=\"headerlink\" title=\"2.修改时间（Change time）\"></a>2.修改时间（Change time）</h4><p>文件内容被最后一次修改的时间。</p>\n<p>ls -l 命令显示出来的文件时间就是这个时间</p>\n<h4 id=\"3-状态时间（Modify-time）\"><a href=\"#3-状态时间（Modify-time）\" class=\"headerlink\" title=\"3.状态时间（Modify time）\"></a>3.状态时间（Modify time）</h4><p>当文件的状态被改变时，状态时间就会改变</p>\n<h2 id=\"Linux用户管理\"><a href=\"#Linux用户管理\" class=\"headerlink\" title=\"Linux用户管理\"></a>Linux用户管理</h2><p>超级用户可以对普通用户进行跟踪，并限制它们的访问权限，以保证系统安全。</p>\n<p>Linux系统并不能识别用户账号名称信息，所以每个用户都有一个唯一的系统可识别的UID</p>\n<p>id命令可以查看当前用户登录信息。</p>\n<ul>\n<li>UID(User Identification)为用户的ID。</li>\n<li>GID(Group Identification)为用户所属组的ID。</li>\n<li>groups为用户属于的所有组的ID。</li>\n</ul>\n<p>ps aux | less命令查看进程</p>\n<h3 id=\"用户分类\"><a href=\"#用户分类\" class=\"headerlink\" title=\"用户分类\"></a>用户分类</h3><ol>\n<li>root用户：拥有最高权限，ID为0。</li>\n<li>普通用户：可以登录，由管理员创建，使用权限有限。</li>\n<li>系统用户：不具有登录的能力，但是系统运行不可或缺的。</li>\n</ol>\n<h3 id=\"管理用户组\"><a href=\"#管理用户组\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><ul>\n<li>useradd用来添加用户。</li>\n<li>passwd修改用户口令。</li>\n<li>usermod修改用户信息。</li>\n<li>userdel删除用户。</li>\n</ul>\n<h4 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h4><p>添加用户就是在系统中创建一个新账号，并为新账号分配用户ID、用户组、主目录和登录Shell等资源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd [option] username</span><br></pre></td></tr></table></figure>\n<p>username表示新账号的登录名</p>\n<h4 id=\"修改用户口令\"><a href=\"#修改用户口令\" class=\"headerlink\" title=\"修改用户口令\"></a>修改用户口令</h4><p>用户账号刚创建时没有口令，无法使用，必须为其指定口令后才可以使用，即使是空口令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd [option] [username]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>username参数没有指定时，表示修改当前用户的口令。</li>\n<li>如果指定了该参数，则表示修改指定用户的口令，只有root用户才有修改指定用户口令的权限</li>\n</ul>\n<h4 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h4><p>删除用户就是删除与用户有关的系统配置文件中的记录（如/etc/passwd）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel [option] username</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户信息\"><a href=\"#修改用户信息\" class=\"headerlink\" title=\"修改用户信息\"></a>修改用户信息</h4><p>修改用户信息就是更改用户的属性，如用户 ID、主目录、用户所在组、登录Shell等。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod [option] username</span><br></pre></td></tr></table></figure>\n\n<p>gpasswd命令–从用户组中移出一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd [-a user][-d user][-A user,...][-M user,...][-r][-R]groupname</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"管理用户组-1\"><a href=\"#管理用户组-1\" class=\"headerlink\" title=\"管理用户组\"></a>管理用户组</h3><p>用户组是具有相同特征用户的集合，每个用户都有一个用户组，方便系统集中管理一个用户组中的所有用户</p>\n<h4 id=\"添加用户组\"><a href=\"#添加用户组\" class=\"headerlink\" title=\"添加用户组\"></a>添加用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd [option] group_name</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"删除用户组\"><a href=\"#删除用户组\" class=\"headerlink\" title=\"删除用户组\"></a>删除用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户组\"><a href=\"#修改用户组\" class=\"headerlink\" title=\"修改用户组\"></a>修改用户组</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod [option] group_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看用户的分组\"><a href=\"#查看用户的分组\" class=\"headerlink\" title=\"查看用户的分组\"></a>查看用户的分组</h4><ol>\n<li>groups命令查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups</span><br><span class=\"line\">groups user1 user2</span><br></pre></td></tr></table></figure></li>\n<li>查看文件/etc/group法，通过grep命令查询某个用户所在的用户组。</li>\n<li>id命令法，只执行id命令就可以查看。命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br><span class=\"line\">id user2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"和用户相关的一些系统文件\"><a href=\"#和用户相关的一些系统文件\" class=\"headerlink\" title=\"和用户相关的一些系统文件\"></a>和用户相关的一些系统文件</h3><ol>\n<li>/etc/passwd文件保存用户信息。</li>\n<li>/etc/shadow文件保存加密的用户密码。</li>\n<li>/etc/group文件保存用户组信息。</li>\n<li>/etc/login.defs配置文件。</li>\n</ol>\n<p><strong>su root</strong>可以返回root </p>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><p>权限的意义在于允许某一个用户或某个用户组以规定的方式去访问某个文件。</p>\n<h3 id=\"U-G-O\"><a href=\"#U-G-O\" class=\"headerlink\" title=\"U G O\"></a>U G O</h3><p>U: owner为属主，文件所有者。<br>G：group为属组，同组用户。<br>O：other为其他用户。</p>\n<h3 id=\"UGO方式每组的3个字符具体意义如下：\"><a href=\"#UGO方式每组的3个字符具体意义如下：\" class=\"headerlink\" title=\"UGO方式每组的3个字符具体意义如下：\"></a>UGO方式每组的3个字符具体意义如下：</h3><p>r:read，数字设定值为4<br>w:write,数字设定值为2<br>x:execute,数字设定值为1</p>\n<h3 id=\"设置文件属性和权限\"><a href=\"#设置文件属性和权限\" class=\"headerlink\" title=\"设置文件属性和权限\"></a>设置文件属性和权限</h3><h4 id=\"改变文件所属用户命令chown\"><a href=\"#改变文件所属用户命令chown\" class=\"headerlink\" title=\"改变文件所属用户命令chown\"></a>改变文件所属用户命令chown</h4><p>文件所有者修改为指定的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">显示更改的部分的信息</td>\n</tr>\n<tr>\n<td align=\"center\">-f</td>\n<td align=\"center\">忽略错误信息</td>\n</tr>\n<tr>\n<td align=\"center\">-h</td>\n<td align=\"center\">修复符号链接</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"center\">显示详细的处理信息</td>\n</tr>\n<tr>\n<td align=\"center\">-R</td>\n<td align=\"center\">处理指定目录以及其子目录下的所有文件</td>\n</tr>\n<tr>\n<td align=\"center\">–help</td>\n<td align=\"center\">显示辅助说明</td>\n</tr>\n<tr>\n<td align=\"center\">–version</td>\n<td align=\"center\">显示版本</td>\n</tr>\n</tbody></table>\n<h4 id=\"改变文件所在组命令chgrp\"><a href=\"#改变文件所在组命令chgrp\" class=\"headerlink\" title=\"改变文件所在组命令chgrp\"></a>改变文件所在组命令chgrp</h4><p>变更目录和文件的所属组，只有超级用户才拥有此权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp [option] group file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th align=\"center\">explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c或–changes</td>\n<td align=\"center\">效果类似”-v”参数，但仅回报更改部分。</td>\n</tr>\n<tr>\n<td align=\"center\">-f或–quiet或–silent</td>\n<td align=\"center\">不显示错误信息。</td>\n</tr>\n<tr>\n<td align=\"center\">-h或–no-dereference</td>\n<td align=\"center\">只对符号连接的文件作修改，而不更动其他任何相关文件。</td>\n</tr>\n<tr>\n<td align=\"center\">-R或–recursive</td>\n<td align=\"center\">递归处理，将指定目录下的所有文件及子目录一并处理。</td>\n</tr>\n<tr>\n<td align=\"center\">-v或–verbose</td>\n<td align=\"center\">显示指令执行过程。</td>\n</tr>\n<tr>\n<td align=\"center\">–reference=&amp;lt</td>\n<td align=\"center\">参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</td>\n</tr>\n</tbody></table>\n<h4 id=\"修改文件或目录的权限chmod\"><a href=\"#修改文件或目录的权限chmod\" class=\"headerlink\" title=\"修改文件或目录的权限chmod\"></a>修改文件或目录的权限chmod</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure>\n<p>u表示该文件的拥有者，g表示与该文件的拥有者属于同一个群体(group)者，o表示其他以外的人，a表示这三者皆是。<br>+表示增加权限、-表示取消权限、=表示唯一设定权限。<br>r表示可读取，w表示可写入，x表示可执行，X表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p>\n<h5 id=\"修改文件权限的方法有2种\"><a href=\"#修改文件权限的方法有2种\" class=\"headerlink\" title=\"修改文件权限的方法有2种\"></a>修改文件权限的方法有2种</h5><ol>\n<li>符号法（表达式法）<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod [who] [operator] [mode] file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>who指定用户身份，若此参数省略，则表示对所有用户进行操作。</li>\n<li>operator表示添加或取消某个权限，取值为“+”或“-”。</li>\n<li>mode指定读、写、执行权限，取值为 r、 w、 x 的任意组合。</li>\n</ul>\n<ol start=\"2\">\n<li>数字法<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 数字 file</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"><a href=\"#存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\" class=\"headerlink\" title=\"存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。\"></a>存储在磁盘上的文件就像是一个链表，表头是文件的起始地址，整个文件不连续存放。</h3><h3 id=\"基础权限ACL\"><a href=\"#基础权限ACL\" class=\"headerlink\" title=\"基础权限ACL\"></a>基础权限ACL</h3><p>主要提供传统的UGO的r、w、x权限之外的具体权限设置，对单一用户，单一文件或目录进行权限设置。</p>\n<h4 id=\"getfacl命令\"><a href=\"#getfacl命令\" class=\"headerlink\" title=\"getfacl命令\"></a>getfacl命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl [-aceEsRLPtpndvh] file ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"setfacl命令可以设置ACL权限\"><a href=\"#setfacl命令可以设置ACL权限\" class=\"headerlink\" title=\"setfacl命令可以设置ACL权限\"></a>setfacl命令可以设置ACL权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux编程基础\"><a href=\"#linux编程基础\" class=\"headerlink\" title=\"linux编程基础\"></a>linux编程基础</h2><p>make可以获知所管理项目中源文件的修改情况，根据程序员设定的规则，自动编译被修改过的部分，</p>\n<p>make通过makefile文件描述的内容自动维护编译工作。</p>\n<h2 id=\"shell编程\"><a href=\"#shell编程\" class=\"headerlink\" title=\"shell编程\"></a>shell编程</h2><p>Shell脚本是一个包含一系列命令的文件。<br>Shell自动读取这个文件，并执行这些命令，与直接输入命令行得到结果一样。</p>\n<h3 id=\"用Shell脚本的原因：\"><a href=\"#用Shell脚本的原因：\" class=\"headerlink\" title=\"用Shell脚本的原因：\"></a>用Shell脚本的原因：</h3><ol>\n<li>效率高：如果让Shell记住这些命令并自动完成输入将会大大提升效率。 </li>\n<li>简单性： 通过Shell高级语言，可以简洁地表达复杂的操作。</li>\n<li>可移植性：使用POSIX定义的功能，可以做到脚本无须修改就可在不同系统上执行。</li>\n<li>开发容易：可以在短时间内完成一个功能强大又好用的脚本。</li>\n</ol>\n<h3 id=\"Shell分类：\"><a href=\"#Shell分类：\" class=\"headerlink\" title=\"Shell分类：\"></a>Shell分类：</h3><ol>\n<li>用于用户交互接口的Shell称为交互式Shell。</li>\n<li>作为命令解析器的Shell称为非交互式Shell。</li>\n</ol>\n<h3 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h3><p>脚本第一行开头的“#!”是一个约定的标记，称为shebang，用来告知操作系统需要用什么解析器来执行此脚本，</p>\n<p>Shell的注释以“#”开头，注释的内容不会执行。</p>\n<p>给文件helloxiangtian.sh增加可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chomd +x helloxiangtan.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shell变量命名规则：\"><a href=\"#Shell变量命名规则：\" class=\"headerlink\" title=\"Shell变量命名规则：\"></a>Shell变量命名规则：</h3><p>变量名必须由大写字母（A～Z）、小写字母（a～z）、数字（0～9）或下画线构成；变量名的第一个字符不能是数字。 </p>\n<h3 id=\"shell变量分类\"><a href=\"#shell变量分类\" class=\"headerlink\" title=\"shell变量分类\"></a>shell变量分类</h3><p>Shell变量分为自定义变量、环境变量、位置变量和预定义变量。</p>\n<p>根据工作要求临时定义的变量称为自定义变量。<br>环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保证Shell命令的正确执行，如$0、$1、$#。<br>从命令行、函数或脚本执行等处传递参数时，$0、$1称为特殊位置变量。<br>预定义变量是在bash（默认Shell）中已有的变量，可以直接使用，如$@、$*等。</p>\n<p>Shell变量只有字符串一种类型，即无论给 Shell变量赋予什么值，在存储时都会转换为字符串。</p>\n<h4 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义自定义变量</td>\n<td align=\"center\">变量名=变量值，变量名必须以字母和下划线开头，如ipl=192.197.1.1。</td>\n</tr>\n<tr>\n<td align=\"center\">使用自定义变量</td>\n<td align=\"center\">$变量名</td>\n</tr>\n<tr>\n<td align=\"center\">查看自定义变量</td>\n<td align=\"center\">echo $变量名 set（所有变量：自定义变量和环境变量）</td>\n</tr>\n<tr>\n<td align=\"center\">取消自定义变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">自定义变量作用范围</td>\n<td align=\"center\">仅在当前shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>在各种编程语言中会提及全局变量概念。<br>全局变量可以在程序的任何地方使用。<br>在Shell编程中该功能由环境变量实现。<br>系统中的所有进程都可以使用环境变量。<br>环境变量与全局变量区别：<br>子进程对环境变量的修改不会传递到父进程中。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定义环境变量</td>\n<td align=\"center\">使用export命令声明。例如，export back_dir=/home/user例如，export ipl 将自定义变量转换为环境变量。</td>\n</tr>\n<tr>\n<td align=\"center\">使用环境变量</td>\n<td align=\"center\">$变量名或$｛变量名｝</td>\n</tr>\n<tr>\n<td align=\"center\">查看环境变量</td>\n<td align=\"center\">echo $变量名 或env，如env</td>\n</tr>\n<tr>\n<td align=\"center\">取消环境变量</td>\n<td align=\"center\">unset 变量名</td>\n</tr>\n<tr>\n<td align=\"center\">环境变量作用范围</td>\n<td align=\"center\">仅在当前shell和子shell中有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"位置变量\"><a href=\"#位置变量\" class=\"headerlink\" title=\"位置变量\"></a>位置变量</h4><p>位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。<br>执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">0代表命令本身，<span class=\"variable\">$1</span>-<span class=\"variable\">$9</span>代表接收的第1~9个参数，<span class=\"variable\">$10</span>以上需要用&#123;&#125;括起来，如<span class=\"variable\">$&#123;20&#125;</span>代表接收的第20个参数。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h4><p>预定义变量在Shell中可以直接使用，位置变量也是预定义变量的一种。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">预定义变量</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"left\">脚本名</td>\n</tr>\n<tr>\n<td align=\"center\">$*</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$@</td>\n<td align=\"left\">所有的参数</td>\n</tr>\n<tr>\n<td align=\"center\">$#</td>\n<td align=\"left\">参数的个数</td>\n</tr>\n<tr>\n<td align=\"center\">$$</td>\n<td align=\"left\">当前进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$!</td>\n<td align=\"left\">上一个后台进程的PID</td>\n</tr>\n<tr>\n<td align=\"center\">$?</td>\n<td align=\"left\">上一个命令的返回值，0表示成功。</td>\n</tr>\n</tbody></table>\n<h3 id=\"变量的操作\"><a href=\"#变量的操作\" class=\"headerlink\" title=\"变量的操作\"></a>变量的操作</h3><p>变量创建只需要指定变量名称和变量值，它们之间用等号（=）连接，等号两边不能有空格。</p>\n<p>变量创建好后，可以用$变量名的方式获取变量的值。</p>\n<p>可以使用$符号获取变量的值。</p>\n<p>用户可以通过export命令将Shell变量导出为环境变量，但没有办法将环境变量再恢复成Shell变量。</p>\n<h4 id=\"变量的删除\"><a href=\"#变量的删除\" class=\"headerlink\" title=\"变量的删除\"></a>变量的删除</h4><table>\n<thead>\n<tr>\n<th align=\"center\">格式</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">${变量名#关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名##关键字符}</td>\n<td align=\"center\">变量内容从头开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最短数据删除。</td>\n</tr>\n<tr>\n<td align=\"center\">${变量名%%关键字符}</td>\n<td align=\"center\">变量内容从尾开始的数据符合“关键字符”，则将符合的最长数据删除。</td>\n</tr>\n</tbody></table>\n<h4 id=\"变量的替换\"><a href=\"#变量的替换\" class=\"headerlink\" title=\"变量的替换\"></a>变量的替换</h4><p>|格式  |说明|<br>|:—:|：—：|<br>|${变量名/旧字符串/新字符串}|  若变量内容符合“旧字符串”，则第1个“旧字符串”会被“新字符串”替换。|<br>|${变量名//旧字符串/新字符串} |  若变量内容符合“旧字符串”，则全部“旧字符串”会被“新字符串”替换。|</p>\n<h4 id=\"变量的替代\"><a href=\"#变量的替代\" class=\"headerlink\" title=\"变量的替代\"></a>变量的替代</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;变量名-新的变量名&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>在Shell中，变量值的类型默认是字符串，不直接进行运算。</p>\n<p>用于整数运算的方法有expr、(())和$[]。</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr expression</span><br><span class=\"line\">例：</span><br><span class=\"line\">n1 + n2</span><br><span class=\"line\">expr $n1 + $n2</span><br></pre></td></tr></table></figure>\n<p>运算符及用于计算的数字两边必须有空格，否则会执行失败。<br>用expr进行乘法运算时，必须在<em>前用反斜线转义（Shell可能误解为</em>号）。</p>\n<p>“（（））”或“[ ]”数值运算命令<br>双小括号 “(())” 的作用是进行整数运算和数值比较，其效率很高，用法也非常灵活，是企业中常见的运算操作符<br>格式：<br>“ ((expression))”，或“ [expression]”<br>括号内部两侧可以有空格，也可省空格。<br>需要直接输出运算表达式的运算结果时，可以在“ ((表达式))”前加$符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1+n2</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">((<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>))</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">[<span class=\"variable\">$n1</span>+<span class=\"variable\">$n2</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>let数值运算命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let expression</span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\">let sum = n1+n2;</span><br></pre></td></tr></table></figure>\n\n<p>let数值符号可以直接进行计算，且不带回显功能，也就是说当使用let的时候，不再使用$引用变量</p>\n<h3 id=\"shell中的特殊符号\"><a href=\"#shell中的特殊符号\" class=\"headerlink\" title=\"shell中的特殊符号\"></a>shell中的特殊符号</h3><h4 id=\"1-“-”表示注释。\"><a href=\"#1-“-”表示注释。\" class=\"headerlink\" title=\"1. “#”表示注释。\"></a>1. “#”表示注释。</h4><ul>\n<li>行首为#（#!是个例外）表示此行是注释。</li>\n<li>注释也可以放在本行命令的后面，需要注意的是#两边有空格。</li>\n<li>释也可以放在本行行首空白的后面。</li>\n</ul>\n<h4 id=\"2-“-“\"><a href=\"#2-“-“\" class=\"headerlink\" title=\"2. “ ; “\"></a>2. “ ; “</h4><ul>\n<li>“;”在同一行中分隔两个或者两个以上的命令。</li>\n<li>“;”也适用于循环语句</li>\n</ul>\n<h4 id=\"3-“-”\"><a href=\"#3-“-”\" class=\"headerlink\" title=\"3. “;;”\"></a>3. “;;”</h4><ul>\n<li>用于终止case语句</li>\n</ul>\n<h4 id=\"4-“-”\"><a href=\"#4-“-”\" class=\"headerlink\" title=\"4. “:”\"></a>4. “:”</h4><ul>\n<li>空命令“:”和true命令作用相同。</li>\n<li>在while死循环和if/then中也可使用这个命令。</li>\n</ul>\n<h4 id=\"5-“-”\"><a href=\"#5-“-”\" class=\"headerlink\" title=\"5. “.”\"></a>5. “.”</h4><ul>\n<li>“.”等价于source命令，是bash中的一个内建命令。</li>\n<li>“.”也可以作为文件名的一部分，如果“.”放在文件名的开头，那么这个文件将会成为“隐藏文件”。ls命令将不会正常显示出这个文件。</li>\n<li>当点作为目录名时，一个单独的点代表当前工作目录，而两个点表示上一级目录。</li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><h5 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h5><p>echo命令是最常用的，其功能是将字符串输出到屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo [-ne] [string]</span><br></pre></td></tr></table></figure>\n<p>其中，string表示要输出的字符串。选项n表示输出不换行。选项e表示处理特殊字符</p>\n<h5 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h5><p>输出命令printf的功能是格式化输出数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf format [arguments...]</span><br></pre></td></tr></table></figure>\n\n<p>format为输出格式，用单引号或双引号包围都可以。“%s”为格式符，表示输出的格式为字符串，还有“%d”、“%c”、“%f”等，代表的格式与 C 语言中的相同。<br>arguments为要输出的数据。</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><h5 id=\"1-直接给变量赋值\"><a href=\"#1-直接给变量赋值\" class=\"headerlink\" title=\"1. 直接给变量赋值\"></a>1. 直接给变量赋值</h5><p>例如，name=liming</p>\n<h5 id=\"2-从键盘读入赋值\"><a href=\"#2-从键盘读入赋值\" class=\"headerlink\" title=\"2. 从键盘读入赋值\"></a>2. 从键盘读入赋值</h5><ul>\n<li>read命令可以通过从标准输入设备（键盘）读取一行数据赋值给变量。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read  [options] [variable…]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-使用命令行参数赋值\"><a href=\"#3-使用命令行参数赋值\" class=\"headerlink\" title=\"3. 使用命令行参数赋值\"></a>3. 使用命令行参数赋值</h5><p>使用命令行参数赋值是直接在命令后面跟参数，系统用$1来调用第一个参数，用$2调用第二个参数……，这种赋值方法适用于参数经常变化且不需要交互的情况。</p>\n<h5 id=\"4-利用命令的输出结果赋值\"><a href=\"#4-利用命令的输出结果赋值\" class=\"headerlink\" title=\"4. 利用命令的输出结果赋值\"></a>4. 利用命令的输出结果赋值</h5><ul>\n<li>在Shell程序中，可以将一个命令的输出结果当作变量的值（需要在赋值语句中使用反向单引号）。</li>\n<li>把命令的结果作为变量的内容进行赋值的方法，在脚本开发时很常见，如按天打包网站的站点目录程序，生成不同文件名</li>\n</ul>\n<h5 id=\"5-从文件中读入数据赋值\"><a href=\"#5-从文件中读入数据赋值\" class=\"headerlink\" title=\"5. 从文件中读入数据赋值\"></a>5. 从文件中读入数据赋值</h5><p>这种方式就适合处理大批量的数据，直接把相应的数据写入文件中，通过脚本中的命令把文件中的数据读取到脚本程序中以便使用。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 转义字符：用于引用任意的单个字符。</span><br><span class=\"line\">2. 单引号引用（强引用），不管引号里面是否有变量或者其他的表达式，都是原样输出。</span><br><span class=\"line\">3. 双引号引用（弱引用），用于引用包含的字符串，但保留$、 \\和`的特殊含义，即引号里面的变量或者函数会先解析再输出内容。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><h4 id=\"文件测试\"><a href=\"#文件测试\" class=\"headerlink\" title=\"文件测试\"></a>文件测试</h4><ol>\n<li>test<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“test  &lt;expression&gt;”</span><br></pre></td></tr></table></figure></li>\n<li>“&lt;测试表达式&gt;”</li>\n</ol>\n<p>也可以使用“&lt;测试表达式&gt;”，就是使用中括号。<br>语法格式：<br>“ [  <expression> ]”<br>注意：[]与expression之间必须有空格。<br>通过[]进行条件测试的方法，与test命令用法相同，推荐使用此方法。</p>\n<h4 id=\"整数测试\"><a href=\"#整数测试\" class=\"headerlink\" title=\"整数测试\"></a>整数测试</h4><p>整数测试通常用于数值之间的运算。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">       [ 整数1 操作符 整数2 ]</span><br><span class=\"line\">或   test 整数1 操作符 整数2。</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符1</th>\n<th align=\"center\">操作符2(部分能用)  意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-eq ==</td>\n<td align=\"center\">等于（Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-ge &gt;=</td>\n<td align=\"center\">大于等于（Greater or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-gt &gt;</td>\n<td align=\"center\">大于（Greater Than-le）</td>\n</tr>\n<tr>\n<td align=\"center\">-le &lt;=</td>\n<td align=\"center\">小于等于（Lesser or Equal）</td>\n</tr>\n<tr>\n<td align=\"center\">-lt</td>\n<td align=\"center\">&lt;   小于（Lesser Than）</td>\n</tr>\n<tr>\n<td align=\"center\">-ne !=</td>\n<td align=\"center\">不等于（Not Equal）</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串测试\"><a href=\"#字符串测试\" class=\"headerlink\" title=\"字符串测试\"></a>字符串测试</h4><p>字符串测试操作包括比较字符串是否相同、测试字符串的长度是否为0。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 字符串1 = 字符串2 ]</span><br><span class=\"line\">[ 字符串1 ！= 字符串2 ]或[ -z 字符串 ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression1 op expression2 ]</span><br><span class=\"line\">or       command1 op commnad2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">! expr</td>\n<td align=\"center\">如果表达式评估为假，则为真</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -a expr2</td>\n<td align=\"center\">如果 expr1 和 expr2 都为真，则结果为真，&amp;&amp;</td>\n</tr>\n<tr>\n<td align=\"center\">expr1 -o expr2</td>\n<td align=\"center\">如果 expr1 或 expr2 为真，则结果为真，</td>\n</tr>\n</tbody></table>\n<h3 id=\"if语句格式\"><a href=\"#if语句格式\" class=\"headerlink\" title=\"if语句格式\"></a>if语句格式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语句格式：</span><br><span class=\"line\">if [ expression ];then  code</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then code</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ expression ];then  code1</span><br><span class=\"line\">else code2</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ expression ]  </span><br><span class=\"line\">then   code1</span><br><span class=\"line\">else  code2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if expression; then</span><br><span class=\"line\"> command…</span><br><span class=\"line\">[elif expression; then</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">[else</span><br><span class=\"line\"> command…]</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case value in</span><br><span class=\"line\">    [ expression1) code1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    expression2) code2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    …</span><br><span class=\"line\">    *）code</span><br><span class=\"line\">    ]</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"while-命令\"><a href=\"#while-命令\" class=\"headerlink\" title=\"while 命令\"></a>while 命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while expression; do</span><br><span class=\"line\">       command…</span><br><span class=\"line\">done   </span><br></pre></td></tr></table></figure>\n<h4 id=\"until命令\"><a href=\"#until命令\" class=\"headerlink\" title=\"until命令\"></a>until命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until expression; do</span><br><span class=\"line\">     command…</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  variable in [in sequence]</span><br><span class=\"line\">do</span><br><span class=\"line\">    code</span><br><span class=\"line\">done </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for  变量名 in 取值列表；do     循环体 done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable [in sequence]; do</span><br><span class=\"line\">          command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((expression1; expression2; expression3;));do</span><br><span class=\"line\">           command…</span><br><span class=\"line\">     done</span><br></pre></td></tr></table></figure>\n\n\n<p>在循环后面加个 &amp; 符号表示在后台执行</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"数组分为普通数组和关联数组。\"><a href=\"#数组分为普通数组和关联数组。\" class=\"headerlink\" title=\"数组分为普通数组和关联数组。\"></a>数组分为普通数组和关联数组。</h4><p>普通数组中的索引（下标）都是整数。<br>关联数组的数组索引可以用任意的文本。</p>\n<p>两者最大区别：</p>\n<ul>\n<li>关联数组使用之前需要声明。</li>\n<li>关联数组是由特定格式的键值对组成</li>\n</ul>\n<h4 id=\"普通数组\"><a href=\"#普通数组\" class=\"headerlink\" title=\"普通数组\"></a>普通数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（value_table）</span><br></pre></td></tr></table></figure>\n\n<p>value_table中值之间用空格隔开。</p>\n<h4 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h4><p>定义：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=（[indexe1]=value1 [indexe2]=value2 ...... [indexen]=valuen)</span><br></pre></td></tr></table></figure>\n<p>其中：<br>indexei可以用标识符表示。</p>\n<p>声明普通数组方法：<br>#declare -a arrayname<br>声明关联数组方法：<br>#declare -A arrayname</p>\n<h4 id=\"数组定义方法\"><a href=\"#数组定义方法\" class=\"headerlink\" title=\"数组定义方法\"></a>数组定义方法</h4><ul>\n<li><p>直接定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayname=(value1 value2 value3 ... valuen)</span><br></pre></td></tr></table></figure></li>\n<li><p>下标定义数组</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=([index1]=value1 [index2]=value2 ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>间接定义数组</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0]=value1;array[1]=value2;....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从文件中读入定义数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=($(command))</span><br><span class=\"line\">array_name=($(`variable`))</span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\">array_name=(`command`)</span><br><span class=\"line\">array_name=(`variable`)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问数组表达式\"><a href=\"#访问数组表达式\" class=\"headerlink\" title=\"访问数组表达式\"></a>访问数组表达式</h4><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>echo ${!array[*]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${!array[@]}</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td>echo ${array[*]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo ${array[@]}</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td>echo $</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"网络编程期末知识点总结","date":"2021-12-30T10:57:00.000Z","description":"网络编程期末知识点总结","_content":"\n# 网络编程知识点总结\n\n## 套接字地址，通用形式\n\n```c\nstruct sockaddr{  /*保存地址的结构*/\n\tunsigned char sa_len; /*总长度*/\n\tsa_family_t sa_family; /*地址族*/\n\tchar sa_data[14]; /*实际更长：地址值*/\n}\n```\n\n\n## 互联网地址，互联网风格\n\n```c\nstruct sockaddr_in{\n\tunit8_t sin_len;  /*总长度*/\n\tsa_family_t sa_family; /*地址类型*/\n\tin_port_t  sin_port; /*协议端口号*/\n\tstruct in_addr sin_addr；/*IP地址*/\n\tsin_zero[8]； /*未使用（设置为0）*/\n}\n```\n\n## 两种传输服务的套接字类型\n\nUDP:不可靠的数据报\nTCP：可靠的、面向字节流的\n\n### UDP\n\n#### 客户端服务端之间没有连接\n- 发送数据前不握手\n- 发送方式显式的将IP目的地址和端口 # 附加到每个数据包\n- 接受方从收到的数据包中提取发送方的IP地址和端口号\n\n#### UDP传输的数据可能丢失或接受顺序错误\n\n\n#### 简单的UDP程序\n\n```c\n#define LINELEN 128\n/* 1) initialize sockaddr_in structure */\nmemset(&serverin, 0, sizeof(serverin));\nserverin.sin_family = AF_INET;\nserverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);\nserverin.sin_port = htons(SERVER_PORT);\n/* 2) Create a socket */\nif ((clientSocket = socket(PF_INET, SOCK_DGRAM, 0)) < 0)\nerr(1, “create socket\");\n/* 3) formulate a request */\nchar buf[LINELEN+1];\nint nchars; /* char count read in buf */\nfgets(buf, sizeof(buf), stdin);\nbuf[LINELEN] = '\\0'; /* insure null-terminated */\nnchars = strlen(buf);\n/* 4) send the request */\n(void) sendto(clientSocket, buf, nchars, 0, \n(struct sockaddr *)&serverin, sizeof(serverin));\n/* 5) receive the reply */\nif (recv(clientSocket, buf, sizeof(buf), 0) < 0)\nerr(1, \"recv socket\");\n}\n/* 6) handle the response */\nfputs(buf, stdout);\nfflush(stdout);\n```\n\n\n### 创建UDP和TCP通信端点sockfd\n\n[socket详解](https://www.jianshu.com/p/066d99da7cbd)\n\n#### TCP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_STREAM,0);\n```\n\n#### UDP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,0);\n```\n\n\n## [FD_ZERO、FD_SET、FD_CLR、FD_ISSET](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n\n1. FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。\n2. FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。\n3. FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。\n4. FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。\n\n\n## [select](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n```c\nint select(int nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout);\n```\n\n### nfds\n需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。\n### readset\n用来检查可读性的一组文件描述字。\n### writeset\n用来检查可写性的一组文件描述字。\n### exceptset\n用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)\n### timeout\n用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。\n\n## ai_family\nai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\n## htonl:将主机数转换成无符号长整形的网络字节顺序。\n## htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\n## ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\n\n## FTP使用TCP传输而不是UDP\n\n\n## 如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\n\n## 调用fork的返回值\n1. 在父进程中，fork返回新创建子进程的进程ID；\n2. 在子进程中，fork返回0；\n3. 如果出现错误，fork返回一个负值；\n\n## [listen](https://www.cnblogs.com/love-yh/p/7518552.html)只能由TCP服务器程序调用\n\n## [recvfrom](http://blog.sina.com.cn/s/blog_4171e80d01000asy.html) 中 buflen不能为0\n\n## ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\n\n## size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\n\n## [servname 、nodename、hints](https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html)\n\n```c\n\nint getaddrinfo(const char *restrict nodename, /* host 或者IP地址 */\n    const char *restrict servname, /* 十进制端口号 或者常用服务名称如\"ftp\"、\"http\"等 */\n    const struct addrinfo *restrict hints, /* 获取信息要求设置 */\n    struct addrinfo **restrict res); /* 获取信息结果 */\n\n ```\n \n## [pthread](https://blog.csdn.net/networkhunter/article/details/100218945)\n\n\n```c\nint pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg); \n```\n\n```c\nint pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);  \nint pthread_mutex_destory(pthread_mutex_t *mutex );  \nint pthread_mutex_lock(pthread_mutex_t *mutex);  \nint pthread_mutex_trylock(pthread_mutex_t *mutex);  \nint pthread_mutex_unlock(pthread_mutex_t *mutex);  \n```\n\n```c\npthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);\n```\n\n","source":"_posts/网络编程期末知识点总结.md","raw":"---\ntitle: 网络编程期末知识点总结\ndate: 2021-12-30 18:57:00\ndescription: 网络编程期末知识点总结\ncategories: \"网络编程\" #分类\ntags:   #标签\n    - 课程学习\n    - 网络编程\n---\n\n# 网络编程知识点总结\n\n## 套接字地址，通用形式\n\n```c\nstruct sockaddr{  /*保存地址的结构*/\n\tunsigned char sa_len; /*总长度*/\n\tsa_family_t sa_family; /*地址族*/\n\tchar sa_data[14]; /*实际更长：地址值*/\n}\n```\n\n\n## 互联网地址，互联网风格\n\n```c\nstruct sockaddr_in{\n\tunit8_t sin_len;  /*总长度*/\n\tsa_family_t sa_family; /*地址类型*/\n\tin_port_t  sin_port; /*协议端口号*/\n\tstruct in_addr sin_addr；/*IP地址*/\n\tsin_zero[8]； /*未使用（设置为0）*/\n}\n```\n\n## 两种传输服务的套接字类型\n\nUDP:不可靠的数据报\nTCP：可靠的、面向字节流的\n\n### UDP\n\n#### 客户端服务端之间没有连接\n- 发送数据前不握手\n- 发送方式显式的将IP目的地址和端口 # 附加到每个数据包\n- 接受方从收到的数据包中提取发送方的IP地址和端口号\n\n#### UDP传输的数据可能丢失或接受顺序错误\n\n\n#### 简单的UDP程序\n\n```c\n#define LINELEN 128\n/* 1) initialize sockaddr_in structure */\nmemset(&serverin, 0, sizeof(serverin));\nserverin.sin_family = AF_INET;\nserverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);\nserverin.sin_port = htons(SERVER_PORT);\n/* 2) Create a socket */\nif ((clientSocket = socket(PF_INET, SOCK_DGRAM, 0)) < 0)\nerr(1, “create socket\");\n/* 3) formulate a request */\nchar buf[LINELEN+1];\nint nchars; /* char count read in buf */\nfgets(buf, sizeof(buf), stdin);\nbuf[LINELEN] = '\\0'; /* insure null-terminated */\nnchars = strlen(buf);\n/* 4) send the request */\n(void) sendto(clientSocket, buf, nchars, 0, \n(struct sockaddr *)&serverin, sizeof(serverin));\n/* 5) receive the reply */\nif (recv(clientSocket, buf, sizeof(buf), 0) < 0)\nerr(1, \"recv socket\");\n}\n/* 6) handle the response */\nfputs(buf, stdout);\nfflush(stdout);\n```\n\n\n### 创建UDP和TCP通信端点sockfd\n\n[socket详解](https://www.jianshu.com/p/066d99da7cbd)\n\n#### TCP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_STREAM,0);\n```\n\n#### UDP\n```c\nint sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,0);\n```\n\n\n## [FD_ZERO、FD_SET、FD_CLR、FD_ISSET](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n\n1. FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。\n2. FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。\n3. FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。\n4. FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。\n\n\n## [select](https://www.cnblogs.com/skyofbitbit/p/3654466.html)\n```c\nint select(int nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout);\n```\n\n### nfds\n需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。\n### readset\n用来检查可读性的一组文件描述字。\n### writeset\n用来检查可写性的一组文件描述字。\n### exceptset\n用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)\n### timeout\n用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。\n\n## ai_family\nai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\n## htonl:将主机数转换成无符号长整形的网络字节顺序。\n## htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\n## ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\n\n## FTP使用TCP传输而不是UDP\n\n\n## 如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\n\n## 调用fork的返回值\n1. 在父进程中，fork返回新创建子进程的进程ID；\n2. 在子进程中，fork返回0；\n3. 如果出现错误，fork返回一个负值；\n\n## [listen](https://www.cnblogs.com/love-yh/p/7518552.html)只能由TCP服务器程序调用\n\n## [recvfrom](http://blog.sina.com.cn/s/blog_4171e80d01000asy.html) 中 buflen不能为0\n\n## ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\n\n## size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\n\n## [servname 、nodename、hints](https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html)\n\n```c\n\nint getaddrinfo(const char *restrict nodename, /* host 或者IP地址 */\n    const char *restrict servname, /* 十进制端口号 或者常用服务名称如\"ftp\"、\"http\"等 */\n    const struct addrinfo *restrict hints, /* 获取信息要求设置 */\n    struct addrinfo **restrict res); /* 获取信息结果 */\n\n ```\n \n## [pthread](https://blog.csdn.net/networkhunter/article/details/100218945)\n\n\n```c\nint pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg); \n```\n\n```c\nint pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);  \nint pthread_mutex_destory(pthread_mutex_t *mutex );  \nint pthread_mutex_lock(pthread_mutex_t *mutex);  \nint pthread_mutex_trylock(pthread_mutex_t *mutex);  \nint pthread_mutex_unlock(pthread_mutex_t *mutex);  \n```\n\n```c\npthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);\n```\n\n","slug":"网络编程期末知识点总结","published":1,"updated":"2021-12-30T15:06:03.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxt3o5jh003xisax0a8pg2ux","content":"<h1 id=\"网络编程知识点总结\"><a href=\"#网络编程知识点总结\" class=\"headerlink\" title=\"网络编程知识点总结\"></a>网络编程知识点总结</h1><h2 id=\"套接字地址，通用形式\"><a href=\"#套接字地址，通用形式\" class=\"headerlink\" title=\"套接字地址，通用形式\"></a>套接字地址，通用形式</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span>&#123;</span>  <span class=\"comment\">/*保存地址的结构*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> sa_len; <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址族*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> sa_data[<span class=\"number\">14</span>]; <span class=\"comment\">/*实际更长：地址值*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"互联网地址，互联网风格\"><a href=\"#互联网地址，互联网风格\" class=\"headerlink\" title=\"互联网地址，互联网风格\"></a>互联网地址，互联网风格</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unit8_t</span> sin_len;  <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址类型*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">in_port_t</span>  sin_port; <span class=\"comment\">/*协议端口号*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>；/*<span class=\"title\">IP</span>地址*/</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">sin_zero</span>[8]； /*未使用（设置为0）*/</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两种传输服务的套接字类型\"><a href=\"#两种传输服务的套接字类型\" class=\"headerlink\" title=\"两种传输服务的套接字类型\"></a>两种传输服务的套接字类型</h2><p>UDP:不可靠的数据报<br>TCP：可靠的、面向字节流的</p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h4 id=\"客户端服务端之间没有连接\"><a href=\"#客户端服务端之间没有连接\" class=\"headerlink\" title=\"客户端服务端之间没有连接\"></a>客户端服务端之间没有连接</h4><ul>\n<li>发送数据前不握手</li>\n<li>发送方式显式的将IP目的地址和端口 # 附加到每个数据包</li>\n<li>接受方从收到的数据包中提取发送方的IP地址和端口号</li>\n</ul>\n<h4 id=\"UDP传输的数据可能丢失或接受顺序错误\"><a href=\"#UDP传输的数据可能丢失或接受顺序错误\" class=\"headerlink\" title=\"UDP传输的数据可能丢失或接受顺序错误\"></a>UDP传输的数据可能丢失或接受顺序错误</h4><h4 id=\"简单的UDP程序\"><a href=\"#简单的UDP程序\" class=\"headerlink\" title=\"简单的UDP程序\"></a>简单的UDP程序</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINELEN 128</span></span><br><span class=\"line\"><span class=\"comment\">/* 1) initialize sockaddr_in structure */</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;serverin, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(serverin));</span><br><span class=\"line\">serverin.sin_family = AF_INET;</span><br><span class=\"line\">serverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);</span><br><span class=\"line\">serverin.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\"><span class=\"comment\">/* 2) Create a socket */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((clientSocket = socket(PF_INET, SOCK_DGRAM, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">err(<span class=\"number\">1</span>, “create socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">/* 3) formulate a request */</span></span><br><span class=\"line\"><span class=\"string\">char buf[LINELEN+1];</span></span><br><span class=\"line\"><span class=\"string\">int nchars; /* char count read in buf */</span></span><br><span class=\"line\"><span class=\"string\">fgets(buf, sizeof(buf), stdin);</span></span><br><span class=\"line\"><span class=\"string\">buf[LINELEN] = &#x27;\\0&#x27;; /* insure null-terminated */</span></span><br><span class=\"line\"><span class=\"string\">nchars = strlen(buf);</span></span><br><span class=\"line\"><span class=\"string\">/* 4) send the request */</span></span><br><span class=\"line\"><span class=\"string\">(void) sendto(clientSocket, buf, nchars, 0, </span></span><br><span class=\"line\"><span class=\"string\">(struct sockaddr *)&amp;serverin, sizeof(serverin));</span></span><br><span class=\"line\"><span class=\"string\">/* 5) receive the reply */</span></span><br><span class=\"line\"><span class=\"string\">if (recv(clientSocket, buf, sizeof(buf), 0) &lt; 0)</span></span><br><span class=\"line\"><span class=\"string\">err(1, &quot;</span>recv socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">/* 6) handle the response */</span></span><br><span class=\"line\"><span class=\"string\">fputs(buf, stdout);</span></span><br><span class=\"line\"><span class=\"string\">fflush(stdout);</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"创建UDP和TCP通信端点sockfd\"><a href=\"#创建UDP和TCP通信端点sockfd\" class=\"headerlink\" title=\"创建UDP和TCP通信端点sockfd\"></a>创建UDP和TCP通信端点sockfd</h3><p><a href=\"https://www.jianshu.com/p/066d99da7cbd\">socket详解</a></p>\n<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UDP-1\"><a href=\"#UDP-1\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"FD-ZERO、FD-SET、FD-CLR、FD-ISSET\"><a href=\"#FD-ZERO、FD-SET、FD-CLR、FD-ISSET\" class=\"headerlink\" title=\"FD_ZERO、FD_SET、FD_CLR、FD_ISSET\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">FD_ZERO、FD_SET、FD_CLR、FD_ISSET</a></h2><ol>\n<li>FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。</li>\n<li>FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。</li>\n<li>FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。</li>\n<li>FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。</li>\n</ol>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">select</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nfds\"><a href=\"#nfds\" class=\"headerlink\" title=\"nfds\"></a>nfds</h3><p>需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。</p>\n<h3 id=\"readset\"><a href=\"#readset\" class=\"headerlink\" title=\"readset\"></a>readset</h3><p>用来检查可读性的一组文件描述字。</p>\n<h3 id=\"writeset\"><a href=\"#writeset\" class=\"headerlink\" title=\"writeset\"></a>writeset</h3><p>用来检查可写性的一组文件描述字。</p>\n<h3 id=\"exceptset\"><a href=\"#exceptset\" class=\"headerlink\" title=\"exceptset\"></a>exceptset</h3><p>用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)</p>\n<h3 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h3><p>用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。</p>\n<h2 id=\"ai-family\"><a href=\"#ai-family\" class=\"headerlink\" title=\"ai_family\"></a>ai_family</h2><p>ai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址</p>\n<h2 id=\"ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"><a href=\"#ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\" class=\"headerlink\" title=\"ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"></a>ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。</h2><h2 id=\"htonl-将主机数转换成无符号长整形的网络字节顺序。\"><a href=\"#htonl-将主机数转换成无符号长整形的网络字节顺序。\" class=\"headerlink\" title=\"htonl:将主机数转换成无符号长整形的网络字节顺序。\"></a>htonl:将主机数转换成无符号长整形的网络字节顺序。</h2><h2 id=\"htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"><a href=\"#htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\" class=\"headerlink\" title=\"htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"></a>htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。</h2><h2 id=\"ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\"><a href=\"#ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\" class=\"headerlink\" title=\"ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\"></a>ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。</h2><h2 id=\"FTP使用TCP传输而不是UDP\"><a href=\"#FTP使用TCP传输而不是UDP\" class=\"headerlink\" title=\"FTP使用TCP传输而不是UDP\"></a>FTP使用TCP传输而不是UDP</h2><h2 id=\"如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"><a href=\"#如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\" class=\"headerlink\" title=\"如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"></a>如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。</h2><h2 id=\"调用fork的返回值\"><a href=\"#调用fork的返回值\" class=\"headerlink\" title=\"调用fork的返回值\"></a>调用fork的返回值</h2><ol>\n<li>在父进程中，fork返回新创建子进程的进程ID；</li>\n<li>在子进程中，fork返回0；</li>\n<li>如果出现错误，fork返回一个负值；</li>\n</ol>\n<h2 id=\"listen只能由TCP服务器程序调用\"><a href=\"#listen只能由TCP服务器程序调用\" class=\"headerlink\" title=\"listen只能由TCP服务器程序调用\"></a><a href=\"https://www.cnblogs.com/love-yh/p/7518552.html\">listen</a>只能由TCP服务器程序调用</h2><h2 id=\"recvfrom-中-buflen不能为0\"><a href=\"#recvfrom-中-buflen不能为0\" class=\"headerlink\" title=\"recvfrom 中 buflen不能为0\"></a><a href=\"http://blog.sina.com.cn/s/blog_4171e80d01000asy.html\">recvfrom</a> 中 buflen不能为0</h2><h2 id=\"ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"><a href=\"#ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\" class=\"headerlink\" title=\"ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"></a>ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移</h2><h2 id=\"size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"><a href=\"#size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\" class=\"headerlink\" title=\"size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"></a>size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。</h2><h2 id=\"servname-、nodename、hints\"><a href=\"#servname-、nodename、hints\" class=\"headerlink\" title=\"servname 、nodename、hints\"></a><a href=\"https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html\">servname 、nodename、hints</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getaddrinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> nodename, <span class=\"comment\">/* host 或者IP地址 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> servname, <span class=\"comment\">/* 十进制端口号 或者常用服务名称如&quot;ftp&quot;、&quot;http&quot;等 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> struct addrinfo *<span class=\"keyword\">restrict</span> hints, <span class=\"comment\">/* 获取信息要求设置 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    struct addrinfo **<span class=\"keyword\">restrict</span> res)</span></span>; <span class=\"comment\">/* 获取信息结果 */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"pthread\"><a href=\"#pthread\" class=\"headerlink\" title=\"pthread\"></a><a href=\"https://blog.csdn.net/networkhunter/article/details/100218945\">pthread</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> *thread, <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">void</span> *(*start_routine)(<span class=\"keyword\">void</span>*), <span class=\"keyword\">void</span> *arg)</span></span>; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_init</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *<span class=\"keyword\">restrict</span> mutex,<span class=\"keyword\">const</span> <span class=\"keyword\">pthread_mutexattr_t</span> *<span class=\"keyword\">restrict</span> attr)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_destory</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex )</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_lock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_trylock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_unlock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_attr_setschedpolicy(<span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">int</span> policy);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":3705,"excerpt":"","more":"<h1 id=\"网络编程知识点总结\"><a href=\"#网络编程知识点总结\" class=\"headerlink\" title=\"网络编程知识点总结\"></a>网络编程知识点总结</h1><h2 id=\"套接字地址，通用形式\"><a href=\"#套接字地址，通用形式\" class=\"headerlink\" title=\"套接字地址，通用形式\"></a>套接字地址，通用形式</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span>&#123;</span>  <span class=\"comment\">/*保存地址的结构*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> sa_len; <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址族*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> sa_data[<span class=\"number\">14</span>]; <span class=\"comment\">/*实际更长：地址值*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"互联网地址，互联网风格\"><a href=\"#互联网地址，互联网风格\" class=\"headerlink\" title=\"互联网地址，互联网风格\"></a>互联网地址，互联网风格</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unit8_t</span> sin_len;  <span class=\"comment\">/*总长度*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">sa_family_t</span> sa_family; <span class=\"comment\">/*地址类型*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">in_port_t</span>  sin_port; <span class=\"comment\">/*协议端口号*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>；/*<span class=\"title\">IP</span>地址*/</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">sin_zero</span>[8]； /*未使用（设置为0）*/</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两种传输服务的套接字类型\"><a href=\"#两种传输服务的套接字类型\" class=\"headerlink\" title=\"两种传输服务的套接字类型\"></a>两种传输服务的套接字类型</h2><p>UDP:不可靠的数据报<br>TCP：可靠的、面向字节流的</p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h4 id=\"客户端服务端之间没有连接\"><a href=\"#客户端服务端之间没有连接\" class=\"headerlink\" title=\"客户端服务端之间没有连接\"></a>客户端服务端之间没有连接</h4><ul>\n<li>发送数据前不握手</li>\n<li>发送方式显式的将IP目的地址和端口 # 附加到每个数据包</li>\n<li>接受方从收到的数据包中提取发送方的IP地址和端口号</li>\n</ul>\n<h4 id=\"UDP传输的数据可能丢失或接受顺序错误\"><a href=\"#UDP传输的数据可能丢失或接受顺序错误\" class=\"headerlink\" title=\"UDP传输的数据可能丢失或接受顺序错误\"></a>UDP传输的数据可能丢失或接受顺序错误</h4><h4 id=\"简单的UDP程序\"><a href=\"#简单的UDP程序\" class=\"headerlink\" title=\"简单的UDP程序\"></a>简单的UDP程序</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINELEN 128</span></span><br><span class=\"line\"><span class=\"comment\">/* 1) initialize sockaddr_in structure */</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;serverin, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(serverin));</span><br><span class=\"line\">serverin.sin_family = AF_INET;</span><br><span class=\"line\">serverin.sin_addr.s_addr = inet_addr(SERVER_HOST_ADDR);</span><br><span class=\"line\">serverin.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\"><span class=\"comment\">/* 2) Create a socket */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((clientSocket = socket(PF_INET, SOCK_DGRAM, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">err(<span class=\"number\">1</span>, “create socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">/* 3) formulate a request */</span></span><br><span class=\"line\"><span class=\"string\">char buf[LINELEN+1];</span></span><br><span class=\"line\"><span class=\"string\">int nchars; /* char count read in buf */</span></span><br><span class=\"line\"><span class=\"string\">fgets(buf, sizeof(buf), stdin);</span></span><br><span class=\"line\"><span class=\"string\">buf[LINELEN] = &#x27;\\0&#x27;; /* insure null-terminated */</span></span><br><span class=\"line\"><span class=\"string\">nchars = strlen(buf);</span></span><br><span class=\"line\"><span class=\"string\">/* 4) send the request */</span></span><br><span class=\"line\"><span class=\"string\">(void) sendto(clientSocket, buf, nchars, 0, </span></span><br><span class=\"line\"><span class=\"string\">(struct sockaddr *)&amp;serverin, sizeof(serverin));</span></span><br><span class=\"line\"><span class=\"string\">/* 5) receive the reply */</span></span><br><span class=\"line\"><span class=\"string\">if (recv(clientSocket, buf, sizeof(buf), 0) &lt; 0)</span></span><br><span class=\"line\"><span class=\"string\">err(1, &quot;</span>recv socket<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">/* 6) handle the response */</span></span><br><span class=\"line\"><span class=\"string\">fputs(buf, stdout);</span></span><br><span class=\"line\"><span class=\"string\">fflush(stdout);</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"创建UDP和TCP通信端点sockfd\"><a href=\"#创建UDP和TCP通信端点sockfd\" class=\"headerlink\" title=\"创建UDP和TCP通信端点sockfd\"></a>创建UDP和TCP通信端点sockfd</h3><p><a href=\"https://www.jianshu.com/p/066d99da7cbd\">socket详解</a></p>\n<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UDP-1\"><a href=\"#UDP-1\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sockfd;sockfd = socket(PF_INET,SOCK_DGRAM,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"FD-ZERO、FD-SET、FD-CLR、FD-ISSET\"><a href=\"#FD-ZERO、FD-SET、FD-CLR、FD-ISSET\" class=\"headerlink\" title=\"FD_ZERO、FD_SET、FD_CLR、FD_ISSET\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">FD_ZERO、FD_SET、FD_CLR、FD_ISSET</a></h2><ol>\n<li>FD_ZERO(fd_set * fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。</li>\n<li>FD_SET(fd_set * fdset);用于在文件描述符集合中增加一个新的文件描述符。</li>\n<li>FD_CLR(fd_set * fdset);用于在文件描述符集合中删除一个文件描述符。</li>\n<li>FD_ISSET(int fd,fd_set * fdset);用于测试指定的文件描述符是否在该集合中。</li>\n</ol>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a><a href=\"https://www.cnblogs.com/skyofbitbit/p/3654466.html\">select</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set *readset, fd_set *writeset,fd_set* exceptset, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nfds\"><a href=\"#nfds\" class=\"headerlink\" title=\"nfds\"></a>nfds</h3><p>需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大 fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。</p>\n<h3 id=\"readset\"><a href=\"#readset\" class=\"headerlink\" title=\"readset\"></a>readset</h3><p>用来检查可读性的一组文件描述字。</p>\n<h3 id=\"writeset\"><a href=\"#writeset\" class=\"headerlink\" title=\"writeset\"></a>writeset</h3><p>用来检查可写性的一组文件描述字。</p>\n<h3 id=\"exceptset\"><a href=\"#exceptset\" class=\"headerlink\" title=\"exceptset\"></a>exceptset</h3><p>用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)</p>\n<h3 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h3><p>用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。</p>\n<h2 id=\"ai-family\"><a href=\"#ai-family\" class=\"headerlink\" title=\"ai_family\"></a>ai_family</h2><p>ai_family参数指定调用者期待返回的套接口地址结构的类型。它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。如果指定AF_INET，那么函数九不能返回任何IPV6相关的地址信息；如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息。AF_UNSPEC则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址</p>\n<h2 id=\"ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"><a href=\"#ntohs-将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\" class=\"headerlink\" title=\"ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。\"></a>ntohs:将一个无符号短整型数从网络字节顺序转换为主机字节顺序。</h2><h2 id=\"htonl-将主机数转换成无符号长整形的网络字节顺序。\"><a href=\"#htonl-将主机数转换成无符号长整形的网络字节顺序。\" class=\"headerlink\" title=\"htonl:将主机数转换成无符号长整形的网络字节顺序。\"></a>htonl:将主机数转换成无符号长整形的网络字节顺序。</h2><h2 id=\"htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"><a href=\"#htons-htons是将整型变量从主机字节顺序转变成网络字节顺序，-就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\" class=\"headerlink\" title=\"htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。\"></a>htons:htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。</h2><h2 id=\"ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\"><a href=\"#ntohl-ntohl-指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序，-ntohl-返回一个以主机字节顺序表达的数。\" class=\"headerlink\" title=\"ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。\"></a>ntohl:ntohl()指的是ntohl函数，是将一个无符号长整形数从网络字节顺序转换为主机字节顺序， ntohl()返回一个以主机字节顺序表达的数。</h2><h2 id=\"FTP使用TCP传输而不是UDP\"><a href=\"#FTP使用TCP传输而不是UDP\" class=\"headerlink\" title=\"FTP使用TCP传输而不是UDP\"></a>FTP使用TCP传输而不是UDP</h2><h2 id=\"如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"><a href=\"#如果没有错误产生，则accept-返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID-SOCKET错误，应用程序可通过调用WSAGetLastError-来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\" class=\"headerlink\" title=\"如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。\"></a>如果没有错误产生，则accept()返回一个描述所接受包的SOCKET类型的值。否则的话，返回INVALID_SOCKET错误，应用程序可通过调用WSAGetLastError()来获得特定的错误代码。如果addr与addrlen中有一个为零NULL，将不返回所接受的套接口远程地址的任何信息。</h2><h2 id=\"调用fork的返回值\"><a href=\"#调用fork的返回值\" class=\"headerlink\" title=\"调用fork的返回值\"></a>调用fork的返回值</h2><ol>\n<li>在父进程中，fork返回新创建子进程的进程ID；</li>\n<li>在子进程中，fork返回0；</li>\n<li>如果出现错误，fork返回一个负值；</li>\n</ol>\n<h2 id=\"listen只能由TCP服务器程序调用\"><a href=\"#listen只能由TCP服务器程序调用\" class=\"headerlink\" title=\"listen只能由TCP服务器程序调用\"></a><a href=\"https://www.cnblogs.com/love-yh/p/7518552.html\">listen</a>只能由TCP服务器程序调用</h2><h2 id=\"recvfrom-中-buflen不能为0\"><a href=\"#recvfrom-中-buflen不能为0\" class=\"headerlink\" title=\"recvfrom 中 buflen不能为0\"></a><a href=\"http://blog.sina.com.cn/s/blog_4171e80d01000asy.html\">recvfrom</a> 中 buflen不能为0</h2><h2 id=\"ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"><a href=\"#ssize-t-read-int-fd-void-buf-size-t-count-成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\" class=\"headerlink\" title=\"ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移\"></a>ssize_t read(int fd, void * buf, size_t count);成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移</h2><h2 id=\"size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"><a href=\"#size-t-write-int-fd-const-void-buf-size-t-count-write-会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write-会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\" class=\"headerlink\" title=\"size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。\"></a>size_t write (int fd,const void * buf,size_t count);write()会把指针buf所指的内存写入count个字节到参数fd所指的文件内。当然，文件读写位置也会随之移动。如果顺利write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。</h2><h2 id=\"servname-、nodename、hints\"><a href=\"#servname-、nodename、hints\" class=\"headerlink\" title=\"servname 、nodename、hints\"></a><a href=\"https://www.cnblogs.com/LubinLew/p/POSIX-getaddrinfo.html\">servname 、nodename、hints</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getaddrinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> nodename, <span class=\"comment\">/* host 或者IP地址 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">restrict</span> servname, <span class=\"comment\">/* 十进制端口号 或者常用服务名称如&quot;ftp&quot;、&quot;http&quot;等 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">const</span> struct addrinfo *<span class=\"keyword\">restrict</span> hints, <span class=\"comment\">/* 获取信息要求设置 */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    struct addrinfo **<span class=\"keyword\">restrict</span> res)</span></span>; <span class=\"comment\">/* 获取信息结果 */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"pthread\"><a href=\"#pthread\" class=\"headerlink\" title=\"pthread\"></a><a href=\"https://blog.csdn.net/networkhunter/article/details/100218945\">pthread</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> *thread, <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">void</span> *(*start_routine)(<span class=\"keyword\">void</span>*), <span class=\"keyword\">void</span> *arg)</span></span>; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_init</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *<span class=\"keyword\">restrict</span> mutex,<span class=\"keyword\">const</span> <span class=\"keyword\">pthread_mutexattr_t</span> *<span class=\"keyword\">restrict</span> attr)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_destory</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex )</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_lock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_trylock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_mutex_unlock</span><span class=\"params\">(<span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_attr_setschedpolicy(<span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">int</span> policy);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"507. 完美数","date":"2021-12-31T08:21:22.000Z","description":"507. 完美数 直接求解&数学理论","_content":"\n# 507. 完美数 直接求解&数学理论\n\n## [查看原题](https://leetcode-cn.com/problems/perfect-number/)\n\n## 解题思路（直接求因子）\n\n直接循环找出每一个正因子相加判断\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n\tif(num ===1 ){\n\t\treturn false;\n\t}\n\tlet sum  = 1;\n\tfor(let i = 2;i <= Math.floor(Math.sqrt(num));i++){\n\t\tif(num % i === 0){\n\t\t\tsum += num/i + i;\n\t\t}\n\t}\n\tif(sum === num){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n};\n\n```\n\n## 解题思路（数学理论）\n\n根据欧几里得-欧拉定理，每个偶完全数都可以写成\n\n$$2^p-1(2^p -1)$$\n\n的形式，其中 $p$ 为素数且 $2^p-1$也是素数\n\n由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。\n这一共有如下 5 个：\n6, 28, 496, 8128, 33550336\n\n## 代码\n\n```javascript\nvar checkPerfectNumber = function(num) {\n    return num === 6 || num === 28 || num === 496 || num === 8128 || num === 33550336;\n};\n\n```","source":"_posts/507. 完美数.md","raw":"---\ntitle: 507. 完美数\ndate: 2021-12-31 16:21:22\ndescription: 507. 完美数 直接求解&数学理论\ncategories: \"leetcode题解\"\ntags: \n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 507. 完美数 直接求解&数学理论\n\n## [查看原题](https://leetcode-cn.com/problems/perfect-number/)\n\n## 解题思路（直接求因子）\n\n直接循环找出每一个正因子相加判断\n\n## 代码\n\n```javascript\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n\tif(num ===1 ){\n\t\treturn false;\n\t}\n\tlet sum  = 1;\n\tfor(let i = 2;i <= Math.floor(Math.sqrt(num));i++){\n\t\tif(num % i === 0){\n\t\t\tsum += num/i + i;\n\t\t}\n\t}\n\tif(sum === num){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n};\n\n```\n\n## 解题思路（数学理论）\n\n根据欧几里得-欧拉定理，每个偶完全数都可以写成\n\n$$2^p-1(2^p -1)$$\n\n的形式，其中 $p$ 为素数且 $2^p-1$也是素数\n\n由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。\n这一共有如下 5 个：\n6, 28, 496, 8128, 33550336\n\n## 代码\n\n```javascript\nvar checkPerfectNumber = function(num) {\n    return num === 6 || num === 28 || num === 496 || num === 8128 || num === 33550336;\n};\n\n```","slug":"507. 完美数","published":1,"updated":"2021-12-31T08:24:13.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu4r7sw0000kwaxh64j4n32","content":"<h1 id=\"507-完美数-直接求解-amp-数学理论\"><a href=\"#507-完美数-直接求解-amp-数学理论\" class=\"headerlink\" title=\"507. 完美数 直接求解&amp;数学理论\"></a>507. 完美数 直接求解&amp;数学理论</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-number/\">查看原题</a></h2><h2 id=\"解题思路（直接求因子）\"><a href=\"#解题思路（直接求因子）\" class=\"headerlink\" title=\"解题思路（直接求因子）\"></a>解题思路（直接求因子）</h2><p>直接循环找出每一个正因子相加判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num ===<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;i &lt;= <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.sqrt(num));i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num % i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tsum += num/i + i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sum === num)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路（数学理论）\"><a href=\"#解题思路（数学理论）\" class=\"headerlink\" title=\"解题思路（数学理论）\"></a>解题思路（数学理论）</h2><p>根据欧几里得-欧拉定理，每个偶完全数都可以写成</p>\n<p>$$2^p-1(2^p -1)$$</p>\n<p>的形式，其中 $p$ 为素数且 $2^p-1$也是素数</p>\n<p>由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。<br>这一共有如下 5 个：<br>6, 28, 496, 8128, 33550336</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">6</span> || num === <span class=\"number\">28</span> || num === <span class=\"number\">496</span> || num === <span class=\"number\">8128</span> || num === <span class=\"number\">33550336</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":672,"excerpt":"","more":"<h1 id=\"507-完美数-直接求解-amp-数学理论\"><a href=\"#507-完美数-直接求解-amp-数学理论\" class=\"headerlink\" title=\"507. 完美数 直接求解&amp;数学理论\"></a>507. 完美数 直接求解&amp;数学理论</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/perfect-number/\">查看原题</a></h2><h2 id=\"解题思路（直接求因子）\"><a href=\"#解题思路（直接求因子）\" class=\"headerlink\" title=\"解题思路（直接求因子）\"></a>解题思路（直接求因子）</h2><p>直接循环找出每一个正因子相加判断</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">num</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num ===<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;i &lt;= <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.sqrt(num));i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num % i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tsum += num/i + i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sum === num)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路（数学理论）\"><a href=\"#解题思路（数学理论）\" class=\"headerlink\" title=\"解题思路（数学理论）\"></a>解题思路（数学理论）</h2><p>根据欧几里得-欧拉定理，每个偶完全数都可以写成</p>\n<p>$$2^p-1(2^p -1)$$</p>\n<p>的形式，其中 $p$ 为素数且 $2^p-1$也是素数</p>\n<p>由于目前奇完全数还未被发现，因此题目范围 [1,10^8][1,10^8] 内的完全数都可以写成上述形式。<br>这一共有如下 5 个：<br>6, 28, 496, 8128, 33550336</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">6</span> || num === <span class=\"number\">28</span> || num === <span class=\"number\">496</span> || num === <span class=\"number\">8128</span> || num === <span class=\"number\">33550336</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"BOMdemo1","date":"2021-12-31T08:21:22.000Z","description":"BOM的相关知识点","_content":"\n# BOM\n----------\n\nBOM是browser object model的缩写，简称浏览器对象模型\n\n主要处理浏览器窗口（window）和框架（iframe），\n描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，不过通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。扩展如下：\n\n\n1. 弹出新的浏览器窗口\n\n\n2. 移动、关闭浏览器窗口以及调整窗口大小\n\n3. 提供 Web 浏览器详细信息的定位对象\n\n4. 提供用户屏幕分辨率详细信息的屏幕对象\n\n\n5. 对 cookie 的支持\n\n\n6. IE 扩展了BOM，加入了ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象\n\n### 归纳：\n\n\nWindow JavaScript 层级中的顶层对象表示浏览器窗口\n\n包含客户端浏览器的信息\n\nHistory 包含了浏览器窗口访问过的 URL\n\nLocation 包含了当前 URL 的信息\n\nScreen 包含客户端显示屏的信息\n\n[BOM.pdf](https://duyiedu.yuque.com/docs/share/17c3a868-d15a-448f-ad3c-93a7cb554f4f?#qvTfj)\n\n\n\n\n\n\n\n","source":"_posts/BOMdemo1.md","raw":"---\ntitle: BOMdemo1\ndate: 2021-12-31 16:21:22\ndescription: BOM的相关知识点\ncategories: \n\t- 前端学习笔记\n\t- BOM\ntags: \n\t- bom\n\t- 前端\n---\n\n# BOM\n----------\n\nBOM是browser object model的缩写，简称浏览器对象模型\n\n主要处理浏览器窗口（window）和框架（iframe），\n描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，不过通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。扩展如下：\n\n\n1. 弹出新的浏览器窗口\n\n\n2. 移动、关闭浏览器窗口以及调整窗口大小\n\n3. 提供 Web 浏览器详细信息的定位对象\n\n4. 提供用户屏幕分辨率详细信息的屏幕对象\n\n\n5. 对 cookie 的支持\n\n\n6. IE 扩展了BOM，加入了ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象\n\n### 归纳：\n\n\nWindow JavaScript 层级中的顶层对象表示浏览器窗口\n\n包含客户端浏览器的信息\n\nHistory 包含了浏览器窗口访问过的 URL\n\nLocation 包含了当前 URL 的信息\n\nScreen 包含客户端显示屏的信息\n\n[BOM.pdf](https://duyiedu.yuque.com/docs/share/17c3a868-d15a-448f-ad3c-93a7cb554f4f?#qvTfj)\n\n\n\n\n\n\n\n","slug":"BOMdemo1","published":1,"updated":"2022-01-01T06:29:04.360Z","_id":"ckxu6dnhg000010ax62b4f3gs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><hr>\n<p>BOM是browser object model的缩写，简称浏览器对象模型</p>\n<p>主要处理浏览器窗口（window）和框架（iframe），<br>描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，不过通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。扩展如下：</p>\n<ol>\n<li>弹出新的浏览器窗口</li>\n</ol>\n<ol start=\"2\">\n<li><p>移动、关闭浏览器窗口以及调整窗口大小</p>\n</li>\n<li><p>提供 Web 浏览器详细信息的定位对象</p>\n</li>\n<li><p>提供用户屏幕分辨率详细信息的屏幕对象</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li>对 cookie 的支持</li>\n</ol>\n<ol start=\"6\">\n<li>IE 扩展了BOM，加入了ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象</li>\n</ol>\n<h3 id=\"归纳：\"><a href=\"#归纳：\" class=\"headerlink\" title=\"归纳：\"></a>归纳：</h3><p>Window JavaScript 层级中的顶层对象表示浏览器窗口</p>\n<p>包含客户端浏览器的信息</p>\n<p>History 包含了浏览器窗口访问过的 URL</p>\n<p>Location 包含了当前 URL 的信息</p>\n<p>Screen 包含客户端显示屏的信息</p>\n<p><a href=\"https://duyiedu.yuque.com/docs/share/17c3a868-d15a-448f-ad3c-93a7cb554f4f#qvTfj\">BOM.pdf</a></p>\n","site":{"data":{}},"length":375,"excerpt":"","more":"<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><hr>\n<p>BOM是browser object model的缩写，简称浏览器对象模型</p>\n<p>主要处理浏览器窗口（window）和框架（iframe），<br>描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，不过通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。扩展如下：</p>\n<ol>\n<li>弹出新的浏览器窗口</li>\n</ol>\n<ol start=\"2\">\n<li><p>移动、关闭浏览器窗口以及调整窗口大小</p>\n</li>\n<li><p>提供 Web 浏览器详细信息的定位对象</p>\n</li>\n<li><p>提供用户屏幕分辨率详细信息的屏幕对象</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li>对 cookie 的支持</li>\n</ol>\n<ol start=\"6\">\n<li>IE 扩展了BOM，加入了ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象</li>\n</ol>\n<h3 id=\"归纳：\"><a href=\"#归纳：\" class=\"headerlink\" title=\"归纳：\"></a>归纳：</h3><p>Window JavaScript 层级中的顶层对象表示浏览器窗口</p>\n<p>包含客户端浏览器的信息</p>\n<p>History 包含了浏览器窗口访问过的 URL</p>\n<p>Location 包含了当前 URL 的信息</p>\n<p>Screen 包含客户端显示屏的信息</p>\n<p><a href=\"https://duyiedu.yuque.com/docs/share/17c3a868-d15a-448f-ad3c-93a7cb554f4f#qvTfj\">BOM.pdf</a></p>\n"},{"title":"CommonJS","date":"2021-12-31T08:21:22.000Z","description":"CommonJS的介绍","_content":"\n\n# CommonJS\n\n> 标准类型：社区规范\n>\n> 支持环境：node\n>\n> 依赖类型：动态依赖\n\n## 如何导出\n\n```js\nmodule.exports = 导出的值\n```\n\n## 如何导入\n\n```js\nrequire(\"模块路径\") // 函数返回模块导出的值\n```\n\n# ES Module\n\n> 标准类型：官方标准\n>\n> 支持环境：node，浏览器\n>\n> 依赖类型：静态依赖，动态依赖\n\n## 如何导出\n\n**ES Module**的导出\n\nES Module分为两种导出方式：\n\n- 具名导出（普通导出），可以导出多个\n- 默认导出，只能导出一个\n\n一个模块可以同时存在两种导出方式，最终会合并为一个「对象」导出\n\n```js\nexport const a = 1; // 具名，常用\nexport function b() {} // 具名，常用\nexport const c = () => {}  // 具名，常用\nconst d = 2;\nexport { d } // 具名\nconst k = 10\nexport { k as temp } // 具名\n\n// export default 3 // 默认，常用\n// export default function() {} // 默认，常用\n// const e = 4;\n// export { e as default } // 默认\n\nconst f = 4, g = 5, h = 6\nexport { f, g, h as default} // 基本 + 默认\n\n// 以上代码将导出下面的对象\n/*\n{\n\ta: 1,\n\tb: fn,\n\tc: fn,\n\td: 2,\n\ttemp: 10,\n\tf: 4,\n\tg: 5,\n\tdefault: 6\n}\n*/\n```\n\n**注意：导出代码必须为顶级代码，即不可放到代码块中**\n\n## 如何导入\n\n针对具名导出和默认导出，有不同的导入语法\n\n```js\n// 仅运行一次该模块，不导入任何内容\nimport \"模块路径\"\n// 常用，导入属性 a、b，放到变量a、b中。a->a, b->b\nimport { a, b } from \"模块路径\"   \n// 常用，导入属性 default，放入变量c中。default->c\nimport c from \"模块路径\"  \n// 常用，default->c，a->a, b->b\nimport c, { a, b } from \"模块路径\" \n// 常用，将模块对象放入到变量obj中\nimport * as obj from \"模块路径\" \n\n\n// 导入属性a、b，放到变量temp1、temp2 中\nimport {a as temp1, b as temp2} from \"模块路径\" \n// 导入属性default，放入变量a中，default是关键字，不能作为变量名，必须定义别名\nimport {default as a} from \"模块路径\" \n//导入属性default、b，放入变量a、b中\nimport {default as a, b} from \"模块路径\" \n// 以上均为静态导入\n\nimport(\"模块路径\") // 动态导入，返回一个Promise，完成时的数据为模块对象\n\t/\n```","source":"_posts/CommonJS.md","raw":"---\ntitle: CommonJS\ndate: 2021-12-31 16:21:22\ndescription: CommonJS的介绍\ncategories: \n\t- 前端学习笔记\n\t- ES6\ntags: \n  - CommonJS\n  - 前端\n---\n\n\n# CommonJS\n\n> 标准类型：社区规范\n>\n> 支持环境：node\n>\n> 依赖类型：动态依赖\n\n## 如何导出\n\n```js\nmodule.exports = 导出的值\n```\n\n## 如何导入\n\n```js\nrequire(\"模块路径\") // 函数返回模块导出的值\n```\n\n# ES Module\n\n> 标准类型：官方标准\n>\n> 支持环境：node，浏览器\n>\n> 依赖类型：静态依赖，动态依赖\n\n## 如何导出\n\n**ES Module**的导出\n\nES Module分为两种导出方式：\n\n- 具名导出（普通导出），可以导出多个\n- 默认导出，只能导出一个\n\n一个模块可以同时存在两种导出方式，最终会合并为一个「对象」导出\n\n```js\nexport const a = 1; // 具名，常用\nexport function b() {} // 具名，常用\nexport const c = () => {}  // 具名，常用\nconst d = 2;\nexport { d } // 具名\nconst k = 10\nexport { k as temp } // 具名\n\n// export default 3 // 默认，常用\n// export default function() {} // 默认，常用\n// const e = 4;\n// export { e as default } // 默认\n\nconst f = 4, g = 5, h = 6\nexport { f, g, h as default} // 基本 + 默认\n\n// 以上代码将导出下面的对象\n/*\n{\n\ta: 1,\n\tb: fn,\n\tc: fn,\n\td: 2,\n\ttemp: 10,\n\tf: 4,\n\tg: 5,\n\tdefault: 6\n}\n*/\n```\n\n**注意：导出代码必须为顶级代码，即不可放到代码块中**\n\n## 如何导入\n\n针对具名导出和默认导出，有不同的导入语法\n\n```js\n// 仅运行一次该模块，不导入任何内容\nimport \"模块路径\"\n// 常用，导入属性 a、b，放到变量a、b中。a->a, b->b\nimport { a, b } from \"模块路径\"   \n// 常用，导入属性 default，放入变量c中。default->c\nimport c from \"模块路径\"  \n// 常用，default->c，a->a, b->b\nimport c, { a, b } from \"模块路径\" \n// 常用，将模块对象放入到变量obj中\nimport * as obj from \"模块路径\" \n\n\n// 导入属性a、b，放到变量temp1、temp2 中\nimport {a as temp1, b as temp2} from \"模块路径\" \n// 导入属性default，放入变量a中，default是关键字，不能作为变量名，必须定义别名\nimport {default as a} from \"模块路径\" \n//导入属性default、b，放入变量a、b中\nimport {default as a, b} from \"模块路径\" \n// 以上均为静态导入\n\nimport(\"模块路径\") // 动态导入，返回一个Promise，完成时的数据为模块对象\n\t/\n```","slug":"CommonJS","published":1,"updated":"2022-01-01T06:29:46.047Z","_id":"ckxu6dnhl000110ax6u5s3f5p","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><blockquote>\n<p>标准类型：社区规范</p>\n<p>支持环境：node</p>\n<p>依赖类型：动态依赖</p>\n</blockquote>\n<h2 id=\"如何导出\"><a href=\"#如何导出\" class=\"headerlink\" title=\"如何导出\"></a>如何导出</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = 导出的值</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何导入\"><a href=\"#如何导入\" class=\"headerlink\" title=\"如何导入\"></a>如何导入</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;模块路径&quot;</span>) <span class=\"comment\">// 函数返回模块导出的值</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h1><blockquote>\n<p>标准类型：官方标准</p>\n<p>支持环境：node，浏览器</p>\n<p>依赖类型：静态依赖，动态依赖</p>\n</blockquote>\n<h2 id=\"如何导出-1\"><a href=\"#如何导出-1\" class=\"headerlink\" title=\"如何导出\"></a>如何导出</h2><p><strong>ES Module</strong>的导出</p>\n<p>ES Module分为两种导出方式：</p>\n<ul>\n<li>具名导出（普通导出），可以导出多个</li>\n<li>默认导出，只能导出一个</li>\n</ul>\n<p>一个模块可以同时存在两种导出方式，最终会合并为一个「对象」导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 具名，常用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 具名，常用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> c = <span class=\"function\">() =&gt;</span> &#123;&#125;  <span class=\"comment\">// 具名，常用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; d &#125; <span class=\"comment\">// 具名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> k = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; k <span class=\"keyword\">as</span> temp &#125; <span class=\"comment\">// 具名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export default 3 // 默认，常用</span></span><br><span class=\"line\"><span class=\"comment\">// export default function() &#123;&#125; // 默认，常用</span></span><br><span class=\"line\"><span class=\"comment\">// const e = 4;</span></span><br><span class=\"line\"><span class=\"comment\">// export &#123; e as default &#125; // 默认</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"number\">4</span>, g = <span class=\"number\">5</span>, h = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; f, g, h <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125; <span class=\"comment\">// 基本 + 默认</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码将导出下面的对象</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\ta: 1,</span></span><br><span class=\"line\"><span class=\"comment\">\tb: fn,</span></span><br><span class=\"line\"><span class=\"comment\">\tc: fn,</span></span><br><span class=\"line\"><span class=\"comment\">\td: 2,</span></span><br><span class=\"line\"><span class=\"comment\">\ttemp: 10,</span></span><br><span class=\"line\"><span class=\"comment\">\tf: 4,</span></span><br><span class=\"line\"><span class=\"comment\">\tg: 5,</span></span><br><span class=\"line\"><span class=\"comment\">\tdefault: 6</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：导出代码必须为顶级代码，即不可放到代码块中</strong></p>\n<h2 id=\"如何导入-1\"><a href=\"#如何导入-1\" class=\"headerlink\" title=\"如何导入\"></a>如何导入</h2><p>针对具名导出和默认导出，有不同的导入语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仅运行一次该模块，不导入任何内容</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;模块路径&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 常用，导入属性 a、b，放到变量a、b中。a-&gt;a, b-&gt;b</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span>   </span><br><span class=\"line\"><span class=\"comment\">// 常用，导入属性 default，放入变量c中。default-&gt;c</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> c <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\">// 常用，default-&gt;c，a-&gt;a, b-&gt;b</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> c, &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// 常用，将模块对象放入到变量obj中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> obj <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入属性a、b，放到变量temp1、temp2 中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a <span class=\"keyword\">as</span> temp1, b <span class=\"keyword\">as</span> temp2&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// 导入属性default，放入变量a中，default是关键字，不能作为变量名，必须定义别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">//导入属性default、b，放入变量a、b中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> a, b&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// 以上均为静态导入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">&quot;模块路径&quot;</span>) <span class=\"comment\">// 动态导入，返回一个Promise，完成时的数据为模块对象</span></span><br><span class=\"line\">\t/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1400,"excerpt":"","more":"<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><blockquote>\n<p>标准类型：社区规范</p>\n<p>支持环境：node</p>\n<p>依赖类型：动态依赖</p>\n</blockquote>\n<h2 id=\"如何导出\"><a href=\"#如何导出\" class=\"headerlink\" title=\"如何导出\"></a>如何导出</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = 导出的值</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何导入\"><a href=\"#如何导入\" class=\"headerlink\" title=\"如何导入\"></a>如何导入</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;模块路径&quot;</span>) <span class=\"comment\">// 函数返回模块导出的值</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h1><blockquote>\n<p>标准类型：官方标准</p>\n<p>支持环境：node，浏览器</p>\n<p>依赖类型：静态依赖，动态依赖</p>\n</blockquote>\n<h2 id=\"如何导出-1\"><a href=\"#如何导出-1\" class=\"headerlink\" title=\"如何导出\"></a>如何导出</h2><p><strong>ES Module</strong>的导出</p>\n<p>ES Module分为两种导出方式：</p>\n<ul>\n<li>具名导出（普通导出），可以导出多个</li>\n<li>默认导出，只能导出一个</li>\n</ul>\n<p>一个模块可以同时存在两种导出方式，最终会合并为一个「对象」导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 具名，常用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 具名，常用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> c = <span class=\"function\">() =&gt;</span> &#123;&#125;  <span class=\"comment\">// 具名，常用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; d &#125; <span class=\"comment\">// 具名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> k = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; k <span class=\"keyword\">as</span> temp &#125; <span class=\"comment\">// 具名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export default 3 // 默认，常用</span></span><br><span class=\"line\"><span class=\"comment\">// export default function() &#123;&#125; // 默认，常用</span></span><br><span class=\"line\"><span class=\"comment\">// const e = 4;</span></span><br><span class=\"line\"><span class=\"comment\">// export &#123; e as default &#125; // 默认</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"number\">4</span>, g = <span class=\"number\">5</span>, h = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; f, g, h <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125; <span class=\"comment\">// 基本 + 默认</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码将导出下面的对象</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\ta: 1,</span></span><br><span class=\"line\"><span class=\"comment\">\tb: fn,</span></span><br><span class=\"line\"><span class=\"comment\">\tc: fn,</span></span><br><span class=\"line\"><span class=\"comment\">\td: 2,</span></span><br><span class=\"line\"><span class=\"comment\">\ttemp: 10,</span></span><br><span class=\"line\"><span class=\"comment\">\tf: 4,</span></span><br><span class=\"line\"><span class=\"comment\">\tg: 5,</span></span><br><span class=\"line\"><span class=\"comment\">\tdefault: 6</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：导出代码必须为顶级代码，即不可放到代码块中</strong></p>\n<h2 id=\"如何导入-1\"><a href=\"#如何导入-1\" class=\"headerlink\" title=\"如何导入\"></a>如何导入</h2><p>针对具名导出和默认导出，有不同的导入语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仅运行一次该模块，不导入任何内容</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;模块路径&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 常用，导入属性 a、b，放到变量a、b中。a-&gt;a, b-&gt;b</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span>   </span><br><span class=\"line\"><span class=\"comment\">// 常用，导入属性 default，放入变量c中。default-&gt;c</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> c <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\">// 常用，default-&gt;c，a-&gt;a, b-&gt;b</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> c, &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// 常用，将模块对象放入到变量obj中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> obj <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入属性a、b，放到变量temp1、temp2 中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a <span class=\"keyword\">as</span> temp1, b <span class=\"keyword\">as</span> temp2&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// 导入属性default，放入变量a中，default是关键字，不能作为变量名，必须定义别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">//导入属性default、b，放入变量a、b中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> a, b&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;模块路径&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// 以上均为静态导入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">&quot;模块路径&quot;</span>) <span class=\"comment\">// 动态导入，返回一个Promise，完成时的数据为模块对象</span></span><br><span class=\"line\">\t/</span><br></pre></td></tr></table></figure>"},{"title":"Fetch Api","date":"2021-12-31T08:21:22.000Z","description":"Fetch Api的使用、原理","_content":"\n# Fetch Api\n----------\n## Fetch Api\n\n### 基本使用\n\n **请求测试地址：http://101.132.72.36:5100/api/local**\n\n使用 ```fetch``` 函数即可立即向服务器发送网络请求\n\n### 参数\n\n该函数有两个参数：\n\n1. 必填，字符串，请求地址\n2. 选填，对象，请求配置\n\n### **请求配置对象**\n\n- method：字符串，请求方法，默认值GET\n- headers：对象，请求头信息\n- body: 请求体的内容，必须匹配请求头中的 Content-Type\n- mode：字符串，请求模式\n  - cors：默认值，配置为该值，会在请求头中加入 origin 和 referer\n  - no-cors：配置为该值，不会在请求头中加入 origin 和 referer，跨域的时候可能会出现问题\n  - same-origin：指示请求必须在同一个域中发生，如果请求其他域，则会报错\n- credentials: 如何携带凭据（cookie）\n  - omit：默认值，不携带cookie\n  - same-origin：请求同源地址时携带cookie\n  - include：请求任何地址都携带cookie\n- cache：配置缓存模式\n  - default: 表示fetch请求之前将检查下http的缓存.\n  - no-store: 表示fetch请求将完全忽略http缓存的存在. 这意味着请求之前将不再检查下http的缓存, 拿到响应后, 它也不会更新http缓存.\n  - no-cache: 如果存在缓存, 那么fetch将发送一个条件查询request和一个正常的request, 拿到响应后, 它会更新http缓存.\n  - reload: 表示fetch请求之前将忽略http缓存的存在, 但是请求拿到响应后, 它将主动更新http缓存.\n  - force-cache: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的request.\n  - only-if-cached: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在mode为”same-origin”时有效).\n\n### 返回值\n\nfetch 函数返回一个 Promise 对象\n\n- 当收到服务器的返回结果后，Promise 进入resolved状态，状态数据为 Response 对象\n- 当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息\n\n### **Response对象**\n\n- ok：boolean，当响应消息码在200~299之间时为true，其他为false\n- status：number，响应的状态码\n- text()：用于处理文本格式的 Ajax 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 string 对象的 Promise。\n- blob()：用于处理二进制文件格式（比如图片或者电子表格）的 Ajax 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 blob 对象的 Promise。\n- json()：用于处理 JSON 格式的 Ajax 的响应。它将 JSON 数据流转换为一个被解决为 JavaScript 对象的promise。\n- redirect()：可以用于重定向到另一个 URL。它会创建一个新的 Promise，以解决来自重定向的 URL 的响应。\n\n","source":"_posts/fetchAPI .md","raw":"---\ntitle: Fetch Api\ndate: 2021-12-31 16:21:22\ndescription: Fetch Api的使用、原理\ncategories: \n  - 前端学习笔记\n  - ES6\ntags: \n  - ES6\n  - 前端\n---\n\n# Fetch Api\n----------\n## Fetch Api\n\n### 基本使用\n\n **请求测试地址：http://101.132.72.36:5100/api/local**\n\n使用 ```fetch``` 函数即可立即向服务器发送网络请求\n\n### 参数\n\n该函数有两个参数：\n\n1. 必填，字符串，请求地址\n2. 选填，对象，请求配置\n\n### **请求配置对象**\n\n- method：字符串，请求方法，默认值GET\n- headers：对象，请求头信息\n- body: 请求体的内容，必须匹配请求头中的 Content-Type\n- mode：字符串，请求模式\n  - cors：默认值，配置为该值，会在请求头中加入 origin 和 referer\n  - no-cors：配置为该值，不会在请求头中加入 origin 和 referer，跨域的时候可能会出现问题\n  - same-origin：指示请求必须在同一个域中发生，如果请求其他域，则会报错\n- credentials: 如何携带凭据（cookie）\n  - omit：默认值，不携带cookie\n  - same-origin：请求同源地址时携带cookie\n  - include：请求任何地址都携带cookie\n- cache：配置缓存模式\n  - default: 表示fetch请求之前将检查下http的缓存.\n  - no-store: 表示fetch请求将完全忽略http缓存的存在. 这意味着请求之前将不再检查下http的缓存, 拿到响应后, 它也不会更新http缓存.\n  - no-cache: 如果存在缓存, 那么fetch将发送一个条件查询request和一个正常的request, 拿到响应后, 它会更新http缓存.\n  - reload: 表示fetch请求之前将忽略http缓存的存在, 但是请求拿到响应后, 它将主动更新http缓存.\n  - force-cache: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的request.\n  - only-if-cached: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在mode为”same-origin”时有效).\n\n### 返回值\n\nfetch 函数返回一个 Promise 对象\n\n- 当收到服务器的返回结果后，Promise 进入resolved状态，状态数据为 Response 对象\n- 当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息\n\n### **Response对象**\n\n- ok：boolean，当响应消息码在200~299之间时为true，其他为false\n- status：number，响应的状态码\n- text()：用于处理文本格式的 Ajax 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 string 对象的 Promise。\n- blob()：用于处理二进制文件格式（比如图片或者电子表格）的 Ajax 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 blob 对象的 Promise。\n- json()：用于处理 JSON 格式的 Ajax 的响应。它将 JSON 数据流转换为一个被解决为 JavaScript 对象的promise。\n- redirect()：可以用于重定向到另一个 URL。它会创建一个新的 Promise，以解决来自重定向的 URL 的响应。\n\n","slug":"fetchAPI ","published":1,"updated":"2022-01-01T06:30:15.379Z","_id":"ckxu6dni3000410ax2or8bqso","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Fetch-Api\"><a href=\"#Fetch-Api\" class=\"headerlink\" title=\"Fetch Api\"></a>Fetch Api</h1><hr>\n<h2 id=\"Fetch-Api-1\"><a href=\"#Fetch-Api-1\" class=\"headerlink\" title=\"Fetch Api\"></a>Fetch Api</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p> <strong>请求测试地址：<a href=\"http://101.132.72.36:5100/api/local\">http://101.132.72.36:5100/api/local</a></strong></p>\n<p>使用 <code>fetch</code> 函数即可立即向服务器发送网络请求</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>该函数有两个参数：</p>\n<ol>\n<li>必填，字符串，请求地址</li>\n<li>选填，对象，请求配置</li>\n</ol>\n<h3 id=\"请求配置对象\"><a href=\"#请求配置对象\" class=\"headerlink\" title=\"请求配置对象\"></a><strong>请求配置对象</strong></h3><ul>\n<li>method：字符串，请求方法，默认值GET</li>\n<li>headers：对象，请求头信息</li>\n<li>body: 请求体的内容，必须匹配请求头中的 Content-Type</li>\n<li>mode：字符串，请求模式<ul>\n<li>cors：默认值，配置为该值，会在请求头中加入 origin 和 referer</li>\n<li>no-cors：配置为该值，不会在请求头中加入 origin 和 referer，跨域的时候可能会出现问题</li>\n<li>same-origin：指示请求必须在同一个域中发生，如果请求其他域，则会报错</li>\n</ul>\n</li>\n<li>credentials: 如何携带凭据（cookie）<ul>\n<li>omit：默认值，不携带cookie</li>\n<li>same-origin：请求同源地址时携带cookie</li>\n<li>include：请求任何地址都携带cookie</li>\n</ul>\n</li>\n<li>cache：配置缓存模式<ul>\n<li>default: 表示fetch请求之前将检查下http的缓存.</li>\n<li>no-store: 表示fetch请求将完全忽略http缓存的存在. 这意味着请求之前将不再检查下http的缓存, 拿到响应后, 它也不会更新http缓存.</li>\n<li>no-cache: 如果存在缓存, 那么fetch将发送一个条件查询request和一个正常的request, 拿到响应后, 它会更新http缓存.</li>\n<li>reload: 表示fetch请求之前将忽略http缓存的存在, 但是请求拿到响应后, 它将主动更新http缓存.</li>\n<li>force-cache: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的request.</li>\n<li>only-if-cached: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在mode为”same-origin”时有效).</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>fetch 函数返回一个 Promise 对象</p>\n<ul>\n<li>当收到服务器的返回结果后，Promise 进入resolved状态，状态数据为 Response 对象</li>\n<li>当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息</li>\n</ul>\n<h3 id=\"Response对象\"><a href=\"#Response对象\" class=\"headerlink\" title=\"Response对象\"></a><strong>Response对象</strong></h3><ul>\n<li>ok：boolean，当响应消息码在200~299之间时为true，其他为false</li>\n<li>status：number，响应的状态码</li>\n<li>text()：用于处理文本格式的 Ajax 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 string 对象的 Promise。</li>\n<li>blob()：用于处理二进制文件格式（比如图片或者电子表格）的 Ajax 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 blob 对象的 Promise。</li>\n<li>json()：用于处理 JSON 格式的 Ajax 的响应。它将 JSON 数据流转换为一个被解决为 JavaScript 对象的promise。</li>\n<li>redirect()：可以用于重定向到另一个 URL。它会创建一个新的 Promise，以解决来自重定向的 URL 的响应。</li>\n</ul>\n","site":{"data":{}},"length":1310,"excerpt":"","more":"<h1 id=\"Fetch-Api\"><a href=\"#Fetch-Api\" class=\"headerlink\" title=\"Fetch Api\"></a>Fetch Api</h1><hr>\n<h2 id=\"Fetch-Api-1\"><a href=\"#Fetch-Api-1\" class=\"headerlink\" title=\"Fetch Api\"></a>Fetch Api</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p> <strong>请求测试地址：<a href=\"http://101.132.72.36:5100/api/local\">http://101.132.72.36:5100/api/local</a></strong></p>\n<p>使用 <code>fetch</code> 函数即可立即向服务器发送网络请求</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>该函数有两个参数：</p>\n<ol>\n<li>必填，字符串，请求地址</li>\n<li>选填，对象，请求配置</li>\n</ol>\n<h3 id=\"请求配置对象\"><a href=\"#请求配置对象\" class=\"headerlink\" title=\"请求配置对象\"></a><strong>请求配置对象</strong></h3><ul>\n<li>method：字符串，请求方法，默认值GET</li>\n<li>headers：对象，请求头信息</li>\n<li>body: 请求体的内容，必须匹配请求头中的 Content-Type</li>\n<li>mode：字符串，请求模式<ul>\n<li>cors：默认值，配置为该值，会在请求头中加入 origin 和 referer</li>\n<li>no-cors：配置为该值，不会在请求头中加入 origin 和 referer，跨域的时候可能会出现问题</li>\n<li>same-origin：指示请求必须在同一个域中发生，如果请求其他域，则会报错</li>\n</ul>\n</li>\n<li>credentials: 如何携带凭据（cookie）<ul>\n<li>omit：默认值，不携带cookie</li>\n<li>same-origin：请求同源地址时携带cookie</li>\n<li>include：请求任何地址都携带cookie</li>\n</ul>\n</li>\n<li>cache：配置缓存模式<ul>\n<li>default: 表示fetch请求之前将检查下http的缓存.</li>\n<li>no-store: 表示fetch请求将完全忽略http缓存的存在. 这意味着请求之前将不再检查下http的缓存, 拿到响应后, 它也不会更新http缓存.</li>\n<li>no-cache: 如果存在缓存, 那么fetch将发送一个条件查询request和一个正常的request, 拿到响应后, 它会更新http缓存.</li>\n<li>reload: 表示fetch请求之前将忽略http缓存的存在, 但是请求拿到响应后, 它将主动更新http缓存.</li>\n<li>force-cache: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的request.</li>\n<li>only-if-cached: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在mode为”same-origin”时有效).</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>fetch 函数返回一个 Promise 对象</p>\n<ul>\n<li>当收到服务器的返回结果后，Promise 进入resolved状态，状态数据为 Response 对象</li>\n<li>当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息</li>\n</ul>\n<h3 id=\"Response对象\"><a href=\"#Response对象\" class=\"headerlink\" title=\"Response对象\"></a><strong>Response对象</strong></h3><ul>\n<li>ok：boolean，当响应消息码在200~299之间时为true，其他为false</li>\n<li>status：number，响应的状态码</li>\n<li>text()：用于处理文本格式的 Ajax 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 string 对象的 Promise。</li>\n<li>blob()：用于处理二进制文件格式（比如图片或者电子表格）的 Ajax 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 blob 对象的 Promise。</li>\n<li>json()：用于处理 JSON 格式的 Ajax 的响应。它将 JSON 数据流转换为一个被解决为 JavaScript 对象的promise。</li>\n<li>redirect()：可以用于重定向到另一个 URL。它会创建一个新的 Promise，以解决来自重定向的 URL 的响应。</li>\n</ul>\n"},{"title":"canvas属性","date":"2021-12-31T08:21:22.000Z","description":"经常使用到的canvas的属性和使用方法","_content":"\n# [CANVAS属性，方法](https://www.cnblogs.com/xinyouhunran/p/10968096.html)\n\n**基于：**\nvar canvas = document.getElementById('id');\nvar ctx = canvas.getContext('2d');\n\n**1.样式：**\nctx.fillStyle = 'color'-填充色\nctx.strokeStyle = 'color'-线色\nctx.lineWidth = 'length'-线宽\nlineCap = type-设置线条末端的外观。\nlineJoin = type-设置线条相交的“角落”的外观。\nmiterLimit = value-当两条线以锐角连接时，建立一个斜接限制，以控制结的厚度。\ngetLineDash()-返回包含偶数个非负数的当前行虚线模式数组。\nsetLineDash(segments)-设置当前行虚线模式。\nlineDashOffset = value-指定在一行上启动破折号数组的位置。\n\n**2.画矩形：**\nctx.fillRect(x, y, width, height)-填充矩形\nctx.strokeRect(x, y, width, height)-非填充矩形，只有边框\nctx.clearRect(x, y, width, height)-清除范围\n\n**3.画路径**\nctx.beginPath()-开始画\nctx.moveTo(x,y)-算是定义起点吧\nctx.lineTo(x,y)-连线到某点\nctx.fill()-会自动闭合\nctx.stroke()-不会闭合\nctx.closePath()-关闭绘画\n\n**4.画圆**\nctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)-radius代表半径，anticlockwise代表顺时针，逆时针(boolean)\n\n**5.曲线**\nquadraticCurveTo(cp1x, cp1y, x, y)-xy偏离一致的曲线\nbezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)-想怎么偏怎么偏\n\n**6.new Path2D()**:创建一个2d路径对象，对此对象进行操作，最后成为stroke()或fill()的参数。\n\n**7.渐变**\ncreateLinearGradient(x1, y1, x2, y2)\ncreateRadialGradient(x1, y1, r1, x2, y2, r2)\ngradient.addColorStop(position, color)（0\\~1，color）\n\n**8.模式**\ncreatePattern(image, type)-创建并返回一个新的画布模式对象\nimage是一个Canvasimgource,type是一个表示如何使用图像的字符串(如平铺)\n\n**9.阴影**\nshadowOffsetX = float\n指示阴影应从对象延伸的水平距离。该值不受变换矩阵的影响。默认值为0。\nshadowOffsetY = float\n指示阴影应从对象延伸的垂直距离。该值不受变换矩阵的影响。默认值为0。\nshadowBlur = float\n表示模糊效果的大小; 该值不对应于多个像素，并且不受当前变换矩阵的影响。默认值为0。\nshadowColor = color\n标准CSS颜色值，表示阴影效果的颜色; 默认情况下，它是完全透明的黑色。\n\n**10.绘文字**\nfillText(text, x, y [, maxWidth])\n在给定（x，y）位置填充给定文本。可选择绘制最大宽度。\nstrokeText(text, x, y [, maxWidth])\n在给定（x，y）位置描边给定文本。可选择绘制最大宽度。\nfont = value\n绘制文本时使用的当前文本样式。此字符串使用与CSS font属性相同的语法。默认字体是10px sans-serif。\ntextAlign = value\n文本对齐设置。可能的值：start，end，left，right或center。默认值为start。\ntextBaseline = value\n基线对齐设置。可能的值：top，hanging，middle，alphabetic，ideographic，bottom。默认值为alphabetic。\ndirection = value\n方向性。可能的值：ltr，rtl，inherit。默认值为inherit。\nmeasureText()\n返回一个TextMetrics对象，该对象包含以当前文本样式绘制时指定文本的宽度\n\n**11.图像**\ndrawImage(image, x, y,width,height)\n绘制坐标（x，y）处Canvasimgource的image参数指定的值。\ndrawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)-切片\n给定一个image，该功能只通过其左上角是矩形指定的源图像的区域（sx，sy其宽度和高度是），并sWidth与sHeight和它绘制到画布，\n在将其放置在画布上（dx，dy）和缩放它由指定的大小dWidth和dHeight。\n\n**12.保存和恢复状态**\nsave()\n保存画布的整个状态。\nrestore()\n恢复最近保存的画布状态。\n画布状态存储在堆栈中。每次save()调用该方法时，当前绘图状态都会被压入堆栈。\n您可以save()根据需要多次调用该方法。每次restore()调用该方法时，最后保存的状态将从堆栈中弹出，并恢复所有保存的设置。\n\n**13.动画**\ntranslate(x, y)\nrotate(angle)\nscale(x, y)\ntransform(a, b, c, d, e, f)//矩阵\nsetTransform(a, b, c, d, e, f)\n将当前变换重置为单位矩阵，然后transform()使用相同的参数调用该方法。这基本上撤消了当前的转换，然后在一个步骤中设置指定的转换。\nresetTransform()\n将当前变换重置为单位矩阵。\n使用动画，使用window.requestAnimationFrame()而不是window.setInterval()\nwindow.cancelAnimationFrame();取消帧动画\n\n**14.合成**\nglobalCompositeOperation = type\n这将设置在绘制新形状时应用的合成操作的类型，其中type是一个字符串，用于标识要使用的十二个合成操作中的哪一个。\n\n**15.clip()**剪切路径\n\n**16.获取上下文的像素数据**\nctx.getImageData(left, top, width, height);\n此方法返回一个ImageData对象，该对象表示画布区域的像素数据，其角点由点（left，top），（left+width，top），（left，top+height）和（left+width，top+height）表示。坐标以画布坐标空间单位指定。\n\n**17.将像素数据绘制到上下文中**\nctx.putImageData(myImageData, dx, dy);\n该dx和dy参数显示在其中进行绘制要绘制的像素数据的左上角的范围内的设备坐标。\n\n**18.保存图像**\ncanvas.toDataURL('image/png')\n默认设置。创建PNG图像。\ncanvas.toDataURL('image/jpeg', quality)\n创建JPG图像。或者，您可以提供0到1范围内的质量，其中一个是最好的质量，0几乎不可识别但文件大小很小。\ncanvas.toBlob(callback, type, encoderOptions)\n创建Blob表示画布中包含的图像的对象。\n\n**19.命中区域**\nCanvasRenderingContext2D.addHitRegion()\n在画布中添加命中区域。\nCanvasRenderingContext2D.removeHitRegion()\n使用id画布中指定的内容删除命中区域。\nCanvasRenderingContext2D.clearHitRegions()\n从画布中删除所有命中区域。\n检查MouseEvent.region属性以测试鼠标是否正在击中您的区域\n\n**20.聚焦环**\nCanvasRenderingContext2D.drawFocusIfNeeded()\n如果给定元素被聚焦，则此方法围绕当前路径绘制聚焦环。\nCanvasRenderingContext2D.scrollPathIntoView()\n将当前路径或给定路径滚动到视图中。\n\n**21.基于canvas封装的代码片段**（https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Canvas）\n获取画布中某种颜色的像素数\n获取画布中像素的颜色\n链接方法\n将画布图像保存到文件\n将远程页面加载到画布元素上\n将图像文件转换为base64字符串","source":"_posts/canvas常用属性相关.md","raw":"---\ntitle: canvas属性\ndate: 2021-12-31 16:21:22\ndescription: 经常使用到的canvas的属性和使用方法\ncategories: \n\t- 前端学习笔记\n\t- HTML\n\ntags: \n  - HTML\n  - 前端\n---\n\n# [CANVAS属性，方法](https://www.cnblogs.com/xinyouhunran/p/10968096.html)\n\n**基于：**\nvar canvas = document.getElementById('id');\nvar ctx = canvas.getContext('2d');\n\n**1.样式：**\nctx.fillStyle = 'color'-填充色\nctx.strokeStyle = 'color'-线色\nctx.lineWidth = 'length'-线宽\nlineCap = type-设置线条末端的外观。\nlineJoin = type-设置线条相交的“角落”的外观。\nmiterLimit = value-当两条线以锐角连接时，建立一个斜接限制，以控制结的厚度。\ngetLineDash()-返回包含偶数个非负数的当前行虚线模式数组。\nsetLineDash(segments)-设置当前行虚线模式。\nlineDashOffset = value-指定在一行上启动破折号数组的位置。\n\n**2.画矩形：**\nctx.fillRect(x, y, width, height)-填充矩形\nctx.strokeRect(x, y, width, height)-非填充矩形，只有边框\nctx.clearRect(x, y, width, height)-清除范围\n\n**3.画路径**\nctx.beginPath()-开始画\nctx.moveTo(x,y)-算是定义起点吧\nctx.lineTo(x,y)-连线到某点\nctx.fill()-会自动闭合\nctx.stroke()-不会闭合\nctx.closePath()-关闭绘画\n\n**4.画圆**\nctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)-radius代表半径，anticlockwise代表顺时针，逆时针(boolean)\n\n**5.曲线**\nquadraticCurveTo(cp1x, cp1y, x, y)-xy偏离一致的曲线\nbezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)-想怎么偏怎么偏\n\n**6.new Path2D()**:创建一个2d路径对象，对此对象进行操作，最后成为stroke()或fill()的参数。\n\n**7.渐变**\ncreateLinearGradient(x1, y1, x2, y2)\ncreateRadialGradient(x1, y1, r1, x2, y2, r2)\ngradient.addColorStop(position, color)（0\\~1，color）\n\n**8.模式**\ncreatePattern(image, type)-创建并返回一个新的画布模式对象\nimage是一个Canvasimgource,type是一个表示如何使用图像的字符串(如平铺)\n\n**9.阴影**\nshadowOffsetX = float\n指示阴影应从对象延伸的水平距离。该值不受变换矩阵的影响。默认值为0。\nshadowOffsetY = float\n指示阴影应从对象延伸的垂直距离。该值不受变换矩阵的影响。默认值为0。\nshadowBlur = float\n表示模糊效果的大小; 该值不对应于多个像素，并且不受当前变换矩阵的影响。默认值为0。\nshadowColor = color\n标准CSS颜色值，表示阴影效果的颜色; 默认情况下，它是完全透明的黑色。\n\n**10.绘文字**\nfillText(text, x, y [, maxWidth])\n在给定（x，y）位置填充给定文本。可选择绘制最大宽度。\nstrokeText(text, x, y [, maxWidth])\n在给定（x，y）位置描边给定文本。可选择绘制最大宽度。\nfont = value\n绘制文本时使用的当前文本样式。此字符串使用与CSS font属性相同的语法。默认字体是10px sans-serif。\ntextAlign = value\n文本对齐设置。可能的值：start，end，left，right或center。默认值为start。\ntextBaseline = value\n基线对齐设置。可能的值：top，hanging，middle，alphabetic，ideographic，bottom。默认值为alphabetic。\ndirection = value\n方向性。可能的值：ltr，rtl，inherit。默认值为inherit。\nmeasureText()\n返回一个TextMetrics对象，该对象包含以当前文本样式绘制时指定文本的宽度\n\n**11.图像**\ndrawImage(image, x, y,width,height)\n绘制坐标（x，y）处Canvasimgource的image参数指定的值。\ndrawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)-切片\n给定一个image，该功能只通过其左上角是矩形指定的源图像的区域（sx，sy其宽度和高度是），并sWidth与sHeight和它绘制到画布，\n在将其放置在画布上（dx，dy）和缩放它由指定的大小dWidth和dHeight。\n\n**12.保存和恢复状态**\nsave()\n保存画布的整个状态。\nrestore()\n恢复最近保存的画布状态。\n画布状态存储在堆栈中。每次save()调用该方法时，当前绘图状态都会被压入堆栈。\n您可以save()根据需要多次调用该方法。每次restore()调用该方法时，最后保存的状态将从堆栈中弹出，并恢复所有保存的设置。\n\n**13.动画**\ntranslate(x, y)\nrotate(angle)\nscale(x, y)\ntransform(a, b, c, d, e, f)//矩阵\nsetTransform(a, b, c, d, e, f)\n将当前变换重置为单位矩阵，然后transform()使用相同的参数调用该方法。这基本上撤消了当前的转换，然后在一个步骤中设置指定的转换。\nresetTransform()\n将当前变换重置为单位矩阵。\n使用动画，使用window.requestAnimationFrame()而不是window.setInterval()\nwindow.cancelAnimationFrame();取消帧动画\n\n**14.合成**\nglobalCompositeOperation = type\n这将设置在绘制新形状时应用的合成操作的类型，其中type是一个字符串，用于标识要使用的十二个合成操作中的哪一个。\n\n**15.clip()**剪切路径\n\n**16.获取上下文的像素数据**\nctx.getImageData(left, top, width, height);\n此方法返回一个ImageData对象，该对象表示画布区域的像素数据，其角点由点（left，top），（left+width，top），（left，top+height）和（left+width，top+height）表示。坐标以画布坐标空间单位指定。\n\n**17.将像素数据绘制到上下文中**\nctx.putImageData(myImageData, dx, dy);\n该dx和dy参数显示在其中进行绘制要绘制的像素数据的左上角的范围内的设备坐标。\n\n**18.保存图像**\ncanvas.toDataURL('image/png')\n默认设置。创建PNG图像。\ncanvas.toDataURL('image/jpeg', quality)\n创建JPG图像。或者，您可以提供0到1范围内的质量，其中一个是最好的质量，0几乎不可识别但文件大小很小。\ncanvas.toBlob(callback, type, encoderOptions)\n创建Blob表示画布中包含的图像的对象。\n\n**19.命中区域**\nCanvasRenderingContext2D.addHitRegion()\n在画布中添加命中区域。\nCanvasRenderingContext2D.removeHitRegion()\n使用id画布中指定的内容删除命中区域。\nCanvasRenderingContext2D.clearHitRegions()\n从画布中删除所有命中区域。\n检查MouseEvent.region属性以测试鼠标是否正在击中您的区域\n\n**20.聚焦环**\nCanvasRenderingContext2D.drawFocusIfNeeded()\n如果给定元素被聚焦，则此方法围绕当前路径绘制聚焦环。\nCanvasRenderingContext2D.scrollPathIntoView()\n将当前路径或给定路径滚动到视图中。\n\n**21.基于canvas封装的代码片段**（https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Canvas）\n获取画布中某种颜色的像素数\n获取画布中像素的颜色\n链接方法\n将画布图像保存到文件\n将远程页面加载到画布元素上\n将图像文件转换为base64字符串","slug":"canvas常用属性相关","published":1,"updated":"2022-01-01T06:29:27.026Z","_id":"ckxu6dni4000510ax28ovhbh1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CANVAS属性，方法\"><a href=\"#CANVAS属性，方法\" class=\"headerlink\" title=\"CANVAS属性，方法\"></a><a href=\"https://www.cnblogs.com/xinyouhunran/p/10968096.html\">CANVAS属性，方法</a></h1><p><strong>基于：</strong><br>var canvas = document.getElementById(‘id’);<br>var ctx = canvas.getContext(‘2d’);</p>\n<p><strong>1.样式：</strong><br>ctx.fillStyle = ‘color’-填充色<br>ctx.strokeStyle = ‘color’-线色<br>ctx.lineWidth = ‘length’-线宽<br>lineCap = type-设置线条末端的外观。<br>lineJoin = type-设置线条相交的“角落”的外观。<br>miterLimit = value-当两条线以锐角连接时，建立一个斜接限制，以控制结的厚度。<br>getLineDash()-返回包含偶数个非负数的当前行虚线模式数组。<br>setLineDash(segments)-设置当前行虚线模式。<br>lineDashOffset = value-指定在一行上启动破折号数组的位置。</p>\n<p><strong>2.画矩形：</strong><br>ctx.fillRect(x, y, width, height)-填充矩形<br>ctx.strokeRect(x, y, width, height)-非填充矩形，只有边框<br>ctx.clearRect(x, y, width, height)-清除范围</p>\n<p><strong>3.画路径</strong><br>ctx.beginPath()-开始画<br>ctx.moveTo(x,y)-算是定义起点吧<br>ctx.lineTo(x,y)-连线到某点<br>ctx.fill()-会自动闭合<br>ctx.stroke()-不会闭合<br>ctx.closePath()-关闭绘画</p>\n<p><strong>4.画圆</strong><br>ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)-radius代表半径，anticlockwise代表顺时针，逆时针(boolean)</p>\n<p><strong>5.曲线</strong><br>quadraticCurveTo(cp1x, cp1y, x, y)-xy偏离一致的曲线<br>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)-想怎么偏怎么偏</p>\n<p><strong>6.new Path2D()</strong>:创建一个2d路径对象，对此对象进行操作，最后成为stroke()或fill()的参数。</p>\n<p><strong>7.渐变</strong><br>createLinearGradient(x1, y1, x2, y2)<br>createRadialGradient(x1, y1, r1, x2, y2, r2)<br>gradient.addColorStop(position, color)（0~1，color）</p>\n<p><strong>8.模式</strong><br>createPattern(image, type)-创建并返回一个新的画布模式对象<br>image是一个Canvasimgource,type是一个表示如何使用图像的字符串(如平铺)</p>\n<p><strong>9.阴影</strong><br>shadowOffsetX = float<br>指示阴影应从对象延伸的水平距离。该值不受变换矩阵的影响。默认值为0。<br>shadowOffsetY = float<br>指示阴影应从对象延伸的垂直距离。该值不受变换矩阵的影响。默认值为0。<br>shadowBlur = float<br>表示模糊效果的大小; 该值不对应于多个像素，并且不受当前变换矩阵的影响。默认值为0。<br>shadowColor = color<br>标准CSS颜色值，表示阴影效果的颜色; 默认情况下，它是完全透明的黑色。</p>\n<p><strong>10.绘文字</strong><br>fillText(text, x, y [, maxWidth])<br>在给定（x，y）位置填充给定文本。可选择绘制最大宽度。<br>strokeText(text, x, y [, maxWidth])<br>在给定（x，y）位置描边给定文本。可选择绘制最大宽度。<br>font = value<br>绘制文本时使用的当前文本样式。此字符串使用与CSS font属性相同的语法。默认字体是10px sans-serif。<br>textAlign = value<br>文本对齐设置。可能的值：start，end，left，right或center。默认值为start。<br>textBaseline = value<br>基线对齐设置。可能的值：top，hanging，middle，alphabetic，ideographic，bottom。默认值为alphabetic。<br>direction = value<br>方向性。可能的值：ltr，rtl，inherit。默认值为inherit。<br>measureText()<br>返回一个TextMetrics对象，该对象包含以当前文本样式绘制时指定文本的宽度</p>\n<p><strong>11.图像</strong><br>drawImage(image, x, y,width,height)<br>绘制坐标（x，y）处Canvasimgource的image参数指定的值。<br>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)-切片<br>给定一个image，该功能只通过其左上角是矩形指定的源图像的区域（sx，sy其宽度和高度是），并sWidth与sHeight和它绘制到画布，<br>在将其放置在画布上（dx，dy）和缩放它由指定的大小dWidth和dHeight。</p>\n<p><strong>12.保存和恢复状态</strong><br>save()<br>保存画布的整个状态。<br>restore()<br>恢复最近保存的画布状态。<br>画布状态存储在堆栈中。每次save()调用该方法时，当前绘图状态都会被压入堆栈。<br>您可以save()根据需要多次调用该方法。每次restore()调用该方法时，最后保存的状态将从堆栈中弹出，并恢复所有保存的设置。</p>\n<p><strong>13.动画</strong><br>translate(x, y)<br>rotate(angle)<br>scale(x, y)<br>transform(a, b, c, d, e, f)//矩阵<br>setTransform(a, b, c, d, e, f)<br>将当前变换重置为单位矩阵，然后transform()使用相同的参数调用该方法。这基本上撤消了当前的转换，然后在一个步骤中设置指定的转换。<br>resetTransform()<br>将当前变换重置为单位矩阵。<br>使用动画，使用window.requestAnimationFrame()而不是window.setInterval()<br>window.cancelAnimationFrame();取消帧动画</p>\n<p><strong>14.合成</strong><br>globalCompositeOperation = type<br>这将设置在绘制新形状时应用的合成操作的类型，其中type是一个字符串，用于标识要使用的十二个合成操作中的哪一个。</p>\n<p>**15.clip()**剪切路径</p>\n<p><strong>16.获取上下文的像素数据</strong><br>ctx.getImageData(left, top, width, height);<br>此方法返回一个ImageData对象，该对象表示画布区域的像素数据，其角点由点（left，top），（left+width，top），（left，top+height）和（left+width，top+height）表示。坐标以画布坐标空间单位指定。</p>\n<p><strong>17.将像素数据绘制到上下文中</strong><br>ctx.putImageData(myImageData, dx, dy);<br>该dx和dy参数显示在其中进行绘制要绘制的像素数据的左上角的范围内的设备坐标。</p>\n<p><strong>18.保存图像</strong><br>canvas.toDataURL(‘image/png’)<br>默认设置。创建PNG图像。<br>canvas.toDataURL(‘image/jpeg’, quality)<br>创建JPG图像。或者，您可以提供0到1范围内的质量，其中一个是最好的质量，0几乎不可识别但文件大小很小。<br>canvas.toBlob(callback, type, encoderOptions)<br>创建Blob表示画布中包含的图像的对象。</p>\n<p><strong>19.命中区域</strong><br>CanvasRenderingContext2D.addHitRegion()<br>在画布中添加命中区域。<br>CanvasRenderingContext2D.removeHitRegion()<br>使用id画布中指定的内容删除命中区域。<br>CanvasRenderingContext2D.clearHitRegions()<br>从画布中删除所有命中区域。<br>检查MouseEvent.region属性以测试鼠标是否正在击中您的区域</p>\n<p><strong>20.聚焦环</strong><br>CanvasRenderingContext2D.drawFocusIfNeeded()<br>如果给定元素被聚焦，则此方法围绕当前路径绘制聚焦环。<br>CanvasRenderingContext2D.scrollPathIntoView()<br>将当前路径或给定路径滚动到视图中。</p>\n<p><strong>21.基于canvas封装的代码片段</strong>（<a href=\"https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Canvas%EF%BC%89\">https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Canvas）</a><br>获取画布中某种颜色的像素数<br>获取画布中像素的颜色<br>链接方法<br>将画布图像保存到文件<br>将远程页面加载到画布元素上<br>将图像文件转换为base64字符串</p>\n","site":{"data":{}},"length":3515,"excerpt":"","more":"<h1 id=\"CANVAS属性，方法\"><a href=\"#CANVAS属性，方法\" class=\"headerlink\" title=\"CANVAS属性，方法\"></a><a href=\"https://www.cnblogs.com/xinyouhunran/p/10968096.html\">CANVAS属性，方法</a></h1><p><strong>基于：</strong><br>var canvas = document.getElementById(‘id’);<br>var ctx = canvas.getContext(‘2d’);</p>\n<p><strong>1.样式：</strong><br>ctx.fillStyle = ‘color’-填充色<br>ctx.strokeStyle = ‘color’-线色<br>ctx.lineWidth = ‘length’-线宽<br>lineCap = type-设置线条末端的外观。<br>lineJoin = type-设置线条相交的“角落”的外观。<br>miterLimit = value-当两条线以锐角连接时，建立一个斜接限制，以控制结的厚度。<br>getLineDash()-返回包含偶数个非负数的当前行虚线模式数组。<br>setLineDash(segments)-设置当前行虚线模式。<br>lineDashOffset = value-指定在一行上启动破折号数组的位置。</p>\n<p><strong>2.画矩形：</strong><br>ctx.fillRect(x, y, width, height)-填充矩形<br>ctx.strokeRect(x, y, width, height)-非填充矩形，只有边框<br>ctx.clearRect(x, y, width, height)-清除范围</p>\n<p><strong>3.画路径</strong><br>ctx.beginPath()-开始画<br>ctx.moveTo(x,y)-算是定义起点吧<br>ctx.lineTo(x,y)-连线到某点<br>ctx.fill()-会自动闭合<br>ctx.stroke()-不会闭合<br>ctx.closePath()-关闭绘画</p>\n<p><strong>4.画圆</strong><br>ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)-radius代表半径，anticlockwise代表顺时针，逆时针(boolean)</p>\n<p><strong>5.曲线</strong><br>quadraticCurveTo(cp1x, cp1y, x, y)-xy偏离一致的曲线<br>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)-想怎么偏怎么偏</p>\n<p><strong>6.new Path2D()</strong>:创建一个2d路径对象，对此对象进行操作，最后成为stroke()或fill()的参数。</p>\n<p><strong>7.渐变</strong><br>createLinearGradient(x1, y1, x2, y2)<br>createRadialGradient(x1, y1, r1, x2, y2, r2)<br>gradient.addColorStop(position, color)（0~1，color）</p>\n<p><strong>8.模式</strong><br>createPattern(image, type)-创建并返回一个新的画布模式对象<br>image是一个Canvasimgource,type是一个表示如何使用图像的字符串(如平铺)</p>\n<p><strong>9.阴影</strong><br>shadowOffsetX = float<br>指示阴影应从对象延伸的水平距离。该值不受变换矩阵的影响。默认值为0。<br>shadowOffsetY = float<br>指示阴影应从对象延伸的垂直距离。该值不受变换矩阵的影响。默认值为0。<br>shadowBlur = float<br>表示模糊效果的大小; 该值不对应于多个像素，并且不受当前变换矩阵的影响。默认值为0。<br>shadowColor = color<br>标准CSS颜色值，表示阴影效果的颜色; 默认情况下，它是完全透明的黑色。</p>\n<p><strong>10.绘文字</strong><br>fillText(text, x, y [, maxWidth])<br>在给定（x，y）位置填充给定文本。可选择绘制最大宽度。<br>strokeText(text, x, y [, maxWidth])<br>在给定（x，y）位置描边给定文本。可选择绘制最大宽度。<br>font = value<br>绘制文本时使用的当前文本样式。此字符串使用与CSS font属性相同的语法。默认字体是10px sans-serif。<br>textAlign = value<br>文本对齐设置。可能的值：start，end，left，right或center。默认值为start。<br>textBaseline = value<br>基线对齐设置。可能的值：top，hanging，middle，alphabetic，ideographic，bottom。默认值为alphabetic。<br>direction = value<br>方向性。可能的值：ltr，rtl，inherit。默认值为inherit。<br>measureText()<br>返回一个TextMetrics对象，该对象包含以当前文本样式绘制时指定文本的宽度</p>\n<p><strong>11.图像</strong><br>drawImage(image, x, y,width,height)<br>绘制坐标（x，y）处Canvasimgource的image参数指定的值。<br>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)-切片<br>给定一个image，该功能只通过其左上角是矩形指定的源图像的区域（sx，sy其宽度和高度是），并sWidth与sHeight和它绘制到画布，<br>在将其放置在画布上（dx，dy）和缩放它由指定的大小dWidth和dHeight。</p>\n<p><strong>12.保存和恢复状态</strong><br>save()<br>保存画布的整个状态。<br>restore()<br>恢复最近保存的画布状态。<br>画布状态存储在堆栈中。每次save()调用该方法时，当前绘图状态都会被压入堆栈。<br>您可以save()根据需要多次调用该方法。每次restore()调用该方法时，最后保存的状态将从堆栈中弹出，并恢复所有保存的设置。</p>\n<p><strong>13.动画</strong><br>translate(x, y)<br>rotate(angle)<br>scale(x, y)<br>transform(a, b, c, d, e, f)//矩阵<br>setTransform(a, b, c, d, e, f)<br>将当前变换重置为单位矩阵，然后transform()使用相同的参数调用该方法。这基本上撤消了当前的转换，然后在一个步骤中设置指定的转换。<br>resetTransform()<br>将当前变换重置为单位矩阵。<br>使用动画，使用window.requestAnimationFrame()而不是window.setInterval()<br>window.cancelAnimationFrame();取消帧动画</p>\n<p><strong>14.合成</strong><br>globalCompositeOperation = type<br>这将设置在绘制新形状时应用的合成操作的类型，其中type是一个字符串，用于标识要使用的十二个合成操作中的哪一个。</p>\n<p>**15.clip()**剪切路径</p>\n<p><strong>16.获取上下文的像素数据</strong><br>ctx.getImageData(left, top, width, height);<br>此方法返回一个ImageData对象，该对象表示画布区域的像素数据，其角点由点（left，top），（left+width，top），（left，top+height）和（left+width，top+height）表示。坐标以画布坐标空间单位指定。</p>\n<p><strong>17.将像素数据绘制到上下文中</strong><br>ctx.putImageData(myImageData, dx, dy);<br>该dx和dy参数显示在其中进行绘制要绘制的像素数据的左上角的范围内的设备坐标。</p>\n<p><strong>18.保存图像</strong><br>canvas.toDataURL(‘image/png’)<br>默认设置。创建PNG图像。<br>canvas.toDataURL(‘image/jpeg’, quality)<br>创建JPG图像。或者，您可以提供0到1范围内的质量，其中一个是最好的质量，0几乎不可识别但文件大小很小。<br>canvas.toBlob(callback, type, encoderOptions)<br>创建Blob表示画布中包含的图像的对象。</p>\n<p><strong>19.命中区域</strong><br>CanvasRenderingContext2D.addHitRegion()<br>在画布中添加命中区域。<br>CanvasRenderingContext2D.removeHitRegion()<br>使用id画布中指定的内容删除命中区域。<br>CanvasRenderingContext2D.clearHitRegions()<br>从画布中删除所有命中区域。<br>检查MouseEvent.region属性以测试鼠标是否正在击中您的区域</p>\n<p><strong>20.聚焦环</strong><br>CanvasRenderingContext2D.drawFocusIfNeeded()<br>如果给定元素被聚焦，则此方法围绕当前路径绘制聚焦环。<br>CanvasRenderingContext2D.scrollPathIntoView()<br>将当前路径或给定路径滚动到视图中。</p>\n<p><strong>21.基于canvas封装的代码片段</strong>（<a href=\"https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Canvas%EF%BC%89\">https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Canvas）</a><br>获取画布中某种颜色的像素数<br>获取画布中像素的颜色<br>链接方法<br>将画布图像保存到文件<br>将远程页面加载到画布元素上<br>将图像文件转换为base64字符串</p>\n"},{"title":"document常用方法","date":"2021-12-31T08:21:22.000Z","description":"document的介绍，以及常见的dom操作（赠、删、改、查）","_content":"\n# document里面的方法\n----------\ndocument：整个页面\n\nquerySelector('选择器')：可以按CSS的选择器选择方式（选出一个）\n\n```html\n    <div>\n        <strong></strong>\n    </div>\n    <div>\n        <span>\n             <strong class=\"demo\">123</strong>\n        </span>\n    </div>\n    <script>\n        var strong = document.querySelector('div > span strong')\n    </script>\n    可以选择出有123的strong标签         \n```\n\nquerySelectorAll('选择器'):可以按CSS的选择器选择方式（选出一组）\n\n```html\n    <div>\n        <strong></strong>\n    </div>\n    <div>\n        <span>\n             <strong class=\"demo\">123</strong>\n        </span>\n    </div>\n    <script>\n        var strong = document.querySelectorAll('div > span strong')\n    </script>\n    可以选择出有123的一组strong标签   \n```\n\nquerySeclect 和querySelectAll是静态的，选择后不再更新（选出来的是副本）\n\n\n### 遍历节点树：（包含所有节点）\n- parentNode:父节点\n- childNodes：子节点集合\n- firstChild：第一个子节点\n- lastChild：最后一个子节点\n- nextSibling：后一个兄弟节点\n- previousSibling：前一个兄弟节点\n\n### 遍历元素节点树：（只有元素节点）\n- parentElement：返回当前元素的父元素节点\n- children：只返回当前元素的元素子节点\n- node.childElementCount === node.children.length：当前元素节点的子元素个数\n- firstElementChild：第一个元素节点\n- lastElementChild：最后一个元素节点\n- nextElementSibling：后一个兄弟元素节点\n- previousElementSibling：前一个兄弟元素节点\n\n### 节点的四个属性\n- nodeName：元素的标签名，以大些形式表示，只读\n- nodeValue：Text节点或Comment节点的文本内容，可读写\n- nodeType：该节点的类型，只读\n- attributes：Element节点的属性集合\n\n### 注意：\n1. getElementById方法定义在Document.prototype上，即Element节点上不能使用。\n\n2. getElementsByName方法定义在HTMLDocument.prototype上，即非html中的document以外不能使用(xml document,Element)\n\n3. getElementsByTagName方法定义在Document.prototype 和 Element.prototype上\n\n4. HTMLDocument.prototype定义了一些常用的属性，body,head,分别指代HTML文档中的<body><head>标签。\n\n5. Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，他总是指代<html>元素\n\n6. getElementsByClassName、querySelectorAll、querySelector在Document,Element类中均有定义\n\n### dom的基本操作\n#### 增\n```javascript\ndocument.createElement();增加元素节点\nvar div = document.createElement('div');\n\ndocument.createTextNode();增加文本节点\nvar text = document.createTextNode(\"hello\");\n\n\ndocument.createComment();\nvar comment = document.createComment(\"This is a Comment\");\n\ndocument.createDocumentFragment();文档碎片节点\n\n```\n#### 插\n\n```javascript\nPARENTNODE.appendChild();插入节点（剪切操作）\n        var div = document.getElementsByTagName('div')[0];\n        var text = document.createTextNode(\"这里在div中插入一个文本节点\");\n        var span = document.createElement('span');\n        div.appendChild(text);\n        div.appendChild(span);\n\n\nPARENTNODE.insertBefore(a, b);在父集中将a插在b前面\n        var div = document.getElementsByTagName('div')[0];\n        var strong = document.getElementsByTagName('strong')[0];\n        var span = document.createElement('span');\n        div.insertBefore(span, strong);\n        \n        var div = document.getElementsByTagName('div')[0];\n        var strong = document.getElementsByTagName('strong')[0];\n        var text = document.createTextNode(\"在strong前面插入一个文本节点\");\n        div.insertBefore(text, strong);\n```\n\n#### 删\n```javascript\nparent.removeChild();父节点调用方法删除子节点（剪切）\n        var div = document.getElementsByTagName('div')[0];\n        var strong = document.getElementsByTagName('strong')[0];\n        div.removeChild(strong);\n        删除div下面的strong标签\nparent.remove();子节点自己调用方法删除自己（销毁）\n        var strong = document.getElementsByTagName('strong')[0];\n        strong.remove()\n        删除div下面的strong标签\n\n```\n\n#### 替换\n```javascript\nparent.replaceChild(new, origin);（剪切）\n         var div = document.getElementsByTagName('div')[0];\n         var strong = document.getElementsByTagName('strong')[0];\n         var text = document.createTextNode(\"将strong标签替换成为一个文本\");\n         div.replaceChild(text, strong);\nElement节点的一些属性\n\ninnerHTML（取写HTML）\n        var div = document.getElementsByTagName('div')[0];\n        div.innerHTML;\n        将div里面的东西查找出来\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.innerHTML = \"将div原来的东西覆盖掉\";\n        将div里面的东西替换\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.innerHTML = \"将div原来的东西覆盖掉\";\n        div.innerHTML += \"再加一点东西！\";\n        在原来的div后面再添加一点东西\ninnerText（取写文本，老版本火狐不支持（提供TextContent一样））\n        var div = document.getElementsByTagName('div')[0];\n        div.innerText;\n        将div里面的文本取出来\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.innerText = \"123\";\n        将div里面的所有东西替换成123\n```\n\n### Element节点的一些方法\n\n#### ele.setAttribute() ;设置属性\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.setAttribute('class', 'class1');\n        给div添加名为class1 的 class属性\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.setAttribute('id', 'only');\n        给div添加一个名为only的 id属性\n```\n\n#### ele.getAttribute() ;获取属性\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.getAttribute('id');\n        获取div的id\n```\ndocument.getElementsByTagName(*);可以把所有标签取出来\n\n## 日期对象\n日期对象是系统提供好的。\n\n`var date = new Date();`\n\nsetInterval(函数，时间间隔);循环执行（每隔一段时间执行函数），都会返回一个数字唯一标识\n```javascript\n        setInterval(function() {\n            console.log(\"aaa\");\n        }, 1000)\n        每隔1000毫秒执行一次function\n```\n\nsetTimeout(函数，时间间隔);推迟一段时间在执行，仅执行一次\n```javascript\n        setTimeout(function() {\n            console.log(\"推迟1000毫秒执行，仅执行一次。\");\n        }, 1000)\n```\n```javascript\nclearInterval(数字);停止执行\n        var timer = setInterval(function() {\n            console.log(\"aaa\");\n        }, 1000)\n        clearInterval(timer);\n        可以停止setInterval的执行\n\n```\n\n```javascript\nclearTimeout();\n        var timer = setTimeout(function() {\n            console.log(\"隔1000毫秒执行，仅执行一次。\");\n        }, 1000)\n        clearTimeout(timer);\n        清除setTimeout的执行\n```\n全局对象window上的方法，内部函数this指向window\n\n#### 注意 ：\nsetInterval(“字符串”,1000);会每隔一段时间执行字符串里面的代码（当成js代码）\n\n#### 查看滚动条的滚动距离：\n\nwindow.pageXOffset/pageYOffset  \nIE8及IE8以下不兼容\n\n`document.body.scrollLeft/scrollTop`\n`document.documentElement.scrollLeft/scrollTop`\n\n\n兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值。\n\n\n### 查看视口的尺寸：\n\n\n`window.innerWidth/innerHeight`  \nIE8及IE8以下不兼容\n\n`document.documentElement.clientWidth/clientHeight`\n\n标准模式下，任意浏览器都兼容\n\n`document.body.clientWidth/clientHeight`\n\n适用于怪异模式下的浏览器\n\n\n### 浏览器的渲染模式：\n1. 标准模式：\n2. 怪异模式（混扎模式）：可支持老版本，启动方法（删除<!DOCTYPE html>）\n\n\n#### 查看元素的几何尺寸:\n\n`domEle.getBoundingClientRect();`\n\n兼容性很好。\n\n该方法返回一个对象，对象里面有left,top,right,bottom等属性。left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标\nheight和width属性。\n老版本IE并未实现。\n\n返回的结果并不是“实时的”。\n\n#### 查看元素的尺寸：\n\n`dom.offsetWidth，dom.offsetHeight`\n\n\n\n#### 查看元素的位置：\n\n`dom.offsetLeft, dom.offsetTop`\n\n\n对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。\n\n`dom.offsetParent`\n\n返回最近的有定位的父级，如无，返回body, body.offsetParent 返回null\n\n\n\n\n### 让滚动条滚动：\n\nwindow上有三个方法\n\n- scroll(),\n- scrollTo(),\n- scrollBy();\n\n三个方法功能类似，用法都是将x,y坐标传入。即实现让滚动轮滚动到当前位置。\n\n区别：scrollBy()会在之前的数据基础之上做累加。\n\n\n### 脚本化CSS\n\n`dom.style.prop（获取的是行间样式表）`\n\n可读写行间样式，没有兼容性问题，碰到float这样的关键字属性，前面应加css\n\n`eg:float — > cssFloat`\n\n复合属性必须拆解，组合单词变成小驼峰式写法\n\n写入的值必须是字符串格式\n\n查询计算样式\n\n```javascript\nwindow.getComputedStyle(ele,null);（展示的值和默认值）\n        var div = document.getElementsByTagName('div')[0];\n        window.getComputedStyle(div,null);\n\n```\n计算样式只读\n\n返回的计算样式的值都是绝对值，没有相对单位 \n\nIE8 及 IE8以下不兼容\n可以用getComputedStyle（ele,伪元素名）来获取伪元素的属性\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        window.getComputedStyle(div, \"after\");\n```\n#### 查询样式\nele.currentStyle\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.currentStyle.width;\n```\n\n计算样式只读\n\n返回的计算样式的值不是经过转换的绝对值\n\nIE独有的属性\n\n元素名.className = \"class名\";可以改元素的class\n\n\n### 事件：\n\n#### 绑定事件：\n1. `ele.onxxx = function (event) {}`  \n兼容性很好，但是一个元素只能绑定一个处理程序\n\n基本等同于写在HTML行间上。（在行间不用写function直接写执行语句就行）\n程序this指向是dom元素本身\n\n```javascript\n\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function() {\n            \n            函数体\n            \n        }\n\n```\n2. `obj.addEventListener(事件类型, 处理函数, false);`\n\nIE9以下不兼容，可以为一个事件绑定多个处理程序。\n程序this指向是dom元素本身\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.addEventListener('click', function() {\n            console.log(\"a\");\n        }, false)\n        div.addEventListener('click', function() {\n            console.log(\"b\");\n        }, false)\n\n\n    <ul>\n        <li>a</li>\n        <li>a</li>\n        <li>a</li>\n        <li>a</li>\n    </ul>\n    <script>\n        var i = 0\n        var lis = document.getElementsByTagName('li');\n        for (i = 0; i < lis.length; i++) {\n            (function(i) {\n                lis[i].addEventListener('click', function() {\n                    console.log(i + 1);\n                }, false)\n            }(i))\n        }\n    </script>\n    //点击每个li展示其序号（注意闭包的应用）\n```\n\n3. `obj.attachEvent(‘on’ + type, fn);`\n\nIE独有，一个事件同样可以绑定多个处理程序,IE 独有\n程序this指向是window\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.attachEvent('onclick', function() {\n            console.log(\"a\");\n        })\n\n```\n\n\n### 解除事件处理函数\n**注:若绑定匿名函数，则无法解除**\n\n1. `ele.onclick = false/‘’/null;`\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function() {\n            console.log(\"a\");\n        }\n        div.onclick = null;\n```\n\n2. `ele.removeEventListener(type, fn, false)`;\n\n```javascript\n        function f() {\n            console.log(\"a\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.addEventListener('click', f, false);\n        div.removeEventListener('click', f, false);\n        \n        若为\n        var div = document.getElementsByTagName('div')[0];\n        div.addEventListener('click', function f() {\n            console.log(\"a\");\n        }, false)\n        则无法解除事件绑定\n        \n```\n\n3. `ele.detachEvent(‘on’ + type, fn);`\n\n```javascript\n        function f() {\n            console.log(\"a\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.attachEvent('onclick', f);\n        div.detachEvent('onclick', f);\n\n```\n### 事件处理模: 事件冒泡、捕获\n一个事件只能执行一个事件模型\n\n\n\n#### 事件冒泡：\n\n结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）（从子元素到父元素）\n\n\n#### 事件捕获：\n结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自顶向上）  \n##### 触发方式:\nelem.addEventListeren('type',function(){} ,true);\nIE没有捕获事件\n\n\n触发顺序，先捕获，后冒泡\n\nfocus，blur，change，submit，reset，select 等事件不冒泡\n\n\n取消冒泡和阻止默认事件：\n\n\n#### 取消冒泡：\n\nW3C标准 \n```javascript\nevent.stopPropagation();\n        document.onclick = function() {\n            console.log(\"你正在点击整个文档！\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function(e) { //可以加一个参数，代表当前事件的监听，是一个对象\n            e.stopPropagation();\n            console.log(\"点击div时不再冒泡！\");\n        }\n```\n但不支持ie9以下版本\n\nIE独有 \n```javascript\nevent.cancelBubble = true;\n\n        document.onclick = function() {\n            console.log(\"你正在点击整个文档！\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function(e) {\n            // e.stopPropagation();\n            e.cancelBubble = true;\n            console.log(\"点击div时不再冒泡！\");\n        }\n```\n#### 阻止默认事件:\n默认事件 — 表单提交，a标签跳转，右键菜单等\n\n1. `return false;`  以对象属性的方式注册的事件才生效\n```javascript\n        document.oncontextmenu = function() {\n            return false;\n        }\n        可以阻止右键出菜单\n        \n       <a href=\"javascript:void(false)\">demo</a>\n       可以阻止a标签的跳转\n```\n\n2. `event.preventDefault();` W3C标注，IE9以下不兼容\n```javascript\n        document.oncontextmenu = function(e) {\n            e.preventDefault();\n        }\n```\n3. `event.returnValue = false;` 兼容IE\n```javascript\n        document.oncontextmenu = function(e) {\n            e.returnValue = false;\n        }\n```\n#### 事件对象：\nevent || window.event 用于IE  \n事件  \n源对象:  \n`event.target`火狐独有的\n\n`event.srcElement` IE独有的\n\n这俩chrome都有\n\n#### 事件委托：\n利用事件冒泡，和事件源对象进行处理\n\n##### 优点：\n1. 性能 不需要循环所有的元素一个个绑定事件\n\n2. 灵活 当有新的子元素时不需要重新绑定事件\n```javascript\n     <ul>\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>\n        <li>5</li>\n        <li>6</li>\n        <li>7</li>\n        <li>8</li>\n        <li>9</li>\n        <li>10</li>\n    </ul>\n    <script>\n        var ul = document.getElementsByTagName('ul')[0];\n        ul.onclick = function(e) {\n            var event = e || window.event; //考虑事件的兼容性\n            var target = event.target || event.srcElement;//考虑源事件的兼容性\n            console.log(target.innerText);\n        }\n    </script>\n    可以为所有的li添加事件，将li的事件委托给ul\n```\n\n#### 鼠标事件：\n- click、鼠标点击（包括按下和弹起）\n- mousedown、鼠标按下\n- mousemove、鼠标移动\n- mouseup、鼠标弹起\n- contextmenu、鼠标右键产生菜单\n- mouseover == mouseenter、鼠标进入区域\n- mouseout == mouseleave、鼠标移出区域\n\n只有mouseup和mousedown能区分鼠标左右键\n用button来区分鼠标的按键，0/1/2\n```javascript\n        document.onmousedown = function(e) {\n            if (e.button == 2) {\n                console.log(\"按下的是鼠标右键！\");\n            } else if (e.button == 0) {\n                console.log(\"按下的是鼠标左键!\")\n            } else {\n                console.log(\"按下的是中间滚动轮!\");\n            }\n        }\n\n```\n\nDOM3标准规定:click事件只能监听左键,只能通过mousedown 和 mouseup来判断鼠标键\n\n\n#### 键盘事件\n\n- keydown 按下\n- keyup 弹开\n- keypress\n\n触发顺序：keydown > keypress > keyup\n\n##### keydown和keypress的区别\n\nkeydown 可以响应任意键盘按键(charcode始终为0),     keypress只可以响应字符类键盘按键(charcode对应ACICC码)\n\nkeypress返回ASCII码，可以转换成相应字符\n操作型按键用keydown（可以使用which属性）\n字符型按键用keypress\n\n\n#### 文本操作事件：\n\n- input,只要文本有变化就触发\n- focus,聚焦时触发\n- blur,失去焦点触发\n- change，失去焦点比较前后两个状态，如果内容改变则触发，内容不变则不触发\n\n#### 窗体操作类(window上的事件)\n\n\n- scroll滚动条滚动\n```javascript\n        window.onscroll = function() {\n           console.log(this.pageXOffset + \" \" + this.pageYOffset);\n        }\n```\nload,整个页面加载完才能触发\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/documen里面的方法.md","raw":"---\ntitle: document常用方法\ndate: 2021-12-31 16:21:22\ndescription: document的介绍，以及常见的dom操作（赠、删、改、查）\ncategories: \n    - 前端学习笔记\n    - js\ntags: \n    - DOM\n    - js\n    - 前端\n---\n\n# document里面的方法\n----------\ndocument：整个页面\n\nquerySelector('选择器')：可以按CSS的选择器选择方式（选出一个）\n\n```html\n    <div>\n        <strong></strong>\n    </div>\n    <div>\n        <span>\n             <strong class=\"demo\">123</strong>\n        </span>\n    </div>\n    <script>\n        var strong = document.querySelector('div > span strong')\n    </script>\n    可以选择出有123的strong标签         \n```\n\nquerySelectorAll('选择器'):可以按CSS的选择器选择方式（选出一组）\n\n```html\n    <div>\n        <strong></strong>\n    </div>\n    <div>\n        <span>\n             <strong class=\"demo\">123</strong>\n        </span>\n    </div>\n    <script>\n        var strong = document.querySelectorAll('div > span strong')\n    </script>\n    可以选择出有123的一组strong标签   \n```\n\nquerySeclect 和querySelectAll是静态的，选择后不再更新（选出来的是副本）\n\n\n### 遍历节点树：（包含所有节点）\n- parentNode:父节点\n- childNodes：子节点集合\n- firstChild：第一个子节点\n- lastChild：最后一个子节点\n- nextSibling：后一个兄弟节点\n- previousSibling：前一个兄弟节点\n\n### 遍历元素节点树：（只有元素节点）\n- parentElement：返回当前元素的父元素节点\n- children：只返回当前元素的元素子节点\n- node.childElementCount === node.children.length：当前元素节点的子元素个数\n- firstElementChild：第一个元素节点\n- lastElementChild：最后一个元素节点\n- nextElementSibling：后一个兄弟元素节点\n- previousElementSibling：前一个兄弟元素节点\n\n### 节点的四个属性\n- nodeName：元素的标签名，以大些形式表示，只读\n- nodeValue：Text节点或Comment节点的文本内容，可读写\n- nodeType：该节点的类型，只读\n- attributes：Element节点的属性集合\n\n### 注意：\n1. getElementById方法定义在Document.prototype上，即Element节点上不能使用。\n\n2. getElementsByName方法定义在HTMLDocument.prototype上，即非html中的document以外不能使用(xml document,Element)\n\n3. getElementsByTagName方法定义在Document.prototype 和 Element.prototype上\n\n4. HTMLDocument.prototype定义了一些常用的属性，body,head,分别指代HTML文档中的<body><head>标签。\n\n5. Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，他总是指代<html>元素\n\n6. getElementsByClassName、querySelectorAll、querySelector在Document,Element类中均有定义\n\n### dom的基本操作\n#### 增\n```javascript\ndocument.createElement();增加元素节点\nvar div = document.createElement('div');\n\ndocument.createTextNode();增加文本节点\nvar text = document.createTextNode(\"hello\");\n\n\ndocument.createComment();\nvar comment = document.createComment(\"This is a Comment\");\n\ndocument.createDocumentFragment();文档碎片节点\n\n```\n#### 插\n\n```javascript\nPARENTNODE.appendChild();插入节点（剪切操作）\n        var div = document.getElementsByTagName('div')[0];\n        var text = document.createTextNode(\"这里在div中插入一个文本节点\");\n        var span = document.createElement('span');\n        div.appendChild(text);\n        div.appendChild(span);\n\n\nPARENTNODE.insertBefore(a, b);在父集中将a插在b前面\n        var div = document.getElementsByTagName('div')[0];\n        var strong = document.getElementsByTagName('strong')[0];\n        var span = document.createElement('span');\n        div.insertBefore(span, strong);\n        \n        var div = document.getElementsByTagName('div')[0];\n        var strong = document.getElementsByTagName('strong')[0];\n        var text = document.createTextNode(\"在strong前面插入一个文本节点\");\n        div.insertBefore(text, strong);\n```\n\n#### 删\n```javascript\nparent.removeChild();父节点调用方法删除子节点（剪切）\n        var div = document.getElementsByTagName('div')[0];\n        var strong = document.getElementsByTagName('strong')[0];\n        div.removeChild(strong);\n        删除div下面的strong标签\nparent.remove();子节点自己调用方法删除自己（销毁）\n        var strong = document.getElementsByTagName('strong')[0];\n        strong.remove()\n        删除div下面的strong标签\n\n```\n\n#### 替换\n```javascript\nparent.replaceChild(new, origin);（剪切）\n         var div = document.getElementsByTagName('div')[0];\n         var strong = document.getElementsByTagName('strong')[0];\n         var text = document.createTextNode(\"将strong标签替换成为一个文本\");\n         div.replaceChild(text, strong);\nElement节点的一些属性\n\ninnerHTML（取写HTML）\n        var div = document.getElementsByTagName('div')[0];\n        div.innerHTML;\n        将div里面的东西查找出来\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.innerHTML = \"将div原来的东西覆盖掉\";\n        将div里面的东西替换\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.innerHTML = \"将div原来的东西覆盖掉\";\n        div.innerHTML += \"再加一点东西！\";\n        在原来的div后面再添加一点东西\ninnerText（取写文本，老版本火狐不支持（提供TextContent一样））\n        var div = document.getElementsByTagName('div')[0];\n        div.innerText;\n        将div里面的文本取出来\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.innerText = \"123\";\n        将div里面的所有东西替换成123\n```\n\n### Element节点的一些方法\n\n#### ele.setAttribute() ;设置属性\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.setAttribute('class', 'class1');\n        给div添加名为class1 的 class属性\n        \n        var div = document.getElementsByTagName('div')[0];\n        div.setAttribute('id', 'only');\n        给div添加一个名为only的 id属性\n```\n\n#### ele.getAttribute() ;获取属性\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.getAttribute('id');\n        获取div的id\n```\ndocument.getElementsByTagName(*);可以把所有标签取出来\n\n## 日期对象\n日期对象是系统提供好的。\n\n`var date = new Date();`\n\nsetInterval(函数，时间间隔);循环执行（每隔一段时间执行函数），都会返回一个数字唯一标识\n```javascript\n        setInterval(function() {\n            console.log(\"aaa\");\n        }, 1000)\n        每隔1000毫秒执行一次function\n```\n\nsetTimeout(函数，时间间隔);推迟一段时间在执行，仅执行一次\n```javascript\n        setTimeout(function() {\n            console.log(\"推迟1000毫秒执行，仅执行一次。\");\n        }, 1000)\n```\n```javascript\nclearInterval(数字);停止执行\n        var timer = setInterval(function() {\n            console.log(\"aaa\");\n        }, 1000)\n        clearInterval(timer);\n        可以停止setInterval的执行\n\n```\n\n```javascript\nclearTimeout();\n        var timer = setTimeout(function() {\n            console.log(\"隔1000毫秒执行，仅执行一次。\");\n        }, 1000)\n        clearTimeout(timer);\n        清除setTimeout的执行\n```\n全局对象window上的方法，内部函数this指向window\n\n#### 注意 ：\nsetInterval(“字符串”,1000);会每隔一段时间执行字符串里面的代码（当成js代码）\n\n#### 查看滚动条的滚动距离：\n\nwindow.pageXOffset/pageYOffset  \nIE8及IE8以下不兼容\n\n`document.body.scrollLeft/scrollTop`\n`document.documentElement.scrollLeft/scrollTop`\n\n\n兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值。\n\n\n### 查看视口的尺寸：\n\n\n`window.innerWidth/innerHeight`  \nIE8及IE8以下不兼容\n\n`document.documentElement.clientWidth/clientHeight`\n\n标准模式下，任意浏览器都兼容\n\n`document.body.clientWidth/clientHeight`\n\n适用于怪异模式下的浏览器\n\n\n### 浏览器的渲染模式：\n1. 标准模式：\n2. 怪异模式（混扎模式）：可支持老版本，启动方法（删除<!DOCTYPE html>）\n\n\n#### 查看元素的几何尺寸:\n\n`domEle.getBoundingClientRect();`\n\n兼容性很好。\n\n该方法返回一个对象，对象里面有left,top,right,bottom等属性。left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标\nheight和width属性。\n老版本IE并未实现。\n\n返回的结果并不是“实时的”。\n\n#### 查看元素的尺寸：\n\n`dom.offsetWidth，dom.offsetHeight`\n\n\n\n#### 查看元素的位置：\n\n`dom.offsetLeft, dom.offsetTop`\n\n\n对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。\n\n`dom.offsetParent`\n\n返回最近的有定位的父级，如无，返回body, body.offsetParent 返回null\n\n\n\n\n### 让滚动条滚动：\n\nwindow上有三个方法\n\n- scroll(),\n- scrollTo(),\n- scrollBy();\n\n三个方法功能类似，用法都是将x,y坐标传入。即实现让滚动轮滚动到当前位置。\n\n区别：scrollBy()会在之前的数据基础之上做累加。\n\n\n### 脚本化CSS\n\n`dom.style.prop（获取的是行间样式表）`\n\n可读写行间样式，没有兼容性问题，碰到float这样的关键字属性，前面应加css\n\n`eg:float — > cssFloat`\n\n复合属性必须拆解，组合单词变成小驼峰式写法\n\n写入的值必须是字符串格式\n\n查询计算样式\n\n```javascript\nwindow.getComputedStyle(ele,null);（展示的值和默认值）\n        var div = document.getElementsByTagName('div')[0];\n        window.getComputedStyle(div,null);\n\n```\n计算样式只读\n\n返回的计算样式的值都是绝对值，没有相对单位 \n\nIE8 及 IE8以下不兼容\n可以用getComputedStyle（ele,伪元素名）来获取伪元素的属性\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        window.getComputedStyle(div, \"after\");\n```\n#### 查询样式\nele.currentStyle\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.currentStyle.width;\n```\n\n计算样式只读\n\n返回的计算样式的值不是经过转换的绝对值\n\nIE独有的属性\n\n元素名.className = \"class名\";可以改元素的class\n\n\n### 事件：\n\n#### 绑定事件：\n1. `ele.onxxx = function (event) {}`  \n兼容性很好，但是一个元素只能绑定一个处理程序\n\n基本等同于写在HTML行间上。（在行间不用写function直接写执行语句就行）\n程序this指向是dom元素本身\n\n```javascript\n\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function() {\n            \n            函数体\n            \n        }\n\n```\n2. `obj.addEventListener(事件类型, 处理函数, false);`\n\nIE9以下不兼容，可以为一个事件绑定多个处理程序。\n程序this指向是dom元素本身\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.addEventListener('click', function() {\n            console.log(\"a\");\n        }, false)\n        div.addEventListener('click', function() {\n            console.log(\"b\");\n        }, false)\n\n\n    <ul>\n        <li>a</li>\n        <li>a</li>\n        <li>a</li>\n        <li>a</li>\n    </ul>\n    <script>\n        var i = 0\n        var lis = document.getElementsByTagName('li');\n        for (i = 0; i < lis.length; i++) {\n            (function(i) {\n                lis[i].addEventListener('click', function() {\n                    console.log(i + 1);\n                }, false)\n            }(i))\n        }\n    </script>\n    //点击每个li展示其序号（注意闭包的应用）\n```\n\n3. `obj.attachEvent(‘on’ + type, fn);`\n\nIE独有，一个事件同样可以绑定多个处理程序,IE 独有\n程序this指向是window\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.attachEvent('onclick', function() {\n            console.log(\"a\");\n        })\n\n```\n\n\n### 解除事件处理函数\n**注:若绑定匿名函数，则无法解除**\n\n1. `ele.onclick = false/‘’/null;`\n```javascript\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function() {\n            console.log(\"a\");\n        }\n        div.onclick = null;\n```\n\n2. `ele.removeEventListener(type, fn, false)`;\n\n```javascript\n        function f() {\n            console.log(\"a\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.addEventListener('click', f, false);\n        div.removeEventListener('click', f, false);\n        \n        若为\n        var div = document.getElementsByTagName('div')[0];\n        div.addEventListener('click', function f() {\n            console.log(\"a\");\n        }, false)\n        则无法解除事件绑定\n        \n```\n\n3. `ele.detachEvent(‘on’ + type, fn);`\n\n```javascript\n        function f() {\n            console.log(\"a\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.attachEvent('onclick', f);\n        div.detachEvent('onclick', f);\n\n```\n### 事件处理模: 事件冒泡、捕获\n一个事件只能执行一个事件模型\n\n\n\n#### 事件冒泡：\n\n结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）（从子元素到父元素）\n\n\n#### 事件捕获：\n结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自顶向上）  \n##### 触发方式:\nelem.addEventListeren('type',function(){} ,true);\nIE没有捕获事件\n\n\n触发顺序，先捕获，后冒泡\n\nfocus，blur，change，submit，reset，select 等事件不冒泡\n\n\n取消冒泡和阻止默认事件：\n\n\n#### 取消冒泡：\n\nW3C标准 \n```javascript\nevent.stopPropagation();\n        document.onclick = function() {\n            console.log(\"你正在点击整个文档！\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function(e) { //可以加一个参数，代表当前事件的监听，是一个对象\n            e.stopPropagation();\n            console.log(\"点击div时不再冒泡！\");\n        }\n```\n但不支持ie9以下版本\n\nIE独有 \n```javascript\nevent.cancelBubble = true;\n\n        document.onclick = function() {\n            console.log(\"你正在点击整个文档！\");\n        }\n        var div = document.getElementsByTagName('div')[0];\n        div.onclick = function(e) {\n            // e.stopPropagation();\n            e.cancelBubble = true;\n            console.log(\"点击div时不再冒泡！\");\n        }\n```\n#### 阻止默认事件:\n默认事件 — 表单提交，a标签跳转，右键菜单等\n\n1. `return false;`  以对象属性的方式注册的事件才生效\n```javascript\n        document.oncontextmenu = function() {\n            return false;\n        }\n        可以阻止右键出菜单\n        \n       <a href=\"javascript:void(false)\">demo</a>\n       可以阻止a标签的跳转\n```\n\n2. `event.preventDefault();` W3C标注，IE9以下不兼容\n```javascript\n        document.oncontextmenu = function(e) {\n            e.preventDefault();\n        }\n```\n3. `event.returnValue = false;` 兼容IE\n```javascript\n        document.oncontextmenu = function(e) {\n            e.returnValue = false;\n        }\n```\n#### 事件对象：\nevent || window.event 用于IE  \n事件  \n源对象:  \n`event.target`火狐独有的\n\n`event.srcElement` IE独有的\n\n这俩chrome都有\n\n#### 事件委托：\n利用事件冒泡，和事件源对象进行处理\n\n##### 优点：\n1. 性能 不需要循环所有的元素一个个绑定事件\n\n2. 灵活 当有新的子元素时不需要重新绑定事件\n```javascript\n     <ul>\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>\n        <li>5</li>\n        <li>6</li>\n        <li>7</li>\n        <li>8</li>\n        <li>9</li>\n        <li>10</li>\n    </ul>\n    <script>\n        var ul = document.getElementsByTagName('ul')[0];\n        ul.onclick = function(e) {\n            var event = e || window.event; //考虑事件的兼容性\n            var target = event.target || event.srcElement;//考虑源事件的兼容性\n            console.log(target.innerText);\n        }\n    </script>\n    可以为所有的li添加事件，将li的事件委托给ul\n```\n\n#### 鼠标事件：\n- click、鼠标点击（包括按下和弹起）\n- mousedown、鼠标按下\n- mousemove、鼠标移动\n- mouseup、鼠标弹起\n- contextmenu、鼠标右键产生菜单\n- mouseover == mouseenter、鼠标进入区域\n- mouseout == mouseleave、鼠标移出区域\n\n只有mouseup和mousedown能区分鼠标左右键\n用button来区分鼠标的按键，0/1/2\n```javascript\n        document.onmousedown = function(e) {\n            if (e.button == 2) {\n                console.log(\"按下的是鼠标右键！\");\n            } else if (e.button == 0) {\n                console.log(\"按下的是鼠标左键!\")\n            } else {\n                console.log(\"按下的是中间滚动轮!\");\n            }\n        }\n\n```\n\nDOM3标准规定:click事件只能监听左键,只能通过mousedown 和 mouseup来判断鼠标键\n\n\n#### 键盘事件\n\n- keydown 按下\n- keyup 弹开\n- keypress\n\n触发顺序：keydown > keypress > keyup\n\n##### keydown和keypress的区别\n\nkeydown 可以响应任意键盘按键(charcode始终为0),     keypress只可以响应字符类键盘按键(charcode对应ACICC码)\n\nkeypress返回ASCII码，可以转换成相应字符\n操作型按键用keydown（可以使用which属性）\n字符型按键用keypress\n\n\n#### 文本操作事件：\n\n- input,只要文本有变化就触发\n- focus,聚焦时触发\n- blur,失去焦点触发\n- change，失去焦点比较前后两个状态，如果内容改变则触发，内容不变则不触发\n\n#### 窗体操作类(window上的事件)\n\n\n- scroll滚动条滚动\n```javascript\n        window.onscroll = function() {\n           console.log(this.pageXOffset + \" \" + this.pageYOffset);\n        }\n```\nload,整个页面加载完才能触发\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"documen里面的方法","published":1,"updated":"2022-01-01T06:30:02.578Z","_id":"ckxu6dni6000610axch5o3217","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"document里面的方法\"><a href=\"#document里面的方法\" class=\"headerlink\" title=\"document里面的方法\"></a>document里面的方法</h1><hr>\n<p>document：整个页面</p>\n<p>querySelector(‘选择器’)：可以按CSS的选择器选择方式（选出一个）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div &gt; span strong&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">可以选择出有123的strong标签         </span><br></pre></td></tr></table></figure>\n\n<p>querySelectorAll(‘选择器’):可以按CSS的选择器选择方式（选出一组）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;div &gt; span strong&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">可以选择出有123的一组strong标签   </span><br></pre></td></tr></table></figure>\n\n<p>querySeclect 和querySelectAll是静态的，选择后不再更新（选出来的是副本）</p>\n<h3 id=\"遍历节点树：（包含所有节点）\"><a href=\"#遍历节点树：（包含所有节点）\" class=\"headerlink\" title=\"遍历节点树：（包含所有节点）\"></a>遍历节点树：（包含所有节点）</h3><ul>\n<li>parentNode:父节点</li>\n<li>childNodes：子节点集合</li>\n<li>firstChild：第一个子节点</li>\n<li>lastChild：最后一个子节点</li>\n<li>nextSibling：后一个兄弟节点</li>\n<li>previousSibling：前一个兄弟节点</li>\n</ul>\n<h3 id=\"遍历元素节点树：（只有元素节点）\"><a href=\"#遍历元素节点树：（只有元素节点）\" class=\"headerlink\" title=\"遍历元素节点树：（只有元素节点）\"></a>遍历元素节点树：（只有元素节点）</h3><ul>\n<li>parentElement：返回当前元素的父元素节点</li>\n<li>children：只返回当前元素的元素子节点</li>\n<li>node.childElementCount === node.children.length：当前元素节点的子元素个数</li>\n<li>firstElementChild：第一个元素节点</li>\n<li>lastElementChild：最后一个元素节点</li>\n<li>nextElementSibling：后一个兄弟元素节点</li>\n<li>previousElementSibling：前一个兄弟元素节点</li>\n</ul>\n<h3 id=\"节点的四个属性\"><a href=\"#节点的四个属性\" class=\"headerlink\" title=\"节点的四个属性\"></a>节点的四个属性</h3><ul>\n<li>nodeName：元素的标签名，以大些形式表示，只读</li>\n<li>nodeValue：Text节点或Comment节点的文本内容，可读写</li>\n<li>nodeType：该节点的类型，只读</li>\n<li>attributes：Element节点的属性集合</li>\n</ul>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ol>\n<li><p>getElementById方法定义在Document.prototype上，即Element节点上不能使用。</p>\n</li>\n<li><p>getElementsByName方法定义在HTMLDocument.prototype上，即非html中的document以外不能使用(xml document,Element)</p>\n</li>\n<li><p>getElementsByTagName方法定义在Document.prototype 和 Element.prototype上</p>\n</li>\n<li><p>HTMLDocument.prototype定义了一些常用的属性，body,head,分别指代HTML文档中的<body><head>标签。</p>\n</li>\n<li><p>Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，他总是指代<html>元素</p>\n</li>\n<li><p>getElementsByClassName、querySelectorAll、querySelector在Document,Element类中均有定义</p>\n</li>\n</ol>\n<h3 id=\"dom的基本操作\"><a href=\"#dom的基本操作\" class=\"headerlink\" title=\"dom的基本操作\"></a>dom的基本操作</h3><h4 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.createElement();增加元素节点</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.createTextNode();增加文本节点</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.createComment();</span><br><span class=\"line\"><span class=\"keyword\">var</span> comment = <span class=\"built_in\">document</span>.createComment(<span class=\"string\">&quot;This is a Comment&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.createDocumentFragment();文档碎片节点</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"插\"><a href=\"#插\" class=\"headerlink\" title=\"插\"></a>插</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PARENTNODE.appendChild();插入节点（剪切操作）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;这里在div中插入一个文本节点&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>);</span><br><span class=\"line\">        div.appendChild(text);</span><br><span class=\"line\">        div.appendChild(span);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PARENTNODE.insertBefore(a, b);在父集中将a插在b前面</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>);</span><br><span class=\"line\">        div.insertBefore(span, strong);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;在strong前面插入一个文本节点&quot;</span>);</span><br><span class=\"line\">        div.insertBefore(text, strong);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.removeChild();父节点调用方法删除子节点（剪切）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.removeChild(strong);</span><br><span class=\"line\">        删除div下面的strong标签</span><br><span class=\"line\">parent.remove();子节点自己调用方法删除自己（销毁）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        strong.remove()</span><br><span class=\"line\">        删除div下面的strong标签</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.replaceChild(<span class=\"keyword\">new</span>, origin);（剪切）</span><br><span class=\"line\">         <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;将strong标签替换成为一个文本&quot;</span>);</span><br><span class=\"line\">         div.replaceChild(text, strong);</span><br><span class=\"line\">Element节点的一些属性</span><br><span class=\"line\"></span><br><span class=\"line\">innerHTML（取写HTML）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerHTML;</span><br><span class=\"line\">        将div里面的东西查找出来</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerHTML = <span class=\"string\">&quot;将div原来的东西覆盖掉&quot;</span>;</span><br><span class=\"line\">        将div里面的东西替换</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerHTML = <span class=\"string\">&quot;将div原来的东西覆盖掉&quot;</span>;</span><br><span class=\"line\">        div.innerHTML += <span class=\"string\">&quot;再加一点东西！&quot;</span>;</span><br><span class=\"line\">        在原来的div后面再添加一点东西</span><br><span class=\"line\">innerText（取写文本，老版本火狐不支持（提供TextContent一样））</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerText;</span><br><span class=\"line\">        将div里面的文本取出来</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerText = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">        将div里面的所有东西替换成<span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Element节点的一些方法\"><a href=\"#Element节点的一些方法\" class=\"headerlink\" title=\"Element节点的一些方法\"></a>Element节点的一些方法</h3><h4 id=\"ele-setAttribute-设置属性\"><a href=\"#ele-setAttribute-设置属性\" class=\"headerlink\" title=\"ele.setAttribute() ;设置属性\"></a>ele.setAttribute() ;设置属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.setAttribute(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;class1&#x27;</span>);</span><br><span class=\"line\">给div添加名为class1 的 <span class=\"class\"><span class=\"keyword\">class</span>属性</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">var</span> <span class=\"title\">div</span> </span>= <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.setAttribute(<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;only&#x27;</span>);</span><br><span class=\"line\">给div添加一个名为only的 id属性</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ele-getAttribute-获取属性\"><a href=\"#ele-getAttribute-获取属性\" class=\"headerlink\" title=\"ele.getAttribute() ;获取属性\"></a>ele.getAttribute() ;获取属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.getAttribute(<span class=\"string\">&#x27;id&#x27;</span>);</span><br><span class=\"line\">获取div的id</span><br></pre></td></tr></table></figure>\n<p>document.getElementsByTagName(*);可以把所有标签取出来</p>\n<h2 id=\"日期对象\"><a href=\"#日期对象\" class=\"headerlink\" title=\"日期对象\"></a>日期对象</h2><p>日期对象是系统提供好的。</p>\n<p><code>var date = new Date();</code></p>\n<p>setInterval(函数，时间间隔);循环执行（每隔一段时间执行函数），都会返回一个数字唯一标识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">每隔<span class=\"number\">1000</span>毫秒执行一次<span class=\"function\"><span class=\"keyword\">function</span></span></span><br></pre></td></tr></table></figure>\n\n<p>setTimeout(函数，时间间隔);推迟一段时间在执行，仅执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;推迟1000毫秒执行，仅执行一次。&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">clearInterval</span>(数字);停止执行</span><br><span class=\"line\">        <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">        可以停止<span class=\"built_in\">setInterval</span>的执行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">clearTimeout</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;隔1000毫秒执行，仅执行一次。&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        清除<span class=\"built_in\">setTimeout</span>的执行</span><br></pre></td></tr></table></figure>\n<p>全局对象window上的方法，内部函数this指向window</p>\n<h4 id=\"注意-：\"><a href=\"#注意-：\" class=\"headerlink\" title=\"注意 ：\"></a>注意 ：</h4><p>setInterval(“字符串”,1000);会每隔一段时间执行字符串里面的代码（当成js代码）</p>\n<h4 id=\"查看滚动条的滚动距离：\"><a href=\"#查看滚动条的滚动距离：\" class=\"headerlink\" title=\"查看滚动条的滚动距离：\"></a>查看滚动条的滚动距离：</h4><p>window.pageXOffset/pageYOffset<br>IE8及IE8以下不兼容</p>\n<p><code>document.body.scrollLeft/scrollTop</code><br><code>document.documentElement.scrollLeft/scrollTop</code></p>\n<p>兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值。</p>\n<h3 id=\"查看视口的尺寸：\"><a href=\"#查看视口的尺寸：\" class=\"headerlink\" title=\"查看视口的尺寸：\"></a>查看视口的尺寸：</h3><p><code>window.innerWidth/innerHeight</code><br>IE8及IE8以下不兼容</p>\n<p><code>document.documentElement.clientWidth/clientHeight</code></p>\n<p>标准模式下，任意浏览器都兼容</p>\n<p><code>document.body.clientWidth/clientHeight</code></p>\n<p>适用于怪异模式下的浏览器</p>\n<h3 id=\"浏览器的渲染模式：\"><a href=\"#浏览器的渲染模式：\" class=\"headerlink\" title=\"浏览器的渲染模式：\"></a>浏览器的渲染模式：</h3><ol>\n<li>标准模式：</li>\n<li>怪异模式（混扎模式）：可支持老版本，启动方法（删除<!DOCTYPE html>）</li>\n</ol>\n<h4 id=\"查看元素的几何尺寸\"><a href=\"#查看元素的几何尺寸\" class=\"headerlink\" title=\"查看元素的几何尺寸:\"></a>查看元素的几何尺寸:</h4><p><code>domEle.getBoundingClientRect();</code></p>\n<p>兼容性很好。</p>\n<p>该方法返回一个对象，对象里面有left,top,right,bottom等属性。left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标<br>height和width属性。<br>老版本IE并未实现。</p>\n<p>返回的结果并不是“实时的”。</p>\n<h4 id=\"查看元素的尺寸：\"><a href=\"#查看元素的尺寸：\" class=\"headerlink\" title=\"查看元素的尺寸：\"></a>查看元素的尺寸：</h4><p><code>dom.offsetWidth，dom.offsetHeight</code></p>\n<h4 id=\"查看元素的位置：\"><a href=\"#查看元素的位置：\" class=\"headerlink\" title=\"查看元素的位置：\"></a>查看元素的位置：</h4><p><code>dom.offsetLeft, dom.offsetTop</code></p>\n<p>对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。</p>\n<p><code>dom.offsetParent</code></p>\n<p>返回最近的有定位的父级，如无，返回body, body.offsetParent 返回null</p>\n<h3 id=\"让滚动条滚动：\"><a href=\"#让滚动条滚动：\" class=\"headerlink\" title=\"让滚动条滚动：\"></a>让滚动条滚动：</h3><p>window上有三个方法</p>\n<ul>\n<li>scroll(),</li>\n<li>scrollTo(),</li>\n<li>scrollBy();</li>\n</ul>\n<p>三个方法功能类似，用法都是将x,y坐标传入。即实现让滚动轮滚动到当前位置。</p>\n<p>区别：scrollBy()会在之前的数据基础之上做累加。</p>\n<h3 id=\"脚本化CSS\"><a href=\"#脚本化CSS\" class=\"headerlink\" title=\"脚本化CSS\"></a>脚本化CSS</h3><p><code>dom.style.prop（获取的是行间样式表）</code></p>\n<p>可读写行间样式，没有兼容性问题，碰到float这样的关键字属性，前面应加css</p>\n<p><code>eg:float — &gt; cssFloat</code></p>\n<p>复合属性必须拆解，组合单词变成小驼峰式写法</p>\n<p>写入的值必须是字符串格式</p>\n<p>查询计算样式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(ele,<span class=\"literal\">null</span>);（展示的值和默认值）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>计算样式只读</p>\n<p>返回的计算样式的值都是绝对值，没有相对单位 </p>\n<p>IE8 及 IE8以下不兼容<br>可以用getComputedStyle（ele,伪元素名）来获取伪元素的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.getComputedStyle(div, <span class=\"string\">&quot;after&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"查询样式\"><a href=\"#查询样式\" class=\"headerlink\" title=\"查询样式\"></a>查询样式</h4><p>ele.currentStyle</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.currentStyle.width;</span><br></pre></td></tr></table></figure>\n\n<p>计算样式只读</p>\n<p>返回的计算样式的值不是经过转换的绝对值</p>\n<p>IE独有的属性</p>\n<p>元素名.className = “class名”;可以改元素的class</p>\n<h3 id=\"事件：\"><a href=\"#事件：\" class=\"headerlink\" title=\"事件：\"></a>事件：</h3><h4 id=\"绑定事件：\"><a href=\"#绑定事件：\" class=\"headerlink\" title=\"绑定事件：\"></a>绑定事件：</h4><ol>\n<li><code>ele.onxxx = function (event) &#123;&#125;</code><br>兼容性很好，但是一个元素只能绑定一个处理程序</li>\n</ol>\n<p>基本等同于写在HTML行间上。（在行间不用写function直接写执行语句就行）<br>程序this指向是dom元素本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            函数体</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>obj.addEventListener(事件类型, 处理函数, false);</code></li>\n</ol>\n<p>IE9以下不兼容，可以为一个事件绑定多个处理程序。<br>程序this指向是dom元素本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lis.length; i++) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                lis[i].addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"built_in\">console</span>.log(i + <span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;, <span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;(i))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//点击每个li展示其序号（注意闭包的应用）</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>obj.attachEvent(‘on’ + type, fn);</code></li>\n</ol>\n<p>IE独有，一个事件同样可以绑定多个处理程序,IE 独有<br>程序this指向是window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"解除事件处理函数\"><a href=\"#解除事件处理函数\" class=\"headerlink\" title=\"解除事件处理函数\"></a>解除事件处理函数</h3><p><strong>注:若绑定匿名函数，则无法解除</strong></p>\n<ol>\n<li><p><code>ele.onclick = false/‘’/null;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        div.onclick = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>ele.removeEventListener(type, fn, false)</code>;</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, f, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        div.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>, f, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">若为</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\">则无法解除事件绑定</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>ele.detachEvent(‘on’ + type, fn);</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>, f);</span><br><span class=\"line\">        div.detachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>, f);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"事件处理模-事件冒泡、捕获\"><a href=\"#事件处理模-事件冒泡、捕获\" class=\"headerlink\" title=\"事件处理模: 事件冒泡、捕获\"></a>事件处理模: 事件冒泡、捕获</h3><p>一个事件只能执行一个事件模型</p>\n<h4 id=\"事件冒泡：\"><a href=\"#事件冒泡：\" class=\"headerlink\" title=\"事件冒泡：\"></a>事件冒泡：</h4><p>结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）（从子元素到父元素）</p>\n<h4 id=\"事件捕获：\"><a href=\"#事件捕获：\" class=\"headerlink\" title=\"事件捕获：\"></a>事件捕获：</h4><p>结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自顶向上）  </p>\n<h5 id=\"触发方式\"><a href=\"#触发方式\" class=\"headerlink\" title=\"触发方式:\"></a>触发方式:</h5><p>elem.addEventListeren(‘type’,function(){} ,true);<br>IE没有捕获事件</p>\n<p>触发顺序，先捕获，后冒泡</p>\n<p>focus，blur，change，submit，reset，select 等事件不冒泡</p>\n<p>取消冒泡和阻止默认事件：</p>\n<h4 id=\"取消冒泡：\"><a href=\"#取消冒泡：\" class=\"headerlink\" title=\"取消冒泡：\"></a>取消冒泡：</h4><p>W3C标准 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.stopPropagation();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你正在点击整个文档！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"comment\">//可以加一个参数，代表当前事件的监听，是一个对象</span></span><br><span class=\"line\">            e.stopPropagation();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;点击div时不再冒泡！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>但不支持ie9以下版本</p>\n<p>IE独有 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你正在点击整个文档！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// e.stopPropagation();</span></span><br><span class=\"line\">            e.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;点击div时不再冒泡！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"阻止默认事件\"><a href=\"#阻止默认事件\" class=\"headerlink\" title=\"阻止默认事件:\"></a>阻止默认事件:</h4><p>默认事件 — 表单提交，a标签跳转，右键菜单等</p>\n<ol>\n<li><p><code>return false;</code>  以对象属性的方式注册的事件才生效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> 可以阻止右键出菜单</span><br><span class=\"line\"> </span><br><span class=\"line\">       &lt;a href=<span class=\"string\">&quot;javascript:void(false)&quot;</span>&gt;demo&lt;/a&gt;</span><br><span class=\"line\">可以阻止a标签的跳转</span><br></pre></td></tr></table></figure></li>\n<li><p><code>event.preventDefault();</code> W3C标注，IE9以下不兼容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>event.returnValue = false;</code> 兼容IE</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件对象：\"><a href=\"#事件对象：\" class=\"headerlink\" title=\"事件对象：\"></a>事件对象：</h4><p>event || window.event 用于IE<br>事件<br>源对象:<br><code>event.target</code>火狐独有的</p>\n</li>\n</ol>\n<p><code>event.srcElement</code> IE独有的</p>\n<p>这俩chrome都有</p>\n<h4 id=\"事件委托：\"><a href=\"#事件委托：\" class=\"headerlink\" title=\"事件委托：\"></a>事件委托：</h4><p>利用事件冒泡，和事件源对象进行处理</p>\n<h5 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h5><ol>\n<li><p>性能 不需要循环所有的元素一个个绑定事件</p>\n</li>\n<li><p>灵活 当有新的子元素时不需要重新绑定事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     &lt;ul&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ul&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        ul.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event; <span class=\"comment\">//考虑事件的兼容性</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> target = event.target || event.srcElement;<span class=\"comment\">//考虑源事件的兼容性</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(target.innerText);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">可以为所有的li添加事件，将li的事件委托给ul</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"鼠标事件：\"><a href=\"#鼠标事件：\" class=\"headerlink\" title=\"鼠标事件：\"></a>鼠标事件：</h4><ul>\n<li>click、鼠标点击（包括按下和弹起）</li>\n<li>mousedown、鼠标按下</li>\n<li>mousemove、鼠标移动</li>\n<li>mouseup、鼠标弹起</li>\n<li>contextmenu、鼠标右键产生菜单</li>\n<li>mouseover == mouseenter、鼠标进入区域</li>\n<li>mouseout == mouseleave、鼠标移出区域</li>\n</ul>\n<p>只有mouseup和mousedown能区分鼠标左右键<br>用button来区分鼠标的按键，0/1/2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.button == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下的是鼠标右键！&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.button == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下的是鼠标左键!&quot;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下的是中间滚动轮!&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>DOM3标准规定:click事件只能监听左键,只能通过mousedown 和 mouseup来判断鼠标键</p>\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><ul>\n<li>keydown 按下</li>\n<li>keyup 弹开</li>\n<li>keypress</li>\n</ul>\n<p>触发顺序：keydown &gt; keypress &gt; keyup</p>\n<h5 id=\"keydown和keypress的区别\"><a href=\"#keydown和keypress的区别\" class=\"headerlink\" title=\"keydown和keypress的区别\"></a>keydown和keypress的区别</h5><p>keydown 可以响应任意键盘按键(charcode始终为0),     keypress只可以响应字符类键盘按键(charcode对应ACICC码)</p>\n<p>keypress返回ASCII码，可以转换成相应字符<br>操作型按键用keydown（可以使用which属性）<br>字符型按键用keypress</p>\n<h4 id=\"文本操作事件：\"><a href=\"#文本操作事件：\" class=\"headerlink\" title=\"文本操作事件：\"></a>文本操作事件：</h4><ul>\n<li>input,只要文本有变化就触发</li>\n<li>focus,聚焦时触发</li>\n<li>blur,失去焦点触发</li>\n<li>change，失去焦点比较前后两个状态，如果内容改变则触发，内容不变则不触发</li>\n</ul>\n<h4 id=\"窗体操作类-window上的事件\"><a href=\"#窗体操作类-window上的事件\" class=\"headerlink\" title=\"窗体操作类(window上的事件)\"></a>窗体操作类(window上的事件)</h4><ul>\n<li>scroll滚动条滚动<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.pageXOffset + <span class=\"string\">&quot; &quot;</span> + <span class=\"built_in\">this</span>.pageYOffset);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\nload,整个页面加载完才能触发    </li>\n</ul>\n","site":{"data":{}},"length":11366,"excerpt":"","more":"<h1 id=\"document里面的方法\"><a href=\"#document里面的方法\" class=\"headerlink\" title=\"document里面的方法\"></a>document里面的方法</h1><hr>\n<p>document：整个页面</p>\n<p>querySelector(‘选择器’)：可以按CSS的选择器选择方式（选出一个）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div &gt; span strong&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">可以选择出有123的strong标签         </span><br></pre></td></tr></table></figure>\n\n<p>querySelectorAll(‘选择器’):可以按CSS的选择器选择方式（选出一组）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;div &gt; span strong&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">可以选择出有123的一组strong标签   </span><br></pre></td></tr></table></figure>\n\n<p>querySeclect 和querySelectAll是静态的，选择后不再更新（选出来的是副本）</p>\n<h3 id=\"遍历节点树：（包含所有节点）\"><a href=\"#遍历节点树：（包含所有节点）\" class=\"headerlink\" title=\"遍历节点树：（包含所有节点）\"></a>遍历节点树：（包含所有节点）</h3><ul>\n<li>parentNode:父节点</li>\n<li>childNodes：子节点集合</li>\n<li>firstChild：第一个子节点</li>\n<li>lastChild：最后一个子节点</li>\n<li>nextSibling：后一个兄弟节点</li>\n<li>previousSibling：前一个兄弟节点</li>\n</ul>\n<h3 id=\"遍历元素节点树：（只有元素节点）\"><a href=\"#遍历元素节点树：（只有元素节点）\" class=\"headerlink\" title=\"遍历元素节点树：（只有元素节点）\"></a>遍历元素节点树：（只有元素节点）</h3><ul>\n<li>parentElement：返回当前元素的父元素节点</li>\n<li>children：只返回当前元素的元素子节点</li>\n<li>node.childElementCount === node.children.length：当前元素节点的子元素个数</li>\n<li>firstElementChild：第一个元素节点</li>\n<li>lastElementChild：最后一个元素节点</li>\n<li>nextElementSibling：后一个兄弟元素节点</li>\n<li>previousElementSibling：前一个兄弟元素节点</li>\n</ul>\n<h3 id=\"节点的四个属性\"><a href=\"#节点的四个属性\" class=\"headerlink\" title=\"节点的四个属性\"></a>节点的四个属性</h3><ul>\n<li>nodeName：元素的标签名，以大些形式表示，只读</li>\n<li>nodeValue：Text节点或Comment节点的文本内容，可读写</li>\n<li>nodeType：该节点的类型，只读</li>\n<li>attributes：Element节点的属性集合</li>\n</ul>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ol>\n<li><p>getElementById方法定义在Document.prototype上，即Element节点上不能使用。</p>\n</li>\n<li><p>getElementsByName方法定义在HTMLDocument.prototype上，即非html中的document以外不能使用(xml document,Element)</p>\n</li>\n<li><p>getElementsByTagName方法定义在Document.prototype 和 Element.prototype上</p>\n</li>\n<li><p>HTMLDocument.prototype定义了一些常用的属性，body,head,分别指代HTML文档中的<body><head>标签。</p>\n</li>\n<li><p>Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，他总是指代<html>元素</p>\n</li>\n<li><p>getElementsByClassName、querySelectorAll、querySelector在Document,Element类中均有定义</p>\n</li>\n</ol>\n<h3 id=\"dom的基本操作\"><a href=\"#dom的基本操作\" class=\"headerlink\" title=\"dom的基本操作\"></a>dom的基本操作</h3><h4 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.createElement();增加元素节点</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.createTextNode();增加文本节点</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.createComment();</span><br><span class=\"line\"><span class=\"keyword\">var</span> comment = <span class=\"built_in\">document</span>.createComment(<span class=\"string\">&quot;This is a Comment&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.createDocumentFragment();文档碎片节点</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"插\"><a href=\"#插\" class=\"headerlink\" title=\"插\"></a>插</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PARENTNODE.appendChild();插入节点（剪切操作）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;这里在div中插入一个文本节点&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>);</span><br><span class=\"line\">        div.appendChild(text);</span><br><span class=\"line\">        div.appendChild(span);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PARENTNODE.insertBefore(a, b);在父集中将a插在b前面</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>);</span><br><span class=\"line\">        div.insertBefore(span, strong);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;在strong前面插入一个文本节点&quot;</span>);</span><br><span class=\"line\">        div.insertBefore(text, strong);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.removeChild();父节点调用方法删除子节点（剪切）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.removeChild(strong);</span><br><span class=\"line\">        删除div下面的strong标签</span><br><span class=\"line\">parent.remove();子节点自己调用方法删除自己（销毁）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        strong.remove()</span><br><span class=\"line\">        删除div下面的strong标签</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.replaceChild(<span class=\"keyword\">new</span>, origin);（剪切）</span><br><span class=\"line\">         <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;将strong标签替换成为一个文本&quot;</span>);</span><br><span class=\"line\">         div.replaceChild(text, strong);</span><br><span class=\"line\">Element节点的一些属性</span><br><span class=\"line\"></span><br><span class=\"line\">innerHTML（取写HTML）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerHTML;</span><br><span class=\"line\">        将div里面的东西查找出来</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerHTML = <span class=\"string\">&quot;将div原来的东西覆盖掉&quot;</span>;</span><br><span class=\"line\">        将div里面的东西替换</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerHTML = <span class=\"string\">&quot;将div原来的东西覆盖掉&quot;</span>;</span><br><span class=\"line\">        div.innerHTML += <span class=\"string\">&quot;再加一点东西！&quot;</span>;</span><br><span class=\"line\">        在原来的div后面再添加一点东西</span><br><span class=\"line\">innerText（取写文本，老版本火狐不支持（提供TextContent一样））</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerText;</span><br><span class=\"line\">        将div里面的文本取出来</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.innerText = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">        将div里面的所有东西替换成<span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Element节点的一些方法\"><a href=\"#Element节点的一些方法\" class=\"headerlink\" title=\"Element节点的一些方法\"></a>Element节点的一些方法</h3><h4 id=\"ele-setAttribute-设置属性\"><a href=\"#ele-setAttribute-设置属性\" class=\"headerlink\" title=\"ele.setAttribute() ;设置属性\"></a>ele.setAttribute() ;设置属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.setAttribute(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;class1&#x27;</span>);</span><br><span class=\"line\">给div添加名为class1 的 <span class=\"class\"><span class=\"keyword\">class</span>属性</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">var</span> <span class=\"title\">div</span> </span>= <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.setAttribute(<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;only&#x27;</span>);</span><br><span class=\"line\">给div添加一个名为only的 id属性</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ele-getAttribute-获取属性\"><a href=\"#ele-getAttribute-获取属性\" class=\"headerlink\" title=\"ele.getAttribute() ;获取属性\"></a>ele.getAttribute() ;获取属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.getAttribute(<span class=\"string\">&#x27;id&#x27;</span>);</span><br><span class=\"line\">获取div的id</span><br></pre></td></tr></table></figure>\n<p>document.getElementsByTagName(*);可以把所有标签取出来</p>\n<h2 id=\"日期对象\"><a href=\"#日期对象\" class=\"headerlink\" title=\"日期对象\"></a>日期对象</h2><p>日期对象是系统提供好的。</p>\n<p><code>var date = new Date();</code></p>\n<p>setInterval(函数，时间间隔);循环执行（每隔一段时间执行函数），都会返回一个数字唯一标识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">每隔<span class=\"number\">1000</span>毫秒执行一次<span class=\"function\"><span class=\"keyword\">function</span></span></span><br></pre></td></tr></table></figure>\n\n<p>setTimeout(函数，时间间隔);推迟一段时间在执行，仅执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;推迟1000毫秒执行，仅执行一次。&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">clearInterval</span>(数字);停止执行</span><br><span class=\"line\">        <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">        可以停止<span class=\"built_in\">setInterval</span>的执行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">clearTimeout</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;隔1000毫秒执行，仅执行一次。&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        清除<span class=\"built_in\">setTimeout</span>的执行</span><br></pre></td></tr></table></figure>\n<p>全局对象window上的方法，内部函数this指向window</p>\n<h4 id=\"注意-：\"><a href=\"#注意-：\" class=\"headerlink\" title=\"注意 ：\"></a>注意 ：</h4><p>setInterval(“字符串”,1000);会每隔一段时间执行字符串里面的代码（当成js代码）</p>\n<h4 id=\"查看滚动条的滚动距离：\"><a href=\"#查看滚动条的滚动距离：\" class=\"headerlink\" title=\"查看滚动条的滚动距离：\"></a>查看滚动条的滚动距离：</h4><p>window.pageXOffset/pageYOffset<br>IE8及IE8以下不兼容</p>\n<p><code>document.body.scrollLeft/scrollTop</code><br><code>document.documentElement.scrollLeft/scrollTop</code></p>\n<p>兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值。</p>\n<h3 id=\"查看视口的尺寸：\"><a href=\"#查看视口的尺寸：\" class=\"headerlink\" title=\"查看视口的尺寸：\"></a>查看视口的尺寸：</h3><p><code>window.innerWidth/innerHeight</code><br>IE8及IE8以下不兼容</p>\n<p><code>document.documentElement.clientWidth/clientHeight</code></p>\n<p>标准模式下，任意浏览器都兼容</p>\n<p><code>document.body.clientWidth/clientHeight</code></p>\n<p>适用于怪异模式下的浏览器</p>\n<h3 id=\"浏览器的渲染模式：\"><a href=\"#浏览器的渲染模式：\" class=\"headerlink\" title=\"浏览器的渲染模式：\"></a>浏览器的渲染模式：</h3><ol>\n<li>标准模式：</li>\n<li>怪异模式（混扎模式）：可支持老版本，启动方法（删除<!DOCTYPE html>）</li>\n</ol>\n<h4 id=\"查看元素的几何尺寸\"><a href=\"#查看元素的几何尺寸\" class=\"headerlink\" title=\"查看元素的几何尺寸:\"></a>查看元素的几何尺寸:</h4><p><code>domEle.getBoundingClientRect();</code></p>\n<p>兼容性很好。</p>\n<p>该方法返回一个对象，对象里面有left,top,right,bottom等属性。left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标<br>height和width属性。<br>老版本IE并未实现。</p>\n<p>返回的结果并不是“实时的”。</p>\n<h4 id=\"查看元素的尺寸：\"><a href=\"#查看元素的尺寸：\" class=\"headerlink\" title=\"查看元素的尺寸：\"></a>查看元素的尺寸：</h4><p><code>dom.offsetWidth，dom.offsetHeight</code></p>\n<h4 id=\"查看元素的位置：\"><a href=\"#查看元素的位置：\" class=\"headerlink\" title=\"查看元素的位置：\"></a>查看元素的位置：</h4><p><code>dom.offsetLeft, dom.offsetTop</code></p>\n<p>对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。</p>\n<p><code>dom.offsetParent</code></p>\n<p>返回最近的有定位的父级，如无，返回body, body.offsetParent 返回null</p>\n<h3 id=\"让滚动条滚动：\"><a href=\"#让滚动条滚动：\" class=\"headerlink\" title=\"让滚动条滚动：\"></a>让滚动条滚动：</h3><p>window上有三个方法</p>\n<ul>\n<li>scroll(),</li>\n<li>scrollTo(),</li>\n<li>scrollBy();</li>\n</ul>\n<p>三个方法功能类似，用法都是将x,y坐标传入。即实现让滚动轮滚动到当前位置。</p>\n<p>区别：scrollBy()会在之前的数据基础之上做累加。</p>\n<h3 id=\"脚本化CSS\"><a href=\"#脚本化CSS\" class=\"headerlink\" title=\"脚本化CSS\"></a>脚本化CSS</h3><p><code>dom.style.prop（获取的是行间样式表）</code></p>\n<p>可读写行间样式，没有兼容性问题，碰到float这样的关键字属性，前面应加css</p>\n<p><code>eg:float — &gt; cssFloat</code></p>\n<p>复合属性必须拆解，组合单词变成小驼峰式写法</p>\n<p>写入的值必须是字符串格式</p>\n<p>查询计算样式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(ele,<span class=\"literal\">null</span>);（展示的值和默认值）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>计算样式只读</p>\n<p>返回的计算样式的值都是绝对值，没有相对单位 </p>\n<p>IE8 及 IE8以下不兼容<br>可以用getComputedStyle（ele,伪元素名）来获取伪元素的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.getComputedStyle(div, <span class=\"string\">&quot;after&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"查询样式\"><a href=\"#查询样式\" class=\"headerlink\" title=\"查询样式\"></a>查询样式</h4><p>ele.currentStyle</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.currentStyle.width;</span><br></pre></td></tr></table></figure>\n\n<p>计算样式只读</p>\n<p>返回的计算样式的值不是经过转换的绝对值</p>\n<p>IE独有的属性</p>\n<p>元素名.className = “class名”;可以改元素的class</p>\n<h3 id=\"事件：\"><a href=\"#事件：\" class=\"headerlink\" title=\"事件：\"></a>事件：</h3><h4 id=\"绑定事件：\"><a href=\"#绑定事件：\" class=\"headerlink\" title=\"绑定事件：\"></a>绑定事件：</h4><ol>\n<li><code>ele.onxxx = function (event) &#123;&#125;</code><br>兼容性很好，但是一个元素只能绑定一个处理程序</li>\n</ol>\n<p>基本等同于写在HTML行间上。（在行间不用写function直接写执行语句就行）<br>程序this指向是dom元素本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            函数体</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>obj.addEventListener(事件类型, 处理函数, false);</code></li>\n</ol>\n<p>IE9以下不兼容，可以为一个事件绑定多个处理程序。<br>程序this指向是dom元素本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lis.length; i++) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                lis[i].addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"built_in\">console</span>.log(i + <span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;, <span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;(i))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//点击每个li展示其序号（注意闭包的应用）</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>obj.attachEvent(‘on’ + type, fn);</code></li>\n</ol>\n<p>IE独有，一个事件同样可以绑定多个处理程序,IE 独有<br>程序this指向是window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"解除事件处理函数\"><a href=\"#解除事件处理函数\" class=\"headerlink\" title=\"解除事件处理函数\"></a>解除事件处理函数</h3><p><strong>注:若绑定匿名函数，则无法解除</strong></p>\n<ol>\n<li><p><code>ele.onclick = false/‘’/null;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        div.onclick = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>ele.removeEventListener(type, fn, false)</code>;</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, f, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        div.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>, f, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">若为</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\">则无法解除事件绑定</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>ele.detachEvent(‘on’ + type, fn);</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>, f);</span><br><span class=\"line\">        div.detachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>, f);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"事件处理模-事件冒泡、捕获\"><a href=\"#事件处理模-事件冒泡、捕获\" class=\"headerlink\" title=\"事件处理模: 事件冒泡、捕获\"></a>事件处理模: 事件冒泡、捕获</h3><p>一个事件只能执行一个事件模型</p>\n<h4 id=\"事件冒泡：\"><a href=\"#事件冒泡：\" class=\"headerlink\" title=\"事件冒泡：\"></a>事件冒泡：</h4><p>结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）（从子元素到父元素）</p>\n<h4 id=\"事件捕获：\"><a href=\"#事件捕获：\" class=\"headerlink\" title=\"事件捕获：\"></a>事件捕获：</h4><p>结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自顶向上）  </p>\n<h5 id=\"触发方式\"><a href=\"#触发方式\" class=\"headerlink\" title=\"触发方式:\"></a>触发方式:</h5><p>elem.addEventListeren(‘type’,function(){} ,true);<br>IE没有捕获事件</p>\n<p>触发顺序，先捕获，后冒泡</p>\n<p>focus，blur，change，submit，reset，select 等事件不冒泡</p>\n<p>取消冒泡和阻止默认事件：</p>\n<h4 id=\"取消冒泡：\"><a href=\"#取消冒泡：\" class=\"headerlink\" title=\"取消冒泡：\"></a>取消冒泡：</h4><p>W3C标准 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.stopPropagation();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你正在点击整个文档！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"comment\">//可以加一个参数，代表当前事件的监听，是一个对象</span></span><br><span class=\"line\">            e.stopPropagation();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;点击div时不再冒泡！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>但不支持ie9以下版本</p>\n<p>IE独有 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你正在点击整个文档！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// e.stopPropagation();</span></span><br><span class=\"line\">            e.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;点击div时不再冒泡！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"阻止默认事件\"><a href=\"#阻止默认事件\" class=\"headerlink\" title=\"阻止默认事件:\"></a>阻止默认事件:</h4><p>默认事件 — 表单提交，a标签跳转，右键菜单等</p>\n<ol>\n<li><p><code>return false;</code>  以对象属性的方式注册的事件才生效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> 可以阻止右键出菜单</span><br><span class=\"line\"> </span><br><span class=\"line\">       &lt;a href=<span class=\"string\">&quot;javascript:void(false)&quot;</span>&gt;demo&lt;/a&gt;</span><br><span class=\"line\">可以阻止a标签的跳转</span><br></pre></td></tr></table></figure></li>\n<li><p><code>event.preventDefault();</code> W3C标注，IE9以下不兼容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>event.returnValue = false;</code> 兼容IE</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件对象：\"><a href=\"#事件对象：\" class=\"headerlink\" title=\"事件对象：\"></a>事件对象：</h4><p>event || window.event 用于IE<br>事件<br>源对象:<br><code>event.target</code>火狐独有的</p>\n</li>\n</ol>\n<p><code>event.srcElement</code> IE独有的</p>\n<p>这俩chrome都有</p>\n<h4 id=\"事件委托：\"><a href=\"#事件委托：\" class=\"headerlink\" title=\"事件委托：\"></a>事件委托：</h4><p>利用事件冒泡，和事件源对象进行处理</p>\n<h5 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h5><ol>\n<li><p>性能 不需要循环所有的元素一个个绑定事件</p>\n</li>\n<li><p>灵活 当有新的子元素时不需要重新绑定事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     &lt;ul&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ul&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        ul.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event; <span class=\"comment\">//考虑事件的兼容性</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> target = event.target || event.srcElement;<span class=\"comment\">//考虑源事件的兼容性</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(target.innerText);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">可以为所有的li添加事件，将li的事件委托给ul</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"鼠标事件：\"><a href=\"#鼠标事件：\" class=\"headerlink\" title=\"鼠标事件：\"></a>鼠标事件：</h4><ul>\n<li>click、鼠标点击（包括按下和弹起）</li>\n<li>mousedown、鼠标按下</li>\n<li>mousemove、鼠标移动</li>\n<li>mouseup、鼠标弹起</li>\n<li>contextmenu、鼠标右键产生菜单</li>\n<li>mouseover == mouseenter、鼠标进入区域</li>\n<li>mouseout == mouseleave、鼠标移出区域</li>\n</ul>\n<p>只有mouseup和mousedown能区分鼠标左右键<br>用button来区分鼠标的按键，0/1/2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">document</span>.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.button == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下的是鼠标右键！&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.button == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下的是鼠标左键!&quot;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下的是中间滚动轮!&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>DOM3标准规定:click事件只能监听左键,只能通过mousedown 和 mouseup来判断鼠标键</p>\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><ul>\n<li>keydown 按下</li>\n<li>keyup 弹开</li>\n<li>keypress</li>\n</ul>\n<p>触发顺序：keydown &gt; keypress &gt; keyup</p>\n<h5 id=\"keydown和keypress的区别\"><a href=\"#keydown和keypress的区别\" class=\"headerlink\" title=\"keydown和keypress的区别\"></a>keydown和keypress的区别</h5><p>keydown 可以响应任意键盘按键(charcode始终为0),     keypress只可以响应字符类键盘按键(charcode对应ACICC码)</p>\n<p>keypress返回ASCII码，可以转换成相应字符<br>操作型按键用keydown（可以使用which属性）<br>字符型按键用keypress</p>\n<h4 id=\"文本操作事件：\"><a href=\"#文本操作事件：\" class=\"headerlink\" title=\"文本操作事件：\"></a>文本操作事件：</h4><ul>\n<li>input,只要文本有变化就触发</li>\n<li>focus,聚焦时触发</li>\n<li>blur,失去焦点触发</li>\n<li>change，失去焦点比较前后两个状态，如果内容改变则触发，内容不变则不触发</li>\n</ul>\n<h4 id=\"窗体操作类-window上的事件\"><a href=\"#窗体操作类-window上的事件\" class=\"headerlink\" title=\"窗体操作类(window上的事件)\"></a>窗体操作类(window上的事件)</h4><ul>\n<li>scroll滚动条滚动<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.pageXOffset + <span class=\"string\">&quot; &quot;</span> + <span class=\"built_in\">this</span>.pageYOffset);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\nload,整个页面加载完才能触发    </li>\n</ul>\n"},{"title":"常用的git操作","date":"2021-12-31T08:21:22.000Z","description":"使用git的常用命令，包括.gitignore的编写规则","_content":"# git 常用命令。\n\n## SSH Key\n> 创建SSH key\n```shell\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n> 测试SSH key配对成功\n```shell\n$ ssh -T git@gitee.com\n```\n## 配置用户信息\n```shell\n$ git config --global user.name \"Your Name\"             \n$ git config --global user.email \"email@example.com\"\n```\n\n## 仓库\n> 在当前目录新建一个Git代码库\n```shell\n$ git init\n```\n\n> 新建一个目录，将其初始化为Git代码库\n```shell\n$ git init [project-name]\n```\n\n> 下载一个项目和它的整个代码历史\n```shell\n$ git clone [url]\n```\n## 增加/删除文件\n> 添加指定文件到暂存区\n```shell\n$ git add [file1] [file2] ...\n```\n\n> 添加指定目录到暂存区，包括子目录\n```shell\n$ git add [dir]\n```\n\n> 添加当前目录的所有文件到暂存区\n```shell\n$ git add .\n```\n\n> 添加每个变化前，都会要求确认\n> 对于同一个文件的多处变化，可以实现分次提交\n```shell\n$ git add -p\n```\n\n> 删除工作区文件，并且将这次删除放入暂存区\n```shell\n$ git rm [file1] [file2] ...\n```\n\n> 停止追踪指定文件，但该文件会保留在工作区\n```shell\n$ git rm --cached [file]\n```\n\n> 改名文件，并且将这个改名放入暂存区\n```shell\n$ git mv [file-original] [file-renamed]\n```\n## 代码提交\n> 提交暂存区到仓库区\n```shell\n$ git commit -m [message]\n```\n\n> 提交工作区自上次commit之后的变化，直接到仓库区\n```shell\n$ git commit -a\n```\n\n> 提交时显示所有diff信息\n```shell\n$ git commit -v\n```\n\n> 使用一次新的commit，替代上一次提交\n> 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n```shell\n$ git commit --amend -m [message]\n```\n\n> 重做上一次commit，并包括指定文件的新变化\n```shell\n$ git commit --amend [file1] [file2] ...\n```\n## 查看信息\n> 显示有变更的文件\n```shell\n$ git status\n```\n\n> 显示当前分支的版本历史\n```shell\n$ git log\n```\n\n> 显示commit历史，以及每次commit发生变更的文件\n```shell\n$ git log --stat\n```\n\n> 搜索提交历史，根据关键词\n```shell\n$ git log -S [keyword]\n```\n\n> 显示某个commit之后的所有变动，每个commit占据一行\n```shell\n$ git log [tag] HEAD --pretty=format:%s\n```\n\n> 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n```shell\n$ git log [tag] HEAD --grep feature\n```\n\n> 显示某个文件的版本历史，包括文件改名\n```shell\n$ git log --follow [file]\n```\n\n> 显示指定文件相关的每一次diff\n```shell\n$ git log -p [file]\n```\n\n> 显示过去5次提交\n```shell\n$ git log -5 --pretty --oneline\n```\n\n> 显示所有提交过的用户，按提交次数排序\n```shell\n$ git shortlog -sn\n```\n\n> 显示指定文件是什么人在什么时间修改过\n```shell\n$ git blame [file]\n```\n\n> 显示暂存区和工作区的差异\n```shell\n$ git diff\n```\n\n> 显示暂存区和上一个commit的差异\n```shell\n$ git diff --cached [file]\n```\n\n> 显示工作区与当前分支最新commit之间的差异\n```shell\n$ git diff HEAD\n```\n\n> 显示两次提交之间的差异\n```shell\n$ git diff [first-branch]...[second-branch]\n```\n\n> 显示今天你写了多少行代码\n```shell\n$ git diff --shortstat \"@{0 day ago}\"\n```\n\n> 显示某次提交的元数据和内容变化\n```shell\n$ git show [commit]\n```\n\n> 显示某次提交发生变化的文件\n```shell\n$ git show --name-only [commit]\n```\n\n> 显示某次提交时，某个文件的内容\n```shell\n$ git show [commit]:[filename]\n```\n\n> 显示当前分支的最近几次提交\n```shell\n$ git reflog\n```\n## 分支\n\n> 列出所有本地分支\n\n```shell\n$ git branch\n```\n\n> 列出所有远程分支\n\n```shell\n$ git branch -r\n```\n\n> 列出所有本地分支和远程分支\n\n```shell\n$ git branch -a\n```\n\n> 新建一个分支，但依然停留在当前分支\n\n```shell\n$ git branch [branch-name]\n```\n\n> 新建一个分支，并切换到该分支\n\n```shell\n$ git checkout -b [branch]\n```\n\n> 新建一个分支，指向指定commit\n\n```shell\n$ git branch [branch] [commit]\n```\n\n> 新建一个分支，与指定的远程分支建立追踪关系\n\n```shell\n$ git branch --track [branch] [remote-branch]\n```\n\n> 切换到指定分支，并更新工作区\n\n```shell\n$ git checkout [branch-name]\n```\n\n> 切换到上一个分支\n\n```shell\n$ git checkout -\n```\n\n> 建立追踪关系，在现有分支与指定的远程分支之间\n\n```shell\n$ git branch --set-upstream [branch] [remote-branch]\n```\n\n> 合并指定分支到当前分支\n\n```shell\n$ git merge [branch]\n```\n\n> 选择一个commit，合并进当前分支\n\n```shell\n$ git cherry-pick [commit]\n```\n\n> 删除分支\n\n```shell\n$ git branch -d [branch-name]\n```\n\n> 删除远程分支\n\n```shell\n$ git push origin --delete [branch-name]\n```\n\n## 标签\n\n> 列出所有tag\n\n```shell\n$ git tag\n```\n\n> 新建一个tag在当前commit\n\n```shell\n$ git tag [tag]\n```\n\n> 新建一个tag在指定commit\n\n```shell\n$ git tag [tag] [commit]\n```\n\n> 删除本地tag\n\n```shell\n$ git tag -d [tag]\n```\n\n> 删除远程tag\n\n```shell\n$ git push origin :refs/tags/[tagName]\n```\n\n> 查看tag信息\n\n```shell\n$ git show [tag]\n```\n\n> 提交指定tag\n\n```shell\n$ git push [remote] [tag]\n```\n\n> 提交所有tag\n\n```shell\n$ git push [remote] --tags\n```\n\n> 新建一个分支，指向某个tag\n\n```shell\n$ git checkout -b [branch] [tag]\n```\n\n## 远程同步\n\n> 下载远程仓库的所有变动\n```shell\n$ git fetch [remote]\n```\n\n> 显示所有远程仓库\n```shell\n$ git remote -v\n```\n\n> 显示某个远程仓库的信息\n```shell\n$ git remote show [remote]\n```\n\n> 增加一个新的远程仓库，并命名\n```shell\n$ git remote add [shortname] [url]\n```\n\n> 取回远程仓库的变化，并与本地分支合并\n```shell\n$ git pull [remote] [branch]\n```\n\n> 允许不相关历史提交,并强制合并\n```shell\n$ git pull origin master --allow-unrelated-histories\n```\n\n> 上传本地指定分支到远程仓库\n```shell\n$ git push [remote] [branch]\n```\n```shell\n$ git push origin 分支名\n```\n\n> 强行推送当前分支到远程仓库，即使有冲突\n```shell\n$ git push [remote] --force\n```\n\n> 推送所有分支到远程仓库\n```shell\n$ git push [remote] --all\n```\n## 撤销\n> 恢复暂存区的指定文件到工作区\n```shell\n$ git checkout [file]\n```\n\n> 恢复某个commit的指定文件到暂存区和工作区\n```shell\n$ git checkout [commit] [file]\n```\n\n> 恢复暂存区的所有文件到工作区\n```shell\n$ git checkout .\n```\n\n> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n```shell\n$ git reset [file]\n```\n\n> 重置暂存区与工作区，与上一次commit保持一致\n```shell\n$ git reset --hard \n```\n\n> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n```shell\n$ git reset [commit]\n```\n\n> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n```shell\n$ git reset --hard [commit]\n```\n\n> 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n```shell\n$ git reset --keep [commit]\n```\n\n> 新建一个commit，用来撤销指定commit\n> 后者的所有变化都将被前者抵消，并且应用到当前分支\n```shell\n$ git revert [commit]\n```\n\n> 暂时将未提交的变化移除，稍后再移入\n```shell\n$ git stash\n$ git stash pop\n```\n\n## 忽略文件配置（.gitignore)\n\n1、配置语法:\n\n> 以斜杠“/”开头表示目录；\n>\n> 以星号“*”通配多个字符；\n>\n> 以问号“?”通配单个字符\n>\n> 以方括号“[]”包含单个字符的匹配列表；\n>\n> 以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；\n\n此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；\n\n2、示例：\n\n　　（1）规则：fd1/*\n　　　　  说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；\n\n　　（2）规则：/fd1/*\n　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；\n\n　　（3）规则：\n\n/*\n!.gitignore\n!/fw/bin/\n!/fw/sf/\n\n说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；\n\n","source":"_posts/git文档.md","raw":"---\ntitle: 常用的git操作\ndate: 2021-12-31 16:21:22\ndescription: 使用git的常用命令，包括.gitignore的编写规则\ncategories: \n\t- 前端学习笔记\n\t- 工具类\ntags: \n\t- git\n\t- 前端\n\t- 工具\n---\n# git 常用命令。\n\n## SSH Key\n> 创建SSH key\n```shell\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n> 测试SSH key配对成功\n```shell\n$ ssh -T git@gitee.com\n```\n## 配置用户信息\n```shell\n$ git config --global user.name \"Your Name\"             \n$ git config --global user.email \"email@example.com\"\n```\n\n## 仓库\n> 在当前目录新建一个Git代码库\n```shell\n$ git init\n```\n\n> 新建一个目录，将其初始化为Git代码库\n```shell\n$ git init [project-name]\n```\n\n> 下载一个项目和它的整个代码历史\n```shell\n$ git clone [url]\n```\n## 增加/删除文件\n> 添加指定文件到暂存区\n```shell\n$ git add [file1] [file2] ...\n```\n\n> 添加指定目录到暂存区，包括子目录\n```shell\n$ git add [dir]\n```\n\n> 添加当前目录的所有文件到暂存区\n```shell\n$ git add .\n```\n\n> 添加每个变化前，都会要求确认\n> 对于同一个文件的多处变化，可以实现分次提交\n```shell\n$ git add -p\n```\n\n> 删除工作区文件，并且将这次删除放入暂存区\n```shell\n$ git rm [file1] [file2] ...\n```\n\n> 停止追踪指定文件，但该文件会保留在工作区\n```shell\n$ git rm --cached [file]\n```\n\n> 改名文件，并且将这个改名放入暂存区\n```shell\n$ git mv [file-original] [file-renamed]\n```\n## 代码提交\n> 提交暂存区到仓库区\n```shell\n$ git commit -m [message]\n```\n\n> 提交工作区自上次commit之后的变化，直接到仓库区\n```shell\n$ git commit -a\n```\n\n> 提交时显示所有diff信息\n```shell\n$ git commit -v\n```\n\n> 使用一次新的commit，替代上一次提交\n> 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n```shell\n$ git commit --amend -m [message]\n```\n\n> 重做上一次commit，并包括指定文件的新变化\n```shell\n$ git commit --amend [file1] [file2] ...\n```\n## 查看信息\n> 显示有变更的文件\n```shell\n$ git status\n```\n\n> 显示当前分支的版本历史\n```shell\n$ git log\n```\n\n> 显示commit历史，以及每次commit发生变更的文件\n```shell\n$ git log --stat\n```\n\n> 搜索提交历史，根据关键词\n```shell\n$ git log -S [keyword]\n```\n\n> 显示某个commit之后的所有变动，每个commit占据一行\n```shell\n$ git log [tag] HEAD --pretty=format:%s\n```\n\n> 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n```shell\n$ git log [tag] HEAD --grep feature\n```\n\n> 显示某个文件的版本历史，包括文件改名\n```shell\n$ git log --follow [file]\n```\n\n> 显示指定文件相关的每一次diff\n```shell\n$ git log -p [file]\n```\n\n> 显示过去5次提交\n```shell\n$ git log -5 --pretty --oneline\n```\n\n> 显示所有提交过的用户，按提交次数排序\n```shell\n$ git shortlog -sn\n```\n\n> 显示指定文件是什么人在什么时间修改过\n```shell\n$ git blame [file]\n```\n\n> 显示暂存区和工作区的差异\n```shell\n$ git diff\n```\n\n> 显示暂存区和上一个commit的差异\n```shell\n$ git diff --cached [file]\n```\n\n> 显示工作区与当前分支最新commit之间的差异\n```shell\n$ git diff HEAD\n```\n\n> 显示两次提交之间的差异\n```shell\n$ git diff [first-branch]...[second-branch]\n```\n\n> 显示今天你写了多少行代码\n```shell\n$ git diff --shortstat \"@{0 day ago}\"\n```\n\n> 显示某次提交的元数据和内容变化\n```shell\n$ git show [commit]\n```\n\n> 显示某次提交发生变化的文件\n```shell\n$ git show --name-only [commit]\n```\n\n> 显示某次提交时，某个文件的内容\n```shell\n$ git show [commit]:[filename]\n```\n\n> 显示当前分支的最近几次提交\n```shell\n$ git reflog\n```\n## 分支\n\n> 列出所有本地分支\n\n```shell\n$ git branch\n```\n\n> 列出所有远程分支\n\n```shell\n$ git branch -r\n```\n\n> 列出所有本地分支和远程分支\n\n```shell\n$ git branch -a\n```\n\n> 新建一个分支，但依然停留在当前分支\n\n```shell\n$ git branch [branch-name]\n```\n\n> 新建一个分支，并切换到该分支\n\n```shell\n$ git checkout -b [branch]\n```\n\n> 新建一个分支，指向指定commit\n\n```shell\n$ git branch [branch] [commit]\n```\n\n> 新建一个分支，与指定的远程分支建立追踪关系\n\n```shell\n$ git branch --track [branch] [remote-branch]\n```\n\n> 切换到指定分支，并更新工作区\n\n```shell\n$ git checkout [branch-name]\n```\n\n> 切换到上一个分支\n\n```shell\n$ git checkout -\n```\n\n> 建立追踪关系，在现有分支与指定的远程分支之间\n\n```shell\n$ git branch --set-upstream [branch] [remote-branch]\n```\n\n> 合并指定分支到当前分支\n\n```shell\n$ git merge [branch]\n```\n\n> 选择一个commit，合并进当前分支\n\n```shell\n$ git cherry-pick [commit]\n```\n\n> 删除分支\n\n```shell\n$ git branch -d [branch-name]\n```\n\n> 删除远程分支\n\n```shell\n$ git push origin --delete [branch-name]\n```\n\n## 标签\n\n> 列出所有tag\n\n```shell\n$ git tag\n```\n\n> 新建一个tag在当前commit\n\n```shell\n$ git tag [tag]\n```\n\n> 新建一个tag在指定commit\n\n```shell\n$ git tag [tag] [commit]\n```\n\n> 删除本地tag\n\n```shell\n$ git tag -d [tag]\n```\n\n> 删除远程tag\n\n```shell\n$ git push origin :refs/tags/[tagName]\n```\n\n> 查看tag信息\n\n```shell\n$ git show [tag]\n```\n\n> 提交指定tag\n\n```shell\n$ git push [remote] [tag]\n```\n\n> 提交所有tag\n\n```shell\n$ git push [remote] --tags\n```\n\n> 新建一个分支，指向某个tag\n\n```shell\n$ git checkout -b [branch] [tag]\n```\n\n## 远程同步\n\n> 下载远程仓库的所有变动\n```shell\n$ git fetch [remote]\n```\n\n> 显示所有远程仓库\n```shell\n$ git remote -v\n```\n\n> 显示某个远程仓库的信息\n```shell\n$ git remote show [remote]\n```\n\n> 增加一个新的远程仓库，并命名\n```shell\n$ git remote add [shortname] [url]\n```\n\n> 取回远程仓库的变化，并与本地分支合并\n```shell\n$ git pull [remote] [branch]\n```\n\n> 允许不相关历史提交,并强制合并\n```shell\n$ git pull origin master --allow-unrelated-histories\n```\n\n> 上传本地指定分支到远程仓库\n```shell\n$ git push [remote] [branch]\n```\n```shell\n$ git push origin 分支名\n```\n\n> 强行推送当前分支到远程仓库，即使有冲突\n```shell\n$ git push [remote] --force\n```\n\n> 推送所有分支到远程仓库\n```shell\n$ git push [remote] --all\n```\n## 撤销\n> 恢复暂存区的指定文件到工作区\n```shell\n$ git checkout [file]\n```\n\n> 恢复某个commit的指定文件到暂存区和工作区\n```shell\n$ git checkout [commit] [file]\n```\n\n> 恢复暂存区的所有文件到工作区\n```shell\n$ git checkout .\n```\n\n> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n```shell\n$ git reset [file]\n```\n\n> 重置暂存区与工作区，与上一次commit保持一致\n```shell\n$ git reset --hard \n```\n\n> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n```shell\n$ git reset [commit]\n```\n\n> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n```shell\n$ git reset --hard [commit]\n```\n\n> 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n```shell\n$ git reset --keep [commit]\n```\n\n> 新建一个commit，用来撤销指定commit\n> 后者的所有变化都将被前者抵消，并且应用到当前分支\n```shell\n$ git revert [commit]\n```\n\n> 暂时将未提交的变化移除，稍后再移入\n```shell\n$ git stash\n$ git stash pop\n```\n\n## 忽略文件配置（.gitignore)\n\n1、配置语法:\n\n> 以斜杠“/”开头表示目录；\n>\n> 以星号“*”通配多个字符；\n>\n> 以问号“?”通配单个字符\n>\n> 以方括号“[]”包含单个字符的匹配列表；\n>\n> 以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；\n\n此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；\n\n2、示例：\n\n　　（1）规则：fd1/*\n　　　　  说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；\n\n　　（2）规则：/fd1/*\n　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；\n\n　　（3）规则：\n\n/*\n!.gitignore\n!/fw/bin/\n!/fw/sf/\n\n说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；\n\n","slug":"git文档","published":1,"updated":"2022-01-01T06:30:28.715Z","_id":"ckxu6dnib000a10ax37zmho53","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"git-常用命令。\"><a href=\"#git-常用命令。\" class=\"headerlink\" title=\"git 常用命令。\"></a>git 常用命令。</h1><h2 id=\"SSH-Key\"><a href=\"#SSH-Key\" class=\"headerlink\" title=\"SSH Key\"></a>SSH Key</h2><blockquote>\n<p>创建SSH key</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>测试SSH key配对成功</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -T git@gitee.com</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置用户信息\"><a href=\"#配置用户信息\" class=\"headerlink\" title=\"配置用户信息\"></a>配置用户信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span>             </span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.email <span class=\"string\">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><blockquote>\n<p>在当前目录新建一个Git代码库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个目录，将其初始化为Git代码库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init [project-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>下载一个项目和它的整个代码历史</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> [url]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h2><blockquote>\n<p>添加指定文件到暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加指定目录到暂存区，包括子目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add [dir]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加当前目录的所有文件到暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add -p</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm --cached [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>改名文件，并且将这个改名放入暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><blockquote>\n<p>提交暂存区到仓库区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m [message]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -a</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交时显示所有diff信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -v</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend -m [message]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重做上一次commit，并包括指定文件的新变化</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h2><blockquote>\n<p>显示有变更的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示当前分支的版本历史</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>搜索提交历史，根据关键词</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个文件的版本历史，包括文件改名</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示指定文件相关的每一次diff</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示过去5次提交</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示所有提交过的用户，按提交次数排序</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git shortlog -sn</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示指定文件是什么人在什么时间修改过</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git blame [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示暂存区和工作区的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示暂存区和上一个commit的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --cached [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示工作区与当前分支最新commit之间的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff HEAD</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示两次提交之间的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff [first-branch]...[second-branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示今天你写了多少行代码</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --shortstat <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某次提交的元数据和内容变化</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某次提交发生变化的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show --name-only [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某次提交时，某个文件的内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]:[filename]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示当前分支的最近几次提交</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><blockquote>\n<p>列出所有本地分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>列出所有远程分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -r</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>列出所有本地分支和远程分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -a</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，但依然停留在当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，并切换到该分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，指向指定commit</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch] [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --track [branch] [remote-branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换到指定分支，并更新工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换到上一个分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --set-upstream [branch] [remote-branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>合并指定分支到当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge [branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>选择一个commit，合并进当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git cherry-pick [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除远程分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin --delete [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><blockquote>\n<p>列出所有tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个tag在当前commit</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个tag在指定commit</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag] [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除本地tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag -d [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除远程tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin :refs/tags/[tagName]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看tag信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交指定tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交所有tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --tags</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，指向某个tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><blockquote>\n<p>下载远程仓库的所有变动</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch [remote]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示所有远程仓库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote -v</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个远程仓库的信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote show [remote]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>增加一个新的远程仓库，并命名</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote add [shortname] [url]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>取回远程仓库的变化，并与本地分支合并</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull [remote] [branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>允许不相关历史提交,并强制合并</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull origin master --allow-unrelated-histories</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上传本地指定分支到远程仓库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [branch]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin 分支名</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --force</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>推送所有分支到远程仓库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --all</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><blockquote>\n<p>恢复暂存区的指定文件到工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [commit] [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>恢复暂存区的所有文件到工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout .</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard</span> </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --keep [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git revert [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>暂时将未提交的变化移除，稍后再移入</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash pop</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略文件配置（-gitignore\"><a href=\"#忽略文件配置（-gitignore\" class=\"headerlink\" title=\"忽略文件配置（.gitignore)\"></a>忽略文件配置（.gitignore)</h2><p>1、配置语法:</p>\n<blockquote>\n<p>以斜杠“/”开头表示目录；</p>\n<p>以星号“*”通配多个字符；</p>\n<p>以问号“?”通配单个字符</p>\n<p>以方括号“[]”包含单个字符的匹配列表；</p>\n<p>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p>\n</blockquote>\n<p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>\n<p>2、示例：</p>\n<p>　　（1）规则：fd1/*<br>　　　　  说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</p>\n<p>　　（2）规则：/fd1/*<br>　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；</p>\n<p>　　（3）规则：</p>\n<p>/*<br>!.gitignore<br>!/fw/bin/<br>!/fw/sf/</p>\n<p>说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；</p>\n","site":{"data":{}},"length":3624,"excerpt":"","more":"<h1 id=\"git-常用命令。\"><a href=\"#git-常用命令。\" class=\"headerlink\" title=\"git 常用命令。\"></a>git 常用命令。</h1><h2 id=\"SSH-Key\"><a href=\"#SSH-Key\" class=\"headerlink\" title=\"SSH Key\"></a>SSH Key</h2><blockquote>\n<p>创建SSH key</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>测试SSH key配对成功</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -T git@gitee.com</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置用户信息\"><a href=\"#配置用户信息\" class=\"headerlink\" title=\"配置用户信息\"></a>配置用户信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span>             </span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.email <span class=\"string\">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><blockquote>\n<p>在当前目录新建一个Git代码库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个目录，将其初始化为Git代码库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init [project-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>下载一个项目和它的整个代码历史</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> [url]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h2><blockquote>\n<p>添加指定文件到暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加指定目录到暂存区，包括子目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add [dir]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加当前目录的所有文件到暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add -p</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm --cached [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>改名文件，并且将这个改名放入暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><blockquote>\n<p>提交暂存区到仓库区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m [message]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -a</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交时显示所有diff信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -v</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend -m [message]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重做上一次commit，并包括指定文件的新变化</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h2><blockquote>\n<p>显示有变更的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示当前分支的版本历史</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>搜索提交历史，根据关键词</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个文件的版本历史，包括文件改名</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示指定文件相关的每一次diff</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示过去5次提交</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示所有提交过的用户，按提交次数排序</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git shortlog -sn</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示指定文件是什么人在什么时间修改过</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git blame [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示暂存区和工作区的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示暂存区和上一个commit的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --cached [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示工作区与当前分支最新commit之间的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff HEAD</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示两次提交之间的差异</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff [first-branch]...[second-branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示今天你写了多少行代码</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --shortstat <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某次提交的元数据和内容变化</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某次提交发生变化的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show --name-only [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某次提交时，某个文件的内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]:[filename]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示当前分支的最近几次提交</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><blockquote>\n<p>列出所有本地分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>列出所有远程分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -r</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>列出所有本地分支和远程分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -a</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，但依然停留在当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，并切换到该分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，指向指定commit</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch] [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --track [branch] [remote-branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换到指定分支，并更新工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换到上一个分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --set-upstream [branch] [remote-branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>合并指定分支到当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge [branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>选择一个commit，合并进当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git cherry-pick [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除远程分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin --delete [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><blockquote>\n<p>列出所有tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个tag在当前commit</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个tag在指定commit</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag] [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除本地tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag -d [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除远程tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin :refs/tags/[tagName]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看tag信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交指定tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [tag]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提交所有tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --tags</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个分支，指向某个tag</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><blockquote>\n<p>下载远程仓库的所有变动</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch [remote]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示所有远程仓库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote -v</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>显示某个远程仓库的信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote show [remote]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>增加一个新的远程仓库，并命名</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote add [shortname] [url]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>取回远程仓库的变化，并与本地分支合并</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull [remote] [branch]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>允许不相关历史提交,并强制合并</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull origin master --allow-unrelated-histories</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上传本地指定分支到远程仓库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [branch]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin 分支名</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --force</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>推送所有分支到远程仓库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --all</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><blockquote>\n<p>恢复暂存区的指定文件到工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [commit] [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>恢复暂存区的所有文件到工作区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout .</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [file]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard</span> </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --keep [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git revert [commit]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>暂时将未提交的变化移除，稍后再移入</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash pop</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略文件配置（-gitignore\"><a href=\"#忽略文件配置（-gitignore\" class=\"headerlink\" title=\"忽略文件配置（.gitignore)\"></a>忽略文件配置（.gitignore)</h2><p>1、配置语法:</p>\n<blockquote>\n<p>以斜杠“/”开头表示目录；</p>\n<p>以星号“*”通配多个字符；</p>\n<p>以问号“?”通配单个字符</p>\n<p>以方括号“[]”包含单个字符的匹配列表；</p>\n<p>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p>\n</blockquote>\n<p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>\n<p>2、示例：</p>\n<p>　　（1）规则：fd1/*<br>　　　　  说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</p>\n<p>　　（2）规则：/fd1/*<br>　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；</p>\n<p>　　（3）规则：</p>\n<p>/*<br>!.gitignore<br>!/fw/bin/<br>!/fw/sf/</p>\n<p>说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；</p>\n"},{"title":"HTML5新增","date":"2021-12-31T08:21:22.000Z","description":"HTML5中新增的方法，元素，canvas和svg的使用","_content":"\n# HTML5 基础\n----------\n\n## input：\nplaceholder：输入框提示\n\n### type里面新增加的类型：（有兼容性问题，不推荐使用）\n- date:可以选择日期（兼容性不好）;\n- time:时间；week：星期；\n- datetime-local:可以选择日期时间；\n- number：只能填写数字 color：填颜色。\n\n## 其他：\n`contenteditable=\"true\"` ：可修改元素的内容（可以继承）（没有兼容性问题）\n\n`draggable = \"true\"` :元素可拖拽（大部分元素默认为false，其中a标签img标签默认为true） （只有Chrome和Safari支持）\n\n### 拖拽周期：推拽开始，拖拽进行时，拖拽结束\n#### 涉及事件：\n- 拖拽开始（dragstart）,按下物体的瞬间不会触发事件，必须移动\n- 拖拽移动事件（drag）,移动的时候触发\n- 拖拽结束时间（dragend），结束时间\n#### 拖拽目标事件：\n- dragenter：当拖拽进入目标区域时，不是元素图形进入触发，而是拖拽的鼠标进入才会触发\n- dragover：在拖拽目标的范围内移动触发(想要阻止元素回到默认位置，必须在这设置阻止默认事件)\n- dragleave：离开拖拽目标触发\n- dragdrop: 必须在dragover事件下阻止默认事件才会触发（e.preventDefault()）\n\n拖拽的时候元素会脱离文档结构，放回去的时候在恢复。\n\n\n`dataTransfer.effectAllowed`:可以改变拖拽时指针的样式（必须写在draggstart里，兼容性不行)\n\n`e.dataTransfer.effectAllowed = 样式`\n\n`dataTransfer.dropEffect`:可以改变拖拽松手时指针的样式（必须写在drop里，兼容性不行）\n\n`e.dataTransfer.dropEffect = 样式`\n\n\n## [canvas](https://www.runoob.com/w3cnote/html5-canvas-intro.html)：\ncanvas要在js中开始操作画图。  \ncanvas设置画板的大小需要在行间设置\n### canvas中画笔方法：\n`画板.getContext(\"2d\") : 生成一个画笔`  \nmoveTo（x,y）:画笔开始的的位置  \nlineTo（x,y）：下一笔要到的地方  \nlineWidth：设置画笔画出来线条的宽度（每个画笔画出来的图形苦读一样）  \nbeginPath ：开启一个新的路径  \nclosePath ：自动闭合所画的图形（闭合当前这一个路径）  \nstroke ： 将画笔的轨迹写到画板上（即展示画的图形）  \nfill : 将图形的内容区填满（会自动闭合图形）  \nclearRect（起始X，起始Y，矩形的宽，矩形的高）:清除这个矩形框的内容（相当于橡皮擦）\n\n### canvas画矩形：\n1. 一笔一笔的画\n2. rect（起始X，起始Y，矩形的宽，矩形的高）:一个矩形\n3. strokeRect(起始X，起始Y，矩形的宽，矩形的高):一个只有边框的矩形\n4. fillRect（起始X，起始Y，矩形的宽，矩形的高）：有填充内容的矩形\n\n### canvas画圆形，圆弧：\n参数：圆心（x,y），半径(r)，弧度（开始弧度start，结束弧度end，必须以π（Math.PI）为单位 例 Math.PI* 2 : 360度），方向（顺时针，逆时针，顺时针写为0，逆时针为1）\n\narc（x,y,r,开始弧度,结束弧度,方向）：方法\n\n### canvas画圆角矩形：\n#### 画一条带弧的线：\n参数：线直线部分的结束坐标（x,y），线的结束部分弧的方向（需填写一个坐标表示延伸方向，只提供方向参考），圆弧的大小\n\narcTo（x,y，弧所延伸方向的坐标，圆弧的大小）：画出一条线\n\n**注意**：四条线就可画出圆角矩形，画笔的起始位置应该为矩形的弧形大小预留出一定的位置\n```javascript\n        //画一个弧度为10px 起始位置位（100 100），宽高为100的圆角矩形\n        ctx.moveTo(100, 110);\n        ctx.arcTo(100, 200, 200, 200, 10);\n        ctx.arcTo(200, 200, 200, 100, 10);\n        ctx.arcTo(200, 100, 100, 100, 10);\n        ctx.arcTo(100, 100, 100, 200, 10);\n        ctx.stroke();\n```\n### 贝塞尔曲线：\n二次贝塞尔曲线需提供三个点，做出两条辅助线  \n三次需要四个点，三条辅助线，  \n其他类推（第一个点为画笔的起始点） \n\nquadraticCurveTo（第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标）：二次贝塞尔曲线\n\nbezierCurveTo(第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标,第四个点横坐标，第四个点纵坐标)：三次贝塞尔曲线\n\n### 变换：\ntranslate（x,y）:画布的坐标系原点（对全局都有作用）  \nrotate(角度):所画图形的旋转角度（必须以π为单位），旋转中心为坐标系原点（对全局都有作用。  \nscale（x轴方向，y轴方向）：缩放图形，图形的每一个坐标点都乘以了相应的系数（对全局都有作用）  \n解决消除对全局的影响：再开始时调用save方法（），在对某一部分调用完rotate和translate方法后再次调用restore方法就可以将后面部分恢复为默认的。\n\n### canvas改变样式：\nfillstyle：改变填充的颜色，  \n可以添加图片（图片从坐标原点开始渲染）\n```javascript\n        var img = new Image();\n        img.src = \"../images/1.jpeg\"\n        img.onload = function() {\n            ctx.beginPath();\n            var bg = ctx.createPattern(img, 'no-repeat')\n            ctx.fillStyle = bg;\n            ctx.fillRect(0, 0, 100, 100)\n        }\n```\n### 添加渐变  [参考](https://www.runoob.com/html/html5-canvas.html)\n#### 阴影：（默认是边框的里外都有）\n- shadowColor:添加阴影颜色\n- shadowBlur：添加阴影的大小\n- shadowOffsetX：阴影水平方向平移\n- shadowOffsetY：阴影垂直方向平移\n\n#### 线段样式（在线的两端添加样式）：\n- lineCap属性：在两端加一个图形，为扩大线段的长度（值为round表示加一个半圆，）\n- lineJoin属性：两个线相交时的样式\n\n#### canvas绘制文字：\nstrokeText（文字，开始横坐标，开始纵坐标）：文字描边（空心字体）\n\nfillText（文字，开始横坐标，开始纵坐标）：文字填充，（实心字体）可以用fillstyle改变字体颜色\n\n## [svg](https://www.runoob.com/svg/svg-tutorial.html):\nsvg适合矢量图，放大不会失真，适合大面积的贴图，通常动画较简单（标签和CSS绘画）  \ncanvas适合用于小面积的绘图，适合动画（JS去画）\n\n### 画直线：\n在SVG标签里使用line标签有四个属性x1,y1,x2,y2分别代表开始位置坐标和结束位置坐标，画完之后要在css中为他们设置stroke属性\n\n### 画矩形：\n在SVG里用标签rect标签，属性width，height，x,y,rx,ry,分别表示矩形的宽，高，起始位置的横纵坐标，圆角的宽高\n#### 画圆：\n在SVG里用标签circle\n#### 画椭圆：\n在SVG里用ellipse标签\n#### 画折线：\n在SVG里用polyline标签，默认闭合\n解决默认填充的可以在css中将fill值改为transparent\n\n###### \n","source":"_posts/h5基础.md","raw":"---\ntitle: HTML5新增\ndate: 2021-12-31 16:21:22\ndescription: HTML5中新增的方法，元素，canvas和svg的使用\ncategories: \n\t- 前端学习笔记\n\t- HTML\n\ntags: \n\t- HTML\n\t- 前端\n---\n\n# HTML5 基础\n----------\n\n## input：\nplaceholder：输入框提示\n\n### type里面新增加的类型：（有兼容性问题，不推荐使用）\n- date:可以选择日期（兼容性不好）;\n- time:时间；week：星期；\n- datetime-local:可以选择日期时间；\n- number：只能填写数字 color：填颜色。\n\n## 其他：\n`contenteditable=\"true\"` ：可修改元素的内容（可以继承）（没有兼容性问题）\n\n`draggable = \"true\"` :元素可拖拽（大部分元素默认为false，其中a标签img标签默认为true） （只有Chrome和Safari支持）\n\n### 拖拽周期：推拽开始，拖拽进行时，拖拽结束\n#### 涉及事件：\n- 拖拽开始（dragstart）,按下物体的瞬间不会触发事件，必须移动\n- 拖拽移动事件（drag）,移动的时候触发\n- 拖拽结束时间（dragend），结束时间\n#### 拖拽目标事件：\n- dragenter：当拖拽进入目标区域时，不是元素图形进入触发，而是拖拽的鼠标进入才会触发\n- dragover：在拖拽目标的范围内移动触发(想要阻止元素回到默认位置，必须在这设置阻止默认事件)\n- dragleave：离开拖拽目标触发\n- dragdrop: 必须在dragover事件下阻止默认事件才会触发（e.preventDefault()）\n\n拖拽的时候元素会脱离文档结构，放回去的时候在恢复。\n\n\n`dataTransfer.effectAllowed`:可以改变拖拽时指针的样式（必须写在draggstart里，兼容性不行)\n\n`e.dataTransfer.effectAllowed = 样式`\n\n`dataTransfer.dropEffect`:可以改变拖拽松手时指针的样式（必须写在drop里，兼容性不行）\n\n`e.dataTransfer.dropEffect = 样式`\n\n\n## [canvas](https://www.runoob.com/w3cnote/html5-canvas-intro.html)：\ncanvas要在js中开始操作画图。  \ncanvas设置画板的大小需要在行间设置\n### canvas中画笔方法：\n`画板.getContext(\"2d\") : 生成一个画笔`  \nmoveTo（x,y）:画笔开始的的位置  \nlineTo（x,y）：下一笔要到的地方  \nlineWidth：设置画笔画出来线条的宽度（每个画笔画出来的图形苦读一样）  \nbeginPath ：开启一个新的路径  \nclosePath ：自动闭合所画的图形（闭合当前这一个路径）  \nstroke ： 将画笔的轨迹写到画板上（即展示画的图形）  \nfill : 将图形的内容区填满（会自动闭合图形）  \nclearRect（起始X，起始Y，矩形的宽，矩形的高）:清除这个矩形框的内容（相当于橡皮擦）\n\n### canvas画矩形：\n1. 一笔一笔的画\n2. rect（起始X，起始Y，矩形的宽，矩形的高）:一个矩形\n3. strokeRect(起始X，起始Y，矩形的宽，矩形的高):一个只有边框的矩形\n4. fillRect（起始X，起始Y，矩形的宽，矩形的高）：有填充内容的矩形\n\n### canvas画圆形，圆弧：\n参数：圆心（x,y），半径(r)，弧度（开始弧度start，结束弧度end，必须以π（Math.PI）为单位 例 Math.PI* 2 : 360度），方向（顺时针，逆时针，顺时针写为0，逆时针为1）\n\narc（x,y,r,开始弧度,结束弧度,方向）：方法\n\n### canvas画圆角矩形：\n#### 画一条带弧的线：\n参数：线直线部分的结束坐标（x,y），线的结束部分弧的方向（需填写一个坐标表示延伸方向，只提供方向参考），圆弧的大小\n\narcTo（x,y，弧所延伸方向的坐标，圆弧的大小）：画出一条线\n\n**注意**：四条线就可画出圆角矩形，画笔的起始位置应该为矩形的弧形大小预留出一定的位置\n```javascript\n        //画一个弧度为10px 起始位置位（100 100），宽高为100的圆角矩形\n        ctx.moveTo(100, 110);\n        ctx.arcTo(100, 200, 200, 200, 10);\n        ctx.arcTo(200, 200, 200, 100, 10);\n        ctx.arcTo(200, 100, 100, 100, 10);\n        ctx.arcTo(100, 100, 100, 200, 10);\n        ctx.stroke();\n```\n### 贝塞尔曲线：\n二次贝塞尔曲线需提供三个点，做出两条辅助线  \n三次需要四个点，三条辅助线，  \n其他类推（第一个点为画笔的起始点） \n\nquadraticCurveTo（第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标）：二次贝塞尔曲线\n\nbezierCurveTo(第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标,第四个点横坐标，第四个点纵坐标)：三次贝塞尔曲线\n\n### 变换：\ntranslate（x,y）:画布的坐标系原点（对全局都有作用）  \nrotate(角度):所画图形的旋转角度（必须以π为单位），旋转中心为坐标系原点（对全局都有作用。  \nscale（x轴方向，y轴方向）：缩放图形，图形的每一个坐标点都乘以了相应的系数（对全局都有作用）  \n解决消除对全局的影响：再开始时调用save方法（），在对某一部分调用完rotate和translate方法后再次调用restore方法就可以将后面部分恢复为默认的。\n\n### canvas改变样式：\nfillstyle：改变填充的颜色，  \n可以添加图片（图片从坐标原点开始渲染）\n```javascript\n        var img = new Image();\n        img.src = \"../images/1.jpeg\"\n        img.onload = function() {\n            ctx.beginPath();\n            var bg = ctx.createPattern(img, 'no-repeat')\n            ctx.fillStyle = bg;\n            ctx.fillRect(0, 0, 100, 100)\n        }\n```\n### 添加渐变  [参考](https://www.runoob.com/html/html5-canvas.html)\n#### 阴影：（默认是边框的里外都有）\n- shadowColor:添加阴影颜色\n- shadowBlur：添加阴影的大小\n- shadowOffsetX：阴影水平方向平移\n- shadowOffsetY：阴影垂直方向平移\n\n#### 线段样式（在线的两端添加样式）：\n- lineCap属性：在两端加一个图形，为扩大线段的长度（值为round表示加一个半圆，）\n- lineJoin属性：两个线相交时的样式\n\n#### canvas绘制文字：\nstrokeText（文字，开始横坐标，开始纵坐标）：文字描边（空心字体）\n\nfillText（文字，开始横坐标，开始纵坐标）：文字填充，（实心字体）可以用fillstyle改变字体颜色\n\n## [svg](https://www.runoob.com/svg/svg-tutorial.html):\nsvg适合矢量图，放大不会失真，适合大面积的贴图，通常动画较简单（标签和CSS绘画）  \ncanvas适合用于小面积的绘图，适合动画（JS去画）\n\n### 画直线：\n在SVG标签里使用line标签有四个属性x1,y1,x2,y2分别代表开始位置坐标和结束位置坐标，画完之后要在css中为他们设置stroke属性\n\n### 画矩形：\n在SVG里用标签rect标签，属性width，height，x,y,rx,ry,分别表示矩形的宽，高，起始位置的横纵坐标，圆角的宽高\n#### 画圆：\n在SVG里用标签circle\n#### 画椭圆：\n在SVG里用ellipse标签\n#### 画折线：\n在SVG里用polyline标签，默认闭合\n解决默认填充的可以在css中将fill值改为transparent\n\n###### \n","slug":"h5基础","published":1,"updated":"2022-01-01T06:30:43.225Z","_id":"ckxu6dnid000e10ax7cr86kyw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HTML5-基础\"><a href=\"#HTML5-基础\" class=\"headerlink\" title=\"HTML5 基础\"></a>HTML5 基础</h1><hr>\n<h2 id=\"input：\"><a href=\"#input：\" class=\"headerlink\" title=\"input：\"></a>input：</h2><p>placeholder：输入框提示</p>\n<h3 id=\"type里面新增加的类型：（有兼容性问题，不推荐使用）\"><a href=\"#type里面新增加的类型：（有兼容性问题，不推荐使用）\" class=\"headerlink\" title=\"type里面新增加的类型：（有兼容性问题，不推荐使用）\"></a>type里面新增加的类型：（有兼容性问题，不推荐使用）</h3><ul>\n<li>date:可以选择日期（兼容性不好）;</li>\n<li>time:时间；week：星期；</li>\n<li>datetime-local:可以选择日期时间；</li>\n<li>number：只能填写数字 color：填颜色。</li>\n</ul>\n<h2 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h2><p><code>contenteditable=&quot;true&quot;</code> ：可修改元素的内容（可以继承）（没有兼容性问题）</p>\n<p><code>draggable = &quot;true&quot;</code> :元素可拖拽（大部分元素默认为false，其中a标签img标签默认为true） （只有Chrome和Safari支持）</p>\n<h3 id=\"拖拽周期：推拽开始，拖拽进行时，拖拽结束\"><a href=\"#拖拽周期：推拽开始，拖拽进行时，拖拽结束\" class=\"headerlink\" title=\"拖拽周期：推拽开始，拖拽进行时，拖拽结束\"></a>拖拽周期：推拽开始，拖拽进行时，拖拽结束</h3><h4 id=\"涉及事件：\"><a href=\"#涉及事件：\" class=\"headerlink\" title=\"涉及事件：\"></a>涉及事件：</h4><ul>\n<li>拖拽开始（dragstart）,按下物体的瞬间不会触发事件，必须移动</li>\n<li>拖拽移动事件（drag）,移动的时候触发</li>\n<li>拖拽结束时间（dragend），结束时间<h4 id=\"拖拽目标事件：\"><a href=\"#拖拽目标事件：\" class=\"headerlink\" title=\"拖拽目标事件：\"></a>拖拽目标事件：</h4></li>\n<li>dragenter：当拖拽进入目标区域时，不是元素图形进入触发，而是拖拽的鼠标进入才会触发</li>\n<li>dragover：在拖拽目标的范围内移动触发(想要阻止元素回到默认位置，必须在这设置阻止默认事件)</li>\n<li>dragleave：离开拖拽目标触发</li>\n<li>dragdrop: 必须在dragover事件下阻止默认事件才会触发（e.preventDefault()）</li>\n</ul>\n<p>拖拽的时候元素会脱离文档结构，放回去的时候在恢复。</p>\n<p><code>dataTransfer.effectAllowed</code>:可以改变拖拽时指针的样式（必须写在draggstart里，兼容性不行)</p>\n<p><code>e.dataTransfer.effectAllowed = 样式</code></p>\n<p><code>dataTransfer.dropEffect</code>:可以改变拖拽松手时指针的样式（必须写在drop里，兼容性不行）</p>\n<p><code>e.dataTransfer.dropEffect = 样式</code></p>\n<h2 id=\"canvas：\"><a href=\"#canvas：\" class=\"headerlink\" title=\"canvas：\"></a><a href=\"https://www.runoob.com/w3cnote/html5-canvas-intro.html\">canvas</a>：</h2><p>canvas要在js中开始操作画图。<br>canvas设置画板的大小需要在行间设置</p>\n<h3 id=\"canvas中画笔方法：\"><a href=\"#canvas中画笔方法：\" class=\"headerlink\" title=\"canvas中画笔方法：\"></a>canvas中画笔方法：</h3><p><code>画板.getContext(&quot;2d&quot;) : 生成一个画笔</code><br>moveTo（x,y）:画笔开始的的位置<br>lineTo（x,y）：下一笔要到的地方<br>lineWidth：设置画笔画出来线条的宽度（每个画笔画出来的图形苦读一样）<br>beginPath ：开启一个新的路径<br>closePath ：自动闭合所画的图形（闭合当前这一个路径）<br>stroke ： 将画笔的轨迹写到画板上（即展示画的图形）<br>fill : 将图形的内容区填满（会自动闭合图形）<br>clearRect（起始X，起始Y，矩形的宽，矩形的高）:清除这个矩形框的内容（相当于橡皮擦）</p>\n<h3 id=\"canvas画矩形：\"><a href=\"#canvas画矩形：\" class=\"headerlink\" title=\"canvas画矩形：\"></a>canvas画矩形：</h3><ol>\n<li>一笔一笔的画</li>\n<li>rect（起始X，起始Y，矩形的宽，矩形的高）:一个矩形</li>\n<li>strokeRect(起始X，起始Y，矩形的宽，矩形的高):一个只有边框的矩形</li>\n<li>fillRect（起始X，起始Y，矩形的宽，矩形的高）：有填充内容的矩形</li>\n</ol>\n<h3 id=\"canvas画圆形，圆弧：\"><a href=\"#canvas画圆形，圆弧：\" class=\"headerlink\" title=\"canvas画圆形，圆弧：\"></a>canvas画圆形，圆弧：</h3><p>参数：圆心（x,y），半径(r)，弧度（开始弧度start，结束弧度end，必须以π（Math.PI）为单位 例 Math.PI* 2 : 360度），方向（顺时针，逆时针，顺时针写为0，逆时针为1）</p>\n<p>arc（x,y,r,开始弧度,结束弧度,方向）：方法</p>\n<h3 id=\"canvas画圆角矩形：\"><a href=\"#canvas画圆角矩形：\" class=\"headerlink\" title=\"canvas画圆角矩形：\"></a>canvas画圆角矩形：</h3><h4 id=\"画一条带弧的线：\"><a href=\"#画一条带弧的线：\" class=\"headerlink\" title=\"画一条带弧的线：\"></a>画一条带弧的线：</h4><p>参数：线直线部分的结束坐标（x,y），线的结束部分弧的方向（需填写一个坐标表示延伸方向，只提供方向参考），圆弧的大小</p>\n<p>arcTo（x,y，弧所延伸方向的坐标，圆弧的大小）：画出一条线</p>\n<p><strong>注意</strong>：四条线就可画出圆角矩形，画笔的起始位置应该为矩形的弧形大小预留出一定的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//画一个弧度为10px 起始位置位（100 100），宽高为100的圆角矩形</span></span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">110</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.stroke();</span><br></pre></td></tr></table></figure>\n<h3 id=\"贝塞尔曲线：\"><a href=\"#贝塞尔曲线：\" class=\"headerlink\" title=\"贝塞尔曲线：\"></a>贝塞尔曲线：</h3><p>二次贝塞尔曲线需提供三个点，做出两条辅助线<br>三次需要四个点，三条辅助线，<br>其他类推（第一个点为画笔的起始点） </p>\n<p>quadraticCurveTo（第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标）：二次贝塞尔曲线</p>\n<p>bezierCurveTo(第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标,第四个点横坐标，第四个点纵坐标)：三次贝塞尔曲线</p>\n<h3 id=\"变换：\"><a href=\"#变换：\" class=\"headerlink\" title=\"变换：\"></a>变换：</h3><p>translate（x,y）:画布的坐标系原点（对全局都有作用）<br>rotate(角度):所画图形的旋转角度（必须以π为单位），旋转中心为坐标系原点（对全局都有作用。<br>scale（x轴方向，y轴方向）：缩放图形，图形的每一个坐标点都乘以了相应的系数（对全局都有作用）<br>解决消除对全局的影响：再开始时调用save方法（），在对某一部分调用完rotate和translate方法后再次调用restore方法就可以将后面部分恢复为默认的。</p>\n<h3 id=\"canvas改变样式：\"><a href=\"#canvas改变样式：\" class=\"headerlink\" title=\"canvas改变样式：\"></a>canvas改变样式：</h3><p>fillstyle：改变填充的颜色，<br>可以添加图片（图片从坐标原点开始渲染）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.src = <span class=\"string\">&quot;../images/1.jpeg&quot;</span></span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            ctx.beginPath();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bg = ctx.createPattern(img, <span class=\"string\">&#x27;no-repeat&#x27;</span>)</span><br><span class=\"line\">            ctx.fillStyle = bg;</span><br><span class=\"line\">            ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加渐变-参考\"><a href=\"#添加渐变-参考\" class=\"headerlink\" title=\"添加渐变  参考\"></a>添加渐变  <a href=\"https://www.runoob.com/html/html5-canvas.html\">参考</a></h3><h4 id=\"阴影：（默认是边框的里外都有）\"><a href=\"#阴影：（默认是边框的里外都有）\" class=\"headerlink\" title=\"阴影：（默认是边框的里外都有）\"></a>阴影：（默认是边框的里外都有）</h4><ul>\n<li>shadowColor:添加阴影颜色</li>\n<li>shadowBlur：添加阴影的大小</li>\n<li>shadowOffsetX：阴影水平方向平移</li>\n<li>shadowOffsetY：阴影垂直方向平移</li>\n</ul>\n<h4 id=\"线段样式（在线的两端添加样式）：\"><a href=\"#线段样式（在线的两端添加样式）：\" class=\"headerlink\" title=\"线段样式（在线的两端添加样式）：\"></a>线段样式（在线的两端添加样式）：</h4><ul>\n<li>lineCap属性：在两端加一个图形，为扩大线段的长度（值为round表示加一个半圆，）</li>\n<li>lineJoin属性：两个线相交时的样式</li>\n</ul>\n<h4 id=\"canvas绘制文字：\"><a href=\"#canvas绘制文字：\" class=\"headerlink\" title=\"canvas绘制文字：\"></a>canvas绘制文字：</h4><p>strokeText（文字，开始横坐标，开始纵坐标）：文字描边（空心字体）</p>\n<p>fillText（文字，开始横坐标，开始纵坐标）：文字填充，（实心字体）可以用fillstyle改变字体颜色</p>\n<h2 id=\"svg\"><a href=\"#svg\" class=\"headerlink\" title=\"svg:\"></a><a href=\"https://www.runoob.com/svg/svg-tutorial.html\">svg</a>:</h2><p>svg适合矢量图，放大不会失真，适合大面积的贴图，通常动画较简单（标签和CSS绘画）<br>canvas适合用于小面积的绘图，适合动画（JS去画）</p>\n<h3 id=\"画直线：\"><a href=\"#画直线：\" class=\"headerlink\" title=\"画直线：\"></a>画直线：</h3><p>在SVG标签里使用line标签有四个属性x1,y1,x2,y2分别代表开始位置坐标和结束位置坐标，画完之后要在css中为他们设置stroke属性</p>\n<h3 id=\"画矩形：\"><a href=\"#画矩形：\" class=\"headerlink\" title=\"画矩形：\"></a>画矩形：</h3><p>在SVG里用标签rect标签，属性width，height，x,y,rx,ry,分别表示矩形的宽，高，起始位置的横纵坐标，圆角的宽高</p>\n<h4 id=\"画圆：\"><a href=\"#画圆：\" class=\"headerlink\" title=\"画圆：\"></a>画圆：</h4><p>在SVG里用标签circle</p>\n<h4 id=\"画椭圆：\"><a href=\"#画椭圆：\" class=\"headerlink\" title=\"画椭圆：\"></a>画椭圆：</h4><p>在SVG里用ellipse标签</p>\n<h4 id=\"画折线：\"><a href=\"#画折线：\" class=\"headerlink\" title=\"画折线：\"></a>画折线：</h4><p>在SVG里用polyline标签，默认闭合<br>解决默认填充的可以在css中将fill值改为transparent</p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6>","site":{"data":{}},"length":2917,"excerpt":"","more":"<h1 id=\"HTML5-基础\"><a href=\"#HTML5-基础\" class=\"headerlink\" title=\"HTML5 基础\"></a>HTML5 基础</h1><hr>\n<h2 id=\"input：\"><a href=\"#input：\" class=\"headerlink\" title=\"input：\"></a>input：</h2><p>placeholder：输入框提示</p>\n<h3 id=\"type里面新增加的类型：（有兼容性问题，不推荐使用）\"><a href=\"#type里面新增加的类型：（有兼容性问题，不推荐使用）\" class=\"headerlink\" title=\"type里面新增加的类型：（有兼容性问题，不推荐使用）\"></a>type里面新增加的类型：（有兼容性问题，不推荐使用）</h3><ul>\n<li>date:可以选择日期（兼容性不好）;</li>\n<li>time:时间；week：星期；</li>\n<li>datetime-local:可以选择日期时间；</li>\n<li>number：只能填写数字 color：填颜色。</li>\n</ul>\n<h2 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h2><p><code>contenteditable=&quot;true&quot;</code> ：可修改元素的内容（可以继承）（没有兼容性问题）</p>\n<p><code>draggable = &quot;true&quot;</code> :元素可拖拽（大部分元素默认为false，其中a标签img标签默认为true） （只有Chrome和Safari支持）</p>\n<h3 id=\"拖拽周期：推拽开始，拖拽进行时，拖拽结束\"><a href=\"#拖拽周期：推拽开始，拖拽进行时，拖拽结束\" class=\"headerlink\" title=\"拖拽周期：推拽开始，拖拽进行时，拖拽结束\"></a>拖拽周期：推拽开始，拖拽进行时，拖拽结束</h3><h4 id=\"涉及事件：\"><a href=\"#涉及事件：\" class=\"headerlink\" title=\"涉及事件：\"></a>涉及事件：</h4><ul>\n<li>拖拽开始（dragstart）,按下物体的瞬间不会触发事件，必须移动</li>\n<li>拖拽移动事件（drag）,移动的时候触发</li>\n<li>拖拽结束时间（dragend），结束时间<h4 id=\"拖拽目标事件：\"><a href=\"#拖拽目标事件：\" class=\"headerlink\" title=\"拖拽目标事件：\"></a>拖拽目标事件：</h4></li>\n<li>dragenter：当拖拽进入目标区域时，不是元素图形进入触发，而是拖拽的鼠标进入才会触发</li>\n<li>dragover：在拖拽目标的范围内移动触发(想要阻止元素回到默认位置，必须在这设置阻止默认事件)</li>\n<li>dragleave：离开拖拽目标触发</li>\n<li>dragdrop: 必须在dragover事件下阻止默认事件才会触发（e.preventDefault()）</li>\n</ul>\n<p>拖拽的时候元素会脱离文档结构，放回去的时候在恢复。</p>\n<p><code>dataTransfer.effectAllowed</code>:可以改变拖拽时指针的样式（必须写在draggstart里，兼容性不行)</p>\n<p><code>e.dataTransfer.effectAllowed = 样式</code></p>\n<p><code>dataTransfer.dropEffect</code>:可以改变拖拽松手时指针的样式（必须写在drop里，兼容性不行）</p>\n<p><code>e.dataTransfer.dropEffect = 样式</code></p>\n<h2 id=\"canvas：\"><a href=\"#canvas：\" class=\"headerlink\" title=\"canvas：\"></a><a href=\"https://www.runoob.com/w3cnote/html5-canvas-intro.html\">canvas</a>：</h2><p>canvas要在js中开始操作画图。<br>canvas设置画板的大小需要在行间设置</p>\n<h3 id=\"canvas中画笔方法：\"><a href=\"#canvas中画笔方法：\" class=\"headerlink\" title=\"canvas中画笔方法：\"></a>canvas中画笔方法：</h3><p><code>画板.getContext(&quot;2d&quot;) : 生成一个画笔</code><br>moveTo（x,y）:画笔开始的的位置<br>lineTo（x,y）：下一笔要到的地方<br>lineWidth：设置画笔画出来线条的宽度（每个画笔画出来的图形苦读一样）<br>beginPath ：开启一个新的路径<br>closePath ：自动闭合所画的图形（闭合当前这一个路径）<br>stroke ： 将画笔的轨迹写到画板上（即展示画的图形）<br>fill : 将图形的内容区填满（会自动闭合图形）<br>clearRect（起始X，起始Y，矩形的宽，矩形的高）:清除这个矩形框的内容（相当于橡皮擦）</p>\n<h3 id=\"canvas画矩形：\"><a href=\"#canvas画矩形：\" class=\"headerlink\" title=\"canvas画矩形：\"></a>canvas画矩形：</h3><ol>\n<li>一笔一笔的画</li>\n<li>rect（起始X，起始Y，矩形的宽，矩形的高）:一个矩形</li>\n<li>strokeRect(起始X，起始Y，矩形的宽，矩形的高):一个只有边框的矩形</li>\n<li>fillRect（起始X，起始Y，矩形的宽，矩形的高）：有填充内容的矩形</li>\n</ol>\n<h3 id=\"canvas画圆形，圆弧：\"><a href=\"#canvas画圆形，圆弧：\" class=\"headerlink\" title=\"canvas画圆形，圆弧：\"></a>canvas画圆形，圆弧：</h3><p>参数：圆心（x,y），半径(r)，弧度（开始弧度start，结束弧度end，必须以π（Math.PI）为单位 例 Math.PI* 2 : 360度），方向（顺时针，逆时针，顺时针写为0，逆时针为1）</p>\n<p>arc（x,y,r,开始弧度,结束弧度,方向）：方法</p>\n<h3 id=\"canvas画圆角矩形：\"><a href=\"#canvas画圆角矩形：\" class=\"headerlink\" title=\"canvas画圆角矩形：\"></a>canvas画圆角矩形：</h3><h4 id=\"画一条带弧的线：\"><a href=\"#画一条带弧的线：\" class=\"headerlink\" title=\"画一条带弧的线：\"></a>画一条带弧的线：</h4><p>参数：线直线部分的结束坐标（x,y），线的结束部分弧的方向（需填写一个坐标表示延伸方向，只提供方向参考），圆弧的大小</p>\n<p>arcTo（x,y，弧所延伸方向的坐标，圆弧的大小）：画出一条线</p>\n<p><strong>注意</strong>：四条线就可画出圆角矩形，画笔的起始位置应该为矩形的弧形大小预留出一定的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//画一个弧度为10px 起始位置位（100 100），宽高为100的圆角矩形</span></span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">110</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.arcTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        ctx.stroke();</span><br></pre></td></tr></table></figure>\n<h3 id=\"贝塞尔曲线：\"><a href=\"#贝塞尔曲线：\" class=\"headerlink\" title=\"贝塞尔曲线：\"></a>贝塞尔曲线：</h3><p>二次贝塞尔曲线需提供三个点，做出两条辅助线<br>三次需要四个点，三条辅助线，<br>其他类推（第一个点为画笔的起始点） </p>\n<p>quadraticCurveTo（第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标）：二次贝塞尔曲线</p>\n<p>bezierCurveTo(第二个点横坐标，第二个点纵坐标，第三个点横坐标，第三个点纵坐标,第四个点横坐标，第四个点纵坐标)：三次贝塞尔曲线</p>\n<h3 id=\"变换：\"><a href=\"#变换：\" class=\"headerlink\" title=\"变换：\"></a>变换：</h3><p>translate（x,y）:画布的坐标系原点（对全局都有作用）<br>rotate(角度):所画图形的旋转角度（必须以π为单位），旋转中心为坐标系原点（对全局都有作用。<br>scale（x轴方向，y轴方向）：缩放图形，图形的每一个坐标点都乘以了相应的系数（对全局都有作用）<br>解决消除对全局的影响：再开始时调用save方法（），在对某一部分调用完rotate和translate方法后再次调用restore方法就可以将后面部分恢复为默认的。</p>\n<h3 id=\"canvas改变样式：\"><a href=\"#canvas改变样式：\" class=\"headerlink\" title=\"canvas改变样式：\"></a>canvas改变样式：</h3><p>fillstyle：改变填充的颜色，<br>可以添加图片（图片从坐标原点开始渲染）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.src = <span class=\"string\">&quot;../images/1.jpeg&quot;</span></span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            ctx.beginPath();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bg = ctx.createPattern(img, <span class=\"string\">&#x27;no-repeat&#x27;</span>)</span><br><span class=\"line\">            ctx.fillStyle = bg;</span><br><span class=\"line\">            ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加渐变-参考\"><a href=\"#添加渐变-参考\" class=\"headerlink\" title=\"添加渐变  参考\"></a>添加渐变  <a href=\"https://www.runoob.com/html/html5-canvas.html\">参考</a></h3><h4 id=\"阴影：（默认是边框的里外都有）\"><a href=\"#阴影：（默认是边框的里外都有）\" class=\"headerlink\" title=\"阴影：（默认是边框的里外都有）\"></a>阴影：（默认是边框的里外都有）</h4><ul>\n<li>shadowColor:添加阴影颜色</li>\n<li>shadowBlur：添加阴影的大小</li>\n<li>shadowOffsetX：阴影水平方向平移</li>\n<li>shadowOffsetY：阴影垂直方向平移</li>\n</ul>\n<h4 id=\"线段样式（在线的两端添加样式）：\"><a href=\"#线段样式（在线的两端添加样式）：\" class=\"headerlink\" title=\"线段样式（在线的两端添加样式）：\"></a>线段样式（在线的两端添加样式）：</h4><ul>\n<li>lineCap属性：在两端加一个图形，为扩大线段的长度（值为round表示加一个半圆，）</li>\n<li>lineJoin属性：两个线相交时的样式</li>\n</ul>\n<h4 id=\"canvas绘制文字：\"><a href=\"#canvas绘制文字：\" class=\"headerlink\" title=\"canvas绘制文字：\"></a>canvas绘制文字：</h4><p>strokeText（文字，开始横坐标，开始纵坐标）：文字描边（空心字体）</p>\n<p>fillText（文字，开始横坐标，开始纵坐标）：文字填充，（实心字体）可以用fillstyle改变字体颜色</p>\n<h2 id=\"svg\"><a href=\"#svg\" class=\"headerlink\" title=\"svg:\"></a><a href=\"https://www.runoob.com/svg/svg-tutorial.html\">svg</a>:</h2><p>svg适合矢量图，放大不会失真，适合大面积的贴图，通常动画较简单（标签和CSS绘画）<br>canvas适合用于小面积的绘图，适合动画（JS去画）</p>\n<h3 id=\"画直线：\"><a href=\"#画直线：\" class=\"headerlink\" title=\"画直线：\"></a>画直线：</h3><p>在SVG标签里使用line标签有四个属性x1,y1,x2,y2分别代表开始位置坐标和结束位置坐标，画完之后要在css中为他们设置stroke属性</p>\n<h3 id=\"画矩形：\"><a href=\"#画矩形：\" class=\"headerlink\" title=\"画矩形：\"></a>画矩形：</h3><p>在SVG里用标签rect标签，属性width，height，x,y,rx,ry,分别表示矩形的宽，高，起始位置的横纵坐标，圆角的宽高</p>\n<h4 id=\"画圆：\"><a href=\"#画圆：\" class=\"headerlink\" title=\"画圆：\"></a>画圆：</h4><p>在SVG里用标签circle</p>\n<h4 id=\"画椭圆：\"><a href=\"#画椭圆：\" class=\"headerlink\" title=\"画椭圆：\"></a>画椭圆：</h4><p>在SVG里用ellipse标签</p>\n<h4 id=\"画折线：\"><a href=\"#画折线：\" class=\"headerlink\" title=\"画折线：\"></a>画折线：</h4><p>在SVG里用polyline标签，默认闭合<br>解决默认填充的可以在css中将fill值改为transparent</p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h6>"},{"title":"js中常用的数组方法","date":"2021-12-31T08:21:22.000Z","description":"js数组方法(map,forEach、some、filter、reduce等的使用)，属性和特性的关系与区别","_content":"\n# js收官和数组方法\n----------\n\n## label标签\n\nfor里面写上要关联内容的标识  \n添加事件时触发label时和label他关联的内容都触发，但触发内容事件时只触发自身\n\n```html\n        <label for=\"demo\">uesrname:</label>\n        <input type=\"text\" id=\"demo\">\n```\n\n## 属性和特性：\n特性属于属性  \n特性：系统上自带的一些属性  \n元素的特性是与dom对象一 一映射的  \n不是特性的属性不是一 一映射的\n\n## 图片的预加载和懒加载\n### 预加载：\n图片加载完之后才展现，不一行一行加载展现出来\n### 懒加载：\n浏览到才开始加载\n\n\n## Math.random()\n区间范围 ： [ 0 , 1 )\n\n## 数组方法\n\n### forEach ：\n    - 循环遍历，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n    - 数组名.forEach(函数（有三个参数）（第一个是数组中的元素，第二个是索引，第三个是数组本身）)； \n    无返回值\n\n### filter :\n    - 对数组过滤，基于遍历 ，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n    - 执行完会返回一个新的数组。若函数的返回值为true代表当前元素保存在新数组中，为false时则过滤掉。\n\n### map :\n    - 映射，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n    - 函数执行完的返回值决定map返回的值，会返回一个数组\n```javascript\n        var newArr = personArr.map(function(ele, index, self) {\n            return self[index].name;\n        })\n        //可以仅返回数组中每一项中的name属性\n        console.log(newArr);\n```\n执行完会返回一个新的数组\n\n### every ：\n    - 数组中每元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n    - 返回值为false则有元素不符合，返回值为true则所有项都符合，只有遇到有返回值为false就停止执行，返回结果为false。  \n    执行完会返回true或false。\n\n### some ：\n    - 数组中是否有元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n    - 返回值为false则所有元素都不符合，返回值为true则至少有一个符合，只有遇到有返回值为true就停止执行，返回结果为true。   \n    执行完会返回true或false。\n\n\n### 字符串.indexOf(字符串1);\n    如果字符串中包含字符串1，则返回第一个索引值，不包含则返回 -1；\n\nslice方法可以把类数组转为数组\n","source":"_posts/js收官和数组方法.md","raw":"---\ntitle: js中常用的数组方法\ndate: 2021-12-31 16:21:22\ndescription: js数组方法(map,forEach、some、filter、reduce等的使用)，属性和特性的关系与区别\ncategories: \n    - 前端学习笔记\n    - js\ntags: \n  - js\n  - 前端\n---\n\n# js收官和数组方法\n----------\n\n## label标签\n\nfor里面写上要关联内容的标识  \n添加事件时触发label时和label他关联的内容都触发，但触发内容事件时只触发自身\n\n```html\n        <label for=\"demo\">uesrname:</label>\n        <input type=\"text\" id=\"demo\">\n```\n\n## 属性和特性：\n特性属于属性  \n特性：系统上自带的一些属性  \n元素的特性是与dom对象一 一映射的  \n不是特性的属性不是一 一映射的\n\n## 图片的预加载和懒加载\n### 预加载：\n图片加载完之后才展现，不一行一行加载展现出来\n### 懒加载：\n浏览到才开始加载\n\n\n## Math.random()\n区间范围 ： [ 0 , 1 )\n\n## 数组方法\n\n### forEach ：\n    - 循环遍历，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n    - 数组名.forEach(函数（有三个参数）（第一个是数组中的元素，第二个是索引，第三个是数组本身）)； \n    无返回值\n\n### filter :\n    - 对数组过滤，基于遍历 ，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n    - 执行完会返回一个新的数组。若函数的返回值为true代表当前元素保存在新数组中，为false时则过滤掉。\n\n### map :\n    - 映射，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n    - 函数执行完的返回值决定map返回的值，会返回一个数组\n```javascript\n        var newArr = personArr.map(function(ele, index, self) {\n            return self[index].name;\n        })\n        //可以仅返回数组中每一项中的name属性\n        console.log(newArr);\n```\n执行完会返回一个新的数组\n\n### every ：\n    - 数组中每元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n    - 返回值为false则有元素不符合，返回值为true则所有项都符合，只有遇到有返回值为false就停止执行，返回结果为false。  \n    执行完会返回true或false。\n\n### some ：\n    - 数组中是否有元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n    - 返回值为false则所有元素都不符合，返回值为true则至少有一个符合，只有遇到有返回值为true就停止执行，返回结果为true。   \n    执行完会返回true或false。\n\n\n### 字符串.indexOf(字符串1);\n    如果字符串中包含字符串1，则返回第一个索引值，不包含则返回 -1；\n\nslice方法可以把类数组转为数组\n","slug":"js收官和数组方法","published":1,"updated":"2022-01-01T06:30:54.608Z","_id":"ckxu6dnif000h10ax7to6bliq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"js收官和数组方法\"><a href=\"#js收官和数组方法\" class=\"headerlink\" title=\"js收官和数组方法\"></a>js收官和数组方法</h1><hr>\n<h2 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h2><p>for里面写上要关联内容的标识<br>添加事件时触发label时和label他关联的内容都触发，但触发内容事件时只触发自身</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>uesrname:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性和特性：\"><a href=\"#属性和特性：\" class=\"headerlink\" title=\"属性和特性：\"></a>属性和特性：</h2><p>特性属于属性<br>特性：系统上自带的一些属性<br>元素的特性是与dom对象一 一映射的<br>不是特性的属性不是一 一映射的</p>\n<h2 id=\"图片的预加载和懒加载\"><a href=\"#图片的预加载和懒加载\" class=\"headerlink\" title=\"图片的预加载和懒加载\"></a>图片的预加载和懒加载</h2><h3 id=\"预加载：\"><a href=\"#预加载：\" class=\"headerlink\" title=\"预加载：\"></a>预加载：</h3><p>图片加载完之后才展现，不一行一行加载展现出来</p>\n<h3 id=\"懒加载：\"><a href=\"#懒加载：\" class=\"headerlink\" title=\"懒加载：\"></a>懒加载：</h3><p>浏览到才开始加载</p>\n<h2 id=\"Math-random\"><a href=\"#Math-random\" class=\"headerlink\" title=\"Math.random()\"></a>Math.random()</h2><p>区间范围 ： [ 0 , 1 )</p>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h3 id=\"forEach-：\"><a href=\"#forEach-：\" class=\"headerlink\" title=\"forEach ：\"></a>forEach ：</h3><pre><code>- 循环遍历，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n- 数组名.forEach(函数（有三个参数）（第一个是数组中的元素，第二个是索引，第三个是数组本身）)； \n无返回值\n</code></pre>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter :\"></a>filter :</h3><pre><code>- 对数组过滤，基于遍历 ，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n- 执行完会返回一个新的数组。若函数的返回值为true代表当前元素保存在新数组中，为false时则过滤掉。\n</code></pre>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map :\"></a>map :</h3><pre><code>- 映射，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n- 函数执行完的返回值决定map返回的值，会返回一个数组\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> newArr = personArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, index, self</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self[index].name;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">//可以仅返回数组中每一项中的name属性</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n<p>执行完会返回一个新的数组</p>\n<h3 id=\"every-：\"><a href=\"#every-：\" class=\"headerlink\" title=\"every ：\"></a>every ：</h3><pre><code>- 数组中每元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n- 返回值为false则有元素不符合，返回值为true则所有项都符合，只有遇到有返回值为false就停止执行，返回结果为false。  \n执行完会返回true或false。\n</code></pre>\n<h3 id=\"some-：\"><a href=\"#some-：\" class=\"headerlink\" title=\"some ：\"></a>some ：</h3><pre><code>- 数组中是否有元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n- 返回值为false则所有元素都不符合，返回值为true则至少有一个符合，只有遇到有返回值为true就停止执行，返回结果为true。   \n执行完会返回true或false。\n</code></pre>\n<h3 id=\"字符串-indexOf-字符串1\"><a href=\"#字符串-indexOf-字符串1\" class=\"headerlink\" title=\"字符串.indexOf(字符串1);\"></a>字符串.indexOf(字符串1);</h3><pre><code>如果字符串中包含字符串1，则返回第一个索引值，不包含则返回 -1；\n</code></pre>\n<p>slice方法可以把类数组转为数组</p>\n","site":{"data":{}},"length":1284,"excerpt":"","more":"<h1 id=\"js收官和数组方法\"><a href=\"#js收官和数组方法\" class=\"headerlink\" title=\"js收官和数组方法\"></a>js收官和数组方法</h1><hr>\n<h2 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h2><p>for里面写上要关联内容的标识<br>添加事件时触发label时和label他关联的内容都触发，但触发内容事件时只触发自身</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>uesrname:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性和特性：\"><a href=\"#属性和特性：\" class=\"headerlink\" title=\"属性和特性：\"></a>属性和特性：</h2><p>特性属于属性<br>特性：系统上自带的一些属性<br>元素的特性是与dom对象一 一映射的<br>不是特性的属性不是一 一映射的</p>\n<h2 id=\"图片的预加载和懒加载\"><a href=\"#图片的预加载和懒加载\" class=\"headerlink\" title=\"图片的预加载和懒加载\"></a>图片的预加载和懒加载</h2><h3 id=\"预加载：\"><a href=\"#预加载：\" class=\"headerlink\" title=\"预加载：\"></a>预加载：</h3><p>图片加载完之后才展现，不一行一行加载展现出来</p>\n<h3 id=\"懒加载：\"><a href=\"#懒加载：\" class=\"headerlink\" title=\"懒加载：\"></a>懒加载：</h3><p>浏览到才开始加载</p>\n<h2 id=\"Math-random\"><a href=\"#Math-random\" class=\"headerlink\" title=\"Math.random()\"></a>Math.random()</h2><p>区间范围 ： [ 0 , 1 )</p>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h3 id=\"forEach-：\"><a href=\"#forEach-：\" class=\"headerlink\" title=\"forEach ：\"></a>forEach ：</h3><pre><code>- 循环遍历，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n- 数组名.forEach(函数（有三个参数）（第一个是数组中的元素，第二个是索引，第三个是数组本身）)； \n无返回值\n</code></pre>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter :\"></a>filter :</h3><pre><code>- 对数组过滤，基于遍历 ，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n\n- 执行完会返回一个新的数组。若函数的返回值为true代表当前元素保存在新数组中，为false时则过滤掉。\n</code></pre>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map :\"></a>map :</h3><pre><code>- 映射，两个参数为一个函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身），第二个参数代表this的指向（可省略（默认为window））\n- 函数执行完的返回值决定map返回的值，会返回一个数组\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> newArr = personArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, index, self</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self[index].name;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">//可以仅返回数组中每一项中的name属性</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n<p>执行完会返回一个新的数组</p>\n<h3 id=\"every-：\"><a href=\"#every-：\" class=\"headerlink\" title=\"every ：\"></a>every ：</h3><pre><code>- 数组中每元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n- 返回值为false则有元素不符合，返回值为true则所有项都符合，只有遇到有返回值为false就停止执行，返回结果为false。  \n执行完会返回true或false。\n</code></pre>\n<h3 id=\"some-：\"><a href=\"#some-：\" class=\"headerlink\" title=\"some ：\"></a>some ：</h3><pre><code>- 数组中是否有元素都符合什么条件，两个参数，第一个参数为函数（（三个参数）第一个是数组中的元素，第二个是索引，第三个是数组本身）第二个参数代表this的指向（可省略（默认为window））\n\n- 返回值为false则所有元素都不符合，返回值为true则至少有一个符合，只有遇到有返回值为true就停止执行，返回结果为true。   \n执行完会返回true或false。\n</code></pre>\n<h3 id=\"字符串-indexOf-字符串1\"><a href=\"#字符串-indexOf-字符串1\" class=\"headerlink\" title=\"字符串.indexOf(字符串1);\"></a>字符串.indexOf(字符串1);</h3><pre><code>如果字符串中包含字符串1，则返回第一个索引值，不包含则返回 -1；\n</code></pre>\n<p>slice方法可以把类数组转为数组</p>\n"},{"title":"less的基本介绍","date":"2021-12-31T08:21:22.000Z","description":"less的基本介绍和语法知识","_content":"\n\n![技能树.drawio](http://mdrs.yuanjin.tech/img/20210507101924.png)\n\n# 什么是Less？\n\n**Less**是一种更加简洁的样式代码，它非常像CSS，但又不太一样，它让编写样式变得更容易\n\n下面是css代码和Less代码的对比，它们都表达了一样的含义\n\n![image-20210507125034131](http://mdrs.yuanjin.tech/img/20210507125034.png)\n\n**Less代码虽好，但它无法被浏览器识别**，因此需要一个工具将其转换为血统纯正的css代码\n\n由于**node环境具有读写文件的能力**，于是在node环境中可以轻松的完成文件的转换\n\n`npm`上有一个包叫做`less`，它运行在node环境中，通过它可以完成对Less代码的转换\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210507105107.png\" alt=\"image-20210507105107556\" style=\"zoom:50%;\" />\n\n**可以看出，node环境在前端工程化中，充当了一个辅助的角色，它并不直接运行前端代码，而是让我们编写前端代码更加舒适便利，在后续的课程中，你还会不断的体会到这一点**\n\n**转换代码，称之为编译(compile)，转换代码的工具，称之为编译器(compiler)**\n\n# 体验Less\n\n1. 新建`index.less`文件，编写下面的`less`代码\n\n   ```less\n   @green: #008c8c;\n   .list {\n     display: flex;\n     flex-wrap: wrap;\n     color: @green;\n     li {\n       margin: 1em;\n       &:hover {\n         background: @green;\n         color: #fff;\n       }\n     }\n   }\n   ```\n\n2. 使用`npm`下载`less`\n\n   `less`包提供了一个`cli`工具`lessc`，你可以有两种方案使用它\n\n   **方案一：全局安装less**\n\n   这种方案可以让你在任何终端目录使用`lessc`命令，但不利于版本控制\n\n   **方案二：本地安装less**\n\n   这种方案会把`less`安装到工程目录的`node_modules`中，你无法全局使用`lessc`命令，但可以在当前工程目录中使用`npx lessc`运行该命令\n\n   > npx是npm提供的一个小工具，它可以运行当前项目中安装到node_modules的cli命令\n   >\n   > 如果配置`package.json`脚本，无须使用`npx`\n   >\n   > 如果可以，应该尽量使用本地安装，而非全局安装\n\n   如果可以，应该尽量使用本地安装，而非全局安装\n\n3. 使用`lessc`命令，对编写的`less`文件进行编译\n\n   ```shell\n   # 将 index.less 编译成为 index.css\n   lessc index.less index.css\n   ```\n\n4. 新建一个页面，引用编译结果`index.css`\n\n> 目前，编写less代码会遇到一点小麻烦，就是每次编写后，都需要运行命令进行编译\n>\n> 这个麻烦只是暂时的，将来很快就可以解决\n\n# Less的核心语法\n\n>Less官网：https://lesscss.org/\n>\n>Less民间中文网：https://less.bootcss.com/\n\nLess提供了非常多的功能，帮助我们更加轻松的编写css代码\n\n其中，我们最常用的功能有下面3个：\n\n- [变量](https://less.bootcss.com/#%E5%8F%98%E9%87%8F%EF%BC%88variables%EF%BC%89)\n- [嵌套](https://less.bootcss.com/#%E5%B5%8C%E5%A5%97%EF%BC%88nesting%EF%BC%89)\n- [混合](https://less.bootcss.com/#%E6%B7%B7%E5%90%88%EF%BC%88mixins%EF%BC%89)\n\n另外，你需要关注Less的特殊[注释](https://less.bootcss.com/#%E6%B3%A8%E9%87%8A%EF%BC%88comments%EF%BC%89)\n\n\n\n\n\n","source":"_posts/less.md","raw":"---\ntitle: less的基本介绍\ndate: 2021-12-31 16:21:22\ndescription: less的基本介绍和语法知识\ncategories: \n  - 前端学习笔记\n  - less\ntags: \n  - less\n  - 前端\n---\n\n\n![技能树.drawio](http://mdrs.yuanjin.tech/img/20210507101924.png)\n\n# 什么是Less？\n\n**Less**是一种更加简洁的样式代码，它非常像CSS，但又不太一样，它让编写样式变得更容易\n\n下面是css代码和Less代码的对比，它们都表达了一样的含义\n\n![image-20210507125034131](http://mdrs.yuanjin.tech/img/20210507125034.png)\n\n**Less代码虽好，但它无法被浏览器识别**，因此需要一个工具将其转换为血统纯正的css代码\n\n由于**node环境具有读写文件的能力**，于是在node环境中可以轻松的完成文件的转换\n\n`npm`上有一个包叫做`less`，它运行在node环境中，通过它可以完成对Less代码的转换\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210507105107.png\" alt=\"image-20210507105107556\" style=\"zoom:50%;\" />\n\n**可以看出，node环境在前端工程化中，充当了一个辅助的角色，它并不直接运行前端代码，而是让我们编写前端代码更加舒适便利，在后续的课程中，你还会不断的体会到这一点**\n\n**转换代码，称之为编译(compile)，转换代码的工具，称之为编译器(compiler)**\n\n# 体验Less\n\n1. 新建`index.less`文件，编写下面的`less`代码\n\n   ```less\n   @green: #008c8c;\n   .list {\n     display: flex;\n     flex-wrap: wrap;\n     color: @green;\n     li {\n       margin: 1em;\n       &:hover {\n         background: @green;\n         color: #fff;\n       }\n     }\n   }\n   ```\n\n2. 使用`npm`下载`less`\n\n   `less`包提供了一个`cli`工具`lessc`，你可以有两种方案使用它\n\n   **方案一：全局安装less**\n\n   这种方案可以让你在任何终端目录使用`lessc`命令，但不利于版本控制\n\n   **方案二：本地安装less**\n\n   这种方案会把`less`安装到工程目录的`node_modules`中，你无法全局使用`lessc`命令，但可以在当前工程目录中使用`npx lessc`运行该命令\n\n   > npx是npm提供的一个小工具，它可以运行当前项目中安装到node_modules的cli命令\n   >\n   > 如果配置`package.json`脚本，无须使用`npx`\n   >\n   > 如果可以，应该尽量使用本地安装，而非全局安装\n\n   如果可以，应该尽量使用本地安装，而非全局安装\n\n3. 使用`lessc`命令，对编写的`less`文件进行编译\n\n   ```shell\n   # 将 index.less 编译成为 index.css\n   lessc index.less index.css\n   ```\n\n4. 新建一个页面，引用编译结果`index.css`\n\n> 目前，编写less代码会遇到一点小麻烦，就是每次编写后，都需要运行命令进行编译\n>\n> 这个麻烦只是暂时的，将来很快就可以解决\n\n# Less的核心语法\n\n>Less官网：https://lesscss.org/\n>\n>Less民间中文网：https://less.bootcss.com/\n\nLess提供了非常多的功能，帮助我们更加轻松的编写css代码\n\n其中，我们最常用的功能有下面3个：\n\n- [变量](https://less.bootcss.com/#%E5%8F%98%E9%87%8F%EF%BC%88variables%EF%BC%89)\n- [嵌套](https://less.bootcss.com/#%E5%B5%8C%E5%A5%97%EF%BC%88nesting%EF%BC%89)\n- [混合](https://less.bootcss.com/#%E6%B7%B7%E5%90%88%EF%BC%88mixins%EF%BC%89)\n\n另外，你需要关注Less的特殊[注释](https://less.bootcss.com/#%E6%B3%A8%E9%87%8A%EF%BC%88comments%EF%BC%89)\n\n\n\n\n\n","slug":"less","published":1,"updated":"2022-01-01T06:31:26.237Z","_id":"ckxu6dnih000l10axhsad1u3s","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://mdrs.yuanjin.tech/img/20210507101924.png\" alt=\"技能树.drawio\"></p>\n<h1 id=\"什么是Less？\"><a href=\"#什么是Less？\" class=\"headerlink\" title=\"什么是Less？\"></a>什么是Less？</h1><p><strong>Less</strong>是一种更加简洁的样式代码，它非常像CSS，但又不太一样，它让编写样式变得更容易</p>\n<p>下面是css代码和Less代码的对比，它们都表达了一样的含义</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210507125034.png\" alt=\"image-20210507125034131\"></p>\n<p><strong>Less代码虽好，但它无法被浏览器识别</strong>，因此需要一个工具将其转换为血统纯正的css代码</p>\n<p>由于<strong>node环境具有读写文件的能力</strong>，于是在node环境中可以轻松的完成文件的转换</p>\n<p><code>npm</code>上有一个包叫做<code>less</code>，它运行在node环境中，通过它可以完成对Less代码的转换</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210507105107.png\" alt=\"image-20210507105107556\" style=\"zoom:50%;\" />\n\n<p><strong>可以看出，node环境在前端工程化中，充当了一个辅助的角色，它并不直接运行前端代码，而是让我们编写前端代码更加舒适便利，在后续的课程中，你还会不断的体会到这一点</strong></p>\n<p><strong>转换代码，称之为编译(compile)，转换代码的工具，称之为编译器(compiler)</strong></p>\n<h1 id=\"体验Less\"><a href=\"#体验Less\" class=\"headerlink\" title=\"体验Less\"></a>体验Less</h1><ol>\n<li><p>新建<code>index.less</code>文件，编写下面的<code>less</code>代码</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@green:</span> <span class=\"number\">#008c8c</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@green</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"variable\">@green</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>npm</code>下载<code>less</code></p>\n<p><code>less</code>包提供了一个<code>cli</code>工具<code>lessc</code>，你可以有两种方案使用它</p>\n<p><strong>方案一：全局安装less</strong></p>\n<p>这种方案可以让你在任何终端目录使用<code>lessc</code>命令，但不利于版本控制</p>\n<p><strong>方案二：本地安装less</strong></p>\n<p>这种方案会把<code>less</code>安装到工程目录的<code>node_modules</code>中，你无法全局使用<code>lessc</code>命令，但可以在当前工程目录中使用<code>npx lessc</code>运行该命令</p>\n<blockquote>\n<p>npx是npm提供的一个小工具，它可以运行当前项目中安装到node_modules的cli命令</p>\n<p>如果配置<code>package.json</code>脚本，无须使用<code>npx</code></p>\n<p>如果可以，应该尽量使用本地安装，而非全局安装</p>\n</blockquote>\n<p>如果可以，应该尽量使用本地安装，而非全局安装</p>\n</li>\n<li><p>使用<code>lessc</code>命令，对编写的<code>less</code>文件进行编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将 index.less 编译成为 index.css</span></span><br><span class=\"line\">lessc index.less index.css</span><br></pre></td></tr></table></figure></li>\n<li><p>新建一个页面，引用编译结果<code>index.css</code></p>\n</li>\n</ol>\n<blockquote>\n<p>目前，编写less代码会遇到一点小麻烦，就是每次编写后，都需要运行命令进行编译</p>\n<p>这个麻烦只是暂时的，将来很快就可以解决</p>\n</blockquote>\n<h1 id=\"Less的核心语法\"><a href=\"#Less的核心语法\" class=\"headerlink\" title=\"Less的核心语法\"></a>Less的核心语法</h1><blockquote>\n<p>Less官网：<a href=\"https://lesscss.org/\">https://lesscss.org/</a></p>\n<p>Less民间中文网：<a href=\"https://less.bootcss.com/\">https://less.bootcss.com/</a></p>\n</blockquote>\n<p>Less提供了非常多的功能，帮助我们更加轻松的编写css代码</p>\n<p>其中，我们最常用的功能有下面3个：</p>\n<ul>\n<li><a href=\"https://less.bootcss.com/#%E5%8F%98%E9%87%8F%EF%BC%88variables%EF%BC%89\">变量</a></li>\n<li><a href=\"https://less.bootcss.com/#%E5%B5%8C%E5%A5%97%EF%BC%88nesting%EF%BC%89\">嵌套</a></li>\n<li><a href=\"https://less.bootcss.com/#%E6%B7%B7%E5%90%88%EF%BC%88mixins%EF%BC%89\">混合</a></li>\n</ul>\n<p>另外，你需要关注Less的特殊<a href=\"https://less.bootcss.com/#%E6%B3%A8%E9%87%8A%EF%BC%88comments%EF%BC%89\">注释</a></p>\n","site":{"data":{}},"length":1117,"excerpt":"","more":"<p><img src=\"http://mdrs.yuanjin.tech/img/20210507101924.png\" alt=\"技能树.drawio\"></p>\n<h1 id=\"什么是Less？\"><a href=\"#什么是Less？\" class=\"headerlink\" title=\"什么是Less？\"></a>什么是Less？</h1><p><strong>Less</strong>是一种更加简洁的样式代码，它非常像CSS，但又不太一样，它让编写样式变得更容易</p>\n<p>下面是css代码和Less代码的对比，它们都表达了一样的含义</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210507125034.png\" alt=\"image-20210507125034131\"></p>\n<p><strong>Less代码虽好，但它无法被浏览器识别</strong>，因此需要一个工具将其转换为血统纯正的css代码</p>\n<p>由于<strong>node环境具有读写文件的能力</strong>，于是在node环境中可以轻松的完成文件的转换</p>\n<p><code>npm</code>上有一个包叫做<code>less</code>，它运行在node环境中，通过它可以完成对Less代码的转换</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210507105107.png\" alt=\"image-20210507105107556\" style=\"zoom:50%;\" />\n\n<p><strong>可以看出，node环境在前端工程化中，充当了一个辅助的角色，它并不直接运行前端代码，而是让我们编写前端代码更加舒适便利，在后续的课程中，你还会不断的体会到这一点</strong></p>\n<p><strong>转换代码，称之为编译(compile)，转换代码的工具，称之为编译器(compiler)</strong></p>\n<h1 id=\"体验Less\"><a href=\"#体验Less\" class=\"headerlink\" title=\"体验Less\"></a>体验Less</h1><ol>\n<li><p>新建<code>index.less</code>文件，编写下面的<code>less</code>代码</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@green:</span> <span class=\"number\">#008c8c</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@green</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"variable\">@green</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>npm</code>下载<code>less</code></p>\n<p><code>less</code>包提供了一个<code>cli</code>工具<code>lessc</code>，你可以有两种方案使用它</p>\n<p><strong>方案一：全局安装less</strong></p>\n<p>这种方案可以让你在任何终端目录使用<code>lessc</code>命令，但不利于版本控制</p>\n<p><strong>方案二：本地安装less</strong></p>\n<p>这种方案会把<code>less</code>安装到工程目录的<code>node_modules</code>中，你无法全局使用<code>lessc</code>命令，但可以在当前工程目录中使用<code>npx lessc</code>运行该命令</p>\n<blockquote>\n<p>npx是npm提供的一个小工具，它可以运行当前项目中安装到node_modules的cli命令</p>\n<p>如果配置<code>package.json</code>脚本，无须使用<code>npx</code></p>\n<p>如果可以，应该尽量使用本地安装，而非全局安装</p>\n</blockquote>\n<p>如果可以，应该尽量使用本地安装，而非全局安装</p>\n</li>\n<li><p>使用<code>lessc</code>命令，对编写的<code>less</code>文件进行编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将 index.less 编译成为 index.css</span></span><br><span class=\"line\">lessc index.less index.css</span><br></pre></td></tr></table></figure></li>\n<li><p>新建一个页面，引用编译结果<code>index.css</code></p>\n</li>\n</ol>\n<blockquote>\n<p>目前，编写less代码会遇到一点小麻烦，就是每次编写后，都需要运行命令进行编译</p>\n<p>这个麻烦只是暂时的，将来很快就可以解决</p>\n</blockquote>\n<h1 id=\"Less的核心语法\"><a href=\"#Less的核心语法\" class=\"headerlink\" title=\"Less的核心语法\"></a>Less的核心语法</h1><blockquote>\n<p>Less官网：<a href=\"https://lesscss.org/\">https://lesscss.org/</a></p>\n<p>Less民间中文网：<a href=\"https://less.bootcss.com/\">https://less.bootcss.com/</a></p>\n</blockquote>\n<p>Less提供了非常多的功能，帮助我们更加轻松的编写css代码</p>\n<p>其中，我们最常用的功能有下面3个：</p>\n<ul>\n<li><a href=\"https://less.bootcss.com/#%E5%8F%98%E9%87%8F%EF%BC%88variables%EF%BC%89\">变量</a></li>\n<li><a href=\"https://less.bootcss.com/#%E5%B5%8C%E5%A5%97%EF%BC%88nesting%EF%BC%89\">嵌套</a></li>\n<li><a href=\"https://less.bootcss.com/#%E6%B7%B7%E5%90%88%EF%BC%88mixins%EF%BC%89\">混合</a></li>\n</ul>\n<p>另外，你需要关注Less的特殊<a href=\"https://less.bootcss.com/#%E6%B3%A8%E9%87%8A%EF%BC%88comments%EF%BC%89\">注释</a></p>\n"},{"title":"js基本语法","date":"2021-12-31T08:21:22.000Z","description":"js的基本语法和浏览器的介绍","_content":"\n\n# js知识和基础语法\n----------\n## 浏览器组成：\n- shell：\n- 内核（核心）：\n    - 渲染引擎（语法规则和渲染）\n    - js引擎\n    - 其他模块\n\ngoogle发布的Chrome，引擎号V8（C语言），能直接将就是代码转化为机械码。\n\n计算机中的同步和异步与现实生活中相反  \n异步：同时执行（link标签的加载）  \n同步：先干一件再干另一件\n\n### JavaScript：\n解释性语言:一行一行执行，不生成文件；  \n单线程:同一时间只能干一件事  \nECMA标准\n\njs执行队列：\n轮转时间片\n\njs三大部分：\nECMAScript, DOM,BOM\n\n\n### 编译语言和解释语言：\n- 编译（c c++ ）：     \n        优点：快  \n        缺点：不跨平台，移植性不好\n- 解释(javascript php)：   \n        优点：跨平台，移植性好\n        不足：稍微慢\n\njava既不是编译型语言，也不是解释性语言（oak语言）\n\n| 主流浏览器 |    内核|\n| :----------:| :------:|\n| IE   |trident |\n| Chrom | webkit / blink|\n| firefox |  Gecko|\n| Opera   | presto |\n| Safari  | webkit|\n|\n\n### js引入：\n```javaScript\n<script  type=\"text/javaScript\"></script>\n<script  type=\"text/javaScript\" src=\"\"></script>\n```\n\n**当一个script标签既引入外部js又有内部js时内部的失效**\n\n javascript是面向对象语言\n\nvar  单一类型\n\n### 数据类型：\n1. 原始值 (存储在栈中，栈与栈之间的赋值是拷贝)：Number   Boolean String undefined(未赋值的)  null(占位置)\n2. 引用值（存储在堆中， ）：array object function\n\n### 代码错误：代码错误只会影响当前代码块\n1. 低级错误（语法错误）\n2. 逻辑错误\n\n赋值顺序：自右向左  \n计算顺序：自左向右\n\nNaN不等于任何数，包括自己。\n\nundefined , null , NaN ,\" \" , 0 , false 转为布尔值都为 false\n\n&&运算符（假设有两个值比较）（可用作短路语句），如果第一个值为false，直接输出第一个（结束执行），否则输出第二个值 。\n\n||运算符（假设有两个值比较）：只有两个都为假时才返回假。前一个为真时后一个条件直接忽略（不执行）\n\n```javaScript\nnever - ending loop：死循环\nwhile (\"never - ending loop\") {\n    document.write(i);\n}\n```\n\n`document.write() 可在页面中显示` \n`console.log() :控制台输出`\n\n#### switch - case语句选择：\ncase里面的类型不要求一致\n\ncontinue :终止本次循环，开始下次的循环\n\n数组里面的每个元素不用类型一样  \nlength ：数组长度\n\n### 对象：\n```javaScript\nvar 对象名 = {\n属性名（key）：属性值（value）,(属性之间用逗号分开)\n}\n```\n取出：对象名.属性名\n\ntypeof(变量名)  /  typeof  变量名:返回数据的类型：\n返回值有：\n\n- number ， \n- string , \n- boolean , \n- object , \n- undefined , \n- function\n\n\n数据null返回object\n\n### 类型转换：\n#### （显式类型转换）：\n- Number（）：转为数字，null转为数字是0 ，undefined转为数字为NaN,  根据常识不能转为数字的显示为NaN ，true转为1 ， false转为 0 。\n- parseInt （参数1）： 转为整数型 ，不能转true和false（为NaN）；parseInt （参数一，参数二）：参数一：要转换的数，参数二：将数据看成什么进制（2,10,16（取值为2 - 36））转为10进制。转换原理：直接读取数值，遇到非数值部分截断。\n- parseFloat（）：转为浮点型，转换原理：直接读取数值，遇到除第一个小数点以外的非数值部分截断。\n- 参数名.toString（）：转为字符串,undefined 和null 不能使用；参数名.toString（参数1）：参数1 是进制，将参数转为目标进制。\n- String（）：转为字符串。\n- Boolean（）：转为布尔类型。\n- toFixed（参数值）：保留 参数值位 小数\n\n#### （隐式类型转换）：\n- isNaN（）：判断是否为NaN ，先调用Number（），再调用此方法。\n- ++ / -- / + / -  :先调用Number（），再计算，（都变成数字类型）。\n- \\+ :当两端有一个为字符串时，调用String（）,\n-  \\*\\/ % / / - :先调用Number（），再计算，（都变成数字类型）。\n- \\> / < / >= <= :转为其他的类型\n- == / != :转为其他的类型（null == undefined 结果为true  ，NaN == NaN 结果为false）。\n\n- ===  / !==： 不发生类型转换的判断，直观判断左右是否相等。（NaN=== NaN 结果为false）。\n\n当一个变量未定义就使用时只有调用typeof(变量) （显示为undefined）不会报错，其他情况都报错。\n\nalert() :网页弹出框\n\n## 函数\n\n高内聚，低耦合。\n\n解释性语言输出不了地址。\n\n### 定义方法：\n1. 函数声明\n```javaScript\nfunction 函数名（）{\n函数体\n}\n```\n\n2. 命名函数表达式\n```javaScript\n var 函数名 = function 函数名{\n函数体\n}\n```\n3. 匿名函数表达式（函数表达式）\n```javaScript\n var 函数名 = function {\n函数体\n}\n\n```\n\n##### 调用方法：\n`函数名（）;`  \n`函数名（参数，参数）：参数不需要指明类型。`\n\n定义函数的参数不要求与使用函数时传递的参数一样多，从前到后依次传，多的部分舍弃。\n\n每个函数里面都有一个 arguments(类似于数组，参数列表，用来存放传递过来的实参，可以当成正常数组使用)。\n当形参比实参多时：arguments 和 形参 多出来的部分不再满足映射（两个同时变化）。  \n可以通过 函数名.length  来求出形参的个数。\n\n```javascript\n      function w(x, y) {\n            // document.write(\"a\" + \"<br>\");\n            // document.write(\"xyq\" + \"<br>\");\n            // document.write(x + y);\n            arguments[2] = 4;\n            console.log(arguments);\n        }\n        w(1, 2, 3);\n```\n\nreturn 函数返回值。\n\n```javascript\n银行金额输出：\n        var n = window.prompt(\"input\");\n        function transform(number) {\n            switch (number) {\n                case '1':\n                    return '壹';\n                case '2':\n                    return '贰';\n                case '3':\n                    return '叁';\n                case '4':\n                    return '肆';\n                case '5':\n                    return '伍';\n                case '6':\n                    return '陆';\n                case '7':\n                    return '柒';\n                case '8':\n                    return '捌';\n                case '9':\n                    return '玖'\n            }\n        }\n        function change(number) {\n            switch (number) {\n                case 2:\n                    return '拾';\n                case 3:\n                    return '佰';\n                case 4:\n                    return '仟';\n                case 5:\n                    return '万';\n                case 6:\n                    return '拾万';\n                case 7:\n                    return '佰万';\n                case 8:\n                    return '千万';\n                case 9:\n                    return '亿';\n                case 1:\n                    return;\n            }\n        }\n        function write(n) {\n            var i;\n            var result = \"\";\n            for (i = 0; i < n.length; i++) {\n                if (n[i] == '0') {\n                    continue;\n                } else {\n                    result += transform(n[i]);\n                    if (n.length - i > 1) {\n                        result += change(n.length - i);\n                    }\n                }\n            }\n            result += '元整';\n            return result;\n        }\n        console.log(write(n));\n```\n\n### 递归(规律：先执行的最后执行完)：\n1. 找规律\n2. 找出口\n\n函数变量作用域：里层可以访问外层，外层不能访问里层\n\n\n#### js执行三部曲：\n- 语法分析\n- 预编译\n- 解释执行\n\n#### 预编译的结果：\n- 函数声明整体提升\n- 变量  声明提升（只是声明了变量，不能使用里面的值）\n\nimply global暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象所有。  \n全局对象（window)  \n一切声明的全局变量，全是window 的属性，即 var a = 123  =====>  window.a =123;  \nwindow就是全局\n\n### 全局的预编译过程：\n1. 创建GO对象（全局的执行期上下文） GO === window\n2. 找形参和变量声明，将变量和形参名作为GO属性名，值为undefined 。 \n3. 在函数体里面找函数声明（函数表达式不行），值赋予函数体 \n\n### 函数体里的预编译过程：（预编译发生在函数执行的前一刻）\n1. 创建AO对象（执行期上下文）\n2. 找形参和变量声明，将变量和形参名作为AO属性名，值为undefined。 \n3. 将实参值与形参统一  \n4. 在函数体里面找函数声明（函数表达式不行），值赋予函数体 \n```javaScript\n        function fn(a) {\n            console.log(a);\n            var a = 123;\n            console.log(a);\n            function a() {}\n            console.log(a);\n            var b = function() {}\n            console.log(b);\n            function d() {}\n        }\n        fn(1);\n        输出：\n        ƒ a() {}\n        123\n        123\n        ƒ () {}\n\n        function test(a, b) {\n            console.log(a);\n            c = 0;\n            var c;\n            a = 3;\n            b = 2;\n            console.log(b);\n            function b() {}\n            function d() {}\n            console.log(b);\n        }\n        test(1);\n        答案\n        1\n        2\n        2\n```\n函数可以看成特殊的对象 \n\n### 函数里面的属性：\n#### 可访问的：\n- name \n- prototype\n#### 不可访问的（隐式属性）：\n- [[scope]] :存放作用域\n\n\n但凡内部的函数保存到外部，一定生成了闭包。  \n闭包会导致作用链不释放，造成内存泄漏。\n\n### 匿名函数\n针对初始化功能的函数（立即执行函数）：  \n执行完一次就销毁，其他和普通函数一样。\n\n#### 普通的\n```javaScript\n        (function() {\n    \t函数体\n        }())\n```\n#### 带参数的\n```javaScript\n        (function(形参) {\n    \t函数体\n        }(实参))\n```\n#### 带返回值的\n```javaScript\nvar 变量名 = (function() {\n    \t\t函数体\n        \t}());\n```\n\n只有表达式才能被执行符号执行。  \n被执行符号执行的函数名字会被直接放弃（丢弃），相当于变成了立即执行函数。\n\n\n嵌套函数将内部函数保存到外部，一定会生成闭包，保存到外部的函数可以调用原来所处位置的变量。\n\n多个函数和一个函数形成闭包，则多个函数的变量共用。\n\n函数不执行（只定义）就不会运行函数内部的语句，什么时候执行函数，函数再运行内部语句。\n\n```javaScript\n        var num = 100;\n        function test() {\n            console.log(num);\n        }\n        num = 200;\n        test();\n        输出200\n```\n### ， 也可以作为运算符，返回后面的计算值。\n例：\n```javaScript\nvar a = (1 -1 , 1 + 1);\n\na 的值为2\n```\n```javaScript\n        var f = (\n            function f() {\n                return \"1\";\n            },\n            function g() {\n                return 2;\n            }\n        )();\n        console.log(typeof f);\n        输出值为 number\n```\n```javaScript\n     var x = 1;\n     if (function f() {}) { //立即执行函数\n         x += typeof f;\n     }\n     console.log(x);\n    输出 ： 1undefined\n\n```\n\n## 对象\n\n### 对象创建方法：\n1. plainObject   对象字面量 / 对象直接量  \n每个属性之间用 ， 分隔开\n```javaScript\nvar 对象名 = {\n    属性名 ： 属性值，\n    \n    方法名 ： function(){\n          this.属性名; //调用属性  \n    }\n}\n```\n2. 构造函数\n    1. 系统自带的构造函数  Object()\n    可以增，删，查，改 ，属性和方法\n    `var 对象名 = new Object();`\n    2. 自定义(函数名使用大驼峰 （首字母全大写）)\n```javaScript\n    function 函数名(参数){\n    this.属性名 = 属性值;\n\n    this.方法名 = function(){\n\n       }\n}\nvar 对象名 = new 函数名(参数);\n```\n 例：\n```javaScript\nfunction Car() {\n    this.name = \"BMW\";\n    this.height = \"1400\";\n    this.lang = \"49000\";\n    this.run = function() {\n          console.log(\"I am Running!\")\n     }\n}\nvar car = new Car();\n```\n\n### 构造函数内部原理：\n1. 在函数体最前面隐式的加上this = {}\n2. 执行this.xxx = xxx\n3. 隐式的返回this\n\n当一个对象的属性未定义就使用不会报错，会返回undefined。\n\n对象属性使用：\n对象名. 属性名  / 对象名. 方法名\n\nthis 第一人称可以用来指代对象。\n\n#### 给对象增加属性和方法：\n对象名.属性名 = \"属性值\" / 对象名. 方法名 = function() { }\n\n#### 给对象改变属性和方法：\n对象名.属性名 = \"属性值\" / 对象名. 方法名 = function() { }\n\n#### 删除对象属性和方法：\ndelete 对象名.属性名    /    delete  对象名. 方法名 \n\n\n#### 原始值类型的变量没有属性和方法。\n\n### 包装类：\n//创建一个数字型对象（可以有方法和属性）  \nvar 对象名 = new Number(数字);\n\n例：\n```javaScript\nvar num = new Number(123);\n//创建一个字符串型对象（可以有方法和属性）\nvar  对象名 = new String(字符串);\n```\n例：\n```javaScript\nvar str = new String('abc');\n//创建一个布尔型对象（可以有方法和属性）\nvar 对象名 = new Strng(布尔类型);\n```\n例：  \n```javascript\nvar bool = new Boolean(true);\n```\n\n想操作原始值属性，系统会自动将其包装为对象，再删除对象。\n\n## 原型：\n用法：函数名.prototype.属性名 = 属性值；  \nfunction对象的一个属性，他定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法，原型也是对象（可以按照对象操作）。\n利用原型特点和概念，可以提取共有属性。\n\n```javaScript\n        Car.prototype.height = \"1400\";\n        Car.prototype.lang = \"49000\";\n        function Car(name) {\n            this.name = name;\n            this.run = function() {\n                console.log(\"I am Running!\")\n            }\n        }\n        var car = new Car(\"BWM\");\n        var car1 = new Car(\"AoDi\");\n```\n#### 不能通过对象修改原型。\n函数名.prototype.属性 = 属性值;//修改属性\n\ndelete 函数名.prototype.属性;  //删除\n\n例：\n```javaScript\ndelete Car.prototype.height;\n```\n\n对象名.constructor；   可以找出对象的构造函数。\n\ncharCodeAt()  方法可找出字符串的每一位。\n```javaScript\n        Person.prototype.name = 'xyq';\n        function Person() {\n        }\n        var person = new Person();\n        Person.prototype.name = 'hsz';\n        console.log(person.name);\n        输出为 hsz\n        \n        Person.prototype.name = 'xyq';\n        function Person() {\n        }\n        var person = new Person();\n        // Person.prototype.name = 'hsz';\n        Person.prototype = {\n            name: 'hsz'\n        }\n        console.log(person.name);\n        输出为xyq\n        会重新创建一个对象，更改地址了\n```\n\n#### 绝大多数对象最终都继承自Object.prototype\n```javaScript\nvar obj = Object.create(null);\n可以创建一个没有继承Object的对象\n```\n```javaScript\nMath.floor(number) ;  向下取整（舍弃小数部分）\nMath.ceil(number); 向上取整（整数部分加一）\n```\n\n可正常计算的范围：小数点前16位 ，后16位\n\n### call / apply方法 ：\n改变this的指向（可以借别人的方法来封装自己的功能）\n#### call需要把实参按照形参的个数传进去，apply只能传一个arguments(数组)\n```javaScript\n\n        function Person(name, age) {\n            this.name = name;\n            this.age = age;\n        }\n        var person = new Person('XYQ', 21);\n        var obj = {}\n        Person.call(obj, 'xyq', 21);\n        \n        obj会变成{name: \"xyq\", age: \"21\"}\n            \n\n        function Person(name, age, sex) {\n            this.name = name;\n            this.age = age;\n            this.sex = sex;\n        }\n        function Student(name, age, sex, tel, grade) {\n            Person.call(this, name, age, sex);\n            this.tel = tel;\n            this.grade = grade;\n        }\n        \n        可以生成Student函数有（name, age, sex, tel, grade）属性\n        \n        function Person(name, age, sex) {\n            this.name = name;\n            this.age = age;\n            this.sex = sex;\n        }\n        function Student(name, age, sex, tel, grade) {\n            Person.apply(this, [name, age, sex]);\n            this.tel = tel;\n            this.grade = grade;\n        }\n\n        可以生成Student函数有（name, age, sex, tel, grade）属性\n\n```\n\n\n\n\n\n","source":"_posts/js知识和基础语法.md","raw":"---\ntitle: js基本语法\ndate: 2021-12-31 16:21:22\ndescription: js的基本语法和浏览器的介绍\ncategories: \n    - 前端学习笔记\n    - js\ntags: \n  - js\n  - 前端\n  - 浏览器\n---\n\n\n# js知识和基础语法\n----------\n## 浏览器组成：\n- shell：\n- 内核（核心）：\n    - 渲染引擎（语法规则和渲染）\n    - js引擎\n    - 其他模块\n\ngoogle发布的Chrome，引擎号V8（C语言），能直接将就是代码转化为机械码。\n\n计算机中的同步和异步与现实生活中相反  \n异步：同时执行（link标签的加载）  \n同步：先干一件再干另一件\n\n### JavaScript：\n解释性语言:一行一行执行，不生成文件；  \n单线程:同一时间只能干一件事  \nECMA标准\n\njs执行队列：\n轮转时间片\n\njs三大部分：\nECMAScript, DOM,BOM\n\n\n### 编译语言和解释语言：\n- 编译（c c++ ）：     \n        优点：快  \n        缺点：不跨平台，移植性不好\n- 解释(javascript php)：   \n        优点：跨平台，移植性好\n        不足：稍微慢\n\njava既不是编译型语言，也不是解释性语言（oak语言）\n\n| 主流浏览器 |    内核|\n| :----------:| :------:|\n| IE   |trident |\n| Chrom | webkit / blink|\n| firefox |  Gecko|\n| Opera   | presto |\n| Safari  | webkit|\n|\n\n### js引入：\n```javaScript\n<script  type=\"text/javaScript\"></script>\n<script  type=\"text/javaScript\" src=\"\"></script>\n```\n\n**当一个script标签既引入外部js又有内部js时内部的失效**\n\n javascript是面向对象语言\n\nvar  单一类型\n\n### 数据类型：\n1. 原始值 (存储在栈中，栈与栈之间的赋值是拷贝)：Number   Boolean String undefined(未赋值的)  null(占位置)\n2. 引用值（存储在堆中， ）：array object function\n\n### 代码错误：代码错误只会影响当前代码块\n1. 低级错误（语法错误）\n2. 逻辑错误\n\n赋值顺序：自右向左  \n计算顺序：自左向右\n\nNaN不等于任何数，包括自己。\n\nundefined , null , NaN ,\" \" , 0 , false 转为布尔值都为 false\n\n&&运算符（假设有两个值比较）（可用作短路语句），如果第一个值为false，直接输出第一个（结束执行），否则输出第二个值 。\n\n||运算符（假设有两个值比较）：只有两个都为假时才返回假。前一个为真时后一个条件直接忽略（不执行）\n\n```javaScript\nnever - ending loop：死循环\nwhile (\"never - ending loop\") {\n    document.write(i);\n}\n```\n\n`document.write() 可在页面中显示` \n`console.log() :控制台输出`\n\n#### switch - case语句选择：\ncase里面的类型不要求一致\n\ncontinue :终止本次循环，开始下次的循环\n\n数组里面的每个元素不用类型一样  \nlength ：数组长度\n\n### 对象：\n```javaScript\nvar 对象名 = {\n属性名（key）：属性值（value）,(属性之间用逗号分开)\n}\n```\n取出：对象名.属性名\n\ntypeof(变量名)  /  typeof  变量名:返回数据的类型：\n返回值有：\n\n- number ， \n- string , \n- boolean , \n- object , \n- undefined , \n- function\n\n\n数据null返回object\n\n### 类型转换：\n#### （显式类型转换）：\n- Number（）：转为数字，null转为数字是0 ，undefined转为数字为NaN,  根据常识不能转为数字的显示为NaN ，true转为1 ， false转为 0 。\n- parseInt （参数1）： 转为整数型 ，不能转true和false（为NaN）；parseInt （参数一，参数二）：参数一：要转换的数，参数二：将数据看成什么进制（2,10,16（取值为2 - 36））转为10进制。转换原理：直接读取数值，遇到非数值部分截断。\n- parseFloat（）：转为浮点型，转换原理：直接读取数值，遇到除第一个小数点以外的非数值部分截断。\n- 参数名.toString（）：转为字符串,undefined 和null 不能使用；参数名.toString（参数1）：参数1 是进制，将参数转为目标进制。\n- String（）：转为字符串。\n- Boolean（）：转为布尔类型。\n- toFixed（参数值）：保留 参数值位 小数\n\n#### （隐式类型转换）：\n- isNaN（）：判断是否为NaN ，先调用Number（），再调用此方法。\n- ++ / -- / + / -  :先调用Number（），再计算，（都变成数字类型）。\n- \\+ :当两端有一个为字符串时，调用String（）,\n-  \\*\\/ % / / - :先调用Number（），再计算，（都变成数字类型）。\n- \\> / < / >= <= :转为其他的类型\n- == / != :转为其他的类型（null == undefined 结果为true  ，NaN == NaN 结果为false）。\n\n- ===  / !==： 不发生类型转换的判断，直观判断左右是否相等。（NaN=== NaN 结果为false）。\n\n当一个变量未定义就使用时只有调用typeof(变量) （显示为undefined）不会报错，其他情况都报错。\n\nalert() :网页弹出框\n\n## 函数\n\n高内聚，低耦合。\n\n解释性语言输出不了地址。\n\n### 定义方法：\n1. 函数声明\n```javaScript\nfunction 函数名（）{\n函数体\n}\n```\n\n2. 命名函数表达式\n```javaScript\n var 函数名 = function 函数名{\n函数体\n}\n```\n3. 匿名函数表达式（函数表达式）\n```javaScript\n var 函数名 = function {\n函数体\n}\n\n```\n\n##### 调用方法：\n`函数名（）;`  \n`函数名（参数，参数）：参数不需要指明类型。`\n\n定义函数的参数不要求与使用函数时传递的参数一样多，从前到后依次传，多的部分舍弃。\n\n每个函数里面都有一个 arguments(类似于数组，参数列表，用来存放传递过来的实参，可以当成正常数组使用)。\n当形参比实参多时：arguments 和 形参 多出来的部分不再满足映射（两个同时变化）。  \n可以通过 函数名.length  来求出形参的个数。\n\n```javascript\n      function w(x, y) {\n            // document.write(\"a\" + \"<br>\");\n            // document.write(\"xyq\" + \"<br>\");\n            // document.write(x + y);\n            arguments[2] = 4;\n            console.log(arguments);\n        }\n        w(1, 2, 3);\n```\n\nreturn 函数返回值。\n\n```javascript\n银行金额输出：\n        var n = window.prompt(\"input\");\n        function transform(number) {\n            switch (number) {\n                case '1':\n                    return '壹';\n                case '2':\n                    return '贰';\n                case '3':\n                    return '叁';\n                case '4':\n                    return '肆';\n                case '5':\n                    return '伍';\n                case '6':\n                    return '陆';\n                case '7':\n                    return '柒';\n                case '8':\n                    return '捌';\n                case '9':\n                    return '玖'\n            }\n        }\n        function change(number) {\n            switch (number) {\n                case 2:\n                    return '拾';\n                case 3:\n                    return '佰';\n                case 4:\n                    return '仟';\n                case 5:\n                    return '万';\n                case 6:\n                    return '拾万';\n                case 7:\n                    return '佰万';\n                case 8:\n                    return '千万';\n                case 9:\n                    return '亿';\n                case 1:\n                    return;\n            }\n        }\n        function write(n) {\n            var i;\n            var result = \"\";\n            for (i = 0; i < n.length; i++) {\n                if (n[i] == '0') {\n                    continue;\n                } else {\n                    result += transform(n[i]);\n                    if (n.length - i > 1) {\n                        result += change(n.length - i);\n                    }\n                }\n            }\n            result += '元整';\n            return result;\n        }\n        console.log(write(n));\n```\n\n### 递归(规律：先执行的最后执行完)：\n1. 找规律\n2. 找出口\n\n函数变量作用域：里层可以访问外层，外层不能访问里层\n\n\n#### js执行三部曲：\n- 语法分析\n- 预编译\n- 解释执行\n\n#### 预编译的结果：\n- 函数声明整体提升\n- 变量  声明提升（只是声明了变量，不能使用里面的值）\n\nimply global暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象所有。  \n全局对象（window)  \n一切声明的全局变量，全是window 的属性，即 var a = 123  =====>  window.a =123;  \nwindow就是全局\n\n### 全局的预编译过程：\n1. 创建GO对象（全局的执行期上下文） GO === window\n2. 找形参和变量声明，将变量和形参名作为GO属性名，值为undefined 。 \n3. 在函数体里面找函数声明（函数表达式不行），值赋予函数体 \n\n### 函数体里的预编译过程：（预编译发生在函数执行的前一刻）\n1. 创建AO对象（执行期上下文）\n2. 找形参和变量声明，将变量和形参名作为AO属性名，值为undefined。 \n3. 将实参值与形参统一  \n4. 在函数体里面找函数声明（函数表达式不行），值赋予函数体 \n```javaScript\n        function fn(a) {\n            console.log(a);\n            var a = 123;\n            console.log(a);\n            function a() {}\n            console.log(a);\n            var b = function() {}\n            console.log(b);\n            function d() {}\n        }\n        fn(1);\n        输出：\n        ƒ a() {}\n        123\n        123\n        ƒ () {}\n\n        function test(a, b) {\n            console.log(a);\n            c = 0;\n            var c;\n            a = 3;\n            b = 2;\n            console.log(b);\n            function b() {}\n            function d() {}\n            console.log(b);\n        }\n        test(1);\n        答案\n        1\n        2\n        2\n```\n函数可以看成特殊的对象 \n\n### 函数里面的属性：\n#### 可访问的：\n- name \n- prototype\n#### 不可访问的（隐式属性）：\n- [[scope]] :存放作用域\n\n\n但凡内部的函数保存到外部，一定生成了闭包。  \n闭包会导致作用链不释放，造成内存泄漏。\n\n### 匿名函数\n针对初始化功能的函数（立即执行函数）：  \n执行完一次就销毁，其他和普通函数一样。\n\n#### 普通的\n```javaScript\n        (function() {\n    \t函数体\n        }())\n```\n#### 带参数的\n```javaScript\n        (function(形参) {\n    \t函数体\n        }(实参))\n```\n#### 带返回值的\n```javaScript\nvar 变量名 = (function() {\n    \t\t函数体\n        \t}());\n```\n\n只有表达式才能被执行符号执行。  \n被执行符号执行的函数名字会被直接放弃（丢弃），相当于变成了立即执行函数。\n\n\n嵌套函数将内部函数保存到外部，一定会生成闭包，保存到外部的函数可以调用原来所处位置的变量。\n\n多个函数和一个函数形成闭包，则多个函数的变量共用。\n\n函数不执行（只定义）就不会运行函数内部的语句，什么时候执行函数，函数再运行内部语句。\n\n```javaScript\n        var num = 100;\n        function test() {\n            console.log(num);\n        }\n        num = 200;\n        test();\n        输出200\n```\n### ， 也可以作为运算符，返回后面的计算值。\n例：\n```javaScript\nvar a = (1 -1 , 1 + 1);\n\na 的值为2\n```\n```javaScript\n        var f = (\n            function f() {\n                return \"1\";\n            },\n            function g() {\n                return 2;\n            }\n        )();\n        console.log(typeof f);\n        输出值为 number\n```\n```javaScript\n     var x = 1;\n     if (function f() {}) { //立即执行函数\n         x += typeof f;\n     }\n     console.log(x);\n    输出 ： 1undefined\n\n```\n\n## 对象\n\n### 对象创建方法：\n1. plainObject   对象字面量 / 对象直接量  \n每个属性之间用 ， 分隔开\n```javaScript\nvar 对象名 = {\n    属性名 ： 属性值，\n    \n    方法名 ： function(){\n          this.属性名; //调用属性  \n    }\n}\n```\n2. 构造函数\n    1. 系统自带的构造函数  Object()\n    可以增，删，查，改 ，属性和方法\n    `var 对象名 = new Object();`\n    2. 自定义(函数名使用大驼峰 （首字母全大写）)\n```javaScript\n    function 函数名(参数){\n    this.属性名 = 属性值;\n\n    this.方法名 = function(){\n\n       }\n}\nvar 对象名 = new 函数名(参数);\n```\n 例：\n```javaScript\nfunction Car() {\n    this.name = \"BMW\";\n    this.height = \"1400\";\n    this.lang = \"49000\";\n    this.run = function() {\n          console.log(\"I am Running!\")\n     }\n}\nvar car = new Car();\n```\n\n### 构造函数内部原理：\n1. 在函数体最前面隐式的加上this = {}\n2. 执行this.xxx = xxx\n3. 隐式的返回this\n\n当一个对象的属性未定义就使用不会报错，会返回undefined。\n\n对象属性使用：\n对象名. 属性名  / 对象名. 方法名\n\nthis 第一人称可以用来指代对象。\n\n#### 给对象增加属性和方法：\n对象名.属性名 = \"属性值\" / 对象名. 方法名 = function() { }\n\n#### 给对象改变属性和方法：\n对象名.属性名 = \"属性值\" / 对象名. 方法名 = function() { }\n\n#### 删除对象属性和方法：\ndelete 对象名.属性名    /    delete  对象名. 方法名 \n\n\n#### 原始值类型的变量没有属性和方法。\n\n### 包装类：\n//创建一个数字型对象（可以有方法和属性）  \nvar 对象名 = new Number(数字);\n\n例：\n```javaScript\nvar num = new Number(123);\n//创建一个字符串型对象（可以有方法和属性）\nvar  对象名 = new String(字符串);\n```\n例：\n```javaScript\nvar str = new String('abc');\n//创建一个布尔型对象（可以有方法和属性）\nvar 对象名 = new Strng(布尔类型);\n```\n例：  \n```javascript\nvar bool = new Boolean(true);\n```\n\n想操作原始值属性，系统会自动将其包装为对象，再删除对象。\n\n## 原型：\n用法：函数名.prototype.属性名 = 属性值；  \nfunction对象的一个属性，他定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法，原型也是对象（可以按照对象操作）。\n利用原型特点和概念，可以提取共有属性。\n\n```javaScript\n        Car.prototype.height = \"1400\";\n        Car.prototype.lang = \"49000\";\n        function Car(name) {\n            this.name = name;\n            this.run = function() {\n                console.log(\"I am Running!\")\n            }\n        }\n        var car = new Car(\"BWM\");\n        var car1 = new Car(\"AoDi\");\n```\n#### 不能通过对象修改原型。\n函数名.prototype.属性 = 属性值;//修改属性\n\ndelete 函数名.prototype.属性;  //删除\n\n例：\n```javaScript\ndelete Car.prototype.height;\n```\n\n对象名.constructor；   可以找出对象的构造函数。\n\ncharCodeAt()  方法可找出字符串的每一位。\n```javaScript\n        Person.prototype.name = 'xyq';\n        function Person() {\n        }\n        var person = new Person();\n        Person.prototype.name = 'hsz';\n        console.log(person.name);\n        输出为 hsz\n        \n        Person.prototype.name = 'xyq';\n        function Person() {\n        }\n        var person = new Person();\n        // Person.prototype.name = 'hsz';\n        Person.prototype = {\n            name: 'hsz'\n        }\n        console.log(person.name);\n        输出为xyq\n        会重新创建一个对象，更改地址了\n```\n\n#### 绝大多数对象最终都继承自Object.prototype\n```javaScript\nvar obj = Object.create(null);\n可以创建一个没有继承Object的对象\n```\n```javaScript\nMath.floor(number) ;  向下取整（舍弃小数部分）\nMath.ceil(number); 向上取整（整数部分加一）\n```\n\n可正常计算的范围：小数点前16位 ，后16位\n\n### call / apply方法 ：\n改变this的指向（可以借别人的方法来封装自己的功能）\n#### call需要把实参按照形参的个数传进去，apply只能传一个arguments(数组)\n```javaScript\n\n        function Person(name, age) {\n            this.name = name;\n            this.age = age;\n        }\n        var person = new Person('XYQ', 21);\n        var obj = {}\n        Person.call(obj, 'xyq', 21);\n        \n        obj会变成{name: \"xyq\", age: \"21\"}\n            \n\n        function Person(name, age, sex) {\n            this.name = name;\n            this.age = age;\n            this.sex = sex;\n        }\n        function Student(name, age, sex, tel, grade) {\n            Person.call(this, name, age, sex);\n            this.tel = tel;\n            this.grade = grade;\n        }\n        \n        可以生成Student函数有（name, age, sex, tel, grade）属性\n        \n        function Person(name, age, sex) {\n            this.name = name;\n            this.age = age;\n            this.sex = sex;\n        }\n        function Student(name, age, sex, tel, grade) {\n            Person.apply(this, [name, age, sex]);\n            this.tel = tel;\n            this.grade = grade;\n        }\n\n        可以生成Student函数有（name, age, sex, tel, grade）属性\n\n```\n\n\n\n\n\n","slug":"js知识和基础语法","published":1,"updated":"2022-01-01T06:31:09.154Z","_id":"ckxu6dnii000o10axe8v0251c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"js知识和基础语法\"><a href=\"#js知识和基础语法\" class=\"headerlink\" title=\"js知识和基础语法\"></a>js知识和基础语法</h1><hr>\n<h2 id=\"浏览器组成：\"><a href=\"#浏览器组成：\" class=\"headerlink\" title=\"浏览器组成：\"></a>浏览器组成：</h2><ul>\n<li>shell：</li>\n<li>内核（核心）：<ul>\n<li>渲染引擎（语法规则和渲染）</li>\n<li>js引擎</li>\n<li>其他模块</li>\n</ul>\n</li>\n</ul>\n<p>google发布的Chrome，引擎号V8（C语言），能直接将就是代码转化为机械码。</p>\n<p>计算机中的同步和异步与现实生活中相反<br>异步：同时执行（link标签的加载）<br>同步：先干一件再干另一件</p>\n<h3 id=\"JavaScript：\"><a href=\"#JavaScript：\" class=\"headerlink\" title=\"JavaScript：\"></a>JavaScript：</h3><p>解释性语言:一行一行执行，不生成文件；<br>单线程:同一时间只能干一件事<br>ECMA标准</p>\n<p>js执行队列：<br>轮转时间片</p>\n<p>js三大部分：<br>ECMAScript, DOM,BOM</p>\n<h3 id=\"编译语言和解释语言：\"><a href=\"#编译语言和解释语言：\" class=\"headerlink\" title=\"编译语言和解释语言：\"></a>编译语言和解释语言：</h3><ul>\n<li>编译（c c++ ）：     <pre><code>  优点：快  \n  缺点：不跨平台，移植性不好\n</code></pre>\n</li>\n<li>解释(javascript php)：   <pre><code>  优点：跨平台，移植性好\n  不足：稍微慢\n</code></pre>\n</li>\n</ul>\n<p>java既不是编译型语言，也不是解释性语言（oak语言）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主流浏览器</th>\n<th align=\"center\">内核</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">IE</td>\n<td align=\"center\">trident</td>\n</tr>\n<tr>\n<td align=\"center\">Chrom</td>\n<td align=\"center\">webkit / blink</td>\n</tr>\n<tr>\n<td align=\"center\">firefox</td>\n<td align=\"center\">Gecko</td>\n</tr>\n<tr>\n<td align=\"center\">Opera</td>\n<td align=\"center\">presto</td>\n</tr>\n<tr>\n<td align=\"center\">Safari</td>\n<td align=\"center\">webkit</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"js引入：\"><a href=\"#js引入：\" class=\"headerlink\" title=\"js引入：\"></a>js引入：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script  type=<span class=\"string\">&quot;text/javaScript&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javaScript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>当一个script标签既引入外部js又有内部js时内部的失效</strong></p>\n<p> javascript是面向对象语言</p>\n<p>var  单一类型</p>\n<h3 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h3><ol>\n<li>原始值 (存储在栈中，栈与栈之间的赋值是拷贝)：Number   Boolean String undefined(未赋值的)  null(占位置)</li>\n<li>引用值（存储在堆中， ）：array object function</li>\n</ol>\n<h3 id=\"代码错误：代码错误只会影响当前代码块\"><a href=\"#代码错误：代码错误只会影响当前代码块\" class=\"headerlink\" title=\"代码错误：代码错误只会影响当前代码块\"></a>代码错误：代码错误只会影响当前代码块</h3><ol>\n<li>低级错误（语法错误）</li>\n<li>逻辑错误</li>\n</ol>\n<p>赋值顺序：自右向左<br>计算顺序：自左向右</p>\n<p>NaN不等于任何数，包括自己。</p>\n<p>undefined , null , NaN ,” “ , 0 , false 转为布尔值都为 false</p>\n<p>&amp;&amp;运算符（假设有两个值比较）（可用作短路语句），如果第一个值为false，直接输出第一个（结束执行），否则输出第二个值 。</p>\n<p>||运算符（假设有两个值比较）：只有两个都为假时才返回假。前一个为真时后一个条件直接忽略（不执行）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">never - ending loop：死循环</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"string\">&quot;never - ending loop&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>document.write() 可在页面中显示</code><br><code>console.log() :控制台输出</code></p>\n<h4 id=\"switch-case语句选择：\"><a href=\"#switch-case语句选择：\" class=\"headerlink\" title=\"switch - case语句选择：\"></a>switch - case语句选择：</h4><p>case里面的类型不要求一致</p>\n<p>continue :终止本次循环，开始下次的循环</p>\n<p>数组里面的每个元素不用类型一样<br>length ：数组长度</p>\n<h3 id=\"对象：\"><a href=\"#对象：\" class=\"headerlink\" title=\"对象：\"></a>对象：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = &#123;</span><br><span class=\"line\">属性名（key）：属性值（value）,(属性之间用逗号分开)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>取出：对象名.属性名</p>\n<p>typeof(变量名)  /  typeof  变量名:返回数据的类型：<br>返回值有：</p>\n<ul>\n<li>number ， </li>\n<li>string , </li>\n<li>boolean , </li>\n<li>object , </li>\n<li>undefined , </li>\n<li>function</li>\n</ul>\n<p>数据null返回object</p>\n<h3 id=\"类型转换：\"><a href=\"#类型转换：\" class=\"headerlink\" title=\"类型转换：\"></a>类型转换：</h3><h4 id=\"（显式类型转换）：\"><a href=\"#（显式类型转换）：\" class=\"headerlink\" title=\"（显式类型转换）：\"></a>（显式类型转换）：</h4><ul>\n<li>Number（）：转为数字，null转为数字是0 ，undefined转为数字为NaN,  根据常识不能转为数字的显示为NaN ，true转为1 ， false转为 0 。</li>\n<li>parseInt （参数1）： 转为整数型 ，不能转true和false（为NaN）；parseInt （参数一，参数二）：参数一：要转换的数，参数二：将数据看成什么进制（2,10,16（取值为2 - 36））转为10进制。转换原理：直接读取数值，遇到非数值部分截断。</li>\n<li>parseFloat（）：转为浮点型，转换原理：直接读取数值，遇到除第一个小数点以外的非数值部分截断。</li>\n<li>参数名.toString（）：转为字符串,undefined 和null 不能使用；参数名.toString（参数1）：参数1 是进制，将参数转为目标进制。</li>\n<li>String（）：转为字符串。</li>\n<li>Boolean（）：转为布尔类型。</li>\n<li>toFixed（参数值）：保留 参数值位 小数</li>\n</ul>\n<h4 id=\"（隐式类型转换）：\"><a href=\"#（隐式类型转换）：\" class=\"headerlink\" title=\"（隐式类型转换）：\"></a>（隐式类型转换）：</h4><ul>\n<li><p>isNaN（）：判断是否为NaN ，先调用Number（），再调用此方法。</p>\n</li>\n<li><p>++ / – / + / -  :先调用Number（），再计算，（都变成数字类型）。</p>\n</li>\n<li><p>+ :当两端有一个为字符串时，调用String（）,</p>\n</li>\n<li><p> */ % / / - :先调用Number（），再计算，（都变成数字类型）。</p>\n</li>\n<li><p>&gt; / &lt; / &gt;= &lt;= :转为其他的类型</p>\n</li>\n<li><p>== / != :转为其他的类型（null == undefined 结果为true  ，NaN == NaN 结果为false）。</p>\n</li>\n<li><p>===  / !==： 不发生类型转换的判断，直观判断左右是否相等。（NaN=== NaN 结果为false）。</p>\n</li>\n</ul>\n<p>当一个变量未定义就使用时只有调用typeof(变量) （显示为undefined）不会报错，其他情况都报错。</p>\n<p>alert() :网页弹出框</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>高内聚，低耦合。</p>\n<p>解释性语言输出不了地址。</p>\n<h3 id=\"定义方法：\"><a href=\"#定义方法：\" class=\"headerlink\" title=\"定义方法：\"></a>定义方法：</h3><ol>\n<li><p>函数声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名（）</span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>命名函数表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> 函数名 = <span class=\"function\"><span class=\"keyword\">function</span> 函数名</span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>匿名函数表达式（函数表达式）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> 函数名 = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"调用方法：\"><a href=\"#调用方法：\" class=\"headerlink\" title=\"调用方法：\"></a>调用方法：</h5><p><code>函数名（）;</code><br><code>函数名（参数，参数）：参数不需要指明类型。</code></p>\n<p>定义函数的参数不要求与使用函数时传递的参数一样多，从前到后依次传，多的部分舍弃。</p>\n<p>每个函数里面都有一个 arguments(类似于数组，参数列表，用来存放传递过来的实参，可以当成正常数组使用)。<br>当形参比实参多时：arguments 和 形参 多出来的部分不再满足映射（两个同时变化）。<br>可以通过 函数名.length  来求出形参的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">w</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// document.write(&quot;a&quot; + &quot;&lt;br&gt;&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">// document.write(&quot;xyq&quot; + &quot;&lt;br&gt;&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">// document.write(x + y);</span></span><br><span class=\"line\">            <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        w(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>return 函数返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">银行金额输出：</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (number) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;壹&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;贰&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;叁&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;肆&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;伍&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;陆&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;7&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;柒&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;8&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;捌&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;9&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;玖&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (number) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;拾&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;佰&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;仟&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;拾万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;佰万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;千万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;亿&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n[i] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    result += transform(n[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (n.length - i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        result += change(n.length - i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result += <span class=\"string\">&#x27;元整&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(write(n));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归-规律：先执行的最后执行完-：\"><a href=\"#递归-规律：先执行的最后执行完-：\" class=\"headerlink\" title=\"递归(规律：先执行的最后执行完)：\"></a>递归(规律：先执行的最后执行完)：</h3><ol>\n<li>找规律</li>\n<li>找出口</li>\n</ol>\n<p>函数变量作用域：里层可以访问外层，外层不能访问里层</p>\n<h4 id=\"js执行三部曲：\"><a href=\"#js执行三部曲：\" class=\"headerlink\" title=\"js执行三部曲：\"></a>js执行三部曲：</h4><ul>\n<li>语法分析</li>\n<li>预编译</li>\n<li>解释执行</li>\n</ul>\n<h4 id=\"预编译的结果：\"><a href=\"#预编译的结果：\" class=\"headerlink\" title=\"预编译的结果：\"></a>预编译的结果：</h4><ul>\n<li>函数声明整体提升</li>\n<li>变量  声明提升（只是声明了变量，不能使用里面的值）</li>\n</ul>\n<p>imply global暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象所有。<br>全局对象（window)<br>一切声明的全局变量，全是window 的属性，即 var a = 123  =====&gt;  window.a =123;<br>window就是全局</p>\n<h3 id=\"全局的预编译过程：\"><a href=\"#全局的预编译过程：\" class=\"headerlink\" title=\"全局的预编译过程：\"></a>全局的预编译过程：</h3><ol>\n<li>创建GO对象（全局的执行期上下文） GO === window</li>\n<li>找形参和变量声明，将变量和形参名作为GO属性名，值为undefined 。 </li>\n<li>在函数体里面找函数声明（函数表达式不行），值赋予函数体 </li>\n</ol>\n<h3 id=\"函数体里的预编译过程：（预编译发生在函数执行的前一刻）\"><a href=\"#函数体里的预编译过程：（预编译发生在函数执行的前一刻）\" class=\"headerlink\" title=\"函数体里的预编译过程：（预编译发生在函数执行的前一刻）\"></a>函数体里的预编译过程：（预编译发生在函数执行的前一刻）</h3><ol>\n<li>创建AO对象（执行期上下文）</li>\n<li>找形参和变量声明，将变量和形参名作为AO属性名，值为undefined。 </li>\n<li>将实参值与形参统一  </li>\n<li>在函数体里面找函数声明（函数表达式不行），值赋予函数体 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fn(<span class=\"number\">1</span>);</span><br><span class=\"line\">输出：</span><br><span class=\"line\">ƒ <span class=\"function\"><span class=\"title\">a</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\">ƒ () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            c = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">            a = <span class=\"number\">3</span>;</span><br><span class=\"line\">            b = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        test(<span class=\"number\">1</span>);</span><br><span class=\"line\">答案</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n函数可以看成特殊的对象 </li>\n</ol>\n<h3 id=\"函数里面的属性：\"><a href=\"#函数里面的属性：\" class=\"headerlink\" title=\"函数里面的属性：\"></a>函数里面的属性：</h3><h4 id=\"可访问的：\"><a href=\"#可访问的：\" class=\"headerlink\" title=\"可访问的：\"></a>可访问的：</h4><ul>\n<li>name </li>\n<li>prototype<h4 id=\"不可访问的（隐式属性）：\"><a href=\"#不可访问的（隐式属性）：\" class=\"headerlink\" title=\"不可访问的（隐式属性）：\"></a>不可访问的（隐式属性）：</h4></li>\n<li>[[scope]] :存放作用域</li>\n</ul>\n<p>但凡内部的函数保存到外部，一定生成了闭包。<br>闭包会导致作用链不释放，造成内存泄漏。</p>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>针对初始化功能的函数（立即执行函数）：<br>执行完一次就销毁，其他和普通函数一样。</p>\n<h4 id=\"普通的\"><a href=\"#普通的\" class=\"headerlink\" title=\"普通的\"></a>普通的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">        &#125;())</span><br></pre></td></tr></table></figure>\n<h4 id=\"带参数的\"><a href=\"#带参数的\" class=\"headerlink\" title=\"带参数的\"></a>带参数的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">形参</span>) </span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">        &#125;(实参))</span><br></pre></td></tr></table></figure>\n<h4 id=\"带返回值的\"><a href=\"#带返回值的\" class=\"headerlink\" title=\"带返回值的\"></a>带返回值的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    \t\t函数体</span><br><span class=\"line\">        \t&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>只有表达式才能被执行符号执行。<br>被执行符号执行的函数名字会被直接放弃（丢弃），相当于变成了立即执行函数。</p>\n<p>嵌套函数将内部函数保存到外部，一定会生成闭包，保存到外部的函数可以调用原来所处位置的变量。</p>\n<p>多个函数和一个函数形成闭包，则多个函数的变量共用。</p>\n<p>函数不执行（只定义）就不会运行函数内部的语句，什么时候执行函数，函数再运行内部语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = <span class=\"number\">200</span>;</span><br><span class=\"line\">        test();</span><br><span class=\"line\">输出<span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"，-也可以作为运算符，返回后面的计算值。\"><a href=\"#，-也可以作为运算符，返回后面的计算值。\" class=\"headerlink\" title=\"， 也可以作为运算符，返回后面的计算值。\"></a>， 也可以作为运算符，返回后面的计算值。</h3><p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"number\">1</span> -<span class=\"number\">1</span> , <span class=\"number\">1</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">a 的值为<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> f = (</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> f);</span><br><span class=\"line\">输出值为 number</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;) &#123; <span class=\"comment\">//立即执行函数</span></span><br><span class=\"line\">         x += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">输出 ： 1<span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"对象创建方法：\"><a href=\"#对象创建方法：\" class=\"headerlink\" title=\"对象创建方法：\"></a>对象创建方法：</h3><ol>\n<li>plainObject   对象字面量 / 对象直接量<br>每个属性之间用 ， 分隔开<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = &#123;</span><br><span class=\"line\">    属性名 ： 属性值，</span><br><span class=\"line\">    </span><br><span class=\"line\">    方法名 ： <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.属性名; <span class=\"comment\">//调用属性  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>构造函数<ol>\n<li>系统自带的构造函数  Object()<br>可以增，删，查，改 ，属性和方法<br><code>var 对象名 = new Object();</code></li>\n<li>自定义(函数名使用大驼峰 （首字母全大写）)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">参数</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名 = 属性值;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.方法名 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = <span class=\"keyword\">new</span> 函数名(参数);</span><br></pre></td></tr></table></figure>\n例：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;BMW&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = <span class=\"string\">&quot;1400&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lang = <span class=\"string\">&quot;49000&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I am Running!&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"构造函数内部原理：\"><a href=\"#构造函数内部原理：\" class=\"headerlink\" title=\"构造函数内部原理：\"></a>构造函数内部原理：</h3><ol>\n<li>在函数体最前面隐式的加上this = {}</li>\n<li>执行this.xxx = xxx</li>\n<li>隐式的返回this</li>\n</ol>\n<p>当一个对象的属性未定义就使用不会报错，会返回undefined。</p>\n<p>对象属性使用：<br>对象名. 属性名  / 对象名. 方法名</p>\n<p>this 第一人称可以用来指代对象。</p>\n<h4 id=\"给对象增加属性和方法：\"><a href=\"#给对象增加属性和方法：\" class=\"headerlink\" title=\"给对象增加属性和方法：\"></a>给对象增加属性和方法：</h4><p>对象名.属性名 = “属性值” / 对象名. 方法名 = function() { }</p>\n<h4 id=\"给对象改变属性和方法：\"><a href=\"#给对象改变属性和方法：\" class=\"headerlink\" title=\"给对象改变属性和方法：\"></a>给对象改变属性和方法：</h4><p>对象名.属性名 = “属性值” / 对象名. 方法名 = function() { }</p>\n<h4 id=\"删除对象属性和方法：\"><a href=\"#删除对象属性和方法：\" class=\"headerlink\" title=\"删除对象属性和方法：\"></a>删除对象属性和方法：</h4><p>delete 对象名.属性名    /    delete  对象名. 方法名 </p>\n<h4 id=\"原始值类型的变量没有属性和方法。\"><a href=\"#原始值类型的变量没有属性和方法。\" class=\"headerlink\" title=\"原始值类型的变量没有属性和方法。\"></a>原始值类型的变量没有属性和方法。</h4><h3 id=\"包装类：\"><a href=\"#包装类：\" class=\"headerlink\" title=\"包装类：\"></a>包装类：</h3><p>//创建一个数字型对象（可以有方法和属性）<br>var 对象名 = new Number(数字);</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建一个字符串型对象（可以有方法和属性）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  对象名 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(字符串);</span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建一个布尔型对象（可以有方法和属性）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = <span class=\"keyword\">new</span> Strng(布尔类型);</span><br></pre></td></tr></table></figure>\n<p>例：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>想操作原始值属性，系统会自动将其包装为对象，再删除对象。</p>\n<h2 id=\"原型：\"><a href=\"#原型：\" class=\"headerlink\" title=\"原型：\"></a>原型：</h2><p>用法：函数名.prototype.属性名 = 属性值；<br>function对象的一个属性，他定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法，原型也是对象（可以按照对象操作）。<br>利用原型特点和概念，可以提取共有属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Car.prototype.height = <span class=\"string\">&quot;1400&quot;</span>;</span><br><span class=\"line\">        Car.prototype.lang = <span class=\"string\">&quot;49000&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I am Running!&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"string\">&quot;BWM&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> car1 = <span class=\"keyword\">new</span> Car(<span class=\"string\">&quot;AoDi&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"不能通过对象修改原型。\"><a href=\"#不能通过对象修改原型。\" class=\"headerlink\" title=\"不能通过对象修改原型。\"></a>不能通过对象修改原型。</h4><p>函数名.prototype.属性 = 属性值;//修改属性</p>\n<p>delete 函数名.prototype.属性;  //删除</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> Car.prototype.height;</span><br></pre></td></tr></table></figure>\n\n<p>对象名.constructor；   可以找出对象的构造函数。</p>\n<p>charCodeAt()  方法可找出字符串的每一位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Person.prototype.name = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        Person.prototype.name = <span class=\"string\">&#x27;hsz&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">输出为 hsz</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        <span class=\"comment\">// Person.prototype.name = &#x27;hsz&#x27;;</span></span><br><span class=\"line\">        Person.prototype = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hsz&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">输出为xyq</span><br><span class=\"line\">会重新创建一个对象，更改地址了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"绝大多数对象最终都继承自Object-prototype\"><a href=\"#绝大多数对象最终都继承自Object-prototype\" class=\"headerlink\" title=\"绝大多数对象最终都继承自Object.prototype\"></a>绝大多数对象最终都继承自Object.prototype</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">可以创建一个没有继承<span class=\"built_in\">Object</span>的对象</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.floor(number) ;  向下取整（舍弃小数部分）</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.ceil(number); 向上取整（整数部分加一）</span><br></pre></td></tr></table></figure>\n\n<p>可正常计算的范围：小数点前16位 ，后16位</p>\n<h3 id=\"call-apply方法-：\"><a href=\"#call-apply方法-：\" class=\"headerlink\" title=\"call / apply方法 ：\"></a>call / apply方法 ：</h3><p>改变this的指向（可以借别人的方法来封装自己的功能）</p>\n<h4 id=\"call需要把实参按照形参的个数传进去，apply只能传一个arguments-数组\"><a href=\"#call需要把实参按照形参的个数传进去，apply只能传一个arguments-数组\" class=\"headerlink\" title=\"call需要把实参按照形参的个数传进去，apply只能传一个arguments(数组)\"></a>call需要把实参按照形参的个数传进去，apply只能传一个arguments(数组)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;XYQ&#x27;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">        Person.call(obj, <span class=\"string\">&#x27;xyq&#x27;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obj会变成&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;xyq&quot;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&quot;21&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class=\"line\">            Person.call(<span class=\"built_in\">this</span>, name, age, sex);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.grade = grade;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">可以生成Student函数有（name, age, sex, tel, grade）属性</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class=\"line\">            Person.apply(<span class=\"built_in\">this</span>, [name, age, sex]);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.grade = grade;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">可以生成Student函数有（name, age, sex, tel, grade）属性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"length":8337,"excerpt":"","more":"<h1 id=\"js知识和基础语法\"><a href=\"#js知识和基础语法\" class=\"headerlink\" title=\"js知识和基础语法\"></a>js知识和基础语法</h1><hr>\n<h2 id=\"浏览器组成：\"><a href=\"#浏览器组成：\" class=\"headerlink\" title=\"浏览器组成：\"></a>浏览器组成：</h2><ul>\n<li>shell：</li>\n<li>内核（核心）：<ul>\n<li>渲染引擎（语法规则和渲染）</li>\n<li>js引擎</li>\n<li>其他模块</li>\n</ul>\n</li>\n</ul>\n<p>google发布的Chrome，引擎号V8（C语言），能直接将就是代码转化为机械码。</p>\n<p>计算机中的同步和异步与现实生活中相反<br>异步：同时执行（link标签的加载）<br>同步：先干一件再干另一件</p>\n<h3 id=\"JavaScript：\"><a href=\"#JavaScript：\" class=\"headerlink\" title=\"JavaScript：\"></a>JavaScript：</h3><p>解释性语言:一行一行执行，不生成文件；<br>单线程:同一时间只能干一件事<br>ECMA标准</p>\n<p>js执行队列：<br>轮转时间片</p>\n<p>js三大部分：<br>ECMAScript, DOM,BOM</p>\n<h3 id=\"编译语言和解释语言：\"><a href=\"#编译语言和解释语言：\" class=\"headerlink\" title=\"编译语言和解释语言：\"></a>编译语言和解释语言：</h3><ul>\n<li>编译（c c++ ）：     <pre><code>  优点：快  \n  缺点：不跨平台，移植性不好\n</code></pre>\n</li>\n<li>解释(javascript php)：   <pre><code>  优点：跨平台，移植性好\n  不足：稍微慢\n</code></pre>\n</li>\n</ul>\n<p>java既不是编译型语言，也不是解释性语言（oak语言）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主流浏览器</th>\n<th align=\"center\">内核</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">IE</td>\n<td align=\"center\">trident</td>\n</tr>\n<tr>\n<td align=\"center\">Chrom</td>\n<td align=\"center\">webkit / blink</td>\n</tr>\n<tr>\n<td align=\"center\">firefox</td>\n<td align=\"center\">Gecko</td>\n</tr>\n<tr>\n<td align=\"center\">Opera</td>\n<td align=\"center\">presto</td>\n</tr>\n<tr>\n<td align=\"center\">Safari</td>\n<td align=\"center\">webkit</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"js引入：\"><a href=\"#js引入：\" class=\"headerlink\" title=\"js引入：\"></a>js引入：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script  type=<span class=\"string\">&quot;text/javaScript&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javaScript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>当一个script标签既引入外部js又有内部js时内部的失效</strong></p>\n<p> javascript是面向对象语言</p>\n<p>var  单一类型</p>\n<h3 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h3><ol>\n<li>原始值 (存储在栈中，栈与栈之间的赋值是拷贝)：Number   Boolean String undefined(未赋值的)  null(占位置)</li>\n<li>引用值（存储在堆中， ）：array object function</li>\n</ol>\n<h3 id=\"代码错误：代码错误只会影响当前代码块\"><a href=\"#代码错误：代码错误只会影响当前代码块\" class=\"headerlink\" title=\"代码错误：代码错误只会影响当前代码块\"></a>代码错误：代码错误只会影响当前代码块</h3><ol>\n<li>低级错误（语法错误）</li>\n<li>逻辑错误</li>\n</ol>\n<p>赋值顺序：自右向左<br>计算顺序：自左向右</p>\n<p>NaN不等于任何数，包括自己。</p>\n<p>undefined , null , NaN ,” “ , 0 , false 转为布尔值都为 false</p>\n<p>&amp;&amp;运算符（假设有两个值比较）（可用作短路语句），如果第一个值为false，直接输出第一个（结束执行），否则输出第二个值 。</p>\n<p>||运算符（假设有两个值比较）：只有两个都为假时才返回假。前一个为真时后一个条件直接忽略（不执行）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">never - ending loop：死循环</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"string\">&quot;never - ending loop&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>document.write() 可在页面中显示</code><br><code>console.log() :控制台输出</code></p>\n<h4 id=\"switch-case语句选择：\"><a href=\"#switch-case语句选择：\" class=\"headerlink\" title=\"switch - case语句选择：\"></a>switch - case语句选择：</h4><p>case里面的类型不要求一致</p>\n<p>continue :终止本次循环，开始下次的循环</p>\n<p>数组里面的每个元素不用类型一样<br>length ：数组长度</p>\n<h3 id=\"对象：\"><a href=\"#对象：\" class=\"headerlink\" title=\"对象：\"></a>对象：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = &#123;</span><br><span class=\"line\">属性名（key）：属性值（value）,(属性之间用逗号分开)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>取出：对象名.属性名</p>\n<p>typeof(变量名)  /  typeof  变量名:返回数据的类型：<br>返回值有：</p>\n<ul>\n<li>number ， </li>\n<li>string , </li>\n<li>boolean , </li>\n<li>object , </li>\n<li>undefined , </li>\n<li>function</li>\n</ul>\n<p>数据null返回object</p>\n<h3 id=\"类型转换：\"><a href=\"#类型转换：\" class=\"headerlink\" title=\"类型转换：\"></a>类型转换：</h3><h4 id=\"（显式类型转换）：\"><a href=\"#（显式类型转换）：\" class=\"headerlink\" title=\"（显式类型转换）：\"></a>（显式类型转换）：</h4><ul>\n<li>Number（）：转为数字，null转为数字是0 ，undefined转为数字为NaN,  根据常识不能转为数字的显示为NaN ，true转为1 ， false转为 0 。</li>\n<li>parseInt （参数1）： 转为整数型 ，不能转true和false（为NaN）；parseInt （参数一，参数二）：参数一：要转换的数，参数二：将数据看成什么进制（2,10,16（取值为2 - 36））转为10进制。转换原理：直接读取数值，遇到非数值部分截断。</li>\n<li>parseFloat（）：转为浮点型，转换原理：直接读取数值，遇到除第一个小数点以外的非数值部分截断。</li>\n<li>参数名.toString（）：转为字符串,undefined 和null 不能使用；参数名.toString（参数1）：参数1 是进制，将参数转为目标进制。</li>\n<li>String（）：转为字符串。</li>\n<li>Boolean（）：转为布尔类型。</li>\n<li>toFixed（参数值）：保留 参数值位 小数</li>\n</ul>\n<h4 id=\"（隐式类型转换）：\"><a href=\"#（隐式类型转换）：\" class=\"headerlink\" title=\"（隐式类型转换）：\"></a>（隐式类型转换）：</h4><ul>\n<li><p>isNaN（）：判断是否为NaN ，先调用Number（），再调用此方法。</p>\n</li>\n<li><p>++ / – / + / -  :先调用Number（），再计算，（都变成数字类型）。</p>\n</li>\n<li><p>+ :当两端有一个为字符串时，调用String（）,</p>\n</li>\n<li><p> */ % / / - :先调用Number（），再计算，（都变成数字类型）。</p>\n</li>\n<li><p>&gt; / &lt; / &gt;= &lt;= :转为其他的类型</p>\n</li>\n<li><p>== / != :转为其他的类型（null == undefined 结果为true  ，NaN == NaN 结果为false）。</p>\n</li>\n<li><p>===  / !==： 不发生类型转换的判断，直观判断左右是否相等。（NaN=== NaN 结果为false）。</p>\n</li>\n</ul>\n<p>当一个变量未定义就使用时只有调用typeof(变量) （显示为undefined）不会报错，其他情况都报错。</p>\n<p>alert() :网页弹出框</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>高内聚，低耦合。</p>\n<p>解释性语言输出不了地址。</p>\n<h3 id=\"定义方法：\"><a href=\"#定义方法：\" class=\"headerlink\" title=\"定义方法：\"></a>定义方法：</h3><ol>\n<li><p>函数声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名（）</span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>命名函数表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> 函数名 = <span class=\"function\"><span class=\"keyword\">function</span> 函数名</span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>匿名函数表达式（函数表达式）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> 函数名 = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"调用方法：\"><a href=\"#调用方法：\" class=\"headerlink\" title=\"调用方法：\"></a>调用方法：</h5><p><code>函数名（）;</code><br><code>函数名（参数，参数）：参数不需要指明类型。</code></p>\n<p>定义函数的参数不要求与使用函数时传递的参数一样多，从前到后依次传，多的部分舍弃。</p>\n<p>每个函数里面都有一个 arguments(类似于数组，参数列表，用来存放传递过来的实参，可以当成正常数组使用)。<br>当形参比实参多时：arguments 和 形参 多出来的部分不再满足映射（两个同时变化）。<br>可以通过 函数名.length  来求出形参的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">w</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// document.write(&quot;a&quot; + &quot;&lt;br&gt;&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">// document.write(&quot;xyq&quot; + &quot;&lt;br&gt;&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">// document.write(x + y);</span></span><br><span class=\"line\">            <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        w(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>return 函数返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">银行金额输出：</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (number) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;壹&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;贰&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;叁&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;肆&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;伍&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;陆&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;7&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;柒&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;8&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;捌&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;9&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;玖&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (number) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;拾&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;佰&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;仟&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;拾万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;佰万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;千万&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;亿&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n[i] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    result += transform(n[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (n.length - i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        result += change(n.length - i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result += <span class=\"string\">&#x27;元整&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(write(n));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归-规律：先执行的最后执行完-：\"><a href=\"#递归-规律：先执行的最后执行完-：\" class=\"headerlink\" title=\"递归(规律：先执行的最后执行完)：\"></a>递归(规律：先执行的最后执行完)：</h3><ol>\n<li>找规律</li>\n<li>找出口</li>\n</ol>\n<p>函数变量作用域：里层可以访问外层，外层不能访问里层</p>\n<h4 id=\"js执行三部曲：\"><a href=\"#js执行三部曲：\" class=\"headerlink\" title=\"js执行三部曲：\"></a>js执行三部曲：</h4><ul>\n<li>语法分析</li>\n<li>预编译</li>\n<li>解释执行</li>\n</ul>\n<h4 id=\"预编译的结果：\"><a href=\"#预编译的结果：\" class=\"headerlink\" title=\"预编译的结果：\"></a>预编译的结果：</h4><ul>\n<li>函数声明整体提升</li>\n<li>变量  声明提升（只是声明了变量，不能使用里面的值）</li>\n</ul>\n<p>imply global暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象所有。<br>全局对象（window)<br>一切声明的全局变量，全是window 的属性，即 var a = 123  =====&gt;  window.a =123;<br>window就是全局</p>\n<h3 id=\"全局的预编译过程：\"><a href=\"#全局的预编译过程：\" class=\"headerlink\" title=\"全局的预编译过程：\"></a>全局的预编译过程：</h3><ol>\n<li>创建GO对象（全局的执行期上下文） GO === window</li>\n<li>找形参和变量声明，将变量和形参名作为GO属性名，值为undefined 。 </li>\n<li>在函数体里面找函数声明（函数表达式不行），值赋予函数体 </li>\n</ol>\n<h3 id=\"函数体里的预编译过程：（预编译发生在函数执行的前一刻）\"><a href=\"#函数体里的预编译过程：（预编译发生在函数执行的前一刻）\" class=\"headerlink\" title=\"函数体里的预编译过程：（预编译发生在函数执行的前一刻）\"></a>函数体里的预编译过程：（预编译发生在函数执行的前一刻）</h3><ol>\n<li>创建AO对象（执行期上下文）</li>\n<li>找形参和变量声明，将变量和形参名作为AO属性名，值为undefined。 </li>\n<li>将实参值与形参统一  </li>\n<li>在函数体里面找函数声明（函数表达式不行），值赋予函数体 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fn(<span class=\"number\">1</span>);</span><br><span class=\"line\">输出：</span><br><span class=\"line\">ƒ <span class=\"function\"><span class=\"title\">a</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\">ƒ () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            c = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">            a = <span class=\"number\">3</span>;</span><br><span class=\"line\">            b = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        test(<span class=\"number\">1</span>);</span><br><span class=\"line\">答案</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n函数可以看成特殊的对象 </li>\n</ol>\n<h3 id=\"函数里面的属性：\"><a href=\"#函数里面的属性：\" class=\"headerlink\" title=\"函数里面的属性：\"></a>函数里面的属性：</h3><h4 id=\"可访问的：\"><a href=\"#可访问的：\" class=\"headerlink\" title=\"可访问的：\"></a>可访问的：</h4><ul>\n<li>name </li>\n<li>prototype<h4 id=\"不可访问的（隐式属性）：\"><a href=\"#不可访问的（隐式属性）：\" class=\"headerlink\" title=\"不可访问的（隐式属性）：\"></a>不可访问的（隐式属性）：</h4></li>\n<li>[[scope]] :存放作用域</li>\n</ul>\n<p>但凡内部的函数保存到外部，一定生成了闭包。<br>闭包会导致作用链不释放，造成内存泄漏。</p>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>针对初始化功能的函数（立即执行函数）：<br>执行完一次就销毁，其他和普通函数一样。</p>\n<h4 id=\"普通的\"><a href=\"#普通的\" class=\"headerlink\" title=\"普通的\"></a>普通的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">        &#125;())</span><br></pre></td></tr></table></figure>\n<h4 id=\"带参数的\"><a href=\"#带参数的\" class=\"headerlink\" title=\"带参数的\"></a>带参数的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">形参</span>) </span>&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">        &#125;(实参))</span><br></pre></td></tr></table></figure>\n<h4 id=\"带返回值的\"><a href=\"#带返回值的\" class=\"headerlink\" title=\"带返回值的\"></a>带返回值的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    \t\t函数体</span><br><span class=\"line\">        \t&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>只有表达式才能被执行符号执行。<br>被执行符号执行的函数名字会被直接放弃（丢弃），相当于变成了立即执行函数。</p>\n<p>嵌套函数将内部函数保存到外部，一定会生成闭包，保存到外部的函数可以调用原来所处位置的变量。</p>\n<p>多个函数和一个函数形成闭包，则多个函数的变量共用。</p>\n<p>函数不执行（只定义）就不会运行函数内部的语句，什么时候执行函数，函数再运行内部语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = <span class=\"number\">200</span>;</span><br><span class=\"line\">        test();</span><br><span class=\"line\">输出<span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"，-也可以作为运算符，返回后面的计算值。\"><a href=\"#，-也可以作为运算符，返回后面的计算值。\" class=\"headerlink\" title=\"， 也可以作为运算符，返回后面的计算值。\"></a>， 也可以作为运算符，返回后面的计算值。</h3><p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"number\">1</span> -<span class=\"number\">1</span> , <span class=\"number\">1</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">a 的值为<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> f = (</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> f);</span><br><span class=\"line\">输出值为 number</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;) &#123; <span class=\"comment\">//立即执行函数</span></span><br><span class=\"line\">         x += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">输出 ： 1<span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"对象创建方法：\"><a href=\"#对象创建方法：\" class=\"headerlink\" title=\"对象创建方法：\"></a>对象创建方法：</h3><ol>\n<li>plainObject   对象字面量 / 对象直接量<br>每个属性之间用 ， 分隔开<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = &#123;</span><br><span class=\"line\">    属性名 ： 属性值，</span><br><span class=\"line\">    </span><br><span class=\"line\">    方法名 ： <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.属性名; <span class=\"comment\">//调用属性  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>构造函数<ol>\n<li>系统自带的构造函数  Object()<br>可以增，删，查，改 ，属性和方法<br><code>var 对象名 = new Object();</code></li>\n<li>自定义(函数名使用大驼峰 （首字母全大写）)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">参数</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.属性名 = 属性值;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.方法名 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = <span class=\"keyword\">new</span> 函数名(参数);</span><br></pre></td></tr></table></figure>\n例：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;BMW&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = <span class=\"string\">&quot;1400&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lang = <span class=\"string\">&quot;49000&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I am Running!&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"构造函数内部原理：\"><a href=\"#构造函数内部原理：\" class=\"headerlink\" title=\"构造函数内部原理：\"></a>构造函数内部原理：</h3><ol>\n<li>在函数体最前面隐式的加上this = {}</li>\n<li>执行this.xxx = xxx</li>\n<li>隐式的返回this</li>\n</ol>\n<p>当一个对象的属性未定义就使用不会报错，会返回undefined。</p>\n<p>对象属性使用：<br>对象名. 属性名  / 对象名. 方法名</p>\n<p>this 第一人称可以用来指代对象。</p>\n<h4 id=\"给对象增加属性和方法：\"><a href=\"#给对象增加属性和方法：\" class=\"headerlink\" title=\"给对象增加属性和方法：\"></a>给对象增加属性和方法：</h4><p>对象名.属性名 = “属性值” / 对象名. 方法名 = function() { }</p>\n<h4 id=\"给对象改变属性和方法：\"><a href=\"#给对象改变属性和方法：\" class=\"headerlink\" title=\"给对象改变属性和方法：\"></a>给对象改变属性和方法：</h4><p>对象名.属性名 = “属性值” / 对象名. 方法名 = function() { }</p>\n<h4 id=\"删除对象属性和方法：\"><a href=\"#删除对象属性和方法：\" class=\"headerlink\" title=\"删除对象属性和方法：\"></a>删除对象属性和方法：</h4><p>delete 对象名.属性名    /    delete  对象名. 方法名 </p>\n<h4 id=\"原始值类型的变量没有属性和方法。\"><a href=\"#原始值类型的变量没有属性和方法。\" class=\"headerlink\" title=\"原始值类型的变量没有属性和方法。\"></a>原始值类型的变量没有属性和方法。</h4><h3 id=\"包装类：\"><a href=\"#包装类：\" class=\"headerlink\" title=\"包装类：\"></a>包装类：</h3><p>//创建一个数字型对象（可以有方法和属性）<br>var 对象名 = new Number(数字);</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建一个字符串型对象（可以有方法和属性）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  对象名 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(字符串);</span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建一个布尔型对象（可以有方法和属性）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> 对象名 = <span class=\"keyword\">new</span> Strng(布尔类型);</span><br></pre></td></tr></table></figure>\n<p>例：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>想操作原始值属性，系统会自动将其包装为对象，再删除对象。</p>\n<h2 id=\"原型：\"><a href=\"#原型：\" class=\"headerlink\" title=\"原型：\"></a>原型：</h2><p>用法：函数名.prototype.属性名 = 属性值；<br>function对象的一个属性，他定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法，原型也是对象（可以按照对象操作）。<br>利用原型特点和概念，可以提取共有属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Car.prototype.height = <span class=\"string\">&quot;1400&quot;</span>;</span><br><span class=\"line\">        Car.prototype.lang = <span class=\"string\">&quot;49000&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I am Running!&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"string\">&quot;BWM&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> car1 = <span class=\"keyword\">new</span> Car(<span class=\"string\">&quot;AoDi&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"不能通过对象修改原型。\"><a href=\"#不能通过对象修改原型。\" class=\"headerlink\" title=\"不能通过对象修改原型。\"></a>不能通过对象修改原型。</h4><p>函数名.prototype.属性 = 属性值;//修改属性</p>\n<p>delete 函数名.prototype.属性;  //删除</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> Car.prototype.height;</span><br></pre></td></tr></table></figure>\n\n<p>对象名.constructor；   可以找出对象的构造函数。</p>\n<p>charCodeAt()  方法可找出字符串的每一位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Person.prototype.name = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        Person.prototype.name = <span class=\"string\">&#x27;hsz&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">输出为 hsz</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        <span class=\"comment\">// Person.prototype.name = &#x27;hsz&#x27;;</span></span><br><span class=\"line\">        Person.prototype = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hsz&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">输出为xyq</span><br><span class=\"line\">会重新创建一个对象，更改地址了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"绝大多数对象最终都继承自Object-prototype\"><a href=\"#绝大多数对象最终都继承自Object-prototype\" class=\"headerlink\" title=\"绝大多数对象最终都继承自Object.prototype\"></a>绝大多数对象最终都继承自Object.prototype</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">可以创建一个没有继承<span class=\"built_in\">Object</span>的对象</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.floor(number) ;  向下取整（舍弃小数部分）</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.ceil(number); 向上取整（整数部分加一）</span><br></pre></td></tr></table></figure>\n\n<p>可正常计算的范围：小数点前16位 ，后16位</p>\n<h3 id=\"call-apply方法-：\"><a href=\"#call-apply方法-：\" class=\"headerlink\" title=\"call / apply方法 ：\"></a>call / apply方法 ：</h3><p>改变this的指向（可以借别人的方法来封装自己的功能）</p>\n<h4 id=\"call需要把实参按照形参的个数传进去，apply只能传一个arguments-数组\"><a href=\"#call需要把实参按照形参的个数传进去，apply只能传一个arguments-数组\" class=\"headerlink\" title=\"call需要把实参按照形参的个数传进去，apply只能传一个arguments(数组)\"></a>call需要把实参按照形参的个数传进去，apply只能传一个arguments(数组)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;XYQ&#x27;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">        Person.call(obj, <span class=\"string\">&#x27;xyq&#x27;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obj会变成&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;xyq&quot;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&quot;21&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class=\"line\">            Person.call(<span class=\"built_in\">this</span>, name, age, sex);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.grade = grade;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">可以生成Student函数有（name, age, sex, tel, grade）属性</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class=\"line\">            Person.apply(<span class=\"built_in\">this</span>, [name, age, sex]);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.grade = grade;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">可以生成Student函数有（name, age, sex, tel, grade）属性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"webpack的使用","date":"2021-12-31T08:21:22.000Z","description":"webpack的使用","_content":"\n![技能树](http://mdrs.yuanjin.tech/img/20210508151156.png)\n\n> **工程化，为复杂应用而生**\n>\n> 本文为保持简单，牺牲了某些语言的准确性\n\n# 核心\n\n**webpack是用来搭建前端工程的**\n\n它运行在node环境中，它所做的事情，简单来说，就是**打包**\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210508172954.png\" alt=\"image-20210508172953979\" style=\"zoom:50%;\" />\n\n具体来说，就是以某个模块作为入口，根据入口分析出所有模块的依赖关系，然后对各种模块进行合并、压缩，形成最终的打包结果\n\n**在webpack的世界中，一切皆是模块**\n\n# 体验\n\n> 老师提供的工程，以`src/main.js`作为入口文件\n>\n> 按照习惯，所有的模块均放置在`src`目录中\n\n1. 安装依赖\n\n2. 编写多个模块\n\n   随意编写一些模块，可以是js、图片、音视频，以入口模块为起点，形成依赖关系\n\n3. 运行`npm run build`命令，进行打包\n\n4. 查看打包结果\n\n   打包结果放置在dist目录中\n\n通过上面的体验，可以发现，webpack给我们带来了至少以下好处：\n\n- 可以大胆的使用任意模块化标准\n\n  无须担心兼容性问题，因为webpack完成打包后，已经没有了任何模块化语句\n\n- 可以将一些非JS代码也视为模块\n\n  这样可以对css、图片等资源进行更加细粒度的划分\n\n- 在前端开发中，也可以使用npm\n\n  webpack不会运行你的源代码，无论是你自己写的模块，还是通过npm安装的模块，webpack一视同仁，统统视为依赖，最终合并到打包结果中\n\n- 非常适合开发单页应用\n\n  单页应用是前端用户体验最好的web应用\n\n  所谓单页应用，是指只有一个html页面，页面中没有任何内容，所有的内容均靠js生成\n\n  要优雅的实现单页应用，最好依托于前端框架，比如vue、react\n\nwebpack给我们开发带来的变化远不止于此，接下来一一体验\n\n# 页面模板\n\n对于单页应用而言，只有一个空白的页面，所有内容都靠JS代码创建\n\nwebpack会自动生成一个页面，并且在页面中会自动加入对js和css的引用\n\n它生成页面时，参考的是`public/index.html`，其称之为页面模板\n\n# public目录\n\nwebpack会非常暴力的将public目录中的所有文件（除页面模板外），复制到打包结果中\n\n# 开发服务器\n\n如果每次修改完代码，都要经过`打包->运行`，未免太过麻烦\n\n在开发阶段，我们可以运行`npm run serve`命令获得更好的打包体验\n\n该命令会让`webpack`启动一个**开发服务器**。\n\n在这个阶段，webpack并不会形成打包结果文件，而是把打包的内容放到内存中，当我们请求服务器时，服务器从内存中给予我们打包结果\n\n与此同时，当源码发生变动时，webpack会自动重新打包，同时刷新页面以访问到最新的打包结果\n\n![image-20210508194442940](http://mdrs.yuanjin.tech/img/20210508194443.png)\n\n# 文件缓存\n\n可以看到，除了页面外，其他的资源在打包完成后，文件名多了一些奇奇怪怪的字符\n\n例如：`js/app-9ea93.js`\n\n其中，`9ea93`这样的字符称之为`hash`，它会随着模块内容的变化而变化\n\n**源码内容不变，hash不变；源码内容变化，hash变化**\n\n之所以这样做，是因为生产环境中，浏览器会对除页面外的静态资源进行缓存\n\n如果不设置hash值，一旦代码更新，浏览器还会使用之前缓存的结果，无法使用最新的代码\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210508183135.png\" alt=\"image-20210508183135487\" style=\"zoom:50%;\" />\n\n有了hash值之后，即可解决此问题\n\n![image-20210508183454385](http://mdrs.yuanjin.tech/img/20210508183454.png)\n\nwebpack会在打包时自动处理hash值，并不会对我们写代码造成任何影响，但作为一个前端开发者，有必要了解这一点\n\n# 资源路径\n\n**除代码和样式模块外，其他模块被视为资源模块**\n\n值得特别注意的是，**资源模块在源代码中的路径和打包后的路径是不一样的**，这就导致我们在编写代码的时候，根本无法知晓最终的路径\n\n最常见的例子，就是在css中使用背景图片\n\n```css\n.container{\n  /* 背景图使用了源码中的路径 */\n  backgroud: url('../assets/1.png'); \n}\n```\n\n它能正常工作吗？\n\n它能！\n\n因为webpack非常智能的发现了这一点，对于css中的路径，webpack在打包时，会将其自动转换为打包结果的路径，比如，上面的代码在打包完成后，可能被转换为下面的格式\n\n```css\n.container{\n  /* css中的资源路径会被自动替换，我们无须关心 */\n  background: url(/img/1492ea.png);\n}\n```\n\n但如果我们要通过js动态的使用路径，webpack是无法识别的\n\n```js\n// 打包前\nconst url = './assets/1.png'; // 该路径无法被转换\nimg.src = url;\n\n// 打包后\nconst url = './assets/1.png'; // ❌\nimg.src = url;\n```\n\n正确的做法是，通过模块化的方式导入资源，并获取资源路径\n\n```js\n// 打包前\nimport url from './assets/1.png'; // 打包后，url得到的将是真实的路径\nimg.src = url;\n\n// 打包后\nconst url = '/img/1492ea.png'; // ✅\nimg.src = url;\n```\n\n# 缺省的文件和后缀名\n\n导入模块时，所有js模块均可省略`.js`，若导入的模块文件名为`index.js`，可省略文件名\n\n```js\nimport './home'; // 若存在home.js，可省略js\nimport './movie'; // 若movie是一个目录，此次导入的是 ./movie/index.js\n```\n\n# 路径别名\n\n随着体量的增长，不可避免的，会形成层级极深的目录\n\n```shell\nroot\n\t|- src\n\t\t|- a\n\t\t\t\t|- a1\n\t\t\t\t\t\t|- a2\n\t\t\t\t\t\t\t |- index.js\n\t\t|- b\n\t\t\t\t|- b1\n\t\t\t\t\t\t|- index.js\n```\n\n如果需要在`./src/a/a1/a2/index.js`中导入`./src/b/b1/index.js`，则可能产生下面特别恶心的代码\n\n```js\nimport '../../../b/b1/index.js';\n```\n\nwebpack提供了别名供我们快速定位到`./src`目录，通常，该别名为`@`\n\n上面的导入代码可简化为\n\n```js\nimport '@/b/b1'; // @表示src目录，同时省略了index.js\n```\n\n# js兼容性\n\n当webpack读取到js代码时，会自动对其进行兼容性处理\n\n具体的处理方案涉及到两个配置文件：\n\n- `babel.config.js`：通过配置该文件，可以设置对哪些js代码进行降级处理\n- `.browserslistrc`：通过配置该文件，可以设置在降级时，要兼容哪些浏览器，兼容的范围越光，降级产生的代码就越多，自然，打包后的体积就越大\n\n你无须知晓具体的配置方式\n\n# 打包压缩\n\nwebpack在打包时，会对所有js和css代码进行压缩\n\n对于js，除了压缩之外，还会对其中的各种名称进行混淆\n\n```js\n(self.webpackChunkmovie_list=self.webpackChunkmovie_list||[]).push([[587],{3587:(r,t,n)=>{\"use strict\";n.r(t),n(5666),n(1539),n(8674),n(9600),n(1249),n(2222);var e=n(9755),a=n.n(e);var o;function i(r){o.html(r.map((function(r){return'<li>\\n  <a href=\"'.concat(r.url,'\" target=\"_blank\">\\n    <img src=\"').concat(r.cover,'\" title=\"').concat(r.title,'\">\\n  </a>\\n  <a href=\"').concat(r.url,'\" target=\"_blank\" class=\"').concat(\"qmUYQv1xlJhGMQKz-kfAp\",'\">').concat(r.title,'</a>\\n  <p class=\"').concat(\"_3yV5wC-URYTUP0sPvaE0ZR\",'\">').concat(r.rate,\"</p>\\n  </li>\")})).join(\"\"))}o=a()(\"<ul>\").addClass(\"_1fsrc5VinfYHBXCF1s58qS\").appendTo(\"#app\");var c=n(8138);const u=\n```\n\n混淆的作用一方面是为了进一步压缩包体积，另一方面是为了让我们的代码更难被其他人理解利用\n\n# 源码地图 source map\n\n我们运行的是webpack打包后的结果，而打包后的结果是很难阅读的\n\n但这样一来会带来新的问题，如果代码报错，我们就难以知道到底是那一行代码写的有问题\n\n此时源码地图就发挥了作用\n\n可以发现，js代码打包后都会跟上一个同名的、后缀为`.map`的文件，该文件就保存了原始代码的内容\n\n请放心，这个内容人类是看不懂的，但浏览器可以看懂\n\n当代码报错时，浏览器会定位到源码地图中的对应代码，而不是把真实报错的代码展示给我们\n\n你无须关心这一点，但可以自然的从其中获得巨大的便利\n\n# css工程化\n\nwebpack能够识别**所有**的样式代码，包括`css`、`less`、`sass`、`stylus`\n\n在打包时，会将它们转换成纯正的`css`\n\n除此之外，它还具备以下的神奇能力\n\n## 自动厂商前缀\n\ncss有很多兼容性问题，解决这些兼容性问题的最常见办法，就是加上厂商前缀。\n\n比如：\n\n```css\n/* 兼容性不好的代码 */\n.container{\n\tdisplay: flex;\n  transition: 1s;\n}\n\n/* 兼容性好的代码 */\n.container {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-transition: 1s;\n  transition: 1s;\n}\n```\n\nwebpack会根据`.browserlistrc`中指定的浏览器范围，**按需、自动**加上厂商前缀\n\n我们开发无须关心\n\n## css module\n\ncss文件多了后，你怎么保证它们里面没有冲突的类样式？\n\n靠层级选择器？就不担心效率？\n\n靠命名规范？就不担心脑袋爆炸？\n\n要靠就靠css module\n\n当样式文件以`xxx.mdoule.xxx`的方式命名时，webpack会将该文件当成一个开启了`css module`的文件\n\n比如：`index.module.less`、`movie.module.css`，都是开启了`css module`的文件\n\n**文件中的所有类名都会被hash化**\n\n```less\n// 源码\n.container{}\n.list{}\n.item{}\n\n// 打包结果，绝无可能重名\n._2GFVidHvoHtfgtrdifua24{}\n._1fsrc5VinfYHBXCF1s58qS{}\n.urPUKUukdS_UTSuWRI5-5{}\n```\n\n现在就一个问题，我们在使用类名时，如何知道它打包结果的类名呢？\n\n```js\nimport './index.module.less';\ndom.classList.add('container'); // ❌ 最终的类名可不是这个\n```\n\n正确的方式如下：\n\n```js\n// styles 是一个对象，里面映射了源码类名和打包类名的关系\nimport styles from './index.module.less';\ndom.classList.add(styles.container); // ✅ 属性container中记录的就是container转换后的类名\n```\n\n\n\n# 真正的webpack没有那么神奇\n\n实际上，webpack没有做这么多事，我们不能把功劳（怨念）全归结于它\n\n它只是站在巨人（其他流氓）肩膀上而已\n\n下图可以看个热闹\n\n![image-20210508203658298](http://mdrs.yuanjin.tech/img/20210508203658.png)\n\nwebpack通过插件（plugin）和加载器（loader）将这些技术整合在一起\n\n`上图的技术 + 乱七八糟一大堆其他技术 + 老师的配置 = 呈现给你的工程`\n\n目前，你无须理解这一些，保持敬畏即可\n\n最后，说明一下工程中看不懂的文件：\n\n- `.browserslistrc`，表达适配的浏览器范围，会被工程化中的其他技术所使用\n- `babel.config.js`，`babel`的配置文件，做js降级处理\n- `postcss.config.js`，`postcss`的配置文件，做css代码转换\n- `webpack.config.js`，`webpack`的配置文件，整合其他工程化技术，以及配置打包细节、开发服务器、路径别名等等\n\n# 对我们开发的影响\n\n1. 学会访问开发服务器查看效果\n\n2. 学会动态获取资源文件路径\n\n   ```js\n   import url from './assets/1.png'; \n   img.src = url;\n   ```\n\n3. 学会省略文件和后缀名\n\n   ```js\n   import './home'; // 若存在home.js，可省略js\n   import './movie'; // 若movie是一个目录，此次导入的是 ./movie/index.js\n   ```\n\n4. 学会使用别名简化导入代码\n\n   ```js\n   import '@/b/b1'; // 实际导入： src/b/b1/index.js  (若b1是目录)\n   ```\n\n5. 学会使用css module\n\n   ```js\n   // styles 是一个对象，里面映射了源码类名和打包类名的关系\n   import styles from './index.module.less';\n   dom.classList.add(styles.container); \n   ```\n\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack的使用\ndate: 2021-12-31 16:21:22\ndescription: webpack的使用\ncategories: \n  - 前端学习笔记\n  - 前端工程化\ntags: \n  - webpack\n  - 前端\n---\n\n![技能树](http://mdrs.yuanjin.tech/img/20210508151156.png)\n\n> **工程化，为复杂应用而生**\n>\n> 本文为保持简单，牺牲了某些语言的准确性\n\n# 核心\n\n**webpack是用来搭建前端工程的**\n\n它运行在node环境中，它所做的事情，简单来说，就是**打包**\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210508172954.png\" alt=\"image-20210508172953979\" style=\"zoom:50%;\" />\n\n具体来说，就是以某个模块作为入口，根据入口分析出所有模块的依赖关系，然后对各种模块进行合并、压缩，形成最终的打包结果\n\n**在webpack的世界中，一切皆是模块**\n\n# 体验\n\n> 老师提供的工程，以`src/main.js`作为入口文件\n>\n> 按照习惯，所有的模块均放置在`src`目录中\n\n1. 安装依赖\n\n2. 编写多个模块\n\n   随意编写一些模块，可以是js、图片、音视频，以入口模块为起点，形成依赖关系\n\n3. 运行`npm run build`命令，进行打包\n\n4. 查看打包结果\n\n   打包结果放置在dist目录中\n\n通过上面的体验，可以发现，webpack给我们带来了至少以下好处：\n\n- 可以大胆的使用任意模块化标准\n\n  无须担心兼容性问题，因为webpack完成打包后，已经没有了任何模块化语句\n\n- 可以将一些非JS代码也视为模块\n\n  这样可以对css、图片等资源进行更加细粒度的划分\n\n- 在前端开发中，也可以使用npm\n\n  webpack不会运行你的源代码，无论是你自己写的模块，还是通过npm安装的模块，webpack一视同仁，统统视为依赖，最终合并到打包结果中\n\n- 非常适合开发单页应用\n\n  单页应用是前端用户体验最好的web应用\n\n  所谓单页应用，是指只有一个html页面，页面中没有任何内容，所有的内容均靠js生成\n\n  要优雅的实现单页应用，最好依托于前端框架，比如vue、react\n\nwebpack给我们开发带来的变化远不止于此，接下来一一体验\n\n# 页面模板\n\n对于单页应用而言，只有一个空白的页面，所有内容都靠JS代码创建\n\nwebpack会自动生成一个页面，并且在页面中会自动加入对js和css的引用\n\n它生成页面时，参考的是`public/index.html`，其称之为页面模板\n\n# public目录\n\nwebpack会非常暴力的将public目录中的所有文件（除页面模板外），复制到打包结果中\n\n# 开发服务器\n\n如果每次修改完代码，都要经过`打包->运行`，未免太过麻烦\n\n在开发阶段，我们可以运行`npm run serve`命令获得更好的打包体验\n\n该命令会让`webpack`启动一个**开发服务器**。\n\n在这个阶段，webpack并不会形成打包结果文件，而是把打包的内容放到内存中，当我们请求服务器时，服务器从内存中给予我们打包结果\n\n与此同时，当源码发生变动时，webpack会自动重新打包，同时刷新页面以访问到最新的打包结果\n\n![image-20210508194442940](http://mdrs.yuanjin.tech/img/20210508194443.png)\n\n# 文件缓存\n\n可以看到，除了页面外，其他的资源在打包完成后，文件名多了一些奇奇怪怪的字符\n\n例如：`js/app-9ea93.js`\n\n其中，`9ea93`这样的字符称之为`hash`，它会随着模块内容的变化而变化\n\n**源码内容不变，hash不变；源码内容变化，hash变化**\n\n之所以这样做，是因为生产环境中，浏览器会对除页面外的静态资源进行缓存\n\n如果不设置hash值，一旦代码更新，浏览器还会使用之前缓存的结果，无法使用最新的代码\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210508183135.png\" alt=\"image-20210508183135487\" style=\"zoom:50%;\" />\n\n有了hash值之后，即可解决此问题\n\n![image-20210508183454385](http://mdrs.yuanjin.tech/img/20210508183454.png)\n\nwebpack会在打包时自动处理hash值，并不会对我们写代码造成任何影响，但作为一个前端开发者，有必要了解这一点\n\n# 资源路径\n\n**除代码和样式模块外，其他模块被视为资源模块**\n\n值得特别注意的是，**资源模块在源代码中的路径和打包后的路径是不一样的**，这就导致我们在编写代码的时候，根本无法知晓最终的路径\n\n最常见的例子，就是在css中使用背景图片\n\n```css\n.container{\n  /* 背景图使用了源码中的路径 */\n  backgroud: url('../assets/1.png'); \n}\n```\n\n它能正常工作吗？\n\n它能！\n\n因为webpack非常智能的发现了这一点，对于css中的路径，webpack在打包时，会将其自动转换为打包结果的路径，比如，上面的代码在打包完成后，可能被转换为下面的格式\n\n```css\n.container{\n  /* css中的资源路径会被自动替换，我们无须关心 */\n  background: url(/img/1492ea.png);\n}\n```\n\n但如果我们要通过js动态的使用路径，webpack是无法识别的\n\n```js\n// 打包前\nconst url = './assets/1.png'; // 该路径无法被转换\nimg.src = url;\n\n// 打包后\nconst url = './assets/1.png'; // ❌\nimg.src = url;\n```\n\n正确的做法是，通过模块化的方式导入资源，并获取资源路径\n\n```js\n// 打包前\nimport url from './assets/1.png'; // 打包后，url得到的将是真实的路径\nimg.src = url;\n\n// 打包后\nconst url = '/img/1492ea.png'; // ✅\nimg.src = url;\n```\n\n# 缺省的文件和后缀名\n\n导入模块时，所有js模块均可省略`.js`，若导入的模块文件名为`index.js`，可省略文件名\n\n```js\nimport './home'; // 若存在home.js，可省略js\nimport './movie'; // 若movie是一个目录，此次导入的是 ./movie/index.js\n```\n\n# 路径别名\n\n随着体量的增长，不可避免的，会形成层级极深的目录\n\n```shell\nroot\n\t|- src\n\t\t|- a\n\t\t\t\t|- a1\n\t\t\t\t\t\t|- a2\n\t\t\t\t\t\t\t |- index.js\n\t\t|- b\n\t\t\t\t|- b1\n\t\t\t\t\t\t|- index.js\n```\n\n如果需要在`./src/a/a1/a2/index.js`中导入`./src/b/b1/index.js`，则可能产生下面特别恶心的代码\n\n```js\nimport '../../../b/b1/index.js';\n```\n\nwebpack提供了别名供我们快速定位到`./src`目录，通常，该别名为`@`\n\n上面的导入代码可简化为\n\n```js\nimport '@/b/b1'; // @表示src目录，同时省略了index.js\n```\n\n# js兼容性\n\n当webpack读取到js代码时，会自动对其进行兼容性处理\n\n具体的处理方案涉及到两个配置文件：\n\n- `babel.config.js`：通过配置该文件，可以设置对哪些js代码进行降级处理\n- `.browserslistrc`：通过配置该文件，可以设置在降级时，要兼容哪些浏览器，兼容的范围越光，降级产生的代码就越多，自然，打包后的体积就越大\n\n你无须知晓具体的配置方式\n\n# 打包压缩\n\nwebpack在打包时，会对所有js和css代码进行压缩\n\n对于js，除了压缩之外，还会对其中的各种名称进行混淆\n\n```js\n(self.webpackChunkmovie_list=self.webpackChunkmovie_list||[]).push([[587],{3587:(r,t,n)=>{\"use strict\";n.r(t),n(5666),n(1539),n(8674),n(9600),n(1249),n(2222);var e=n(9755),a=n.n(e);var o;function i(r){o.html(r.map((function(r){return'<li>\\n  <a href=\"'.concat(r.url,'\" target=\"_blank\">\\n    <img src=\"').concat(r.cover,'\" title=\"').concat(r.title,'\">\\n  </a>\\n  <a href=\"').concat(r.url,'\" target=\"_blank\" class=\"').concat(\"qmUYQv1xlJhGMQKz-kfAp\",'\">').concat(r.title,'</a>\\n  <p class=\"').concat(\"_3yV5wC-URYTUP0sPvaE0ZR\",'\">').concat(r.rate,\"</p>\\n  </li>\")})).join(\"\"))}o=a()(\"<ul>\").addClass(\"_1fsrc5VinfYHBXCF1s58qS\").appendTo(\"#app\");var c=n(8138);const u=\n```\n\n混淆的作用一方面是为了进一步压缩包体积，另一方面是为了让我们的代码更难被其他人理解利用\n\n# 源码地图 source map\n\n我们运行的是webpack打包后的结果，而打包后的结果是很难阅读的\n\n但这样一来会带来新的问题，如果代码报错，我们就难以知道到底是那一行代码写的有问题\n\n此时源码地图就发挥了作用\n\n可以发现，js代码打包后都会跟上一个同名的、后缀为`.map`的文件，该文件就保存了原始代码的内容\n\n请放心，这个内容人类是看不懂的，但浏览器可以看懂\n\n当代码报错时，浏览器会定位到源码地图中的对应代码，而不是把真实报错的代码展示给我们\n\n你无须关心这一点，但可以自然的从其中获得巨大的便利\n\n# css工程化\n\nwebpack能够识别**所有**的样式代码，包括`css`、`less`、`sass`、`stylus`\n\n在打包时，会将它们转换成纯正的`css`\n\n除此之外，它还具备以下的神奇能力\n\n## 自动厂商前缀\n\ncss有很多兼容性问题，解决这些兼容性问题的最常见办法，就是加上厂商前缀。\n\n比如：\n\n```css\n/* 兼容性不好的代码 */\n.container{\n\tdisplay: flex;\n  transition: 1s;\n}\n\n/* 兼容性好的代码 */\n.container {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-transition: 1s;\n  transition: 1s;\n}\n```\n\nwebpack会根据`.browserlistrc`中指定的浏览器范围，**按需、自动**加上厂商前缀\n\n我们开发无须关心\n\n## css module\n\ncss文件多了后，你怎么保证它们里面没有冲突的类样式？\n\n靠层级选择器？就不担心效率？\n\n靠命名规范？就不担心脑袋爆炸？\n\n要靠就靠css module\n\n当样式文件以`xxx.mdoule.xxx`的方式命名时，webpack会将该文件当成一个开启了`css module`的文件\n\n比如：`index.module.less`、`movie.module.css`，都是开启了`css module`的文件\n\n**文件中的所有类名都会被hash化**\n\n```less\n// 源码\n.container{}\n.list{}\n.item{}\n\n// 打包结果，绝无可能重名\n._2GFVidHvoHtfgtrdifua24{}\n._1fsrc5VinfYHBXCF1s58qS{}\n.urPUKUukdS_UTSuWRI5-5{}\n```\n\n现在就一个问题，我们在使用类名时，如何知道它打包结果的类名呢？\n\n```js\nimport './index.module.less';\ndom.classList.add('container'); // ❌ 最终的类名可不是这个\n```\n\n正确的方式如下：\n\n```js\n// styles 是一个对象，里面映射了源码类名和打包类名的关系\nimport styles from './index.module.less';\ndom.classList.add(styles.container); // ✅ 属性container中记录的就是container转换后的类名\n```\n\n\n\n# 真正的webpack没有那么神奇\n\n实际上，webpack没有做这么多事，我们不能把功劳（怨念）全归结于它\n\n它只是站在巨人（其他流氓）肩膀上而已\n\n下图可以看个热闹\n\n![image-20210508203658298](http://mdrs.yuanjin.tech/img/20210508203658.png)\n\nwebpack通过插件（plugin）和加载器（loader）将这些技术整合在一起\n\n`上图的技术 + 乱七八糟一大堆其他技术 + 老师的配置 = 呈现给你的工程`\n\n目前，你无须理解这一些，保持敬畏即可\n\n最后，说明一下工程中看不懂的文件：\n\n- `.browserslistrc`，表达适配的浏览器范围，会被工程化中的其他技术所使用\n- `babel.config.js`，`babel`的配置文件，做js降级处理\n- `postcss.config.js`，`postcss`的配置文件，做css代码转换\n- `webpack.config.js`，`webpack`的配置文件，整合其他工程化技术，以及配置打包细节、开发服务器、路径别名等等\n\n# 对我们开发的影响\n\n1. 学会访问开发服务器查看效果\n\n2. 学会动态获取资源文件路径\n\n   ```js\n   import url from './assets/1.png'; \n   img.src = url;\n   ```\n\n3. 学会省略文件和后缀名\n\n   ```js\n   import './home'; // 若存在home.js，可省略js\n   import './movie'; // 若movie是一个目录，此次导入的是 ./movie/index.js\n   ```\n\n4. 学会使用别名简化导入代码\n\n   ```js\n   import '@/b/b1'; // 实际导入： src/b/b1/index.js  (若b1是目录)\n   ```\n\n5. 学会使用css module\n\n   ```js\n   // styles 是一个对象，里面映射了源码类名和打包类名的关系\n   import styles from './index.module.less';\n   dom.classList.add(styles.container); \n   ```\n\n","slug":"webpack","published":1,"updated":"2022-01-01T06:31:49.429Z","_id":"ckxu6dnik000s10ax8p8h22l3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://mdrs.yuanjin.tech/img/20210508151156.png\" alt=\"技能树\"></p>\n<blockquote>\n<p><strong>工程化，为复杂应用而生</strong></p>\n<p>本文为保持简单，牺牲了某些语言的准确性</p>\n</blockquote>\n<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><p><strong>webpack是用来搭建前端工程的</strong></p>\n<p>它运行在node环境中，它所做的事情，简单来说，就是<strong>打包</strong></p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210508172954.png\" alt=\"image-20210508172953979\" style=\"zoom:50%;\" />\n\n<p>具体来说，就是以某个模块作为入口，根据入口分析出所有模块的依赖关系，然后对各种模块进行合并、压缩，形成最终的打包结果</p>\n<p><strong>在webpack的世界中，一切皆是模块</strong></p>\n<h1 id=\"体验\"><a href=\"#体验\" class=\"headerlink\" title=\"体验\"></a>体验</h1><blockquote>\n<p>老师提供的工程，以<code>src/main.js</code>作为入口文件</p>\n<p>按照习惯，所有的模块均放置在<code>src</code>目录中</p>\n</blockquote>\n<ol>\n<li><p>安装依赖</p>\n</li>\n<li><p>编写多个模块</p>\n<p>随意编写一些模块，可以是js、图片、音视频，以入口模块为起点，形成依赖关系</p>\n</li>\n<li><p>运行<code>npm run build</code>命令，进行打包</p>\n</li>\n<li><p>查看打包结果</p>\n<p>打包结果放置在dist目录中</p>\n</li>\n</ol>\n<p>通过上面的体验，可以发现，webpack给我们带来了至少以下好处：</p>\n<ul>\n<li><p>可以大胆的使用任意模块化标准</p>\n<p>无须担心兼容性问题，因为webpack完成打包后，已经没有了任何模块化语句</p>\n</li>\n<li><p>可以将一些非JS代码也视为模块</p>\n<p>这样可以对css、图片等资源进行更加细粒度的划分</p>\n</li>\n<li><p>在前端开发中，也可以使用npm</p>\n<p>webpack不会运行你的源代码，无论是你自己写的模块，还是通过npm安装的模块，webpack一视同仁，统统视为依赖，最终合并到打包结果中</p>\n</li>\n<li><p>非常适合开发单页应用</p>\n<p>单页应用是前端用户体验最好的web应用</p>\n<p>所谓单页应用，是指只有一个html页面，页面中没有任何内容，所有的内容均靠js生成</p>\n<p>要优雅的实现单页应用，最好依托于前端框架，比如vue、react</p>\n</li>\n</ul>\n<p>webpack给我们开发带来的变化远不止于此，接下来一一体验</p>\n<h1 id=\"页面模板\"><a href=\"#页面模板\" class=\"headerlink\" title=\"页面模板\"></a>页面模板</h1><p>对于单页应用而言，只有一个空白的页面，所有内容都靠JS代码创建</p>\n<p>webpack会自动生成一个页面，并且在页面中会自动加入对js和css的引用</p>\n<p>它生成页面时，参考的是<code>public/index.html</code>，其称之为页面模板</p>\n<h1 id=\"public目录\"><a href=\"#public目录\" class=\"headerlink\" title=\"public目录\"></a>public目录</h1><p>webpack会非常暴力的将public目录中的所有文件（除页面模板外），复制到打包结果中</p>\n<h1 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h1><p>如果每次修改完代码，都要经过<code>打包-&gt;运行</code>，未免太过麻烦</p>\n<p>在开发阶段，我们可以运行<code>npm run serve</code>命令获得更好的打包体验</p>\n<p>该命令会让<code>webpack</code>启动一个<strong>开发服务器</strong>。</p>\n<p>在这个阶段，webpack并不会形成打包结果文件，而是把打包的内容放到内存中，当我们请求服务器时，服务器从内存中给予我们打包结果</p>\n<p>与此同时，当源码发生变动时，webpack会自动重新打包，同时刷新页面以访问到最新的打包结果</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210508194443.png\" alt=\"image-20210508194442940\"></p>\n<h1 id=\"文件缓存\"><a href=\"#文件缓存\" class=\"headerlink\" title=\"文件缓存\"></a>文件缓存</h1><p>可以看到，除了页面外，其他的资源在打包完成后，文件名多了一些奇奇怪怪的字符</p>\n<p>例如：<code>js/app-9ea93.js</code></p>\n<p>其中，<code>9ea93</code>这样的字符称之为<code>hash</code>，它会随着模块内容的变化而变化</p>\n<p><strong>源码内容不变，hash不变；源码内容变化，hash变化</strong></p>\n<p>之所以这样做，是因为生产环境中，浏览器会对除页面外的静态资源进行缓存</p>\n<p>如果不设置hash值，一旦代码更新，浏览器还会使用之前缓存的结果，无法使用最新的代码</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210508183135.png\" alt=\"image-20210508183135487\" style=\"zoom:50%;\" />\n\n<p>有了hash值之后，即可解决此问题</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210508183454.png\" alt=\"image-20210508183454385\"></p>\n<p>webpack会在打包时自动处理hash值，并不会对我们写代码造成任何影响，但作为一个前端开发者，有必要了解这一点</p>\n<h1 id=\"资源路径\"><a href=\"#资源路径\" class=\"headerlink\" title=\"资源路径\"></a>资源路径</h1><p><strong>除代码和样式模块外，其他模块被视为资源模块</strong></p>\n<p>值得特别注意的是，<strong>资源模块在源代码中的路径和打包后的路径是不一样的</strong>，这就导致我们在编写代码的时候，根本无法知晓最终的路径</p>\n<p>最常见的例子，就是在css中使用背景图片</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 背景图使用了源码中的路径 */</span></span><br><span class=\"line\">  backgroud: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../assets/1.png&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它能正常工作吗？</p>\n<p>它能！</p>\n<p>因为webpack非常智能的发现了这一点，对于css中的路径，webpack在打包时，会将其自动转换为打包结果的路径，比如，上面的代码在打包完成后，可能被转换为下面的格式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* css中的资源路径会被自动替换，我们无须关心 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/img/1492ea.png</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但如果我们要通过js动态的使用路径，webpack是无法识别的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打包前</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; <span class=\"comment\">// 该路径无法被转换</span></span><br><span class=\"line\">img.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包后</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; <span class=\"comment\">// ❌</span></span><br><span class=\"line\">img.src = url;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法是，通过模块化的方式导入资源，并获取资源路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打包前</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> url <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; <span class=\"comment\">// 打包后，url得到的将是真实的路径</span></span><br><span class=\"line\">img.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包后</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;/img/1492ea.png&#x27;</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">img.src = url;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"缺省的文件和后缀名\"><a href=\"#缺省的文件和后缀名\" class=\"headerlink\" title=\"缺省的文件和后缀名\"></a>缺省的文件和后缀名</h1><p>导入模块时，所有js模块均可省略<code>.js</code>，若导入的模块文件名为<code>index.js</code>，可省略文件名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./home&#x27;</span>; <span class=\"comment\">// 若存在home.js，可省略js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./movie&#x27;</span>; <span class=\"comment\">// 若movie是一个目录，此次导入的是 ./movie/index.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路径别名\"><a href=\"#路径别名\" class=\"headerlink\" title=\"路径别名\"></a>路径别名</h1><p>随着体量的增长，不可避免的，会形成层级极深的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root</span><br><span class=\"line\">\t|- src</span><br><span class=\"line\">\t\t|- a</span><br><span class=\"line\">\t\t\t\t|- a1</span><br><span class=\"line\">\t\t\t\t\t\t|- a2</span><br><span class=\"line\">\t\t\t\t\t\t\t |- index.js</span><br><span class=\"line\">\t\t|- b</span><br><span class=\"line\">\t\t\t\t|- b1</span><br><span class=\"line\">\t\t\t\t\t\t|- index.js</span><br></pre></td></tr></table></figure>\n\n<p>如果需要在<code>./src/a/a1/a2/index.js</code>中导入<code>./src/b/b1/index.js</code>，则可能产生下面特别恶心的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../../../b/b1/index.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>webpack提供了别名供我们快速定位到<code>./src</code>目录，通常，该别名为<code>@</code></p>\n<p>上面的导入代码可简化为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@/b/b1&#x27;</span>; <span class=\"comment\">// @表示src目录，同时省略了index.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"js兼容性\"><a href=\"#js兼容性\" class=\"headerlink\" title=\"js兼容性\"></a>js兼容性</h1><p>当webpack读取到js代码时，会自动对其进行兼容性处理</p>\n<p>具体的处理方案涉及到两个配置文件：</p>\n<ul>\n<li><code>babel.config.js</code>：通过配置该文件，可以设置对哪些js代码进行降级处理</li>\n<li><code>.browserslistrc</code>：通过配置该文件，可以设置在降级时，要兼容哪些浏览器，兼容的范围越光，降级产生的代码就越多，自然，打包后的体积就越大</li>\n</ul>\n<p>你无须知晓具体的配置方式</p>\n<h1 id=\"打包压缩\"><a href=\"#打包压缩\" class=\"headerlink\" title=\"打包压缩\"></a>打包压缩</h1><p>webpack在打包时，会对所有js和css代码进行压缩</p>\n<p>对于js，除了压缩之外，还会对其中的各种名称进行混淆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(self.webpackChunkmovie_list=self.webpackChunkmovie_list||[]).push([[<span class=\"number\">587</span>],&#123;<span class=\"number\">3587</span>:<span class=\"function\">(<span class=\"params\">r,t,n</span>)=&gt;</span>&#123;<span class=\"string\">&quot;use strict&quot;</span>;n.r(t),n(<span class=\"number\">5666</span>),n(<span class=\"number\">1539</span>),n(<span class=\"number\">8674</span>),n(<span class=\"number\">9600</span>),n(<span class=\"number\">1249</span>),n(<span class=\"number\">2222</span>);<span class=\"keyword\">var</span> e=n(<span class=\"number\">9755</span>),a=n.n(e);<span class=\"keyword\">var</span> o;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">r</span>)</span>&#123;o.html(r.map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">return</span><span class=\"string\">&#x27;&lt;li&gt;\\n  &lt;a href=&quot;&#x27;</span>.concat(r.url,<span class=\"string\">&#x27;&quot; target=&quot;_blank&quot;&gt;\\n    &lt;img src=&quot;&#x27;</span>).concat(r.cover,<span class=\"string\">&#x27;&quot; title=&quot;&#x27;</span>).concat(r.title,<span class=\"string\">&#x27;&quot;&gt;\\n  &lt;/a&gt;\\n  &lt;a href=&quot;&#x27;</span>).concat(r.url,<span class=\"string\">&#x27;&quot; target=&quot;_blank&quot; class=&quot;&#x27;</span>).concat(<span class=\"string\">&quot;qmUYQv1xlJhGMQKz-kfAp&quot;</span>,<span class=\"string\">&#x27;&quot;&gt;&#x27;</span>).concat(r.title,<span class=\"string\">&#x27;&lt;/a&gt;\\n  &lt;p class=&quot;&#x27;</span>).concat(<span class=\"string\">&quot;_3yV5wC-URYTUP0sPvaE0ZR&quot;</span>,<span class=\"string\">&#x27;&quot;&gt;&#x27;</span>).concat(r.rate,<span class=\"string\">&quot;&lt;/p&gt;\\n  &lt;/li&gt;&quot;</span>)&#125;)).join(<span class=\"string\">&quot;&quot;</span>))&#125;o=a()(<span class=\"string\">&quot;&lt;ul&gt;&quot;</span>).addClass(<span class=\"string\">&quot;_1fsrc5VinfYHBXCF1s58qS&quot;</span>).appendTo(<span class=\"string\">&quot;#app&quot;</span>);<span class=\"keyword\">var</span> c=n(<span class=\"number\">8138</span>);<span class=\"keyword\">const</span> u=</span><br></pre></td></tr></table></figure>\n\n<p>混淆的作用一方面是为了进一步压缩包体积，另一方面是为了让我们的代码更难被其他人理解利用</p>\n<h1 id=\"源码地图-source-map\"><a href=\"#源码地图-source-map\" class=\"headerlink\" title=\"源码地图 source map\"></a>源码地图 source map</h1><p>我们运行的是webpack打包后的结果，而打包后的结果是很难阅读的</p>\n<p>但这样一来会带来新的问题，如果代码报错，我们就难以知道到底是那一行代码写的有问题</p>\n<p>此时源码地图就发挥了作用</p>\n<p>可以发现，js代码打包后都会跟上一个同名的、后缀为<code>.map</code>的文件，该文件就保存了原始代码的内容</p>\n<p>请放心，这个内容人类是看不懂的，但浏览器可以看懂</p>\n<p>当代码报错时，浏览器会定位到源码地图中的对应代码，而不是把真实报错的代码展示给我们</p>\n<p>你无须关心这一点，但可以自然的从其中获得巨大的便利</p>\n<h1 id=\"css工程化\"><a href=\"#css工程化\" class=\"headerlink\" title=\"css工程化\"></a>css工程化</h1><p>webpack能够识别<strong>所有</strong>的样式代码，包括<code>css</code>、<code>less</code>、<code>sass</code>、<code>stylus</code></p>\n<p>在打包时，会将它们转换成纯正的<code>css</code></p>\n<p>除此之外，它还具备以下的神奇能力</p>\n<h2 id=\"自动厂商前缀\"><a href=\"#自动厂商前缀\" class=\"headerlink\" title=\"自动厂商前缀\"></a>自动厂商前缀</h2><p>css有很多兼容性问题，解决这些兼容性问题的最常见办法，就是加上厂商前缀。</p>\n<p>比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 兼容性不好的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 兼容性好的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>webpack会根据<code>.browserlistrc</code>中指定的浏览器范围，<strong>按需、自动</strong>加上厂商前缀</p>\n<p>我们开发无须关心</p>\n<h2 id=\"css-module\"><a href=\"#css-module\" class=\"headerlink\" title=\"css module\"></a>css module</h2><p>css文件多了后，你怎么保证它们里面没有冲突的类样式？</p>\n<p>靠层级选择器？就不担心效率？</p>\n<p>靠命名规范？就不担心脑袋爆炸？</p>\n<p>要靠就靠css module</p>\n<p>当样式文件以<code>xxx.mdoule.xxx</code>的方式命名时，webpack会将该文件当成一个开启了<code>css module</code>的文件</p>\n<p>比如：<code>index.module.less</code>、<code>movie.module.css</code>，都是开启了<code>css module</code>的文件</p>\n<p><strong>文件中的所有类名都会被hash化</strong></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包结果，绝无可能重名</span></span><br><span class=\"line\"><span class=\"selector-class\">._2GFVidHvoHtfgtrdifua24</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">._1fsrc5VinfYHBXCF1s58qS</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.urPUKUukdS_UTSuWRI5-5</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在就一个问题，我们在使用类名时，如何知道它打包结果的类名呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\">dom.classList.add(<span class=\"string\">&#x27;container&#x27;</span>); <span class=\"comment\">// ❌ 最终的类名可不是这个</span></span><br></pre></td></tr></table></figure>\n\n<p>正确的方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\">dom.classList.add(styles.container); <span class=\"comment\">// ✅ 属性container中记录的就是container转换后的类名</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"真正的webpack没有那么神奇\"><a href=\"#真正的webpack没有那么神奇\" class=\"headerlink\" title=\"真正的webpack没有那么神奇\"></a>真正的webpack没有那么神奇</h1><p>实际上，webpack没有做这么多事，我们不能把功劳（怨念）全归结于它</p>\n<p>它只是站在巨人（其他流氓）肩膀上而已</p>\n<p>下图可以看个热闹</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210508203658.png\" alt=\"image-20210508203658298\"></p>\n<p>webpack通过插件（plugin）和加载器（loader）将这些技术整合在一起</p>\n<p><code>上图的技术 + 乱七八糟一大堆其他技术 + 老师的配置 = 呈现给你的工程</code></p>\n<p>目前，你无须理解这一些，保持敬畏即可</p>\n<p>最后，说明一下工程中看不懂的文件：</p>\n<ul>\n<li><code>.browserslistrc</code>，表达适配的浏览器范围，会被工程化中的其他技术所使用</li>\n<li><code>babel.config.js</code>，<code>babel</code>的配置文件，做js降级处理</li>\n<li><code>postcss.config.js</code>，<code>postcss</code>的配置文件，做css代码转换</li>\n<li><code>webpack.config.js</code>，<code>webpack</code>的配置文件，整合其他工程化技术，以及配置打包细节、开发服务器、路径别名等等</li>\n</ul>\n<h1 id=\"对我们开发的影响\"><a href=\"#对我们开发的影响\" class=\"headerlink\" title=\"对我们开发的影响\"></a>对我们开发的影响</h1><ol>\n<li><p>学会访问开发服务器查看效果</p>\n</li>\n<li><p>学会动态获取资源文件路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> url <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; </span><br><span class=\"line\">img.src = url;</span><br></pre></td></tr></table></figure></li>\n<li><p>学会省略文件和后缀名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./home&#x27;</span>; <span class=\"comment\">// 若存在home.js，可省略js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./movie&#x27;</span>; <span class=\"comment\">// 若movie是一个目录，此次导入的是 ./movie/index.js</span></span><br></pre></td></tr></table></figure></li>\n<li><p>学会使用别名简化导入代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@/b/b1&#x27;</span>; <span class=\"comment\">// 实际导入： src/b/b1/index.js  (若b1是目录)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>学会使用css module</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\">dom.classList.add(styles.container); </span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":5716,"excerpt":"","more":"<p><img src=\"http://mdrs.yuanjin.tech/img/20210508151156.png\" alt=\"技能树\"></p>\n<blockquote>\n<p><strong>工程化，为复杂应用而生</strong></p>\n<p>本文为保持简单，牺牲了某些语言的准确性</p>\n</blockquote>\n<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><p><strong>webpack是用来搭建前端工程的</strong></p>\n<p>它运行在node环境中，它所做的事情，简单来说，就是<strong>打包</strong></p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210508172954.png\" alt=\"image-20210508172953979\" style=\"zoom:50%;\" />\n\n<p>具体来说，就是以某个模块作为入口，根据入口分析出所有模块的依赖关系，然后对各种模块进行合并、压缩，形成最终的打包结果</p>\n<p><strong>在webpack的世界中，一切皆是模块</strong></p>\n<h1 id=\"体验\"><a href=\"#体验\" class=\"headerlink\" title=\"体验\"></a>体验</h1><blockquote>\n<p>老师提供的工程，以<code>src/main.js</code>作为入口文件</p>\n<p>按照习惯，所有的模块均放置在<code>src</code>目录中</p>\n</blockquote>\n<ol>\n<li><p>安装依赖</p>\n</li>\n<li><p>编写多个模块</p>\n<p>随意编写一些模块，可以是js、图片、音视频，以入口模块为起点，形成依赖关系</p>\n</li>\n<li><p>运行<code>npm run build</code>命令，进行打包</p>\n</li>\n<li><p>查看打包结果</p>\n<p>打包结果放置在dist目录中</p>\n</li>\n</ol>\n<p>通过上面的体验，可以发现，webpack给我们带来了至少以下好处：</p>\n<ul>\n<li><p>可以大胆的使用任意模块化标准</p>\n<p>无须担心兼容性问题，因为webpack完成打包后，已经没有了任何模块化语句</p>\n</li>\n<li><p>可以将一些非JS代码也视为模块</p>\n<p>这样可以对css、图片等资源进行更加细粒度的划分</p>\n</li>\n<li><p>在前端开发中，也可以使用npm</p>\n<p>webpack不会运行你的源代码，无论是你自己写的模块，还是通过npm安装的模块，webpack一视同仁，统统视为依赖，最终合并到打包结果中</p>\n</li>\n<li><p>非常适合开发单页应用</p>\n<p>单页应用是前端用户体验最好的web应用</p>\n<p>所谓单页应用，是指只有一个html页面，页面中没有任何内容，所有的内容均靠js生成</p>\n<p>要优雅的实现单页应用，最好依托于前端框架，比如vue、react</p>\n</li>\n</ul>\n<p>webpack给我们开发带来的变化远不止于此，接下来一一体验</p>\n<h1 id=\"页面模板\"><a href=\"#页面模板\" class=\"headerlink\" title=\"页面模板\"></a>页面模板</h1><p>对于单页应用而言，只有一个空白的页面，所有内容都靠JS代码创建</p>\n<p>webpack会自动生成一个页面，并且在页面中会自动加入对js和css的引用</p>\n<p>它生成页面时，参考的是<code>public/index.html</code>，其称之为页面模板</p>\n<h1 id=\"public目录\"><a href=\"#public目录\" class=\"headerlink\" title=\"public目录\"></a>public目录</h1><p>webpack会非常暴力的将public目录中的所有文件（除页面模板外），复制到打包结果中</p>\n<h1 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h1><p>如果每次修改完代码，都要经过<code>打包-&gt;运行</code>，未免太过麻烦</p>\n<p>在开发阶段，我们可以运行<code>npm run serve</code>命令获得更好的打包体验</p>\n<p>该命令会让<code>webpack</code>启动一个<strong>开发服务器</strong>。</p>\n<p>在这个阶段，webpack并不会形成打包结果文件，而是把打包的内容放到内存中，当我们请求服务器时，服务器从内存中给予我们打包结果</p>\n<p>与此同时，当源码发生变动时，webpack会自动重新打包，同时刷新页面以访问到最新的打包结果</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210508194443.png\" alt=\"image-20210508194442940\"></p>\n<h1 id=\"文件缓存\"><a href=\"#文件缓存\" class=\"headerlink\" title=\"文件缓存\"></a>文件缓存</h1><p>可以看到，除了页面外，其他的资源在打包完成后，文件名多了一些奇奇怪怪的字符</p>\n<p>例如：<code>js/app-9ea93.js</code></p>\n<p>其中，<code>9ea93</code>这样的字符称之为<code>hash</code>，它会随着模块内容的变化而变化</p>\n<p><strong>源码内容不变，hash不变；源码内容变化，hash变化</strong></p>\n<p>之所以这样做，是因为生产环境中，浏览器会对除页面外的静态资源进行缓存</p>\n<p>如果不设置hash值，一旦代码更新，浏览器还会使用之前缓存的结果，无法使用最新的代码</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210508183135.png\" alt=\"image-20210508183135487\" style=\"zoom:50%;\" />\n\n<p>有了hash值之后，即可解决此问题</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210508183454.png\" alt=\"image-20210508183454385\"></p>\n<p>webpack会在打包时自动处理hash值，并不会对我们写代码造成任何影响，但作为一个前端开发者，有必要了解这一点</p>\n<h1 id=\"资源路径\"><a href=\"#资源路径\" class=\"headerlink\" title=\"资源路径\"></a>资源路径</h1><p><strong>除代码和样式模块外，其他模块被视为资源模块</strong></p>\n<p>值得特别注意的是，<strong>资源模块在源代码中的路径和打包后的路径是不一样的</strong>，这就导致我们在编写代码的时候，根本无法知晓最终的路径</p>\n<p>最常见的例子，就是在css中使用背景图片</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 背景图使用了源码中的路径 */</span></span><br><span class=\"line\">  backgroud: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../assets/1.png&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它能正常工作吗？</p>\n<p>它能！</p>\n<p>因为webpack非常智能的发现了这一点，对于css中的路径，webpack在打包时，会将其自动转换为打包结果的路径，比如，上面的代码在打包完成后，可能被转换为下面的格式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* css中的资源路径会被自动替换，我们无须关心 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/img/1492ea.png</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但如果我们要通过js动态的使用路径，webpack是无法识别的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打包前</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; <span class=\"comment\">// 该路径无法被转换</span></span><br><span class=\"line\">img.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包后</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; <span class=\"comment\">// ❌</span></span><br><span class=\"line\">img.src = url;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法是，通过模块化的方式导入资源，并获取资源路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打包前</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> url <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; <span class=\"comment\">// 打包后，url得到的将是真实的路径</span></span><br><span class=\"line\">img.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包后</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;/img/1492ea.png&#x27;</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">img.src = url;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"缺省的文件和后缀名\"><a href=\"#缺省的文件和后缀名\" class=\"headerlink\" title=\"缺省的文件和后缀名\"></a>缺省的文件和后缀名</h1><p>导入模块时，所有js模块均可省略<code>.js</code>，若导入的模块文件名为<code>index.js</code>，可省略文件名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./home&#x27;</span>; <span class=\"comment\">// 若存在home.js，可省略js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./movie&#x27;</span>; <span class=\"comment\">// 若movie是一个目录，此次导入的是 ./movie/index.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路径别名\"><a href=\"#路径别名\" class=\"headerlink\" title=\"路径别名\"></a>路径别名</h1><p>随着体量的增长，不可避免的，会形成层级极深的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root</span><br><span class=\"line\">\t|- src</span><br><span class=\"line\">\t\t|- a</span><br><span class=\"line\">\t\t\t\t|- a1</span><br><span class=\"line\">\t\t\t\t\t\t|- a2</span><br><span class=\"line\">\t\t\t\t\t\t\t |- index.js</span><br><span class=\"line\">\t\t|- b</span><br><span class=\"line\">\t\t\t\t|- b1</span><br><span class=\"line\">\t\t\t\t\t\t|- index.js</span><br></pre></td></tr></table></figure>\n\n<p>如果需要在<code>./src/a/a1/a2/index.js</code>中导入<code>./src/b/b1/index.js</code>，则可能产生下面特别恶心的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../../../b/b1/index.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>webpack提供了别名供我们快速定位到<code>./src</code>目录，通常，该别名为<code>@</code></p>\n<p>上面的导入代码可简化为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@/b/b1&#x27;</span>; <span class=\"comment\">// @表示src目录，同时省略了index.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"js兼容性\"><a href=\"#js兼容性\" class=\"headerlink\" title=\"js兼容性\"></a>js兼容性</h1><p>当webpack读取到js代码时，会自动对其进行兼容性处理</p>\n<p>具体的处理方案涉及到两个配置文件：</p>\n<ul>\n<li><code>babel.config.js</code>：通过配置该文件，可以设置对哪些js代码进行降级处理</li>\n<li><code>.browserslistrc</code>：通过配置该文件，可以设置在降级时，要兼容哪些浏览器，兼容的范围越光，降级产生的代码就越多，自然，打包后的体积就越大</li>\n</ul>\n<p>你无须知晓具体的配置方式</p>\n<h1 id=\"打包压缩\"><a href=\"#打包压缩\" class=\"headerlink\" title=\"打包压缩\"></a>打包压缩</h1><p>webpack在打包时，会对所有js和css代码进行压缩</p>\n<p>对于js，除了压缩之外，还会对其中的各种名称进行混淆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(self.webpackChunkmovie_list=self.webpackChunkmovie_list||[]).push([[<span class=\"number\">587</span>],&#123;<span class=\"number\">3587</span>:<span class=\"function\">(<span class=\"params\">r,t,n</span>)=&gt;</span>&#123;<span class=\"string\">&quot;use strict&quot;</span>;n.r(t),n(<span class=\"number\">5666</span>),n(<span class=\"number\">1539</span>),n(<span class=\"number\">8674</span>),n(<span class=\"number\">9600</span>),n(<span class=\"number\">1249</span>),n(<span class=\"number\">2222</span>);<span class=\"keyword\">var</span> e=n(<span class=\"number\">9755</span>),a=n.n(e);<span class=\"keyword\">var</span> o;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">r</span>)</span>&#123;o.html(r.map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">return</span><span class=\"string\">&#x27;&lt;li&gt;\\n  &lt;a href=&quot;&#x27;</span>.concat(r.url,<span class=\"string\">&#x27;&quot; target=&quot;_blank&quot;&gt;\\n    &lt;img src=&quot;&#x27;</span>).concat(r.cover,<span class=\"string\">&#x27;&quot; title=&quot;&#x27;</span>).concat(r.title,<span class=\"string\">&#x27;&quot;&gt;\\n  &lt;/a&gt;\\n  &lt;a href=&quot;&#x27;</span>).concat(r.url,<span class=\"string\">&#x27;&quot; target=&quot;_blank&quot; class=&quot;&#x27;</span>).concat(<span class=\"string\">&quot;qmUYQv1xlJhGMQKz-kfAp&quot;</span>,<span class=\"string\">&#x27;&quot;&gt;&#x27;</span>).concat(r.title,<span class=\"string\">&#x27;&lt;/a&gt;\\n  &lt;p class=&quot;&#x27;</span>).concat(<span class=\"string\">&quot;_3yV5wC-URYTUP0sPvaE0ZR&quot;</span>,<span class=\"string\">&#x27;&quot;&gt;&#x27;</span>).concat(r.rate,<span class=\"string\">&quot;&lt;/p&gt;\\n  &lt;/li&gt;&quot;</span>)&#125;)).join(<span class=\"string\">&quot;&quot;</span>))&#125;o=a()(<span class=\"string\">&quot;&lt;ul&gt;&quot;</span>).addClass(<span class=\"string\">&quot;_1fsrc5VinfYHBXCF1s58qS&quot;</span>).appendTo(<span class=\"string\">&quot;#app&quot;</span>);<span class=\"keyword\">var</span> c=n(<span class=\"number\">8138</span>);<span class=\"keyword\">const</span> u=</span><br></pre></td></tr></table></figure>\n\n<p>混淆的作用一方面是为了进一步压缩包体积，另一方面是为了让我们的代码更难被其他人理解利用</p>\n<h1 id=\"源码地图-source-map\"><a href=\"#源码地图-source-map\" class=\"headerlink\" title=\"源码地图 source map\"></a>源码地图 source map</h1><p>我们运行的是webpack打包后的结果，而打包后的结果是很难阅读的</p>\n<p>但这样一来会带来新的问题，如果代码报错，我们就难以知道到底是那一行代码写的有问题</p>\n<p>此时源码地图就发挥了作用</p>\n<p>可以发现，js代码打包后都会跟上一个同名的、后缀为<code>.map</code>的文件，该文件就保存了原始代码的内容</p>\n<p>请放心，这个内容人类是看不懂的，但浏览器可以看懂</p>\n<p>当代码报错时，浏览器会定位到源码地图中的对应代码，而不是把真实报错的代码展示给我们</p>\n<p>你无须关心这一点，但可以自然的从其中获得巨大的便利</p>\n<h1 id=\"css工程化\"><a href=\"#css工程化\" class=\"headerlink\" title=\"css工程化\"></a>css工程化</h1><p>webpack能够识别<strong>所有</strong>的样式代码，包括<code>css</code>、<code>less</code>、<code>sass</code>、<code>stylus</code></p>\n<p>在打包时，会将它们转换成纯正的<code>css</code></p>\n<p>除此之外，它还具备以下的神奇能力</p>\n<h2 id=\"自动厂商前缀\"><a href=\"#自动厂商前缀\" class=\"headerlink\" title=\"自动厂商前缀\"></a>自动厂商前缀</h2><p>css有很多兼容性问题，解决这些兼容性问题的最常见办法，就是加上厂商前缀。</p>\n<p>比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 兼容性不好的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 兼容性好的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>webpack会根据<code>.browserlistrc</code>中指定的浏览器范围，<strong>按需、自动</strong>加上厂商前缀</p>\n<p>我们开发无须关心</p>\n<h2 id=\"css-module\"><a href=\"#css-module\" class=\"headerlink\" title=\"css module\"></a>css module</h2><p>css文件多了后，你怎么保证它们里面没有冲突的类样式？</p>\n<p>靠层级选择器？就不担心效率？</p>\n<p>靠命名规范？就不担心脑袋爆炸？</p>\n<p>要靠就靠css module</p>\n<p>当样式文件以<code>xxx.mdoule.xxx</code>的方式命名时，webpack会将该文件当成一个开启了<code>css module</code>的文件</p>\n<p>比如：<code>index.module.less</code>、<code>movie.module.css</code>，都是开启了<code>css module</code>的文件</p>\n<p><strong>文件中的所有类名都会被hash化</strong></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包结果，绝无可能重名</span></span><br><span class=\"line\"><span class=\"selector-class\">._2GFVidHvoHtfgtrdifua24</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">._1fsrc5VinfYHBXCF1s58qS</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.urPUKUukdS_UTSuWRI5-5</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在就一个问题，我们在使用类名时，如何知道它打包结果的类名呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\">dom.classList.add(<span class=\"string\">&#x27;container&#x27;</span>); <span class=\"comment\">// ❌ 最终的类名可不是这个</span></span><br></pre></td></tr></table></figure>\n\n<p>正确的方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\">dom.classList.add(styles.container); <span class=\"comment\">// ✅ 属性container中记录的就是container转换后的类名</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"真正的webpack没有那么神奇\"><a href=\"#真正的webpack没有那么神奇\" class=\"headerlink\" title=\"真正的webpack没有那么神奇\"></a>真正的webpack没有那么神奇</h1><p>实际上，webpack没有做这么多事，我们不能把功劳（怨念）全归结于它</p>\n<p>它只是站在巨人（其他流氓）肩膀上而已</p>\n<p>下图可以看个热闹</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210508203658.png\" alt=\"image-20210508203658298\"></p>\n<p>webpack通过插件（plugin）和加载器（loader）将这些技术整合在一起</p>\n<p><code>上图的技术 + 乱七八糟一大堆其他技术 + 老师的配置 = 呈现给你的工程</code></p>\n<p>目前，你无须理解这一些，保持敬畏即可</p>\n<p>最后，说明一下工程中看不懂的文件：</p>\n<ul>\n<li><code>.browserslistrc</code>，表达适配的浏览器范围，会被工程化中的其他技术所使用</li>\n<li><code>babel.config.js</code>，<code>babel</code>的配置文件，做js降级处理</li>\n<li><code>postcss.config.js</code>，<code>postcss</code>的配置文件，做css代码转换</li>\n<li><code>webpack.config.js</code>，<code>webpack</code>的配置文件，整合其他工程化技术，以及配置打包细节、开发服务器、路径别名等等</li>\n</ul>\n<h1 id=\"对我们开发的影响\"><a href=\"#对我们开发的影响\" class=\"headerlink\" title=\"对我们开发的影响\"></a>对我们开发的影响</h1><ol>\n<li><p>学会访问开发服务器查看效果</p>\n</li>\n<li><p>学会动态获取资源文件路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> url <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./assets/1.png&#x27;</span>; </span><br><span class=\"line\">img.src = url;</span><br></pre></td></tr></table></figure></li>\n<li><p>学会省略文件和后缀名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./home&#x27;</span>; <span class=\"comment\">// 若存在home.js，可省略js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./movie&#x27;</span>; <span class=\"comment\">// 若movie是一个目录，此次导入的是 ./movie/index.js</span></span><br></pre></td></tr></table></figure></li>\n<li><p>学会使用别名简化导入代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@/b/b1&#x27;</span>; <span class=\"comment\">// 实际导入： src/b/b1/index.js  (若b1是目录)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>学会使用css module</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\">dom.classList.add(styles.container); </span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"代理和反射","date":"2021-12-31T08:21:22.000Z","description":"ES6中代理和反射的原理、作用；存取器的原理和使用","_content":"\n# 代理和反射\n\n## 属性描述符\n\nProperty Descriptor 属性描述符  是一个普通对象，用于描述一个属性的相关信息\n\n通过```Object.getOwnPropertyDescriptor(对象, 属性名)```可以得到一个对象的某个属性的属性描述符\n\n```javascript\nconst obj = {\n    a: 1,\n    b: 2\n}\nconsole.log(Object.getOwnPropertyDescriptor(obj, 'a'))\n\n输出结果：\n{value: 1, writable: true, enumerable: true, configurable: true}\n```\n\n- value：属性值\n- configurable：该属性的描述符是否可以修改\n- enumerable：该属性是否可以被枚举\n- writable：该属性是否可以被重新赋值\n\n ```Object.getOwnPropertyDescriptors(对象)```可以得到某个对象的所有属性描述符\n\n```javascript\nconst obj = {\n    a: 1,\n    b: 2\n}\nconsole.log(Object.getOwnPropertyDescriptors(obj))\na: {value: 1, writable: true, enumerable: true, configurable: true}\nb: {value: 2, writable: true, enumerable: true, configurable: true}\n```\n如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:\n\n```js\nObject.defineProperty(对象, 属性名, 描述符);\nObject.defineProperties(对象, 多个属性的描述符)\n```\n\n```javascript\nconst obj = {\n    a: 1,\n    b: 2\n}\nObject.defineProperty(obj, 'b', {\n    value: 7\n})\n\nObject.defineProperties(obj, {\n    a: {\n        value: 3,\n    },\n    b: {\n        value: 4\n    }\n})\n```\n\n## 存取器属性\n\n属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。\n\nget 和 set配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行get方法，将get方法得到的返回值作为属性值；如果给该属性赋值，则会运行set方法。\n```javascript\nconst obj = {\n    a: 1,\n}\n\nObject.defineProperty(obj, 'b', {\n    get() {\n        console.log(\"调用了get方法!\")\n    },\n    set(value) {\n        console.log(\"调用了set方法！\")\n    }\n})\n\nobj.b = 1;\nconsole.log(obj.b)\n输出结果：\n调用了set方法！\n调用了get方法!\nundefined\n```\n\n```javascript\n变成正常的属性（将值先存储到其他变量中）\nconst obj = {\n    a: 1,\n}\n\nObject.defineProperty(obj, 'b', {\n    get() {\n        console.log(\"调用了get方法!\")\n        return obj._a;\n    },\n    set(value) {\n        console.log(\"调用了set方法！\")\n        obj._a = value;\n    }\n})\n\nobj.b = 1;\nconsole.log(obj.b)\n\n调用了set方法！\n调用了get方法!\n1\n```\n存取器属性最大的意义，在于可以控制属性的读取和赋值。\n\n## Reflect\n\n### 1. Reflect是什么？\n\nReflect是一个内置的JS对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些JS底层功能\n\n由于它类似于其他语言的**反射**，因此取名为Reflect\n\n### 2. 它可以做什么？\n\n使用Reflect可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中  等等功能\n\n### 3. 这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\n\n有一个重要的理念，在ES5就被提出：减少魔法、让代码更加纯粹\n\n这种理念很大程度上是受到函数式编程的影响\n\nES6进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的API，并高度聚合到某个对象中，于是，就造就了Reflect对象\n\n因此，你可以看到Reflect对象中有很多的API都可以使用过去的某种语法或其他API实现。\n\n### 4. 它里面到底提供了哪些API呢？\n\n- Reflect.set(target, propertyKey, value): 设置对象target的属性propertyKey的值为value，等同于给对象的属性赋值\n- Reflect.get(target, propertyKey): 读取对象target的属性propertyKey，等同于读取对象的属性值\n- Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定this和参数列表。等同于函数调用\n- Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性\n- Reflect.defineProperty(target, propertyKey, attributes)：类似于Object.defineProperty，不同的是如果配置出现问题，返回false而不是报错\n- Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象\n- Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性\n- 其他API：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n\n## Proxy 代理\n\n代理：提供了修改底层实现的方式\n\n```js\n\n//代理一个目标对象\n//target：目标对象\n//handler：是一个普通对象，其中可以重写底层实现\n//返回一个代理对象\nnew Proxy(target, handler)\n```\n\n\n\n\n\n","source":"_posts/代理和反射.md","raw":"---\ntitle: 代理和反射\ndate: 2021-12-31 16:21:22\ndescription: ES6中代理和反射的原理、作用；存取器的原理和使用\ncategories: \n    - 前端学习笔记\n    - ES6\ntags: \n  - ES6\n  - 前端\n---\n\n# 代理和反射\n\n## 属性描述符\n\nProperty Descriptor 属性描述符  是一个普通对象，用于描述一个属性的相关信息\n\n通过```Object.getOwnPropertyDescriptor(对象, 属性名)```可以得到一个对象的某个属性的属性描述符\n\n```javascript\nconst obj = {\n    a: 1,\n    b: 2\n}\nconsole.log(Object.getOwnPropertyDescriptor(obj, 'a'))\n\n输出结果：\n{value: 1, writable: true, enumerable: true, configurable: true}\n```\n\n- value：属性值\n- configurable：该属性的描述符是否可以修改\n- enumerable：该属性是否可以被枚举\n- writable：该属性是否可以被重新赋值\n\n ```Object.getOwnPropertyDescriptors(对象)```可以得到某个对象的所有属性描述符\n\n```javascript\nconst obj = {\n    a: 1,\n    b: 2\n}\nconsole.log(Object.getOwnPropertyDescriptors(obj))\na: {value: 1, writable: true, enumerable: true, configurable: true}\nb: {value: 2, writable: true, enumerable: true, configurable: true}\n```\n如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:\n\n```js\nObject.defineProperty(对象, 属性名, 描述符);\nObject.defineProperties(对象, 多个属性的描述符)\n```\n\n```javascript\nconst obj = {\n    a: 1,\n    b: 2\n}\nObject.defineProperty(obj, 'b', {\n    value: 7\n})\n\nObject.defineProperties(obj, {\n    a: {\n        value: 3,\n    },\n    b: {\n        value: 4\n    }\n})\n```\n\n## 存取器属性\n\n属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。\n\nget 和 set配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行get方法，将get方法得到的返回值作为属性值；如果给该属性赋值，则会运行set方法。\n```javascript\nconst obj = {\n    a: 1,\n}\n\nObject.defineProperty(obj, 'b', {\n    get() {\n        console.log(\"调用了get方法!\")\n    },\n    set(value) {\n        console.log(\"调用了set方法！\")\n    }\n})\n\nobj.b = 1;\nconsole.log(obj.b)\n输出结果：\n调用了set方法！\n调用了get方法!\nundefined\n```\n\n```javascript\n变成正常的属性（将值先存储到其他变量中）\nconst obj = {\n    a: 1,\n}\n\nObject.defineProperty(obj, 'b', {\n    get() {\n        console.log(\"调用了get方法!\")\n        return obj._a;\n    },\n    set(value) {\n        console.log(\"调用了set方法！\")\n        obj._a = value;\n    }\n})\n\nobj.b = 1;\nconsole.log(obj.b)\n\n调用了set方法！\n调用了get方法!\n1\n```\n存取器属性最大的意义，在于可以控制属性的读取和赋值。\n\n## Reflect\n\n### 1. Reflect是什么？\n\nReflect是一个内置的JS对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些JS底层功能\n\n由于它类似于其他语言的**反射**，因此取名为Reflect\n\n### 2. 它可以做什么？\n\n使用Reflect可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中  等等功能\n\n### 3. 这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\n\n有一个重要的理念，在ES5就被提出：减少魔法、让代码更加纯粹\n\n这种理念很大程度上是受到函数式编程的影响\n\nES6进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的API，并高度聚合到某个对象中，于是，就造就了Reflect对象\n\n因此，你可以看到Reflect对象中有很多的API都可以使用过去的某种语法或其他API实现。\n\n### 4. 它里面到底提供了哪些API呢？\n\n- Reflect.set(target, propertyKey, value): 设置对象target的属性propertyKey的值为value，等同于给对象的属性赋值\n- Reflect.get(target, propertyKey): 读取对象target的属性propertyKey，等同于读取对象的属性值\n- Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定this和参数列表。等同于函数调用\n- Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性\n- Reflect.defineProperty(target, propertyKey, attributes)：类似于Object.defineProperty，不同的是如果配置出现问题，返回false而不是报错\n- Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象\n- Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性\n- 其他API：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n\n## Proxy 代理\n\n代理：提供了修改底层实现的方式\n\n```js\n\n//代理一个目标对象\n//target：目标对象\n//handler：是一个普通对象，其中可以重写底层实现\n//返回一个代理对象\nnew Proxy(target, handler)\n```\n\n\n\n\n\n","slug":"代理和反射","published":1,"updated":"2022-01-01T06:32:05.014Z","_id":"ckxu6dnil000v10ax920ifj1s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代理和反射\"><a href=\"#代理和反射\" class=\"headerlink\" title=\"代理和反射\"></a>代理和反射</h1><h2 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h2><p>Property Descriptor 属性描述符  是一个普通对象，用于描述一个属性的相关信息</p>\n<p>通过<code>Object.getOwnPropertyDescriptor(对象, 属性名)</code>可以得到一个对象的某个属性的属性描述符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>value：属性值</li>\n<li>configurable：该属性的描述符是否可以修改</li>\n<li>enumerable：该属性是否可以被枚举</li>\n<li>writable：该属性是否可以被重新赋值</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptors(obj))</span><br><span class=\"line\">a: &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">b: &#123;value: 2, writable: true, enumerable: true, configurable: true&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(对象, 属性名, 描述符);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(对象, 多个属性的描述符)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"number\">7</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(obj, &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存取器属性\"><a href=\"#存取器属性\" class=\"headerlink\" title=\"存取器属性\"></a>存取器属性</h2><p>属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。</p>\n<p>get 和 set配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行get方法，将get方法得到的返回值作为属性值；如果给该属性赋值，则会运行set方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了get方法!&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了set方法！&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.b)</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">调用了set方法！</span><br><span class=\"line\">调用了get方法!</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变成正常的属性（将值先存储到其他变量中）</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了get方法!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj._a;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了set方法！&quot;</span>)</span><br><span class=\"line\">        obj._a = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.b)</span><br><span class=\"line\"></span><br><span class=\"line\">调用了set方法！</span><br><span class=\"line\">调用了get方法!</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>存取器属性最大的意义，在于可以控制属性的读取和赋值。</p>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"1-Reflect是什么？\"><a href=\"#1-Reflect是什么？\" class=\"headerlink\" title=\"1. Reflect是什么？\"></a>1. Reflect是什么？</h3><p>Reflect是一个内置的JS对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些JS底层功能</p>\n<p>由于它类似于其他语言的<strong>反射</strong>，因此取名为Reflect</p>\n<h3 id=\"2-它可以做什么？\"><a href=\"#2-它可以做什么？\" class=\"headerlink\" title=\"2. 它可以做什么？\"></a>2. 它可以做什么？</h3><p>使用Reflect可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中  等等功能</p>\n<h3 id=\"3-这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\"><a href=\"#3-这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\" class=\"headerlink\" title=\"3. 这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\"></a>3. 这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？</h3><p>有一个重要的理念，在ES5就被提出：减少魔法、让代码更加纯粹</p>\n<p>这种理念很大程度上是受到函数式编程的影响</p>\n<p>ES6进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的API，并高度聚合到某个对象中，于是，就造就了Reflect对象</p>\n<p>因此，你可以看到Reflect对象中有很多的API都可以使用过去的某种语法或其他API实现。</p>\n<h3 id=\"4-它里面到底提供了哪些API呢？\"><a href=\"#4-它里面到底提供了哪些API呢？\" class=\"headerlink\" title=\"4. 它里面到底提供了哪些API呢？\"></a>4. 它里面到底提供了哪些API呢？</h3><ul>\n<li>Reflect.set(target, propertyKey, value): 设置对象target的属性propertyKey的值为value，等同于给对象的属性赋值</li>\n<li>Reflect.get(target, propertyKey): 读取对象target的属性propertyKey，等同于读取对象的属性值</li>\n<li>Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定this和参数列表。等同于函数调用</li>\n<li>Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性</li>\n<li>Reflect.defineProperty(target, propertyKey, attributes)：类似于Object.defineProperty，不同的是如果配置出现问题，返回false而不是报错</li>\n<li>Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象</li>\n<li>Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性</li>\n<li>其他API：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li>\n</ul>\n<h2 id=\"Proxy-代理\"><a href=\"#Proxy-代理\" class=\"headerlink\" title=\"Proxy 代理\"></a>Proxy 代理</h2><p>代理：提供了修改底层实现的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理一个目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//target：目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//handler：是一个普通对象，其中可以重写底层实现</span></span><br><span class=\"line\"><span class=\"comment\">//返回一个代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"length":2768,"excerpt":"","more":"<h1 id=\"代理和反射\"><a href=\"#代理和反射\" class=\"headerlink\" title=\"代理和反射\"></a>代理和反射</h1><h2 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h2><p>Property Descriptor 属性描述符  是一个普通对象，用于描述一个属性的相关信息</p>\n<p>通过<code>Object.getOwnPropertyDescriptor(对象, 属性名)</code>可以得到一个对象的某个属性的属性描述符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>value：属性值</li>\n<li>configurable：该属性的描述符是否可以修改</li>\n<li>enumerable：该属性是否可以被枚举</li>\n<li>writable：该属性是否可以被重新赋值</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptors(obj))</span><br><span class=\"line\">a: &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">b: &#123;value: 2, writable: true, enumerable: true, configurable: true&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(对象, 属性名, 描述符);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(对象, 多个属性的描述符)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"number\">7</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(obj, &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存取器属性\"><a href=\"#存取器属性\" class=\"headerlink\" title=\"存取器属性\"></a>存取器属性</h2><p>属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。</p>\n<p>get 和 set配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行get方法，将get方法得到的返回值作为属性值；如果给该属性赋值，则会运行set方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了get方法!&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了set方法！&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.b)</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">调用了set方法！</span><br><span class=\"line\">调用了get方法!</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变成正常的属性（将值先存储到其他变量中）</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了get方法!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj._a;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用了set方法！&quot;</span>)</span><br><span class=\"line\">        obj._a = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.b)</span><br><span class=\"line\"></span><br><span class=\"line\">调用了set方法！</span><br><span class=\"line\">调用了get方法!</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>存取器属性最大的意义，在于可以控制属性的读取和赋值。</p>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"1-Reflect是什么？\"><a href=\"#1-Reflect是什么？\" class=\"headerlink\" title=\"1. Reflect是什么？\"></a>1. Reflect是什么？</h3><p>Reflect是一个内置的JS对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些JS底层功能</p>\n<p>由于它类似于其他语言的<strong>反射</strong>，因此取名为Reflect</p>\n<h3 id=\"2-它可以做什么？\"><a href=\"#2-它可以做什么？\" class=\"headerlink\" title=\"2. 它可以做什么？\"></a>2. 它可以做什么？</h3><p>使用Reflect可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中  等等功能</p>\n<h3 id=\"3-这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\"><a href=\"#3-这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\" class=\"headerlink\" title=\"3. 这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？\"></a>3. 这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？</h3><p>有一个重要的理念，在ES5就被提出：减少魔法、让代码更加纯粹</p>\n<p>这种理念很大程度上是受到函数式编程的影响</p>\n<p>ES6进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的API，并高度聚合到某个对象中，于是，就造就了Reflect对象</p>\n<p>因此，你可以看到Reflect对象中有很多的API都可以使用过去的某种语法或其他API实现。</p>\n<h3 id=\"4-它里面到底提供了哪些API呢？\"><a href=\"#4-它里面到底提供了哪些API呢？\" class=\"headerlink\" title=\"4. 它里面到底提供了哪些API呢？\"></a>4. 它里面到底提供了哪些API呢？</h3><ul>\n<li>Reflect.set(target, propertyKey, value): 设置对象target的属性propertyKey的值为value，等同于给对象的属性赋值</li>\n<li>Reflect.get(target, propertyKey): 读取对象target的属性propertyKey，等同于读取对象的属性值</li>\n<li>Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定this和参数列表。等同于函数调用</li>\n<li>Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性</li>\n<li>Reflect.defineProperty(target, propertyKey, attributes)：类似于Object.defineProperty，不同的是如果配置出现问题，返回false而不是报错</li>\n<li>Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象</li>\n<li>Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性</li>\n<li>其他API：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li>\n</ul>\n<h2 id=\"Proxy-代理\"><a href=\"#Proxy-代理\" class=\"headerlink\" title=\"Proxy 代理\"></a>Proxy 代理</h2><p>代理：提供了修改底层实现的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理一个目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//target：目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//handler：是一个普通对象，其中可以重写底层实现</span></span><br><span class=\"line\"><span class=\"comment\">//返回一个代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"CSS3动画","date":"2021-12-31T08:21:22.000Z","description":"CSS3的动画包括过渡和浏览器的渲染过程","_content":"\n# [动画](http://css.doyoe.com/)\n----------\n\n## transition: 过渡\n\n（过渡对象，持续时间，变化函数（可选），延迟时间（可选））\n\n#### 变化函数：\n贝塞尔曲线cubic-bezier(<number>, <number>, <number>, <number>)：特定的贝塞尔曲线类型，1,3数值需在[0, 1]区间内\n\n![贝塞尔曲线](beisaier.png)\n输入的四个数为P1,P2的坐标点\n\n## animations：动画\n### 八个属性值：\n- <' animation-name '>：\n检索或设置对象所应用的动画名称\n- <' animation-duration '>：\n检索或设置对象动画的持续时间\n- <' animation-timing-function '>：\n检索或设置对象动画的过渡类型\n- <' animation-delay '>：\n检索或设置对象动画延迟的时间\n- <' animation-iteration-count '>：\n检索或设置对象动画的循环次数\n- <' animation-direction '>：\n检索或设置对象动画在循环中是否反向运动\n- <' animation-fill-mode '>：\n检索或设置对象动画时间之外的状态\n- <' animation-play-state '>：\n检索或设置对象动画的状态。\n\n### 关键帧定义：\n```\n@keyframes 自定义名字{\n数字%（执行时间占比其中0%可变为from ，100%可变为to){\n\n}\n```\n\n- steps（步数，start/ end）\n- start:保留下一帧状态，直到这一段动画时间结束\n- end:保留当前帧状态，直到这一段动画时间结束，最后一帧可能看不到，可加上forwords来弥补\n\n`steps(1,start) === step-start`\n`steps(1,end) === step-end `\n\n### scale:伸缩\n可3d变化\n\n伸缩的是此元素变化的坐标轴的刻度。可叠加操作  \nscale的坐标轴会随着旋转轴的旋转而旋转，但会保留影响，设置过的会保留效果。\n\n### skew:倾斜\n2d变化  \n倾斜的是此元素变化的坐标轴，还会拉伸坐标轴\n\n\n可水平居中\n```css\nleft:50%;\ntransform:translateX(-50%);\n```\n\n\nperspective：景深，我们视线距离浏览器的距离，只设置这一个并不会影响大小\n\ntransform-origin：旋转中心，可填三个值x , y, z\n\n\nmatrix:矩阵，transform的强大属性，可以完成各种变换\n\n\n\n\n浏览器渲染过程\n\n\nreflow:  \n改变窗口大小  \n改变文字大小  \n内容的改变，输入框输入文字  \n激活伪类，如:hover  \n操作class属性  \n脚本操作DOM  \n计算offsetWidth和offsetHeight  \n设置style属性  \nrepaint：  \nrepaint：如果只是改变某个元素的背景色、  \n文 字颜色、边框颜色，不影响它周围或内部布局的属性\nrepaint  \nrepaint 速度快于 reflow  \n\n\n像素里面有三个色点，三个在一个平面排列，里面每个像点代表三原色的每一个颜色，空间混色法","source":"_posts/动画.md","raw":"---\ntitle: CSS3动画\ndate: 2021-12-31 16:21:22\ndescription: CSS3的动画包括过渡和浏览器的渲染过程\ncategories: \n\t- 前端学习笔记\n\t- CSS \ntags: \n\t- CSS\n\t- 前端\n---\n\n# [动画](http://css.doyoe.com/)\n----------\n\n## transition: 过渡\n\n（过渡对象，持续时间，变化函数（可选），延迟时间（可选））\n\n#### 变化函数：\n贝塞尔曲线cubic-bezier(<number>, <number>, <number>, <number>)：特定的贝塞尔曲线类型，1,3数值需在[0, 1]区间内\n\n![贝塞尔曲线](beisaier.png)\n输入的四个数为P1,P2的坐标点\n\n## animations：动画\n### 八个属性值：\n- <' animation-name '>：\n检索或设置对象所应用的动画名称\n- <' animation-duration '>：\n检索或设置对象动画的持续时间\n- <' animation-timing-function '>：\n检索或设置对象动画的过渡类型\n- <' animation-delay '>：\n检索或设置对象动画延迟的时间\n- <' animation-iteration-count '>：\n检索或设置对象动画的循环次数\n- <' animation-direction '>：\n检索或设置对象动画在循环中是否反向运动\n- <' animation-fill-mode '>：\n检索或设置对象动画时间之外的状态\n- <' animation-play-state '>：\n检索或设置对象动画的状态。\n\n### 关键帧定义：\n```\n@keyframes 自定义名字{\n数字%（执行时间占比其中0%可变为from ，100%可变为to){\n\n}\n```\n\n- steps（步数，start/ end）\n- start:保留下一帧状态，直到这一段动画时间结束\n- end:保留当前帧状态，直到这一段动画时间结束，最后一帧可能看不到，可加上forwords来弥补\n\n`steps(1,start) === step-start`\n`steps(1,end) === step-end `\n\n### scale:伸缩\n可3d变化\n\n伸缩的是此元素变化的坐标轴的刻度。可叠加操作  \nscale的坐标轴会随着旋转轴的旋转而旋转，但会保留影响，设置过的会保留效果。\n\n### skew:倾斜\n2d变化  \n倾斜的是此元素变化的坐标轴，还会拉伸坐标轴\n\n\n可水平居中\n```css\nleft:50%;\ntransform:translateX(-50%);\n```\n\n\nperspective：景深，我们视线距离浏览器的距离，只设置这一个并不会影响大小\n\ntransform-origin：旋转中心，可填三个值x , y, z\n\n\nmatrix:矩阵，transform的强大属性，可以完成各种变换\n\n\n\n\n浏览器渲染过程\n\n\nreflow:  \n改变窗口大小  \n改变文字大小  \n内容的改变，输入框输入文字  \n激活伪类，如:hover  \n操作class属性  \n脚本操作DOM  \n计算offsetWidth和offsetHeight  \n设置style属性  \nrepaint：  \nrepaint：如果只是改变某个元素的背景色、  \n文 字颜色、边框颜色，不影响它周围或内部布局的属性\nrepaint  \nrepaint 速度快于 reflow  \n\n\n像素里面有三个色点，三个在一个平面排列，里面每个像点代表三原色的每一个颜色，空间混色法","slug":"动画","published":1,"updated":"2022-01-01T06:32:29.945Z","_id":"ckxu6dnim000z10axhykichu4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a><a href=\"http://css.doyoe.com/\">动画</a></h1><hr>\n<h2 id=\"transition-过渡\"><a href=\"#transition-过渡\" class=\"headerlink\" title=\"transition: 过渡\"></a>transition: 过渡</h2><p>（过渡对象，持续时间，变化函数（可选），延迟时间（可选））</p>\n<h4 id=\"变化函数：\"><a href=\"#变化函数：\" class=\"headerlink\" title=\"变化函数：\"></a>变化函数：</h4><p>贝塞尔曲线cubic-bezier(<number>, <number>, <number>, <number>)：特定的贝塞尔曲线类型，1,3数值需在[0, 1]区间内</p>\n<p><img src=\"beisaier.png\" alt=\"贝塞尔曲线\"><br>输入的四个数为P1,P2的坐标点</p>\n<h2 id=\"animations：动画\"><a href=\"#animations：动画\" class=\"headerlink\" title=\"animations：动画\"></a>animations：动画</h2><h3 id=\"八个属性值：\"><a href=\"#八个属性值：\" class=\"headerlink\" title=\"八个属性值：\"></a>八个属性值：</h3><ul>\n<li>&lt;’ animation-name ‘&gt;：<br>检索或设置对象所应用的动画名称</li>\n<li>&lt;’ animation-duration ‘&gt;：<br>检索或设置对象动画的持续时间</li>\n<li>&lt;’ animation-timing-function ‘&gt;：<br>检索或设置对象动画的过渡类型</li>\n<li>&lt;’ animation-delay ‘&gt;：<br>检索或设置对象动画延迟的时间</li>\n<li>&lt;’ animation-iteration-count ‘&gt;：<br>检索或设置对象动画的循环次数</li>\n<li>&lt;’ animation-direction ‘&gt;：<br>检索或设置对象动画在循环中是否反向运动</li>\n<li>&lt;’ animation-fill-mode ‘&gt;：<br>检索或设置对象动画时间之外的状态</li>\n<li>&lt;’ animation-play-state ‘&gt;：<br>检索或设置对象动画的状态。</li>\n</ul>\n<h3 id=\"关键帧定义：\"><a href=\"#关键帧定义：\" class=\"headerlink\" title=\"关键帧定义：\"></a>关键帧定义：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes 自定义名字&#123;</span><br><span class=\"line\">数字%（执行时间占比其中0%可变为from ，100%可变为to)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>steps（步数，start/ end）</li>\n<li>start:保留下一帧状态，直到这一段动画时间结束</li>\n<li>end:保留当前帧状态，直到这一段动画时间结束，最后一帧可能看不到，可加上forwords来弥补</li>\n</ul>\n<p><code>steps(1,start) === step-start</code><br><code>steps(1,end) === step-end </code></p>\n<h3 id=\"scale-伸缩\"><a href=\"#scale-伸缩\" class=\"headerlink\" title=\"scale:伸缩\"></a>scale:伸缩</h3><p>可3d变化</p>\n<p>伸缩的是此元素变化的坐标轴的刻度。可叠加操作<br>scale的坐标轴会随着旋转轴的旋转而旋转，但会保留影响，设置过的会保留效果。</p>\n<h3 id=\"skew-倾斜\"><a href=\"#skew-倾斜\" class=\"headerlink\" title=\"skew:倾斜\"></a>skew:倾斜</h3><p>2d变化<br>倾斜的是此元素变化的坐标轴，还会拉伸坐标轴</p>\n<p>可水平居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">translateX</span>(-<span class=\"number\">50%</span>);</span><br></pre></td></tr></table></figure>\n\n\n<p>perspective：景深，我们视线距离浏览器的距离，只设置这一个并不会影响大小</p>\n<p>transform-origin：旋转中心，可填三个值x , y, z</p>\n<p>matrix:矩阵，transform的强大属性，可以完成各种变换</p>\n<p>浏览器渲染过程</p>\n<p>reflow:<br>改变窗口大小<br>改变文字大小<br>内容的改变，输入框输入文字<br>激活伪类，如:hover<br>操作class属性<br>脚本操作DOM<br>计算offsetWidth和offsetHeight<br>设置style属性<br>repaint：<br>repaint：如果只是改变某个元素的背景色、<br>文 字颜色、边框颜色，不影响它周围或内部布局的属性<br>repaint<br>repaint 速度快于 reflow  </p>\n<p>像素里面有三个色点，三个在一个平面排列，里面每个像点代表三原色的每一个颜色，空间混色法</p>\n","site":{"data":{}},"length":1191,"excerpt":"","more":"<h1 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a><a href=\"http://css.doyoe.com/\">动画</a></h1><hr>\n<h2 id=\"transition-过渡\"><a href=\"#transition-过渡\" class=\"headerlink\" title=\"transition: 过渡\"></a>transition: 过渡</h2><p>（过渡对象，持续时间，变化函数（可选），延迟时间（可选））</p>\n<h4 id=\"变化函数：\"><a href=\"#变化函数：\" class=\"headerlink\" title=\"变化函数：\"></a>变化函数：</h4><p>贝塞尔曲线cubic-bezier(<number>, <number>, <number>, <number>)：特定的贝塞尔曲线类型，1,3数值需在[0, 1]区间内</p>\n<p><img src=\"beisaier.png\" alt=\"贝塞尔曲线\"><br>输入的四个数为P1,P2的坐标点</p>\n<h2 id=\"animations：动画\"><a href=\"#animations：动画\" class=\"headerlink\" title=\"animations：动画\"></a>animations：动画</h2><h3 id=\"八个属性值：\"><a href=\"#八个属性值：\" class=\"headerlink\" title=\"八个属性值：\"></a>八个属性值：</h3><ul>\n<li>&lt;’ animation-name ‘&gt;：<br>检索或设置对象所应用的动画名称</li>\n<li>&lt;’ animation-duration ‘&gt;：<br>检索或设置对象动画的持续时间</li>\n<li>&lt;’ animation-timing-function ‘&gt;：<br>检索或设置对象动画的过渡类型</li>\n<li>&lt;’ animation-delay ‘&gt;：<br>检索或设置对象动画延迟的时间</li>\n<li>&lt;’ animation-iteration-count ‘&gt;：<br>检索或设置对象动画的循环次数</li>\n<li>&lt;’ animation-direction ‘&gt;：<br>检索或设置对象动画在循环中是否反向运动</li>\n<li>&lt;’ animation-fill-mode ‘&gt;：<br>检索或设置对象动画时间之外的状态</li>\n<li>&lt;’ animation-play-state ‘&gt;：<br>检索或设置对象动画的状态。</li>\n</ul>\n<h3 id=\"关键帧定义：\"><a href=\"#关键帧定义：\" class=\"headerlink\" title=\"关键帧定义：\"></a>关键帧定义：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes 自定义名字&#123;</span><br><span class=\"line\">数字%（执行时间占比其中0%可变为from ，100%可变为to)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>steps（步数，start/ end）</li>\n<li>start:保留下一帧状态，直到这一段动画时间结束</li>\n<li>end:保留当前帧状态，直到这一段动画时间结束，最后一帧可能看不到，可加上forwords来弥补</li>\n</ul>\n<p><code>steps(1,start) === step-start</code><br><code>steps(1,end) === step-end </code></p>\n<h3 id=\"scale-伸缩\"><a href=\"#scale-伸缩\" class=\"headerlink\" title=\"scale:伸缩\"></a>scale:伸缩</h3><p>可3d变化</p>\n<p>伸缩的是此元素变化的坐标轴的刻度。可叠加操作<br>scale的坐标轴会随着旋转轴的旋转而旋转，但会保留影响，设置过的会保留效果。</p>\n<h3 id=\"skew-倾斜\"><a href=\"#skew-倾斜\" class=\"headerlink\" title=\"skew:倾斜\"></a>skew:倾斜</h3><p>2d变化<br>倾斜的是此元素变化的坐标轴，还会拉伸坐标轴</p>\n<p>可水平居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">translateX</span>(-<span class=\"number\">50%</span>);</span><br></pre></td></tr></table></figure>\n\n\n<p>perspective：景深，我们视线距离浏览器的距离，只设置这一个并不会影响大小</p>\n<p>transform-origin：旋转中心，可填三个值x , y, z</p>\n<p>matrix:矩阵，transform的强大属性，可以完成各种变换</p>\n<p>浏览器渲染过程</p>\n<p>reflow:<br>改变窗口大小<br>改变文字大小<br>内容的改变，输入框输入文字<br>激活伪类，如:hover<br>操作class属性<br>脚本操作DOM<br>计算offsetWidth和offsetHeight<br>设置style属性<br>repaint：<br>repaint：如果只是改变某个元素的背景色、<br>文 字颜色、边框颜色，不影响它周围或内部布局的属性<br>repaint<br>repaint 速度快于 reflow  </p>\n<p>像素里面有三个色点，三个在一个平面排列，里面每个像点代表三原色的每一个颜色，空间混色法</p>\n"},{"title":"ES6中的变量 字符串 函数对象","date":"2021-12-31T08:21:22.000Z","description":"对ES6中的变量、字符串、函数、对象再次进行了补充，包括const和let的使用、模板字符串的使用、箭头函数的使用、对象的简单介绍","_content":"\n# 变量 字符串 函数 对象\n----------\n\n## 变量：\n### let声明变量：\n解决全局污染问题，let声明的变量不会挂载到全局变量。\nlet声明的变量，不允许在一个作用域范围内（全局作用域，函数作用域，块级作用域）重复声明 。   \n块级作用域：{}，在块级作用域中定义的变量，在外部无法访问。  \nlet变量不会变量提升，不能在定义之前使用该变量。  \n在循环中，用let声明的变量会进行特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环使用的是一个全新的变量）。  \n用let声明的循环变量在循环结束时会自动销毁。\n\n## const声明常量：\nconst和let完全相同，仅在于const声明的变量，必须在变量声明时赋值，而且不可以重新赋值。\n多使用const避免犯错。  \nconst声明一个对象时，对象里面的属性是可以更改的，仅仅是对象的名不能重新赋值。  \n在for循环中循环变量不能使用const常量，在for in循环中可以使用。\n\n## 字符串：\n### 字符串API（以下全为实例方法）：\n* 原字符串.includes（子字符串，开始查找的索引值（可省略，默认从0开始））：判断字符串是否包含指定的子字符串。\n* startWith（子字符串，开始查找的索引值（可省略，默认从0开始））:是否以指定字符串开头。\n* endWith（子字符串，开始查找的索引值（可省略，默认从0开始））：是否以指定字符串结尾。\n* repeat（子字符串，开始查找的索引值（可省略，默认从0开始））：将字符串重复指定的次数，重新返回一个新的字符串。\n\n### 模板字符串：\n写在 `` 里面，\n要拼接字符串，将要拼接的字符串加在${}里。\n```javascript\n        var level1 = \"谢永强\";\n        var level2 = \"帅\";\n        var txt = `我感觉${level1}很${level2}`;\n        console.log(txt);\n```\n在模板字符串前面加上标记 ： String.raw ,可以将模板字符串里面的特殊字符直接输出。\n```javascript\n        var text1 = String.raw `谢永强\\t真帅！`\n        console.log(text1)\n```\n#### 在模板字符串书写之前可以之前可以加上一个标记：\n&emsp;标记名``（模板字符串）：得到是标记函数的返回值  \n&emsp;标记是一个函数： \n&emsp;该函数的第一个参数是被要插入内容（\\${}里面的值）分割的字符串数组  \n&emsp;后续的参数是要插入内容（\\${}里面的值） \n\n## 函数：\n### 参数默认值：\n参数默认值，在定义函数时直接给形参赋值，如果调用函数时不传递参数，则使用默认值。  \n在严格模式下（“use strict”）下形参和arguments是脱离的（不在满足一一映射关系），只要给函数加上了参数默认值，该函数会自动变成严格模式下的规则（形参和arguments是脱离的）\n```javascript\n        function test(a, b = 4) {\n            console.log(a + b);\n        }\n```\n### 剩余参数：\n函数名.length :可得到函数形参的个数  \n解决参数数量不确定情况下的问题。  \n实现方法：在函数是形参中加上 （...数组名）就可以了，用一个数组收集剩下的所有参数。  \n一个函数只能有一个剩余参数。  \n一个函数如果有剩余参数，剩余参数必须是最后一个参数。  \n```javascript\n        function sum(a, b, ...args) {\n            let sum = 0;\n            sum = sum + a + b;\n            for (let i = 0; i < args.length; i++) {\n                sum += args[i];\n            }\n            return sum;\n        }\n```\n### 展开运算符：\n作用：将数组的每一项分别提取出来。  \n语法：在要展开的数组和对象前面加上(...数组名 /  ...对象名)。\n```javascript\n        let arr = [1, 2, 3, 4, 5, 6, 7, 8];\n        console.log(...arr)\n        输出结果：1 2 3 4 5 6 7 8\n        \n        const obj = {\n            name: 'xyq',\n            age: 20,\n            sex: 'male'\n        }\n        const obj1 = {\n        \t...obj\n        };\n        console.log(obj1)\n```\n\nnew.target :可用来判断函数是否用new来调用函数。  \n### 箭头函数：\n#### this指向：\n1. 通过对象调用函数，this指向对象\n2. 直接调用函数，this指向全局对象\n3. 如果通过new调用函数，this指向新创建的对象\n4. 如果通过apply、call、bind等调用函数，this指向指定的数据\n5. 如果是dom对象，this指向事件源\n#### 使用语法\n箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数 \n```javascript\n完整语法：\n (参数1, 参数2, ...)=>{\n    //函数体\n}\n如果参数只有一个，可以省略小括号\n参数 => {\n\n}\n如果箭头函数只有一条返回语句，可以省略大括号，和return关键字\n参数 => 返回值\n```\n#### 注意细节\n* 箭头函数中，不存在this、arguments、new.target，如果使用了，则使用的是函数外层的对应的this、arguments、new.target\n* 箭头函数没有原型\n* 箭头函数不能作用构造函数使用\n#### 应用场景\n##### 临时性使用的函数，并不会可以调用它，比如：\n* 事件处理函数\n* 异步处理函数\n* 其他临时性的函数\n* 为了绑定外层this的函数\n* 在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数\n\n## 对象：\n### 变量字面量语法：\n#### 成员速写：\n如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写，可将 变量名：变量名  简写成 变量名\n\n#### 方法速写：\n可以将：function省略。\n```javascript\n        function test(name, age, sex) {\n            return {\n                name,\n                age,\n                sex,\n                fuc() {\n                    console.log(123)\n                }\n            }\n        }\n```\n#### 计算属性名：\n有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来表示该属性名是通过计算得到的。\n```javascript\n        const prop1 = 'name';\n        const prop2 = 'age';\n        const prop3 = 'sex';\n        const obj1 = {\n            [prop1]: 'xyq',\n            [prop2]: 20,\n             [prop3]: '男'\n        }\n        console.log(obj1)\n```\n### Object的新增API：\n* Object.is:\n判断两个对象是否相等，基本和 === 是一致的，除了 NaN和NaN相等 、 +0 和-0不相等\n* Object.assign：\n用于混合对象（可以用展开运算符实现）；\n缺陷：会更改原来的第一个对象，解决方案：第一个参数传递一个空对象\n* Object.getOwnPropertyNames:\nObject.getOwnPropertyNames方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。\nES6规定了该方法返回的数组的排序方式如下：\n先排数字，并按照升序排序\n再排其他，按照书写顺序排序\n* Object.setPrototypeOf\n该函数用于设置某个对象的隐式原型\n比如： Object.setPrototypeOf(obj1, obj2)， 相当于： obj1.__proto__ = obj2\n## 类：\n### 传统的构造函数的问题\n* 属性和原型方法定义分离，降低了可读性\n* 原型成员可以被枚举\n* 默认情况下，构造函数仍然可以被当作普通函数使用\n### 类的特点\n* 类声明不会被提升，与 let 和 const 一样，存在暂时性死区\n* 类中的所有代码均在严格模式下执行\n* 类的所有方法都是不可枚举的\n* 类的所有方法都无法被当作构造函数使用\n* 类的构造器必须使用 new 来调用\n### 类的语法：\n```javascript\nclass 类名{\nconstructor（参数）{\n属性值\n}\n方法名（）{\n方法体\n}\n}\n```\n\n```javascript\n        class Animal {\n            // 构造函数，写属性\n            constructor(type, name, age, sex) {\n                this.type = type;\n                this.name = name;\n                this.age = age;\n                this.sex = sex;\n            }\n            // 方法\n            print() {\n                console.log(`【种类】：${this.type}`);\n                console.log(`【名字】：${this.name}`);\n                console.log(`【年龄】：${this.age}`);\n                console.log(`【性别】：${this.sex}`);\n            }\n        }\n```\n### 类里面属性的获取和更改：\n可达到像普通对象一样直接获取，设置属性又不保证安全。 \n#### 获取：\n可定义一个方法  get 属性名（）{\n}\n\n#### 更改：\n定义一个方法  set 属性名（参数）{\n}\n\n```javascript\n        class Test {\n            constructor(name, age) {\n                this.name = name;\n                this.age = age;\n            }\n            set age(val) {\n                if (val < 0) {\n                    val = 0;\n                }\n                this._age = val;\n            }\n            get age() {\n                return this._age;\n            }\n            print() {\n                console.log(this._age)\n            }\n        }\n```\n### 静态成员：\n直接定义在类上的属性或方法，在类中用关键字static定义，不用创建实例对象就可以访问的属性，创建的实例对象不可以访问这个属性。\n```javascript\n        class Test {\n            static a = '123';\n            static b() {\n                console.log(this.a)\n            }\n            constructor(name, age) {\n                this.name = name;\n                this.age = age;\n            }\n            set age(val) {\n                if (val < 0) {\n                    val = 0;\n                }\n                this._age = val;\n            }\n            get age() {\n                return this._age;\n            }\n            print() {\n                console.log(this.age)\n            }\n        }\n字段初始化器：\n可以将一些有固定值的属性直接写在构造函数外面。\n   class Test {\n            sex = \"男\";\n            static a = '123';\n            static b() {\n                console.log(this.a)\n            }\n            constructor(name, age) {\n                this.name = name;\n                this.age = age;\n            }\n            set age(val) {\n                if (val < 0) {\n                    val = 0;\n                }\n                this._age = val;\n            }\n            get age() {\n                return this._age;\n            }\n            print() {\n                console.log(this.age)\n            }\n        }\n```\n### 类的继承\n###### 如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系则：\n* B继承自A\n* A派生B\n* B是A的子类\n* A是B的父类  \n如果A是B的父类，则B会自动拥有A中的所有实例成员。\n#### 继承的关键字：\nextends：继承，用于类的定义  \nsuper\n- 直接当作函数调用，表示父类构造函数\n- 如果当作对象使用，则表示父类的原型\n#### 注意：\n- ES6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数\n- 如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器\n#### 【冷知识】\n##### 用JS制作抽象类\n抽象类：一般是父类，不能通过该类创建对象\n正常情况下，this的指向，this始终指向具体的类的对象\n\ngetComputerStyle ： 可以获取dom元素的所有css样式\t\nwindow.location.reload();可刷新页面\n\n\n","source":"_posts/变量_字符串 _函数 _对象.md","raw":"---\ntitle: ES6中的变量 字符串 函数对象\ndate: 2021-12-31 16:21:22\ndescription: 对ES6中的变量、字符串、函数、对象再次进行了补充，包括const和let的使用、模板字符串的使用、箭头函数的使用、对象的简单介绍\ncategories:  \n\t- 前端学习笔记\n\t- ES6\ntags: \n  - ES6\n  - 前端\n---\n\n# 变量 字符串 函数 对象\n----------\n\n## 变量：\n### let声明变量：\n解决全局污染问题，let声明的变量不会挂载到全局变量。\nlet声明的变量，不允许在一个作用域范围内（全局作用域，函数作用域，块级作用域）重复声明 。   \n块级作用域：{}，在块级作用域中定义的变量，在外部无法访问。  \nlet变量不会变量提升，不能在定义之前使用该变量。  \n在循环中，用let声明的变量会进行特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环使用的是一个全新的变量）。  \n用let声明的循环变量在循环结束时会自动销毁。\n\n## const声明常量：\nconst和let完全相同，仅在于const声明的变量，必须在变量声明时赋值，而且不可以重新赋值。\n多使用const避免犯错。  \nconst声明一个对象时，对象里面的属性是可以更改的，仅仅是对象的名不能重新赋值。  \n在for循环中循环变量不能使用const常量，在for in循环中可以使用。\n\n## 字符串：\n### 字符串API（以下全为实例方法）：\n* 原字符串.includes（子字符串，开始查找的索引值（可省略，默认从0开始））：判断字符串是否包含指定的子字符串。\n* startWith（子字符串，开始查找的索引值（可省略，默认从0开始））:是否以指定字符串开头。\n* endWith（子字符串，开始查找的索引值（可省略，默认从0开始））：是否以指定字符串结尾。\n* repeat（子字符串，开始查找的索引值（可省略，默认从0开始））：将字符串重复指定的次数，重新返回一个新的字符串。\n\n### 模板字符串：\n写在 `` 里面，\n要拼接字符串，将要拼接的字符串加在${}里。\n```javascript\n        var level1 = \"谢永强\";\n        var level2 = \"帅\";\n        var txt = `我感觉${level1}很${level2}`;\n        console.log(txt);\n```\n在模板字符串前面加上标记 ： String.raw ,可以将模板字符串里面的特殊字符直接输出。\n```javascript\n        var text1 = String.raw `谢永强\\t真帅！`\n        console.log(text1)\n```\n#### 在模板字符串书写之前可以之前可以加上一个标记：\n&emsp;标记名``（模板字符串）：得到是标记函数的返回值  \n&emsp;标记是一个函数： \n&emsp;该函数的第一个参数是被要插入内容（\\${}里面的值）分割的字符串数组  \n&emsp;后续的参数是要插入内容（\\${}里面的值） \n\n## 函数：\n### 参数默认值：\n参数默认值，在定义函数时直接给形参赋值，如果调用函数时不传递参数，则使用默认值。  \n在严格模式下（“use strict”）下形参和arguments是脱离的（不在满足一一映射关系），只要给函数加上了参数默认值，该函数会自动变成严格模式下的规则（形参和arguments是脱离的）\n```javascript\n        function test(a, b = 4) {\n            console.log(a + b);\n        }\n```\n### 剩余参数：\n函数名.length :可得到函数形参的个数  \n解决参数数量不确定情况下的问题。  \n实现方法：在函数是形参中加上 （...数组名）就可以了，用一个数组收集剩下的所有参数。  \n一个函数只能有一个剩余参数。  \n一个函数如果有剩余参数，剩余参数必须是最后一个参数。  \n```javascript\n        function sum(a, b, ...args) {\n            let sum = 0;\n            sum = sum + a + b;\n            for (let i = 0; i < args.length; i++) {\n                sum += args[i];\n            }\n            return sum;\n        }\n```\n### 展开运算符：\n作用：将数组的每一项分别提取出来。  \n语法：在要展开的数组和对象前面加上(...数组名 /  ...对象名)。\n```javascript\n        let arr = [1, 2, 3, 4, 5, 6, 7, 8];\n        console.log(...arr)\n        输出结果：1 2 3 4 5 6 7 8\n        \n        const obj = {\n            name: 'xyq',\n            age: 20,\n            sex: 'male'\n        }\n        const obj1 = {\n        \t...obj\n        };\n        console.log(obj1)\n```\n\nnew.target :可用来判断函数是否用new来调用函数。  \n### 箭头函数：\n#### this指向：\n1. 通过对象调用函数，this指向对象\n2. 直接调用函数，this指向全局对象\n3. 如果通过new调用函数，this指向新创建的对象\n4. 如果通过apply、call、bind等调用函数，this指向指定的数据\n5. 如果是dom对象，this指向事件源\n#### 使用语法\n箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数 \n```javascript\n完整语法：\n (参数1, 参数2, ...)=>{\n    //函数体\n}\n如果参数只有一个，可以省略小括号\n参数 => {\n\n}\n如果箭头函数只有一条返回语句，可以省略大括号，和return关键字\n参数 => 返回值\n```\n#### 注意细节\n* 箭头函数中，不存在this、arguments、new.target，如果使用了，则使用的是函数外层的对应的this、arguments、new.target\n* 箭头函数没有原型\n* 箭头函数不能作用构造函数使用\n#### 应用场景\n##### 临时性使用的函数，并不会可以调用它，比如：\n* 事件处理函数\n* 异步处理函数\n* 其他临时性的函数\n* 为了绑定外层this的函数\n* 在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数\n\n## 对象：\n### 变量字面量语法：\n#### 成员速写：\n如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写，可将 变量名：变量名  简写成 变量名\n\n#### 方法速写：\n可以将：function省略。\n```javascript\n        function test(name, age, sex) {\n            return {\n                name,\n                age,\n                sex,\n                fuc() {\n                    console.log(123)\n                }\n            }\n        }\n```\n#### 计算属性名：\n有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来表示该属性名是通过计算得到的。\n```javascript\n        const prop1 = 'name';\n        const prop2 = 'age';\n        const prop3 = 'sex';\n        const obj1 = {\n            [prop1]: 'xyq',\n            [prop2]: 20,\n             [prop3]: '男'\n        }\n        console.log(obj1)\n```\n### Object的新增API：\n* Object.is:\n判断两个对象是否相等，基本和 === 是一致的，除了 NaN和NaN相等 、 +0 和-0不相等\n* Object.assign：\n用于混合对象（可以用展开运算符实现）；\n缺陷：会更改原来的第一个对象，解决方案：第一个参数传递一个空对象\n* Object.getOwnPropertyNames:\nObject.getOwnPropertyNames方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。\nES6规定了该方法返回的数组的排序方式如下：\n先排数字，并按照升序排序\n再排其他，按照书写顺序排序\n* Object.setPrototypeOf\n该函数用于设置某个对象的隐式原型\n比如： Object.setPrototypeOf(obj1, obj2)， 相当于： obj1.__proto__ = obj2\n## 类：\n### 传统的构造函数的问题\n* 属性和原型方法定义分离，降低了可读性\n* 原型成员可以被枚举\n* 默认情况下，构造函数仍然可以被当作普通函数使用\n### 类的特点\n* 类声明不会被提升，与 let 和 const 一样，存在暂时性死区\n* 类中的所有代码均在严格模式下执行\n* 类的所有方法都是不可枚举的\n* 类的所有方法都无法被当作构造函数使用\n* 类的构造器必须使用 new 来调用\n### 类的语法：\n```javascript\nclass 类名{\nconstructor（参数）{\n属性值\n}\n方法名（）{\n方法体\n}\n}\n```\n\n```javascript\n        class Animal {\n            // 构造函数，写属性\n            constructor(type, name, age, sex) {\n                this.type = type;\n                this.name = name;\n                this.age = age;\n                this.sex = sex;\n            }\n            // 方法\n            print() {\n                console.log(`【种类】：${this.type}`);\n                console.log(`【名字】：${this.name}`);\n                console.log(`【年龄】：${this.age}`);\n                console.log(`【性别】：${this.sex}`);\n            }\n        }\n```\n### 类里面属性的获取和更改：\n可达到像普通对象一样直接获取，设置属性又不保证安全。 \n#### 获取：\n可定义一个方法  get 属性名（）{\n}\n\n#### 更改：\n定义一个方法  set 属性名（参数）{\n}\n\n```javascript\n        class Test {\n            constructor(name, age) {\n                this.name = name;\n                this.age = age;\n            }\n            set age(val) {\n                if (val < 0) {\n                    val = 0;\n                }\n                this._age = val;\n            }\n            get age() {\n                return this._age;\n            }\n            print() {\n                console.log(this._age)\n            }\n        }\n```\n### 静态成员：\n直接定义在类上的属性或方法，在类中用关键字static定义，不用创建实例对象就可以访问的属性，创建的实例对象不可以访问这个属性。\n```javascript\n        class Test {\n            static a = '123';\n            static b() {\n                console.log(this.a)\n            }\n            constructor(name, age) {\n                this.name = name;\n                this.age = age;\n            }\n            set age(val) {\n                if (val < 0) {\n                    val = 0;\n                }\n                this._age = val;\n            }\n            get age() {\n                return this._age;\n            }\n            print() {\n                console.log(this.age)\n            }\n        }\n字段初始化器：\n可以将一些有固定值的属性直接写在构造函数外面。\n   class Test {\n            sex = \"男\";\n            static a = '123';\n            static b() {\n                console.log(this.a)\n            }\n            constructor(name, age) {\n                this.name = name;\n                this.age = age;\n            }\n            set age(val) {\n                if (val < 0) {\n                    val = 0;\n                }\n                this._age = val;\n            }\n            get age() {\n                return this._age;\n            }\n            print() {\n                console.log(this.age)\n            }\n        }\n```\n### 类的继承\n###### 如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系则：\n* B继承自A\n* A派生B\n* B是A的子类\n* A是B的父类  \n如果A是B的父类，则B会自动拥有A中的所有实例成员。\n#### 继承的关键字：\nextends：继承，用于类的定义  \nsuper\n- 直接当作函数调用，表示父类构造函数\n- 如果当作对象使用，则表示父类的原型\n#### 注意：\n- ES6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数\n- 如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器\n#### 【冷知识】\n##### 用JS制作抽象类\n抽象类：一般是父类，不能通过该类创建对象\n正常情况下，this的指向，this始终指向具体的类的对象\n\ngetComputerStyle ： 可以获取dom元素的所有css样式\t\nwindow.location.reload();可刷新页面\n\n\n","slug":"变量_字符串 _函数 _对象","published":1,"updated":"2022-01-01T06:32:43.405Z","_id":"ckxu6dnip001210ax04en63oh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"变量-字符串-函数-对象\"><a href=\"#变量-字符串-函数-对象\" class=\"headerlink\" title=\"变量 字符串 函数 对象\"></a>变量 字符串 函数 对象</h1><hr>\n<h2 id=\"变量：\"><a href=\"#变量：\" class=\"headerlink\" title=\"变量：\"></a>变量：</h2><h3 id=\"let声明变量：\"><a href=\"#let声明变量：\" class=\"headerlink\" title=\"let声明变量：\"></a>let声明变量：</h3><p>解决全局污染问题，let声明的变量不会挂载到全局变量。<br>let声明的变量，不允许在一个作用域范围内（全局作用域，函数作用域，块级作用域）重复声明 。<br>块级作用域：{}，在块级作用域中定义的变量，在外部无法访问。<br>let变量不会变量提升，不能在定义之前使用该变量。<br>在循环中，用let声明的变量会进行特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环使用的是一个全新的变量）。<br>用let声明的循环变量在循环结束时会自动销毁。</p>\n<h2 id=\"const声明常量：\"><a href=\"#const声明常量：\" class=\"headerlink\" title=\"const声明常量：\"></a>const声明常量：</h2><p>const和let完全相同，仅在于const声明的变量，必须在变量声明时赋值，而且不可以重新赋值。<br>多使用const避免犯错。<br>const声明一个对象时，对象里面的属性是可以更改的，仅仅是对象的名不能重新赋值。<br>在for循环中循环变量不能使用const常量，在for in循环中可以使用。</p>\n<h2 id=\"字符串：\"><a href=\"#字符串：\" class=\"headerlink\" title=\"字符串：\"></a>字符串：</h2><h3 id=\"字符串API（以下全为实例方法）：\"><a href=\"#字符串API（以下全为实例方法）：\" class=\"headerlink\" title=\"字符串API（以下全为实例方法）：\"></a>字符串API（以下全为实例方法）：</h3><ul>\n<li>原字符串.includes（子字符串，开始查找的索引值（可省略，默认从0开始））：判断字符串是否包含指定的子字符串。</li>\n<li>startWith（子字符串，开始查找的索引值（可省略，默认从0开始））:是否以指定字符串开头。</li>\n<li>endWith（子字符串，开始查找的索引值（可省略，默认从0开始））：是否以指定字符串结尾。</li>\n<li>repeat（子字符串，开始查找的索引值（可省略，默认从0开始））：将字符串重复指定的次数，重新返回一个新的字符串。</li>\n</ul>\n<h3 id=\"模板字符串：\"><a href=\"#模板字符串：\" class=\"headerlink\" title=\"模板字符串：\"></a>模板字符串：</h3><p>写在 `` 里面，<br>要拼接字符串，将要拼接的字符串加在${}里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> level1 = <span class=\"string\">&quot;谢永强&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> level2 = <span class=\"string\">&quot;帅&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> txt = <span class=\"string\">`我感觉<span class=\"subst\">$&#123;level1&#125;</span>很<span class=\"subst\">$&#123;level2&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(txt);</span><br></pre></td></tr></table></figure>\n<p>在模板字符串前面加上标记 ： String.raw ,可以将模板字符串里面的特殊字符直接输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> text1 = <span class=\"built_in\">String</span>.raw <span class=\"string\">`谢永强\\t真帅！`</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text1)</span><br></pre></td></tr></table></figure>\n<h4 id=\"在模板字符串书写之前可以之前可以加上一个标记：\"><a href=\"#在模板字符串书写之前可以之前可以加上一个标记：\" class=\"headerlink\" title=\"在模板字符串书写之前可以之前可以加上一个标记：\"></a>在模板字符串书写之前可以之前可以加上一个标记：</h4><p>&emsp;标记名``（模板字符串）：得到是标记函数的返回值<br>&emsp;标记是一个函数：<br>&emsp;该函数的第一个参数是被要插入内容（${}里面的值）分割的字符串数组<br>&emsp;后续的参数是要插入内容（${}里面的值） </p>\n<h2 id=\"函数：\"><a href=\"#函数：\" class=\"headerlink\" title=\"函数：\"></a>函数：</h2><h3 id=\"参数默认值：\"><a href=\"#参数默认值：\" class=\"headerlink\" title=\"参数默认值：\"></a>参数默认值：</h3><p>参数默认值，在定义函数时直接给形参赋值，如果调用函数时不传递参数，则使用默认值。<br>在严格模式下（“use strict”）下形参和arguments是脱离的（不在满足一一映射关系），只要给函数加上了参数默认值，该函数会自动变成严格模式下的规则（形参和arguments是脱离的）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b = <span class=\"number\">4</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"剩余参数：\"><a href=\"#剩余参数：\" class=\"headerlink\" title=\"剩余参数：\"></a>剩余参数：</h3><p>函数名.length :可得到函数形参的个数<br>解决参数数量不确定情况下的问题。<br>实现方法：在函数是形参中加上 （…数组名）就可以了，用一个数组收集剩下的所有参数。<br>一个函数只能有一个剩余参数。<br>一个函数如果有剩余参数，剩余参数必须是最后一个参数。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, ...args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sum = sum + a + b;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">                sum += args[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"展开运算符：\"><a href=\"#展开运算符：\" class=\"headerlink\" title=\"展开运算符：\"></a>展开运算符：</h3><p>作用：将数组的每一项分别提取出来。<br>语法：在要展开的数组和对象前面加上(…数组名 /  …对象名)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(...arr)</span><br><span class=\"line\">输出结果：<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">            <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">\t...obj</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj1)</span><br></pre></td></tr></table></figure>\n\n<p>new.target :可用来判断函数是否用new来调用函数。  </p>\n<h3 id=\"箭头函数：\"><a href=\"#箭头函数：\" class=\"headerlink\" title=\"箭头函数：\"></a>箭头函数：</h3><h4 id=\"this指向：\"><a href=\"#this指向：\" class=\"headerlink\" title=\"this指向：\"></a>this指向：</h4><ol>\n<li>通过对象调用函数，this指向对象</li>\n<li>直接调用函数，this指向全局对象</li>\n<li>如果通过new调用函数，this指向新创建的对象</li>\n<li>如果通过apply、call、bind等调用函数，this指向指定的数据</li>\n<li>如果是dom对象，this指向事件源<h4 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h4>箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整语法：</span><br><span class=\"line\"> (参数<span class=\"number\">1</span>, 参数<span class=\"number\">2</span>, ...)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如果参数只有一个，可以省略小括号</span><br><span class=\"line\">参数 =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如果箭头函数只有一条返回语句，可以省略大括号，和<span class=\"keyword\">return</span>关键字</span><br><span class=\"line\">参数 =&gt; 返回值</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意细节\"><a href=\"#注意细节\" class=\"headerlink\" title=\"注意细节\"></a>注意细节</h4></li>\n</ol>\n<ul>\n<li>箭头函数中，不存在this、arguments、new.target，如果使用了，则使用的是函数外层的对应的this、arguments、new.target</li>\n<li>箭头函数没有原型</li>\n<li>箭头函数不能作用构造函数使用<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><h5 id=\"临时性使用的函数，并不会可以调用它，比如：\"><a href=\"#临时性使用的函数，并不会可以调用它，比如：\" class=\"headerlink\" title=\"临时性使用的函数，并不会可以调用它，比如：\"></a>临时性使用的函数，并不会可以调用它，比如：</h5></li>\n<li>事件处理函数</li>\n<li>异步处理函数</li>\n<li>其他临时性的函数</li>\n<li>为了绑定外层this的函数</li>\n<li>在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数</li>\n</ul>\n<h2 id=\"对象：\"><a href=\"#对象：\" class=\"headerlink\" title=\"对象：\"></a>对象：</h2><h3 id=\"变量字面量语法：\"><a href=\"#变量字面量语法：\" class=\"headerlink\" title=\"变量字面量语法：\"></a>变量字面量语法：</h3><h4 id=\"成员速写：\"><a href=\"#成员速写：\" class=\"headerlink\" title=\"成员速写：\"></a>成员速写：</h4><p>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写，可将 变量名：变量名  简写成 变量名</p>\n<h4 id=\"方法速写：\"><a href=\"#方法速写：\" class=\"headerlink\" title=\"方法速写：\"></a>方法速写：</h4><p>可以将：function省略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                age,</span><br><span class=\"line\">                sex,</span><br><span class=\"line\">                <span class=\"function\"><span class=\"title\">fuc</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"计算属性名：\"><a href=\"#计算属性名：\" class=\"headerlink\" title=\"计算属性名：\"></a>计算属性名：</h4><p>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来表示该属性名是通过计算得到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">const</span> prop1 = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop2 = <span class=\"string\">&#x27;age&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop3 = <span class=\"string\">&#x27;sex&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">            [prop1]: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">            [prop2]: <span class=\"number\">20</span>,</span><br><span class=\"line\">             [prop3]: <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Object的新增API：\"><a href=\"#Object的新增API：\" class=\"headerlink\" title=\"Object的新增API：\"></a>Object的新增API：</h3><ul>\n<li>Object.is:<br>判断两个对象是否相等，基本和 === 是一致的，除了 NaN和NaN相等 、 +0 和-0不相等</li>\n<li>Object.assign：<br>用于混合对象（可以用展开运算符实现）；<br>缺陷：会更改原来的第一个对象，解决方案：第一个参数传递一个空对象</li>\n<li>Object.getOwnPropertyNames:<br>Object.getOwnPropertyNames方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。<br>ES6规定了该方法返回的数组的排序方式如下：<br>先排数字，并按照升序排序<br>再排其他，按照书写顺序排序</li>\n<li>Object.setPrototypeOf<br>该函数用于设置某个对象的隐式原型<br>比如： Object.setPrototypeOf(obj1, obj2)， 相当于： obj1.<strong>proto</strong> = obj2<h2 id=\"类：\"><a href=\"#类：\" class=\"headerlink\" title=\"类：\"></a>类：</h2><h3 id=\"传统的构造函数的问题\"><a href=\"#传统的构造函数的问题\" class=\"headerlink\" title=\"传统的构造函数的问题\"></a>传统的构造函数的问题</h3></li>\n<li>属性和原型方法定义分离，降低了可读性</li>\n<li>原型成员可以被枚举</li>\n<li>默认情况下，构造函数仍然可以被当作普通函数使用<h3 id=\"类的特点\"><a href=\"#类的特点\" class=\"headerlink\" title=\"类的特点\"></a>类的特点</h3></li>\n<li>类声明不会被提升，与 let 和 const 一样，存在暂时性死区</li>\n<li>类中的所有代码均在严格模式下执行</li>\n<li>类的所有方法都是不可枚举的</li>\n<li>类的所有方法都无法被当作构造函数使用</li>\n<li>类的构造器必须使用 new 来调用<h3 id=\"类的语法：\"><a href=\"#类的语法：\" class=\"headerlink\" title=\"类的语法：\"></a>类的语法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;</span><br><span class=\"line\"><span class=\"title\">constructor</span>（参数）&#123;</span><br><span class=\"line\">属性值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方法名（）&#123;</span><br><span class=\"line\">方法体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 构造函数，写属性</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">type, name, age, sex</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 方法</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【种类】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.type&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【名字】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【年龄】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【性别】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.sex&#125;</span>`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类里面属性的获取和更改：\"><a href=\"#类里面属性的获取和更改：\" class=\"headerlink\" title=\"类里面属性的获取和更改：\"></a>类里面属性的获取和更改：</h3><p>可达到像普通对象一样直接获取，设置属性又不保证安全。 </p>\n<h4 id=\"获取：\"><a href=\"#获取：\" class=\"headerlink\" title=\"获取：\"></a>获取：</h4><p>可定义一个方法  get 属性名（）{<br>}</p>\n<h4 id=\"更改：\"><a href=\"#更改：\" class=\"headerlink\" title=\"更改：\"></a>更改：</h4><p>定义一个方法  set 属性名（参数）{<br>}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"title\">age</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    val = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>._age = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>._age)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员：\"><a href=\"#静态成员：\" class=\"headerlink\" title=\"静态成员：\"></a>静态成员：</h3><p>直接定义在类上的属性或方法，在类中用关键字static定义，不用创建实例对象就可以访问的属性，创建的实例对象不可以访问这个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> a = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">b</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"title\">age</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    val = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>._age = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">字段初始化器：</span><br><span class=\"line\">可以将一些有固定值的属性直接写在构造函数外面。</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">            sex = <span class=\"string\">&quot;男&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> a = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">b</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"title\">age</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    val = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>._age = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h3><h6 id=\"如果两个类A和B，如果可以描述为：B-是-A，则，A和B形成继承关系则：\"><a href=\"#如果两个类A和B，如果可以描述为：B-是-A，则，A和B形成继承关系则：\" class=\"headerlink\" title=\"如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系则：\"></a>如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系则：</h6><ul>\n<li>B继承自A</li>\n<li>A派生B</li>\n<li>B是A的子类</li>\n<li>A是B的父类<br>如果A是B的父类，则B会自动拥有A中的所有实例成员。<h4 id=\"继承的关键字：\"><a href=\"#继承的关键字：\" class=\"headerlink\" title=\"继承的关键字：\"></a>继承的关键字：</h4>extends：继承，用于类的定义<br>super</li>\n</ul>\n<ul>\n<li>直接当作函数调用，表示父类构造函数</li>\n<li>如果当作对象使用，则表示父类的原型<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4></li>\n<li>ES6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数</li>\n<li>如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器<h4 id=\"【冷知识】\"><a href=\"#【冷知识】\" class=\"headerlink\" title=\"【冷知识】\"></a>【冷知识】</h4><h5 id=\"用JS制作抽象类\"><a href=\"#用JS制作抽象类\" class=\"headerlink\" title=\"用JS制作抽象类\"></a>用JS制作抽象类</h5>抽象类：一般是父类，不能通过该类创建对象<br>正常情况下，this的指向，this始终指向具体的类的对象</li>\n</ul>\n<p>getComputerStyle ： 可以获取dom元素的所有css样式<br>window.location.reload();可刷新页面</p>\n","site":{"data":{}},"length":5142,"excerpt":"","more":"<h1 id=\"变量-字符串-函数-对象\"><a href=\"#变量-字符串-函数-对象\" class=\"headerlink\" title=\"变量 字符串 函数 对象\"></a>变量 字符串 函数 对象</h1><hr>\n<h2 id=\"变量：\"><a href=\"#变量：\" class=\"headerlink\" title=\"变量：\"></a>变量：</h2><h3 id=\"let声明变量：\"><a href=\"#let声明变量：\" class=\"headerlink\" title=\"let声明变量：\"></a>let声明变量：</h3><p>解决全局污染问题，let声明的变量不会挂载到全局变量。<br>let声明的变量，不允许在一个作用域范围内（全局作用域，函数作用域，块级作用域）重复声明 。<br>块级作用域：{}，在块级作用域中定义的变量，在外部无法访问。<br>let变量不会变量提升，不能在定义之前使用该变量。<br>在循环中，用let声明的变量会进行特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环使用的是一个全新的变量）。<br>用let声明的循环变量在循环结束时会自动销毁。</p>\n<h2 id=\"const声明常量：\"><a href=\"#const声明常量：\" class=\"headerlink\" title=\"const声明常量：\"></a>const声明常量：</h2><p>const和let完全相同，仅在于const声明的变量，必须在变量声明时赋值，而且不可以重新赋值。<br>多使用const避免犯错。<br>const声明一个对象时，对象里面的属性是可以更改的，仅仅是对象的名不能重新赋值。<br>在for循环中循环变量不能使用const常量，在for in循环中可以使用。</p>\n<h2 id=\"字符串：\"><a href=\"#字符串：\" class=\"headerlink\" title=\"字符串：\"></a>字符串：</h2><h3 id=\"字符串API（以下全为实例方法）：\"><a href=\"#字符串API（以下全为实例方法）：\" class=\"headerlink\" title=\"字符串API（以下全为实例方法）：\"></a>字符串API（以下全为实例方法）：</h3><ul>\n<li>原字符串.includes（子字符串，开始查找的索引值（可省略，默认从0开始））：判断字符串是否包含指定的子字符串。</li>\n<li>startWith（子字符串，开始查找的索引值（可省略，默认从0开始））:是否以指定字符串开头。</li>\n<li>endWith（子字符串，开始查找的索引值（可省略，默认从0开始））：是否以指定字符串结尾。</li>\n<li>repeat（子字符串，开始查找的索引值（可省略，默认从0开始））：将字符串重复指定的次数，重新返回一个新的字符串。</li>\n</ul>\n<h3 id=\"模板字符串：\"><a href=\"#模板字符串：\" class=\"headerlink\" title=\"模板字符串：\"></a>模板字符串：</h3><p>写在 `` 里面，<br>要拼接字符串，将要拼接的字符串加在${}里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> level1 = <span class=\"string\">&quot;谢永强&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> level2 = <span class=\"string\">&quot;帅&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> txt = <span class=\"string\">`我感觉<span class=\"subst\">$&#123;level1&#125;</span>很<span class=\"subst\">$&#123;level2&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(txt);</span><br></pre></td></tr></table></figure>\n<p>在模板字符串前面加上标记 ： String.raw ,可以将模板字符串里面的特殊字符直接输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> text1 = <span class=\"built_in\">String</span>.raw <span class=\"string\">`谢永强\\t真帅！`</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text1)</span><br></pre></td></tr></table></figure>\n<h4 id=\"在模板字符串书写之前可以之前可以加上一个标记：\"><a href=\"#在模板字符串书写之前可以之前可以加上一个标记：\" class=\"headerlink\" title=\"在模板字符串书写之前可以之前可以加上一个标记：\"></a>在模板字符串书写之前可以之前可以加上一个标记：</h4><p>&emsp;标记名``（模板字符串）：得到是标记函数的返回值<br>&emsp;标记是一个函数：<br>&emsp;该函数的第一个参数是被要插入内容（${}里面的值）分割的字符串数组<br>&emsp;后续的参数是要插入内容（${}里面的值） </p>\n<h2 id=\"函数：\"><a href=\"#函数：\" class=\"headerlink\" title=\"函数：\"></a>函数：</h2><h3 id=\"参数默认值：\"><a href=\"#参数默认值：\" class=\"headerlink\" title=\"参数默认值：\"></a>参数默认值：</h3><p>参数默认值，在定义函数时直接给形参赋值，如果调用函数时不传递参数，则使用默认值。<br>在严格模式下（“use strict”）下形参和arguments是脱离的（不在满足一一映射关系），只要给函数加上了参数默认值，该函数会自动变成严格模式下的规则（形参和arguments是脱离的）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b = <span class=\"number\">4</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"剩余参数：\"><a href=\"#剩余参数：\" class=\"headerlink\" title=\"剩余参数：\"></a>剩余参数：</h3><p>函数名.length :可得到函数形参的个数<br>解决参数数量不确定情况下的问题。<br>实现方法：在函数是形参中加上 （…数组名）就可以了，用一个数组收集剩下的所有参数。<br>一个函数只能有一个剩余参数。<br>一个函数如果有剩余参数，剩余参数必须是最后一个参数。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, ...args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sum = sum + a + b;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">                sum += args[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"展开运算符：\"><a href=\"#展开运算符：\" class=\"headerlink\" title=\"展开运算符：\"></a>展开运算符：</h3><p>作用：将数组的每一项分别提取出来。<br>语法：在要展开的数组和对象前面加上(…数组名 /  …对象名)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(...arr)</span><br><span class=\"line\">输出结果：<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">            <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">\t...obj</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj1)</span><br></pre></td></tr></table></figure>\n\n<p>new.target :可用来判断函数是否用new来调用函数。  </p>\n<h3 id=\"箭头函数：\"><a href=\"#箭头函数：\" class=\"headerlink\" title=\"箭头函数：\"></a>箭头函数：</h3><h4 id=\"this指向：\"><a href=\"#this指向：\" class=\"headerlink\" title=\"this指向：\"></a>this指向：</h4><ol>\n<li>通过对象调用函数，this指向对象</li>\n<li>直接调用函数，this指向全局对象</li>\n<li>如果通过new调用函数，this指向新创建的对象</li>\n<li>如果通过apply、call、bind等调用函数，this指向指定的数据</li>\n<li>如果是dom对象，this指向事件源<h4 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h4>箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整语法：</span><br><span class=\"line\"> (参数<span class=\"number\">1</span>, 参数<span class=\"number\">2</span>, ...)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如果参数只有一个，可以省略小括号</span><br><span class=\"line\">参数 =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如果箭头函数只有一条返回语句，可以省略大括号，和<span class=\"keyword\">return</span>关键字</span><br><span class=\"line\">参数 =&gt; 返回值</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意细节\"><a href=\"#注意细节\" class=\"headerlink\" title=\"注意细节\"></a>注意细节</h4></li>\n</ol>\n<ul>\n<li>箭头函数中，不存在this、arguments、new.target，如果使用了，则使用的是函数外层的对应的this、arguments、new.target</li>\n<li>箭头函数没有原型</li>\n<li>箭头函数不能作用构造函数使用<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><h5 id=\"临时性使用的函数，并不会可以调用它，比如：\"><a href=\"#临时性使用的函数，并不会可以调用它，比如：\" class=\"headerlink\" title=\"临时性使用的函数，并不会可以调用它，比如：\"></a>临时性使用的函数，并不会可以调用它，比如：</h5></li>\n<li>事件处理函数</li>\n<li>异步处理函数</li>\n<li>其他临时性的函数</li>\n<li>为了绑定外层this的函数</li>\n<li>在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数</li>\n</ul>\n<h2 id=\"对象：\"><a href=\"#对象：\" class=\"headerlink\" title=\"对象：\"></a>对象：</h2><h3 id=\"变量字面量语法：\"><a href=\"#变量字面量语法：\" class=\"headerlink\" title=\"变量字面量语法：\"></a>变量字面量语法：</h3><h4 id=\"成员速写：\"><a href=\"#成员速写：\" class=\"headerlink\" title=\"成员速写：\"></a>成员速写：</h4><p>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写，可将 变量名：变量名  简写成 变量名</p>\n<h4 id=\"方法速写：\"><a href=\"#方法速写：\" class=\"headerlink\" title=\"方法速写：\"></a>方法速写：</h4><p>可以将：function省略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                age,</span><br><span class=\"line\">                sex,</span><br><span class=\"line\">                <span class=\"function\"><span class=\"title\">fuc</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"计算属性名：\"><a href=\"#计算属性名：\" class=\"headerlink\" title=\"计算属性名：\"></a>计算属性名：</h4><p>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来表示该属性名是通过计算得到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">const</span> prop1 = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop2 = <span class=\"string\">&#x27;age&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop3 = <span class=\"string\">&#x27;sex&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">            [prop1]: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">            [prop2]: <span class=\"number\">20</span>,</span><br><span class=\"line\">             [prop3]: <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Object的新增API：\"><a href=\"#Object的新增API：\" class=\"headerlink\" title=\"Object的新增API：\"></a>Object的新增API：</h3><ul>\n<li>Object.is:<br>判断两个对象是否相等，基本和 === 是一致的，除了 NaN和NaN相等 、 +0 和-0不相等</li>\n<li>Object.assign：<br>用于混合对象（可以用展开运算符实现）；<br>缺陷：会更改原来的第一个对象，解决方案：第一个参数传递一个空对象</li>\n<li>Object.getOwnPropertyNames:<br>Object.getOwnPropertyNames方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。<br>ES6规定了该方法返回的数组的排序方式如下：<br>先排数字，并按照升序排序<br>再排其他，按照书写顺序排序</li>\n<li>Object.setPrototypeOf<br>该函数用于设置某个对象的隐式原型<br>比如： Object.setPrototypeOf(obj1, obj2)， 相当于： obj1.<strong>proto</strong> = obj2<h2 id=\"类：\"><a href=\"#类：\" class=\"headerlink\" title=\"类：\"></a>类：</h2><h3 id=\"传统的构造函数的问题\"><a href=\"#传统的构造函数的问题\" class=\"headerlink\" title=\"传统的构造函数的问题\"></a>传统的构造函数的问题</h3></li>\n<li>属性和原型方法定义分离，降低了可读性</li>\n<li>原型成员可以被枚举</li>\n<li>默认情况下，构造函数仍然可以被当作普通函数使用<h3 id=\"类的特点\"><a href=\"#类的特点\" class=\"headerlink\" title=\"类的特点\"></a>类的特点</h3></li>\n<li>类声明不会被提升，与 let 和 const 一样，存在暂时性死区</li>\n<li>类中的所有代码均在严格模式下执行</li>\n<li>类的所有方法都是不可枚举的</li>\n<li>类的所有方法都无法被当作构造函数使用</li>\n<li>类的构造器必须使用 new 来调用<h3 id=\"类的语法：\"><a href=\"#类的语法：\" class=\"headerlink\" title=\"类的语法：\"></a>类的语法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;</span><br><span class=\"line\"><span class=\"title\">constructor</span>（参数）&#123;</span><br><span class=\"line\">属性值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方法名（）&#123;</span><br><span class=\"line\">方法体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 构造函数，写属性</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">type, name, age, sex</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 方法</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【种类】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.type&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【名字】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【年龄】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`【性别】：<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.sex&#125;</span>`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类里面属性的获取和更改：\"><a href=\"#类里面属性的获取和更改：\" class=\"headerlink\" title=\"类里面属性的获取和更改：\"></a>类里面属性的获取和更改：</h3><p>可达到像普通对象一样直接获取，设置属性又不保证安全。 </p>\n<h4 id=\"获取：\"><a href=\"#获取：\" class=\"headerlink\" title=\"获取：\"></a>获取：</h4><p>可定义一个方法  get 属性名（）{<br>}</p>\n<h4 id=\"更改：\"><a href=\"#更改：\" class=\"headerlink\" title=\"更改：\"></a>更改：</h4><p>定义一个方法  set 属性名（参数）{<br>}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"title\">age</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    val = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>._age = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>._age)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员：\"><a href=\"#静态成员：\" class=\"headerlink\" title=\"静态成员：\"></a>静态成员：</h3><p>直接定义在类上的属性或方法，在类中用关键字static定义，不用创建实例对象就可以访问的属性，创建的实例对象不可以访问这个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> a = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">b</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"title\">age</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    val = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>._age = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">字段初始化器：</span><br><span class=\"line\">可以将一些有固定值的属性直接写在构造函数外面。</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">            sex = <span class=\"string\">&quot;男&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> a = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">b</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"title\">age</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    val = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>._age = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">print</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h3><h6 id=\"如果两个类A和B，如果可以描述为：B-是-A，则，A和B形成继承关系则：\"><a href=\"#如果两个类A和B，如果可以描述为：B-是-A，则，A和B形成继承关系则：\" class=\"headerlink\" title=\"如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系则：\"></a>如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系则：</h6><ul>\n<li>B继承自A</li>\n<li>A派生B</li>\n<li>B是A的子类</li>\n<li>A是B的父类<br>如果A是B的父类，则B会自动拥有A中的所有实例成员。<h4 id=\"继承的关键字：\"><a href=\"#继承的关键字：\" class=\"headerlink\" title=\"继承的关键字：\"></a>继承的关键字：</h4>extends：继承，用于类的定义<br>super</li>\n</ul>\n<ul>\n<li>直接当作函数调用，表示父类构造函数</li>\n<li>如果当作对象使用，则表示父类的原型<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4></li>\n<li>ES6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数</li>\n<li>如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器<h4 id=\"【冷知识】\"><a href=\"#【冷知识】\" class=\"headerlink\" title=\"【冷知识】\"></a>【冷知识】</h4><h5 id=\"用JS制作抽象类\"><a href=\"#用JS制作抽象类\" class=\"headerlink\" title=\"用JS制作抽象类\"></a>用JS制作抽象类</h5>抽象类：一般是父类，不能通过该类创建对象<br>正常情况下，this的指向，this始终指向具体的类的对象</li>\n</ul>\n<p>getComputerStyle ： 可以获取dom元素的所有css样式<br>window.location.reload();可刷新页面</p>\n"},{"title":"bootstrap响应网页和栅格系统","date":"2021-12-31T08:21:22.000Z","description":"bootstrap响应网页和栅格系统","_content":"# bootstrap响应网页和栅格系统\n\n## 响应式网页具有的特点：\n1. 网页宽度自动调整\n2. 少用绝对宽度\n3. 字体要使用rem（根节点的相对大小）、em作为单位\n4. 布局要使用浮动或弹性\n\n## 媒体查询：\n@media 媒体类型 逻辑运算符（媒体特性）{\n正常的CSS样式\n}\n\n## 媒体类型：\n* all:所有设备\n* print：打印机设备\n* screen：彩色的电脑屏幕\n* speech：听觉设备\n\n## 媒体特性：\n* min-width 最小宽度\n* width 宽度\n* max-width  最大宽度\n* height 高度\n* min-width 最小高度\n* max-width  最大高度\n* orientation  方向\n* landscape 横屏（宽度大于高度）\n* portrait  竖屏（高度大于宽度）\n* aspect-ratio  宽度比\n* -webkit-device-pixel-ratio 像素比（webkit内核专属）\n\n## 逻辑运算符：\n* and  合并多个媒体查询（并且）\n* ，   匹配某个媒体查询（或者）\n* not  对媒体查询结构取反\n* only  仅在媒体查询匹配成功后应用样式（防范老旧浏览器）\n\n\nCSS @规则：\n@chartest  定义编码\n@import   引入css文件\n@font-face  自定义字体\n@keyframes  animation里面的关键帧\n@media    媒体查询\n\n## 栅格系统：\nX3.0使用的是浮动原理，X4.0使用的是弹性盒。\n\n结构：\n```html \n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col- \"></div>\n        </div>\n    </div>\n```\n### 设置最外层容器为container时（表示宽度会有所限制）：\n* xl为超大屏。屏幕宽度>=1200，容器的宽度固定为1140px，一行可以设置12个列。屏幕尺寸<1200的时候，一行只能设置1列\n* lg为大屏。屏幕宽度>=992px，容器的宽度固定为960px，一行可以设置12个列。屏幕尺寸<992的时候，一行只能设置1列\nmd为中等屏。屏幕宽度>=768px，容器的宽度固定为720px，一行可以设置12个列。屏幕尺寸<768的时候，一行只能设置1列\n* sm为小屏。屏幕宽度>=576px，容器的宽度固定为540px，一行可以设置12个列。屏幕尺寸<576的时候，一行只能设置1列\n* col为超小屏。屏幕宽度<576px，容器的宽度为auto，一行永远可以设置12列\n\n设置最外层容器为container-fluid时（表示宽度为100%）\n\n等宽列：\n设置col类\n\n```HTML\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col\"></div>\n        </div>\n    </div>\n```\n想换行，在从何处换行的元素后面加上一个元素设置class为w-100\n```HTML\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col\"></div>\n            <div class=\"w-100\"></div>\n            <div class=\"col\"></div>\n        </div>\n    </div>\n```\n\n","source":"_posts/响应式网页和栅格系统.md","raw":"---\ntitle: bootstrap响应网页和栅格系统\ndate: 2021-12-31 16:21:22\ndescription: bootstrap响应网页和栅格系统\ncategories: \n\t- 前端学习笔记\n\t- bootstrap\ntags: \n\t- 前端\n\t- bootstrap\n\t- \n---\n# bootstrap响应网页和栅格系统\n\n## 响应式网页具有的特点：\n1. 网页宽度自动调整\n2. 少用绝对宽度\n3. 字体要使用rem（根节点的相对大小）、em作为单位\n4. 布局要使用浮动或弹性\n\n## 媒体查询：\n@media 媒体类型 逻辑运算符（媒体特性）{\n正常的CSS样式\n}\n\n## 媒体类型：\n* all:所有设备\n* print：打印机设备\n* screen：彩色的电脑屏幕\n* speech：听觉设备\n\n## 媒体特性：\n* min-width 最小宽度\n* width 宽度\n* max-width  最大宽度\n* height 高度\n* min-width 最小高度\n* max-width  最大高度\n* orientation  方向\n* landscape 横屏（宽度大于高度）\n* portrait  竖屏（高度大于宽度）\n* aspect-ratio  宽度比\n* -webkit-device-pixel-ratio 像素比（webkit内核专属）\n\n## 逻辑运算符：\n* and  合并多个媒体查询（并且）\n* ，   匹配某个媒体查询（或者）\n* not  对媒体查询结构取反\n* only  仅在媒体查询匹配成功后应用样式（防范老旧浏览器）\n\n\nCSS @规则：\n@chartest  定义编码\n@import   引入css文件\n@font-face  自定义字体\n@keyframes  animation里面的关键帧\n@media    媒体查询\n\n## 栅格系统：\nX3.0使用的是浮动原理，X4.0使用的是弹性盒。\n\n结构：\n```html \n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col- \"></div>\n        </div>\n    </div>\n```\n### 设置最外层容器为container时（表示宽度会有所限制）：\n* xl为超大屏。屏幕宽度>=1200，容器的宽度固定为1140px，一行可以设置12个列。屏幕尺寸<1200的时候，一行只能设置1列\n* lg为大屏。屏幕宽度>=992px，容器的宽度固定为960px，一行可以设置12个列。屏幕尺寸<992的时候，一行只能设置1列\nmd为中等屏。屏幕宽度>=768px，容器的宽度固定为720px，一行可以设置12个列。屏幕尺寸<768的时候，一行只能设置1列\n* sm为小屏。屏幕宽度>=576px，容器的宽度固定为540px，一行可以设置12个列。屏幕尺寸<576的时候，一行只能设置1列\n* col为超小屏。屏幕宽度<576px，容器的宽度为auto，一行永远可以设置12列\n\n设置最外层容器为container-fluid时（表示宽度为100%）\n\n等宽列：\n设置col类\n\n```HTML\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col\"></div>\n        </div>\n    </div>\n```\n想换行，在从何处换行的元素后面加上一个元素设置class为w-100\n```HTML\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col\"></div>\n            <div class=\"w-100\"></div>\n            <div class=\"col\"></div>\n        </div>\n    </div>\n```\n\n","slug":"响应式网页和栅格系统","published":1,"updated":"2022-01-01T06:33:00.876Z","_id":"ckxu6dnir001610axg1gu8lw3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"bootstrap响应网页和栅格系统\"><a href=\"#bootstrap响应网页和栅格系统\" class=\"headerlink\" title=\"bootstrap响应网页和栅格系统\"></a>bootstrap响应网页和栅格系统</h1><h2 id=\"响应式网页具有的特点：\"><a href=\"#响应式网页具有的特点：\" class=\"headerlink\" title=\"响应式网页具有的特点：\"></a>响应式网页具有的特点：</h2><ol>\n<li>网页宽度自动调整</li>\n<li>少用绝对宽度</li>\n<li>字体要使用rem（根节点的相对大小）、em作为单位</li>\n<li>布局要使用浮动或弹性</li>\n</ol>\n<h2 id=\"媒体查询：\"><a href=\"#媒体查询：\" class=\"headerlink\" title=\"媒体查询：\"></a>媒体查询：</h2><p>@media 媒体类型 逻辑运算符（媒体特性）{<br>正常的CSS样式<br>}</p>\n<h2 id=\"媒体类型：\"><a href=\"#媒体类型：\" class=\"headerlink\" title=\"媒体类型：\"></a>媒体类型：</h2><ul>\n<li>all:所有设备</li>\n<li>print：打印机设备</li>\n<li>screen：彩色的电脑屏幕</li>\n<li>speech：听觉设备</li>\n</ul>\n<h2 id=\"媒体特性：\"><a href=\"#媒体特性：\" class=\"headerlink\" title=\"媒体特性：\"></a>媒体特性：</h2><ul>\n<li>min-width 最小宽度</li>\n<li>width 宽度</li>\n<li>max-width  最大宽度</li>\n<li>height 高度</li>\n<li>min-width 最小高度</li>\n<li>max-width  最大高度</li>\n<li>orientation  方向</li>\n<li>landscape 横屏（宽度大于高度）</li>\n<li>portrait  竖屏（高度大于宽度）</li>\n<li>aspect-ratio  宽度比</li>\n<li>-webkit-device-pixel-ratio 像素比（webkit内核专属）</li>\n</ul>\n<h2 id=\"逻辑运算符：\"><a href=\"#逻辑运算符：\" class=\"headerlink\" title=\"逻辑运算符：\"></a>逻辑运算符：</h2><ul>\n<li>and  合并多个媒体查询（并且）</li>\n<li>，   匹配某个媒体查询（或者）</li>\n<li>not  对媒体查询结构取反</li>\n<li>only  仅在媒体查询匹配成功后应用样式（防范老旧浏览器）</li>\n</ul>\n<p>CSS @规则：<br>@chartest  定义编码<br>@import   引入css文件<br>@font-face  自定义字体<br>@keyframes  animation里面的关键帧<br>@media    媒体查询</p>\n<h2 id=\"栅格系统：\"><a href=\"#栅格系统：\" class=\"headerlink\" title=\"栅格系统：\"></a>栅格系统：</h2><p>X3.0使用的是浮动原理，X4.0使用的是弹性盒。</p>\n<p>结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col- &quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置最外层容器为container时（表示宽度会有所限制）：\"><a href=\"#设置最外层容器为container时（表示宽度会有所限制）：\" class=\"headerlink\" title=\"设置最外层容器为container时（表示宽度会有所限制）：\"></a>设置最外层容器为container时（表示宽度会有所限制）：</h3><ul>\n<li>xl为超大屏。屏幕宽度&gt;=1200，容器的宽度固定为1140px，一行可以设置12个列。屏幕尺寸&lt;1200的时候，一行只能设置1列</li>\n<li>lg为大屏。屏幕宽度&gt;=992px，容器的宽度固定为960px，一行可以设置12个列。屏幕尺寸&lt;992的时候，一行只能设置1列<br>md为中等屏。屏幕宽度&gt;=768px，容器的宽度固定为720px，一行可以设置12个列。屏幕尺寸&lt;768的时候，一行只能设置1列</li>\n<li>sm为小屏。屏幕宽度&gt;=576px，容器的宽度固定为540px，一行可以设置12个列。屏幕尺寸&lt;576的时候，一行只能设置1列</li>\n<li>col为超小屏。屏幕宽度&lt;576px，容器的宽度为auto，一行永远可以设置12列</li>\n</ul>\n<p>设置最外层容器为container-fluid时（表示宽度为100%）</p>\n<p>等宽列：<br>设置col类</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>想换行，在从何处换行的元素后面加上一个元素设置class为w-100</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;w-100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1486,"excerpt":"","more":"<h1 id=\"bootstrap响应网页和栅格系统\"><a href=\"#bootstrap响应网页和栅格系统\" class=\"headerlink\" title=\"bootstrap响应网页和栅格系统\"></a>bootstrap响应网页和栅格系统</h1><h2 id=\"响应式网页具有的特点：\"><a href=\"#响应式网页具有的特点：\" class=\"headerlink\" title=\"响应式网页具有的特点：\"></a>响应式网页具有的特点：</h2><ol>\n<li>网页宽度自动调整</li>\n<li>少用绝对宽度</li>\n<li>字体要使用rem（根节点的相对大小）、em作为单位</li>\n<li>布局要使用浮动或弹性</li>\n</ol>\n<h2 id=\"媒体查询：\"><a href=\"#媒体查询：\" class=\"headerlink\" title=\"媒体查询：\"></a>媒体查询：</h2><p>@media 媒体类型 逻辑运算符（媒体特性）{<br>正常的CSS样式<br>}</p>\n<h2 id=\"媒体类型：\"><a href=\"#媒体类型：\" class=\"headerlink\" title=\"媒体类型：\"></a>媒体类型：</h2><ul>\n<li>all:所有设备</li>\n<li>print：打印机设备</li>\n<li>screen：彩色的电脑屏幕</li>\n<li>speech：听觉设备</li>\n</ul>\n<h2 id=\"媒体特性：\"><a href=\"#媒体特性：\" class=\"headerlink\" title=\"媒体特性：\"></a>媒体特性：</h2><ul>\n<li>min-width 最小宽度</li>\n<li>width 宽度</li>\n<li>max-width  最大宽度</li>\n<li>height 高度</li>\n<li>min-width 最小高度</li>\n<li>max-width  最大高度</li>\n<li>orientation  方向</li>\n<li>landscape 横屏（宽度大于高度）</li>\n<li>portrait  竖屏（高度大于宽度）</li>\n<li>aspect-ratio  宽度比</li>\n<li>-webkit-device-pixel-ratio 像素比（webkit内核专属）</li>\n</ul>\n<h2 id=\"逻辑运算符：\"><a href=\"#逻辑运算符：\" class=\"headerlink\" title=\"逻辑运算符：\"></a>逻辑运算符：</h2><ul>\n<li>and  合并多个媒体查询（并且）</li>\n<li>，   匹配某个媒体查询（或者）</li>\n<li>not  对媒体查询结构取反</li>\n<li>only  仅在媒体查询匹配成功后应用样式（防范老旧浏览器）</li>\n</ul>\n<p>CSS @规则：<br>@chartest  定义编码<br>@import   引入css文件<br>@font-face  自定义字体<br>@keyframes  animation里面的关键帧<br>@media    媒体查询</p>\n<h2 id=\"栅格系统：\"><a href=\"#栅格系统：\" class=\"headerlink\" title=\"栅格系统：\"></a>栅格系统：</h2><p>X3.0使用的是浮动原理，X4.0使用的是弹性盒。</p>\n<p>结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col- &quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置最外层容器为container时（表示宽度会有所限制）：\"><a href=\"#设置最外层容器为container时（表示宽度会有所限制）：\" class=\"headerlink\" title=\"设置最外层容器为container时（表示宽度会有所限制）：\"></a>设置最外层容器为container时（表示宽度会有所限制）：</h3><ul>\n<li>xl为超大屏。屏幕宽度&gt;=1200，容器的宽度固定为1140px，一行可以设置12个列。屏幕尺寸&lt;1200的时候，一行只能设置1列</li>\n<li>lg为大屏。屏幕宽度&gt;=992px，容器的宽度固定为960px，一行可以设置12个列。屏幕尺寸&lt;992的时候，一行只能设置1列<br>md为中等屏。屏幕宽度&gt;=768px，容器的宽度固定为720px，一行可以设置12个列。屏幕尺寸&lt;768的时候，一行只能设置1列</li>\n<li>sm为小屏。屏幕宽度&gt;=576px，容器的宽度固定为540px，一行可以设置12个列。屏幕尺寸&lt;576的时候，一行只能设置1列</li>\n<li>col为超小屏。屏幕宽度&lt;576px，容器的宽度为auto，一行永远可以设置12列</li>\n</ul>\n<p>设置最外层容器为container-fluid时（表示宽度为100%）</p>\n<p>等宽列：<br>设置col类</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>想换行，在从何处换行的元素后面加上一个元素设置class为w-100</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;w-100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"ES6新增的集合","date":"2021-12-31T08:21:22.000Z","description":"set和map的使用以及遍历的方法，for-of的使用","_content":"\n# 其他集合\n----------\n\n## set 集合\n\n\n**set用于存放不重复的数据**\n\n### 1. 如何创建set集合\n\n```js\nnew Set(); //创建一个没有任何内容的set集合\n\nnew Set(iterable); //创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果\n\nconst s = new Set([1, 2, 3, 4, 5]);\nconsole.log(s)\n运行结果：\nSet(5) {1, 2, 3, 4, 5}\n\n```\n\n### 2. 如何对set集合进行后续操作\n\n- add(数据): 添加一个数据到set集合末尾，如果数据已存在，则不进行任何操作\n  - set使用Object.is的方式判断两个数据是否相同，但是，针对+0和-0，set认为是相等\n```javascript\nconst s = new Set();\ns.add(1);\ns.add(2);\ns.add(3);\nconsole.log(s)\n```\n- has(数据): 判断set中是否存在对应的数据\n- delete(数据)：删除匹配的数据，返回是否删除成功\n- clear()：清空整个set集合\n- size: 获取set集合中的元素数量，只读属性，无法重新赋值\n\n### 3. 如何与数组进行相互转换\n\n```js\nconst s = new Set([x,x,x,x,x]);\n// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值\nconst arr = [...s];\n```\n\n```javascript\n// 将集合变为数组\nconst s = new Set([1, 2, 3, 4, 5, 6, 7]);\nconst result = [...s]\nconsole.log(result)\n```\n\n### 4. 如何遍历\n\n1). 使用for-of循环\n```javascript\nconst s = new Set([1, 2, 3, 4, 5, 6, 7]);\nfor (const item of s) {\n    console.log(item)\n}\n\n输出：1 2 3 4 5 6 7\n```\n2). 使用set中的实例方法forEach\n\n**注意：set集合中不存在下标，因此forEach中的回调的第二个参数和第一个参数是一致的，均表示set中的每一项**\n\n### set的应用\n```javascript\nconst arr1 = [24, 42, 32, 34, 42, 31, 32, 90, 86, 32];\nconst arr2 = [24, 47, 32, 38, 49, 11, 32, 90, 47];\n// 求两个数组的并集\nconst arr3 = [...new Set([...arr1, ...arr2])];\nconsole.log(arr3);\n\n// 求两个数组的交集\nconst arr4 = new Set(arr1);\nconst arr5 = [...new Set(arr2)];\nconst result = arr5.filter(item => {\n    return arr4.has(item);\n})\nconsole.log(result);\n\n// 求两个数组的差集\nconst result1 = arr3.filter(item => {\n    return !(arr4.has(item))\n})\nconsole.log(result1)\n```\n\n\n## map集合\n\n键值对（key value pair）数据集合的特点：键不可重复\n\nmap集合专门用于存储多个键值对数据。\n\n在map出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。\n\n### 使用对象存储有以下问题：\n\n1. 键名只能是字符串\n2. 获取数据的数量不方便\n3. 键名容易跟原型上的名称冲突\n\n\n### 1. 如何创建map\n\n```js\nnew Map(); //创建一个空的map\nnew Map(iterable); //创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值\n```\n```javascript\nconst mp = new Map([\n   [1, 2],\n   [3, 4],\n   [5, 6],\n   [1, 2]\n]);\nconsole.log(mp)\n\n输出：\nMap(3) {1 => 2, 3 => 4, 5 => 6}\n```\n### 2. 属性和方法\n\n- size：只读属性，获取当前map中键的数量\n- set(键, 值)：设置一个键值对，键和值可以是任何类型\n  - 如果键不存在，则添加一项\n  - 如果键已存在，则修改它的值\n  - 比较键的方式和set相同\n- get(键): 根据一个键得到对应的值\n- has(键)：判断某个键是否存在\n- delete(键)：删除指定的键\n- clear(): 清空map\n\n\n### 3. 和数组互相转换\n\n```javascript\nconst mp = new Map([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [1, 2]\n]);\nconst arr = [...mp];\nconsole.log(arr)\n\n输出：\n(3) [Array(2), Array(2), Array(2)]\n0: (2) [1, 2]\n1: (2) [3, 4]\n2: (2) [5, 6]\n```\n\n### 4. 遍历\n\n- for-of，每次迭代得到的是一个长度为2的数组\n- forEach，通过回调函数遍历\n  - 参数1：每一项的值\n  - 参数2：每一项的键\n  - 参数3：map本身\n```javascript\nconst mp = new Map([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [1, 2]\n]);\nmp.forEach((value, index, array) => {\n    console.log(value, index, array)\n})\n\n输出：\n2 1 Map(3) {1 => 2, 3 => 4, 5 => 6}\n4 3 Map(3) {1 => 2, 3 => 4, 5 => 6}\n6 5 Map(3) {1 => 2, 3 => 4, 5 => 6}\n```","source":"_posts/其他集合.md","raw":"---\ntitle: ES6新增的集合\ndate: 2021-12-31 16:21:22\ndescription: set和map的使用以及遍历的方法，for-of的使用\ncategories: \n  - 前端学习笔记\n  - ES6\ntags: \n  - ES6\n  - 前端\n---\n\n# 其他集合\n----------\n\n## set 集合\n\n\n**set用于存放不重复的数据**\n\n### 1. 如何创建set集合\n\n```js\nnew Set(); //创建一个没有任何内容的set集合\n\nnew Set(iterable); //创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果\n\nconst s = new Set([1, 2, 3, 4, 5]);\nconsole.log(s)\n运行结果：\nSet(5) {1, 2, 3, 4, 5}\n\n```\n\n### 2. 如何对set集合进行后续操作\n\n- add(数据): 添加一个数据到set集合末尾，如果数据已存在，则不进行任何操作\n  - set使用Object.is的方式判断两个数据是否相同，但是，针对+0和-0，set认为是相等\n```javascript\nconst s = new Set();\ns.add(1);\ns.add(2);\ns.add(3);\nconsole.log(s)\n```\n- has(数据): 判断set中是否存在对应的数据\n- delete(数据)：删除匹配的数据，返回是否删除成功\n- clear()：清空整个set集合\n- size: 获取set集合中的元素数量，只读属性，无法重新赋值\n\n### 3. 如何与数组进行相互转换\n\n```js\nconst s = new Set([x,x,x,x,x]);\n// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值\nconst arr = [...s];\n```\n\n```javascript\n// 将集合变为数组\nconst s = new Set([1, 2, 3, 4, 5, 6, 7]);\nconst result = [...s]\nconsole.log(result)\n```\n\n### 4. 如何遍历\n\n1). 使用for-of循环\n```javascript\nconst s = new Set([1, 2, 3, 4, 5, 6, 7]);\nfor (const item of s) {\n    console.log(item)\n}\n\n输出：1 2 3 4 5 6 7\n```\n2). 使用set中的实例方法forEach\n\n**注意：set集合中不存在下标，因此forEach中的回调的第二个参数和第一个参数是一致的，均表示set中的每一项**\n\n### set的应用\n```javascript\nconst arr1 = [24, 42, 32, 34, 42, 31, 32, 90, 86, 32];\nconst arr2 = [24, 47, 32, 38, 49, 11, 32, 90, 47];\n// 求两个数组的并集\nconst arr3 = [...new Set([...arr1, ...arr2])];\nconsole.log(arr3);\n\n// 求两个数组的交集\nconst arr4 = new Set(arr1);\nconst arr5 = [...new Set(arr2)];\nconst result = arr5.filter(item => {\n    return arr4.has(item);\n})\nconsole.log(result);\n\n// 求两个数组的差集\nconst result1 = arr3.filter(item => {\n    return !(arr4.has(item))\n})\nconsole.log(result1)\n```\n\n\n## map集合\n\n键值对（key value pair）数据集合的特点：键不可重复\n\nmap集合专门用于存储多个键值对数据。\n\n在map出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。\n\n### 使用对象存储有以下问题：\n\n1. 键名只能是字符串\n2. 获取数据的数量不方便\n3. 键名容易跟原型上的名称冲突\n\n\n### 1. 如何创建map\n\n```js\nnew Map(); //创建一个空的map\nnew Map(iterable); //创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值\n```\n```javascript\nconst mp = new Map([\n   [1, 2],\n   [3, 4],\n   [5, 6],\n   [1, 2]\n]);\nconsole.log(mp)\n\n输出：\nMap(3) {1 => 2, 3 => 4, 5 => 6}\n```\n### 2. 属性和方法\n\n- size：只读属性，获取当前map中键的数量\n- set(键, 值)：设置一个键值对，键和值可以是任何类型\n  - 如果键不存在，则添加一项\n  - 如果键已存在，则修改它的值\n  - 比较键的方式和set相同\n- get(键): 根据一个键得到对应的值\n- has(键)：判断某个键是否存在\n- delete(键)：删除指定的键\n- clear(): 清空map\n\n\n### 3. 和数组互相转换\n\n```javascript\nconst mp = new Map([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [1, 2]\n]);\nconst arr = [...mp];\nconsole.log(arr)\n\n输出：\n(3) [Array(2), Array(2), Array(2)]\n0: (2) [1, 2]\n1: (2) [3, 4]\n2: (2) [5, 6]\n```\n\n### 4. 遍历\n\n- for-of，每次迭代得到的是一个长度为2的数组\n- forEach，通过回调函数遍历\n  - 参数1：每一项的值\n  - 参数2：每一项的键\n  - 参数3：map本身\n```javascript\nconst mp = new Map([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [1, 2]\n]);\nmp.forEach((value, index, array) => {\n    console.log(value, index, array)\n})\n\n输出：\n2 1 Map(3) {1 => 2, 3 => 4, 5 => 6}\n4 3 Map(3) {1 => 2, 3 => 4, 5 => 6}\n6 5 Map(3) {1 => 2, 3 => 4, 5 => 6}\n```","slug":"其他集合","published":1,"updated":"2022-01-01T06:32:16.829Z","_id":"ckxu6dnit001910axbyjl0cc0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"其他集合\"><a href=\"#其他集合\" class=\"headerlink\" title=\"其他集合\"></a>其他集合</h1><hr>\n<h2 id=\"set-集合\"><a href=\"#set-集合\" class=\"headerlink\" title=\"set 集合\"></a>set 集合</h2><p><strong>set用于存放不重复的数据</strong></p>\n<h3 id=\"1-如何创建set集合\"><a href=\"#1-如何创建set集合\" class=\"headerlink\" title=\"1. 如何创建set集合\"></a>1. 如何创建set集合</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(); <span class=\"comment\">//创建一个没有任何内容的set集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(iterable); <span class=\"comment\">//创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Set</span>(<span class=\"params\"><span class=\"number\">5</span></span>)</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-如何对set集合进行后续操作\"><a href=\"#2-如何对set集合进行后续操作\" class=\"headerlink\" title=\"2. 如何对set集合进行后续操作\"></a>2. 如何对set集合进行后续操作</h3><ul>\n<li>add(数据): 添加一个数据到set集合末尾，如果数据已存在，则不进行任何操作<ul>\n<li>set使用Object.is的方式判断两个数据是否相同，但是，针对+0和-0，set认为是相等<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">s.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">s.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">s.add(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>has(数据): 判断set中是否存在对应的数据</li>\n<li>delete(数据)：删除匹配的数据，返回是否删除成功</li>\n<li>clear()：清空整个set集合</li>\n<li>size: 获取set集合中的元素数量，只读属性，无法重新赋值</li>\n</ul>\n<h3 id=\"3-如何与数组进行相互转换\"><a href=\"#3-如何与数组进行相互转换\" class=\"headerlink\" title=\"3. 如何与数组进行相互转换\"></a>3. 如何与数组进行相互转换</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([x,x,x,x,x]);</span><br><span class=\"line\"><span class=\"comment\">// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [...s];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将集合变为数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [...s]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-如何遍历\"><a href=\"#4-如何遍历\" class=\"headerlink\" title=\"4. 如何遍历\"></a>4. 如何遍历</h3><p>1). 使用for-of循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>2). 使用set中的实例方法forEach</p>\n<p><strong>注意：set集合中不存在下标，因此forEach中的回调的第二个参数和第一个参数是一致的，均表示set中的每一项</strong></p>\n<h3 id=\"set的应用\"><a href=\"#set的应用\" class=\"headerlink\" title=\"set的应用\"></a>set的应用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">24</span>, <span class=\"number\">42</span>, <span class=\"number\">32</span>, <span class=\"number\">34</span>, <span class=\"number\">42</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">90</span>, <span class=\"number\">86</span>, <span class=\"number\">32</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">24</span>, <span class=\"number\">47</span>, <span class=\"number\">32</span>, <span class=\"number\">38</span>, <span class=\"number\">49</span>, <span class=\"number\">11</span>, <span class=\"number\">32</span>, <span class=\"number\">90</span>, <span class=\"number\">47</span>];</span><br><span class=\"line\"><span class=\"comment\">// 求两个数组的并集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [...new <span class=\"built_in\">Set</span>([...arr1, ...arr2])];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求两个数组的交集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr1);</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr5 = [...new <span class=\"built_in\">Set</span>(arr2)];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = arr5.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr4.has(item);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求两个数组的差集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr3.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(arr4.has(item))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result1)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"map集合\"><a href=\"#map集合\" class=\"headerlink\" title=\"map集合\"></a>map集合</h2><p>键值对（key value pair）数据集合的特点：键不可重复</p>\n<p>map集合专门用于存储多个键值对数据。</p>\n<p>在map出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。</p>\n<h3 id=\"使用对象存储有以下问题：\"><a href=\"#使用对象存储有以下问题：\" class=\"headerlink\" title=\"使用对象存储有以下问题：\"></a>使用对象存储有以下问题：</h3><ol>\n<li>键名只能是字符串</li>\n<li>获取数据的数量不方便</li>\n<li>键名容易跟原型上的名称冲突</li>\n</ol>\n<h3 id=\"1-如何创建map\"><a href=\"#1-如何创建map\" class=\"headerlink\" title=\"1. 如何创建map\"></a>1. 如何创建map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(); <span class=\"comment\">//创建一个空的map</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(iterable); <span class=\"comment\">//创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">   [<span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">   [<span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mp)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-属性和方法\"><a href=\"#2-属性和方法\" class=\"headerlink\" title=\"2. 属性和方法\"></a>2. 属性和方法</h3><ul>\n<li>size：只读属性，获取当前map中键的数量</li>\n<li>set(键, 值)：设置一个键值对，键和值可以是任何类型<ul>\n<li>如果键不存在，则添加一项</li>\n<li>如果键已存在，则修改它的值</li>\n<li>比较键的方式和set相同</li>\n</ul>\n</li>\n<li>get(键): 根据一个键得到对应的值</li>\n<li>has(键)：判断某个键是否存在</li>\n<li>delete(键)：删除指定的键</li>\n<li>clear(): 清空map</li>\n</ul>\n<h3 id=\"3-和数组互相转换\"><a href=\"#3-和数组互相转换\" class=\"headerlink\" title=\"3. 和数组互相转换\"></a>3. 和数组互相转换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [...mp];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"built_in\">Array</span>(<span class=\"number\">2</span>), <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>), <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>)]</span><br><span class=\"line\"><span class=\"number\">0</span>: (<span class=\"number\">2</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"number\">1</span>: (<span class=\"number\">2</span>) [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"number\">2</span>: (<span class=\"number\">2</span>) [<span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-遍历\"><a href=\"#4-遍历\" class=\"headerlink\" title=\"4. 遍历\"></a>4. 遍历</h3><ul>\n<li>for-of，每次迭代得到的是一个长度为2的数组</li>\n<li>forEach，通过回调函数遍历<ul>\n<li>参数1：每一项的值</li>\n<li>参数2：每一项的键</li>\n<li>参数3：map本身<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\">mp.forEach(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, array)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":2294,"excerpt":"","more":"<h1 id=\"其他集合\"><a href=\"#其他集合\" class=\"headerlink\" title=\"其他集合\"></a>其他集合</h1><hr>\n<h2 id=\"set-集合\"><a href=\"#set-集合\" class=\"headerlink\" title=\"set 集合\"></a>set 集合</h2><p><strong>set用于存放不重复的数据</strong></p>\n<h3 id=\"1-如何创建set集合\"><a href=\"#1-如何创建set集合\" class=\"headerlink\" title=\"1. 如何创建set集合\"></a>1. 如何创建set集合</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(); <span class=\"comment\">//创建一个没有任何内容的set集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(iterable); <span class=\"comment\">//创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Set</span>(<span class=\"params\"><span class=\"number\">5</span></span>)</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-如何对set集合进行后续操作\"><a href=\"#2-如何对set集合进行后续操作\" class=\"headerlink\" title=\"2. 如何对set集合进行后续操作\"></a>2. 如何对set集合进行后续操作</h3><ul>\n<li>add(数据): 添加一个数据到set集合末尾，如果数据已存在，则不进行任何操作<ul>\n<li>set使用Object.is的方式判断两个数据是否相同，但是，针对+0和-0，set认为是相等<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">s.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">s.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">s.add(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>has(数据): 判断set中是否存在对应的数据</li>\n<li>delete(数据)：删除匹配的数据，返回是否删除成功</li>\n<li>clear()：清空整个set集合</li>\n<li>size: 获取set集合中的元素数量，只读属性，无法重新赋值</li>\n</ul>\n<h3 id=\"3-如何与数组进行相互转换\"><a href=\"#3-如何与数组进行相互转换\" class=\"headerlink\" title=\"3. 如何与数组进行相互转换\"></a>3. 如何与数组进行相互转换</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([x,x,x,x,x]);</span><br><span class=\"line\"><span class=\"comment\">// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [...s];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将集合变为数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [...s]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-如何遍历\"><a href=\"#4-如何遍历\" class=\"headerlink\" title=\"4. 如何遍历\"></a>4. 如何遍历</h3><p>1). 使用for-of循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>2). 使用set中的实例方法forEach</p>\n<p><strong>注意：set集合中不存在下标，因此forEach中的回调的第二个参数和第一个参数是一致的，均表示set中的每一项</strong></p>\n<h3 id=\"set的应用\"><a href=\"#set的应用\" class=\"headerlink\" title=\"set的应用\"></a>set的应用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">24</span>, <span class=\"number\">42</span>, <span class=\"number\">32</span>, <span class=\"number\">34</span>, <span class=\"number\">42</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">90</span>, <span class=\"number\">86</span>, <span class=\"number\">32</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">24</span>, <span class=\"number\">47</span>, <span class=\"number\">32</span>, <span class=\"number\">38</span>, <span class=\"number\">49</span>, <span class=\"number\">11</span>, <span class=\"number\">32</span>, <span class=\"number\">90</span>, <span class=\"number\">47</span>];</span><br><span class=\"line\"><span class=\"comment\">// 求两个数组的并集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [...new <span class=\"built_in\">Set</span>([...arr1, ...arr2])];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求两个数组的交集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr1);</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr5 = [...new <span class=\"built_in\">Set</span>(arr2)];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = arr5.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr4.has(item);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求两个数组的差集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr3.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(arr4.has(item))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result1)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"map集合\"><a href=\"#map集合\" class=\"headerlink\" title=\"map集合\"></a>map集合</h2><p>键值对（key value pair）数据集合的特点：键不可重复</p>\n<p>map集合专门用于存储多个键值对数据。</p>\n<p>在map出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。</p>\n<h3 id=\"使用对象存储有以下问题：\"><a href=\"#使用对象存储有以下问题：\" class=\"headerlink\" title=\"使用对象存储有以下问题：\"></a>使用对象存储有以下问题：</h3><ol>\n<li>键名只能是字符串</li>\n<li>获取数据的数量不方便</li>\n<li>键名容易跟原型上的名称冲突</li>\n</ol>\n<h3 id=\"1-如何创建map\"><a href=\"#1-如何创建map\" class=\"headerlink\" title=\"1. 如何创建map\"></a>1. 如何创建map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(); <span class=\"comment\">//创建一个空的map</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(iterable); <span class=\"comment\">//创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">   [<span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">   [<span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mp)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-属性和方法\"><a href=\"#2-属性和方法\" class=\"headerlink\" title=\"2. 属性和方法\"></a>2. 属性和方法</h3><ul>\n<li>size：只读属性，获取当前map中键的数量</li>\n<li>set(键, 值)：设置一个键值对，键和值可以是任何类型<ul>\n<li>如果键不存在，则添加一项</li>\n<li>如果键已存在，则修改它的值</li>\n<li>比较键的方式和set相同</li>\n</ul>\n</li>\n<li>get(键): 根据一个键得到对应的值</li>\n<li>has(键)：判断某个键是否存在</li>\n<li>delete(键)：删除指定的键</li>\n<li>clear(): 清空map</li>\n</ul>\n<h3 id=\"3-和数组互相转换\"><a href=\"#3-和数组互相转换\" class=\"headerlink\" title=\"3. 和数组互相转换\"></a>3. 和数组互相转换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [...mp];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"built_in\">Array</span>(<span class=\"number\">2</span>), <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>), <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>)]</span><br><span class=\"line\"><span class=\"number\">0</span>: (<span class=\"number\">2</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"number\">1</span>: (<span class=\"number\">2</span>) [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"number\">2</span>: (<span class=\"number\">2</span>) [<span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-遍历\"><a href=\"#4-遍历\" class=\"headerlink\" title=\"4. 遍历\"></a>4. 遍历</h3><ul>\n<li>for-of，每次迭代得到的是一个长度为2的数组</li>\n<li>forEach，通过回调函数遍历<ul>\n<li>参数1：每一项的值</li>\n<li>参数2：每一项的键</li>\n<li>参数3：map本身<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mp = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\">mp.forEach(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, array)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"function\"><span class=\"title\">Map</span>(<span class=\"params\"><span class=\"number\">3</span></span>)</span> &#123;<span class=\"number\">1</span> =&gt; <span class=\"number\">2</span>, <span class=\"number\">3</span> =&gt; <span class=\"number\">4</span>, <span class=\"number\">5</span> =&gt; <span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"ES6新增的数组API","date":"2021-12-31T08:21:22.000Z","description":"ES6中新增的数组API包括：静态方法：Array.of、Array.from和实例方法find、findIndex、copyWithin和includes的使用","_content":"\n# 数组增强\n\n## 新增数组API\n### 静态方法\n\n- Array.of(...args): 使用指定的数组项创建一个新数组\n- Array.from(arg): 通过给定的类数组 或 可迭代对象 创建一个新的数组。\n\n```javascript\nconst arr1 = Array.of(3, 4, 5, 6);\nconsole.log(arr1)\n\n输出：\n[3,4,5,6]\n\nconst arr2 = Array.from([5, 6, 7, 8]);\nconsole.log(arr2)\n\n输出：\n[5,6,7,8]\n```\n### 实例方法\n\n- find(callback): 用于查找满足条件的第一个元素\n- findIndex(callback)：用于查找满足条件的第一个元素的下标\n- fill(data)：用指定的数据填充满数组所有的内容\n- copyWithin(target, start?, end?): 在数组内部完成复制\n    - target：开始改变数组位置\n    - start？：复制的开始位置（默认为0）\n    - end？：复制的结束位置\n```javascript\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8];\narr.copyWithin(3);\nconsole.log(arr);\n\n输出：\n[1, 2, 3, 1,2,3,4,5]\n\nconst arr1 = [1, 2, 3, 4, 5, 6, 7, 8];\narr1.copyWithin(3, 2);\nconsole.log(arr1)\n\n输出：\n[1, 2, 3, 3, 4, 5, 6, 7]\n\nconst arr2 = [1, 2, 3, 4, 5, 6, 7, 8];\narr2.copyWithin(3, 1, 6);\nconsole.log(arr2)\n\n输出：\n[1, 2, 3, 2, 3, 4, 5, 6]\n```\n- includes(data)：判断数组中是否包含某个值，使用Object.is匹配","source":"_posts/新增数组API.md","raw":"---\ntitle: ES6新增的数组API\ndate: 2021-12-31 16:21:22\ndescription: ES6中新增的数组API包括：静态方法：Array.of、Array.from和实例方法find、findIndex、copyWithin和includes的使用\ncategories: \n\t- 前端学习笔记\n\t- ES6\ntags: \n\t- bom\n\t- 前端\n---\n\n# 数组增强\n\n## 新增数组API\n### 静态方法\n\n- Array.of(...args): 使用指定的数组项创建一个新数组\n- Array.from(arg): 通过给定的类数组 或 可迭代对象 创建一个新的数组。\n\n```javascript\nconst arr1 = Array.of(3, 4, 5, 6);\nconsole.log(arr1)\n\n输出：\n[3,4,5,6]\n\nconst arr2 = Array.from([5, 6, 7, 8]);\nconsole.log(arr2)\n\n输出：\n[5,6,7,8]\n```\n### 实例方法\n\n- find(callback): 用于查找满足条件的第一个元素\n- findIndex(callback)：用于查找满足条件的第一个元素的下标\n- fill(data)：用指定的数据填充满数组所有的内容\n- copyWithin(target, start?, end?): 在数组内部完成复制\n    - target：开始改变数组位置\n    - start？：复制的开始位置（默认为0）\n    - end？：复制的结束位置\n```javascript\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8];\narr.copyWithin(3);\nconsole.log(arr);\n\n输出：\n[1, 2, 3, 1,2,3,4,5]\n\nconst arr1 = [1, 2, 3, 4, 5, 6, 7, 8];\narr1.copyWithin(3, 2);\nconsole.log(arr1)\n\n输出：\n[1, 2, 3, 3, 4, 5, 6, 7]\n\nconst arr2 = [1, 2, 3, 4, 5, 6, 7, 8];\narr2.copyWithin(3, 1, 6);\nconsole.log(arr2)\n\n输出：\n[1, 2, 3, 2, 3, 4, 5, 6]\n```\n- includes(data)：判断数组中是否包含某个值，使用Object.is匹配","slug":"新增数组API","published":1,"updated":"2022-01-01T06:33:30.183Z","_id":"ckxu6dniv001c10axe6z7a9i7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数组增强\"><a href=\"#数组增强\" class=\"headerlink\" title=\"数组增强\"></a>数组增强</h1><h2 id=\"新增数组API\"><a href=\"#新增数组API\" class=\"headerlink\" title=\"新增数组API\"></a>新增数组API</h2><h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ul>\n<li>Array.of(…args): 使用指定的数组项创建一个新数组</li>\n<li>Array.from(arg): 通过给定的类数组 或 可迭代对象 创建一个新的数组。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = <span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = <span class=\"built_in\">Array</span>.from([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><ul>\n<li>find(callback): 用于查找满足条件的第一个元素</li>\n<li>findIndex(callback)：用于查找满足条件的第一个元素的下标</li>\n<li>fill(data)：用指定的数据填充满数组所有的内容</li>\n<li>copyWithin(target, start?, end?): 在数组内部完成复制<ul>\n<li>target：开始改变数组位置</li>\n<li>start？：复制的开始位置（默认为0）</li>\n<li>end？：复制的结束位置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">arr.copyWithin(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">arr1.copyWithin(<span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">arr2.copyWithin(<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>includes(data)：判断数组中是否包含某个值，使用Object.is匹配</li>\n</ul>\n","site":{"data":{}},"length":728,"excerpt":"","more":"<h1 id=\"数组增强\"><a href=\"#数组增强\" class=\"headerlink\" title=\"数组增强\"></a>数组增强</h1><h2 id=\"新增数组API\"><a href=\"#新增数组API\" class=\"headerlink\" title=\"新增数组API\"></a>新增数组API</h2><h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ul>\n<li>Array.of(…args): 使用指定的数组项创建一个新数组</li>\n<li>Array.from(arg): 通过给定的类数组 或 可迭代对象 创建一个新的数组。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = <span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = <span class=\"built_in\">Array</span>.from([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><ul>\n<li>find(callback): 用于查找满足条件的第一个元素</li>\n<li>findIndex(callback)：用于查找满足条件的第一个元素的下标</li>\n<li>fill(data)：用指定的数据填充满数组所有的内容</li>\n<li>copyWithin(target, start?, end?): 在数组内部完成复制<ul>\n<li>target：开始改变数组位置</li>\n<li>start？：复制的开始位置（默认为0）</li>\n<li>end？：复制的结束位置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">arr.copyWithin(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">arr1.copyWithin(<span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">arr2.copyWithin(<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>includes(data)：判断数组中是否包含某个值，使用Object.is匹配</li>\n</ul>\n"},{"title":"js中的继承 枚举和数组介绍","date":"2021-12-31T08:21:22.000Z","description":"js中的继承 枚举和数组介绍和异常处理（try-catch的使用）","_content":"\n\n# 继承 枚举 数组\n\n----------\n\n### 弊端：两个对象的原型会指向同一个内存空间，会一起改变\n```javaScript\n        Father.prototype.lastNmae = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            Target.prototype = Origin.prototype;\n        }\n        inherit(Son, Father);\n        var son = new Son();\n        \n        //可以让son和father有相同的原型，互相之间更改相关联\n```\n\n### 弊端：两个对象的原型会指向同一个内存空间，会一起改变\n```javaScript\n        Father.prototype.lastNmae = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            Target.prototype = Origin.prototype;\n        }\n        inherit(Son, Father);\n        Son.prototype.sex = 'male';\n        var son = new Son();\n        var father = new Father();\n        结果为son和father都可以访问sex属性为male\n```\n### 圣杯模式：解决互相影响的问题\n```javaScript\n        Father.prototype.lastName = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            function F() {\n            };\n            F.prototype = Origin.prototype;\n            Target.prototype = new F();\n        }\n        inherit(Son, Father);\n        var son = new Son();\n    \n    son和father有相同的原型，但son的更改对于father没有影响\n    此时son的constuctor指向Father（）\n        Father.prototype.lastName = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            function F() {\n            };\n            F.prototype = Origin.prototype;\n            Target.prototype = new F();\n            Target.prototype.constuctor = Target;//使Target产生的对象的constuctor指向Target（）\n        }\n        inherit(Son, Father);\n        var son = new Son();\n```\n\n命名空间：用对象解决变量重名，模块化开发。\n\n#### 属性的表示方法：\nobj.属性名  \nobj.[“属性名”]  \n\n### 遍历枚举\n\n#### 遍历对象的属性：\n```javaScript\nfor（ var 变量名 in 对象名）{\n}\n        var obj = {\n            name: '123',\n            age: 123,\n            sex: \"male\",\n            height: 180,\n            weight: 75\n        }\n        for (var prop in obj) {\n            console.log(prop);\n        }\n        可以遍历对象的属性名\n```\n在枚举中调用对象属性不能用  对象名.属性名   ,可以用对象名[属性名]\n\nA  instanceof B  看A对象的原型链上有没有 B的原型\n\ntypeof可能返回的类型：\n- string    \n- object  \n- undefined  \n- function  \n- number  \n- boolean\n\n### this\n\n1. 函数预编译过程 this - > window\n2. 全局作用域里 this -> window\n3. call / apply 可以改变函数运行时的this指向\n4. obj.func();  func() 里面的this指向obj\n```javaScript\n        var name = \"222\";\n        var a = {\n            name: \"111\",\n            say: function() {\n                console.log(this.name);\n            }\n        }\n        var fun = a.say;\n        fun(); //222\n        a.say(); //111\n        var b = {\n            name: \"333\",\n            say: function(fun) {\n                fun();\n            }\n        }\n        b.say(a.say); //222\n        b.say = a.say;\n        b.say(); //333\n```\n\n```javaScript\narguments.callee() ;可以找到函数的引用名\n        var num = (function(n) {\n            if (n == 1) {\n                return 1;\n            } else {\n                return n * arguments.callee(n - 1);\n            }\n        }(100));\n        console.log(num);\n        //用立即执行函数通过递归求100的阶乘\n```\n### 浅层克隆（引用值不独立，原始值独立）\n```javaScript\n        //克隆函数\n        function clone(origin,target){\n            var target = target || {}; //避免用户不传新的对象\n            for(var prop in origin){\n                target[prop] = origin[prop];\n            }\n            return target;\n        }\n```\n\n### 深层克隆（递归）\n```javaScript\n        function deepjClone(origin,target){\n            var target = target || {},\n                toStr = Object.prototype.toString,\n                arrStr = \"[object Array]\";\n            \n            for(var prop in origin){\n                if(prigin.hasOfwnPropertyJ(prop)){\n                    if(origin[prop] !== \"null\" && typeof(origin[prop] == 'object')){\n                        if(toStr.call(origin[prop] == arrStr)){\n                            target[prop] = origin[prop];\n                        }else{\n                            target[prop] = origin[prop];\n                        }\n                    }\n                    deepjClone(origin[prop],target[prop]);\n                }else{\n                    target[prop] = origin[prop];\n                }\n            }\n        }\n```\n\n### 定义方式：\n#### 数组字面量：`var 数组名  = [ ];`\n#### 构造方法： `var 数组名 =  new Array(参数); ` \n参数个数为1时代表数组的长度（只能为整数），个数大于1时代表数组的具体内容。\n\n数组的所有方法全来自 Array.prototype\n\n数组可以越界读取数据（undefined）\n\n### 数组的方法：\n#### 1. 改变原数组：\n- push : 在数组最后面添加内容（可一次添加多个）\n```javaScript\n        var arr = [];\n        arr.push(123);\n```\n- pop:剪切出数组最后一位\n```javaScript\n        var arr = [1,2];\n        arr.pop();\n        //结果为2\n```\n- unshift:在数组最前面加内容(可一次添加多个)\n```javaScript\n        var arr = [1, 2, 3];\n        arr.unshift(0);\n        数组为：[0,1,2,3]\n```\n- shift:剪切数组最前面的内容\n```javaScript\n        var arr = [1, 2, 3];\n        arr.shift();\n        数组为[2,3]\n```\n- reverse:数组逆序\n```javaScript\n        var arr = [1, 2, 3];\n        arr.reverse();\n        数组为[3,2,1]\n```\n- sort：将数组内容排序(按ASCII码排序)\n\n##### 正常使用：\n```javaScript\n数组名.sort(function (a , b ){\n      return  变量名；\n});\n```\n### 规则：\n1. 必须写俩形参\n2. 看返回值： \n    1. 返回值为负数：前一个数放在前面\n    2. 返回值为正数：后一个数放在前面\n    3. 返回值为0时：顺序不动\n```javaScript\n        var arr = [4, 2, 3];\n        arr.sort();\n        数组为[2,3,4]\n        \n        var arr = [1, 4, 3, 2, 9, 0];\n        arr.sort().reverse();\n        逆序\n        数组为：[9,4,3,2,1,0] \n        \n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort();\n        数组为：[1, 10, 2, 3, 4, 9]\n        \n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n            if (a > b) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n        顺序\n        数组为：[1,2,3,4,9,10]\n        \n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n            if (a < b) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n        逆序\n        数组为：[10,9,4,3,2,1]\n        \n        升序：\n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n    \treturn a - b;\n        });\n        \n        降序\n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n    \treturn b - a;\n        });\n```\n- splice:数组切片(可在任意位置添加内容)  \n数组名.splice(从第几位开始，截取的长度，在切口处添加新的数据)\n```javaScript\n        var arr = [1, 1, 2, 2, 3, 3, 3];\n        arr.splice(1, 2);\n        数组内容为[1,2,3,3,3]\n        \n        var arr = [1, 1, 2, 2, 3, 3, 3];\n        arr.splice(1, 2, 0, 0);\n        数组内容为：[1, 0, 0, 2, 3, 3, 3]\n        \n        var arr = [1, 2, 3, 5];\n        arr.splice(3, 0, 4);\n        数组内容为：[1,2,3,4,5]\n```\n#### 2.不改变原数组：\n- concat() :连接两个数组\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        arr2 = [5, 6, 7, 8];\n        arr = arr1.concat(arr2);\n        arr : [1, 2, 3, 4, 5, 6, 7, 8]\n```\n- slice : 截取\n数组.slice(截取开始位置，截取结束位置)\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        var arr = arr1.slice(1, 2);\n        arr:[2]\n        \n        arr1 = [1, 2, 3, 4];\n        var arr = arr1.slice(1);\n        arr:[2,3,4]\n```\n- join：将数组各位连接起来  \n数组名.join(字符串)；\n无参数默认为用 , 连接\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        var arr = arr1.join(\"!\");\n        arr：\"1!2!3!4\"\n```\n- split:将字符串按照某一规则拆分成数组,与join互逆\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        // arr2 = [5, 6, 7, 8];\n        // var arr = arr1.concat(arr2);\n        // var arr = arr1.slice(1);\n        var str = arr1.join(\"!\");\n        var arr = str.split(\"!\"); \n       arr: [\"1\", \"2\", \"3\", \"4\"]\n```\n类数组：像数组的对象  \n属性要为索引（数字）属性，必须有length属性，最好加上push   \narguments是个类数组\n\n```javaScript\nvar obj = {\n    \"0\": 'a',\n    \"1\": 'b',\n    \"2\": \"c\",\n    \"length\": 3,\n    \"push\": Array.prototype.push,\n    \"splice\": Array.prototype.splice\n}\n```\n```javaScript\ntry{\n\n}catch(e){\n\n}\n```\n在try里面的发生错误，不会执行错误后的try里的代码\n\n`e.name:错误名称`\n`e.message:错误信息`\n\n```javaScript\ntry {\n    console.log(\"a\");\n    console.log(b);\n    console.log(\"c\");\n} catch (e) {\n    console.log('e');\n}\nconsole.log(\"d\");\n输出为：a  e  d\n\ntry {\n    console.log(\"a\");\n    console.log(b);\n    console.log(\"c\");\n} catch (e) {\n    console.log(e.name + \":\" + e.message);\n}\nconsole.log(\"d\");\n可打印出出错信息\n```\n#### Error.name的六种值对应的信息：\n1. EvalError : eval()的使用与定义不一致\n2. RangeError：数值越界\n3. ReferenceError：非法或不能识别的引用数值\n4. SyntaxError：发生语法解析错误\n5. TypeError：操作数类型错误\n6. URIError：URI处理函数使用不当\n\n#### es5.0严格模式：\n不再兼容es3的一些不规则语法，使用全新的es5规范（不会对不兼容严格模式的浏览器产生影响）\n\n\"use strict\";来启动es5.0严格模式（写在逻辑最顶端）\n可以使用全局严格模式\n也可以使用局部函数内严格模式\n\n```javaScript\nwith(对象名){\n代码体；\n}\n```\n可以将with里面的代码的作用域链最顶端改为新给出的对象（降低效率）","source":"_posts/继承_枚举_数组.md","raw":"---\ntitle: js中的继承 枚举和数组介绍\ndate: 2021-12-31 16:21:22\ndescription: js中的继承 枚举和数组介绍和异常处理（try-catch的使用）\ncategories: \n    - 前端学习笔记\n    - js\ntags: \n  - js\n  - 前端\n---\n\n\n# 继承 枚举 数组\n\n----------\n\n### 弊端：两个对象的原型会指向同一个内存空间，会一起改变\n```javaScript\n        Father.prototype.lastNmae = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            Target.prototype = Origin.prototype;\n        }\n        inherit(Son, Father);\n        var son = new Son();\n        \n        //可以让son和father有相同的原型，互相之间更改相关联\n```\n\n### 弊端：两个对象的原型会指向同一个内存空间，会一起改变\n```javaScript\n        Father.prototype.lastNmae = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            Target.prototype = Origin.prototype;\n        }\n        inherit(Son, Father);\n        Son.prototype.sex = 'male';\n        var son = new Son();\n        var father = new Father();\n        结果为son和father都可以访问sex属性为male\n```\n### 圣杯模式：解决互相影响的问题\n```javaScript\n        Father.prototype.lastName = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            function F() {\n            };\n            F.prototype = Origin.prototype;\n            Target.prototype = new F();\n        }\n        inherit(Son, Father);\n        var son = new Son();\n    \n    son和father有相同的原型，但son的更改对于father没有影响\n    此时son的constuctor指向Father（）\n        Father.prototype.lastName = 'xyq';\n        function Father() {\n        }\n        function Son() {\n        }\n        function inherit(Target, Origin) {\n            function F() {\n            };\n            F.prototype = Origin.prototype;\n            Target.prototype = new F();\n            Target.prototype.constuctor = Target;//使Target产生的对象的constuctor指向Target（）\n        }\n        inherit(Son, Father);\n        var son = new Son();\n```\n\n命名空间：用对象解决变量重名，模块化开发。\n\n#### 属性的表示方法：\nobj.属性名  \nobj.[“属性名”]  \n\n### 遍历枚举\n\n#### 遍历对象的属性：\n```javaScript\nfor（ var 变量名 in 对象名）{\n}\n        var obj = {\n            name: '123',\n            age: 123,\n            sex: \"male\",\n            height: 180,\n            weight: 75\n        }\n        for (var prop in obj) {\n            console.log(prop);\n        }\n        可以遍历对象的属性名\n```\n在枚举中调用对象属性不能用  对象名.属性名   ,可以用对象名[属性名]\n\nA  instanceof B  看A对象的原型链上有没有 B的原型\n\ntypeof可能返回的类型：\n- string    \n- object  \n- undefined  \n- function  \n- number  \n- boolean\n\n### this\n\n1. 函数预编译过程 this - > window\n2. 全局作用域里 this -> window\n3. call / apply 可以改变函数运行时的this指向\n4. obj.func();  func() 里面的this指向obj\n```javaScript\n        var name = \"222\";\n        var a = {\n            name: \"111\",\n            say: function() {\n                console.log(this.name);\n            }\n        }\n        var fun = a.say;\n        fun(); //222\n        a.say(); //111\n        var b = {\n            name: \"333\",\n            say: function(fun) {\n                fun();\n            }\n        }\n        b.say(a.say); //222\n        b.say = a.say;\n        b.say(); //333\n```\n\n```javaScript\narguments.callee() ;可以找到函数的引用名\n        var num = (function(n) {\n            if (n == 1) {\n                return 1;\n            } else {\n                return n * arguments.callee(n - 1);\n            }\n        }(100));\n        console.log(num);\n        //用立即执行函数通过递归求100的阶乘\n```\n### 浅层克隆（引用值不独立，原始值独立）\n```javaScript\n        //克隆函数\n        function clone(origin,target){\n            var target = target || {}; //避免用户不传新的对象\n            for(var prop in origin){\n                target[prop] = origin[prop];\n            }\n            return target;\n        }\n```\n\n### 深层克隆（递归）\n```javaScript\n        function deepjClone(origin,target){\n            var target = target || {},\n                toStr = Object.prototype.toString,\n                arrStr = \"[object Array]\";\n            \n            for(var prop in origin){\n                if(prigin.hasOfwnPropertyJ(prop)){\n                    if(origin[prop] !== \"null\" && typeof(origin[prop] == 'object')){\n                        if(toStr.call(origin[prop] == arrStr)){\n                            target[prop] = origin[prop];\n                        }else{\n                            target[prop] = origin[prop];\n                        }\n                    }\n                    deepjClone(origin[prop],target[prop]);\n                }else{\n                    target[prop] = origin[prop];\n                }\n            }\n        }\n```\n\n### 定义方式：\n#### 数组字面量：`var 数组名  = [ ];`\n#### 构造方法： `var 数组名 =  new Array(参数); ` \n参数个数为1时代表数组的长度（只能为整数），个数大于1时代表数组的具体内容。\n\n数组的所有方法全来自 Array.prototype\n\n数组可以越界读取数据（undefined）\n\n### 数组的方法：\n#### 1. 改变原数组：\n- push : 在数组最后面添加内容（可一次添加多个）\n```javaScript\n        var arr = [];\n        arr.push(123);\n```\n- pop:剪切出数组最后一位\n```javaScript\n        var arr = [1,2];\n        arr.pop();\n        //结果为2\n```\n- unshift:在数组最前面加内容(可一次添加多个)\n```javaScript\n        var arr = [1, 2, 3];\n        arr.unshift(0);\n        数组为：[0,1,2,3]\n```\n- shift:剪切数组最前面的内容\n```javaScript\n        var arr = [1, 2, 3];\n        arr.shift();\n        数组为[2,3]\n```\n- reverse:数组逆序\n```javaScript\n        var arr = [1, 2, 3];\n        arr.reverse();\n        数组为[3,2,1]\n```\n- sort：将数组内容排序(按ASCII码排序)\n\n##### 正常使用：\n```javaScript\n数组名.sort(function (a , b ){\n      return  变量名；\n});\n```\n### 规则：\n1. 必须写俩形参\n2. 看返回值： \n    1. 返回值为负数：前一个数放在前面\n    2. 返回值为正数：后一个数放在前面\n    3. 返回值为0时：顺序不动\n```javaScript\n        var arr = [4, 2, 3];\n        arr.sort();\n        数组为[2,3,4]\n        \n        var arr = [1, 4, 3, 2, 9, 0];\n        arr.sort().reverse();\n        逆序\n        数组为：[9,4,3,2,1,0] \n        \n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort();\n        数组为：[1, 10, 2, 3, 4, 9]\n        \n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n            if (a > b) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n        顺序\n        数组为：[1,2,3,4,9,10]\n        \n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n            if (a < b) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n        逆序\n        数组为：[10,9,4,3,2,1]\n        \n        升序：\n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n    \treturn a - b;\n        });\n        \n        降序\n        var arr = [1, 4, 3, 2, 9, 10];\n        arr.sort(function(a, b) {\n    \treturn b - a;\n        });\n```\n- splice:数组切片(可在任意位置添加内容)  \n数组名.splice(从第几位开始，截取的长度，在切口处添加新的数据)\n```javaScript\n        var arr = [1, 1, 2, 2, 3, 3, 3];\n        arr.splice(1, 2);\n        数组内容为[1,2,3,3,3]\n        \n        var arr = [1, 1, 2, 2, 3, 3, 3];\n        arr.splice(1, 2, 0, 0);\n        数组内容为：[1, 0, 0, 2, 3, 3, 3]\n        \n        var arr = [1, 2, 3, 5];\n        arr.splice(3, 0, 4);\n        数组内容为：[1,2,3,4,5]\n```\n#### 2.不改变原数组：\n- concat() :连接两个数组\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        arr2 = [5, 6, 7, 8];\n        arr = arr1.concat(arr2);\n        arr : [1, 2, 3, 4, 5, 6, 7, 8]\n```\n- slice : 截取\n数组.slice(截取开始位置，截取结束位置)\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        var arr = arr1.slice(1, 2);\n        arr:[2]\n        \n        arr1 = [1, 2, 3, 4];\n        var arr = arr1.slice(1);\n        arr:[2,3,4]\n```\n- join：将数组各位连接起来  \n数组名.join(字符串)；\n无参数默认为用 , 连接\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        var arr = arr1.join(\"!\");\n        arr：\"1!2!3!4\"\n```\n- split:将字符串按照某一规则拆分成数组,与join互逆\n```javaScript\n        arr1 = [1, 2, 3, 4];\n        // arr2 = [5, 6, 7, 8];\n        // var arr = arr1.concat(arr2);\n        // var arr = arr1.slice(1);\n        var str = arr1.join(\"!\");\n        var arr = str.split(\"!\"); \n       arr: [\"1\", \"2\", \"3\", \"4\"]\n```\n类数组：像数组的对象  \n属性要为索引（数字）属性，必须有length属性，最好加上push   \narguments是个类数组\n\n```javaScript\nvar obj = {\n    \"0\": 'a',\n    \"1\": 'b',\n    \"2\": \"c\",\n    \"length\": 3,\n    \"push\": Array.prototype.push,\n    \"splice\": Array.prototype.splice\n}\n```\n```javaScript\ntry{\n\n}catch(e){\n\n}\n```\n在try里面的发生错误，不会执行错误后的try里的代码\n\n`e.name:错误名称`\n`e.message:错误信息`\n\n```javaScript\ntry {\n    console.log(\"a\");\n    console.log(b);\n    console.log(\"c\");\n} catch (e) {\n    console.log('e');\n}\nconsole.log(\"d\");\n输出为：a  e  d\n\ntry {\n    console.log(\"a\");\n    console.log(b);\n    console.log(\"c\");\n} catch (e) {\n    console.log(e.name + \":\" + e.message);\n}\nconsole.log(\"d\");\n可打印出出错信息\n```\n#### Error.name的六种值对应的信息：\n1. EvalError : eval()的使用与定义不一致\n2. RangeError：数值越界\n3. ReferenceError：非法或不能识别的引用数值\n4. SyntaxError：发生语法解析错误\n5. TypeError：操作数类型错误\n6. URIError：URI处理函数使用不当\n\n#### es5.0严格模式：\n不再兼容es3的一些不规则语法，使用全新的es5规范（不会对不兼容严格模式的浏览器产生影响）\n\n\"use strict\";来启动es5.0严格模式（写在逻辑最顶端）\n可以使用全局严格模式\n也可以使用局部函数内严格模式\n\n```javaScript\nwith(对象名){\n代码体；\n}\n```\n可以将with里面的代码的作用域链最顶端改为新给出的对象（降低效率）","slug":"继承_枚举_数组","published":1,"updated":"2022-01-01T06:33:50.803Z","_id":"ckxu6dniy001g10axc6mngupi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"继承-枚举-数组\"><a href=\"#继承-枚举-数组\" class=\"headerlink\" title=\"继承 枚举 数组\"></a>继承 枚举 数组</h1><hr>\n<h3 id=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变\"><a href=\"#弊端：两个对象的原型会指向同一个内存空间，会一起改变\" class=\"headerlink\" title=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变\"></a>弊端：两个对象的原型会指向同一个内存空间，会一起改变</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Father.prototype.lastNmae = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            Target.prototype = Origin.prototype;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以让son和father有相同的原型，互相之间更改相关联</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变-1\"><a href=\"#弊端：两个对象的原型会指向同一个内存空间，会一起改变-1\" class=\"headerlink\" title=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变\"></a>弊端：两个对象的原型会指向同一个内存空间，会一起改变</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Father.prototype.lastNmae = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            Target.prototype = Origin.prototype;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        Son.prototype.sex = <span class=\"string\">&#x27;male&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">结果为son和father都可以访问sex属性为male</span><br></pre></td></tr></table></figure>\n<h3 id=\"圣杯模式：解决互相影响的问题\"><a href=\"#圣杯模式：解决互相影响的问题\" class=\"headerlink\" title=\"圣杯模式：解决互相影响的问题\"></a>圣杯模式：解决互相影响的问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Father.prototype.lastName = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            F.prototype = Origin.prototype;</span><br><span class=\"line\">            Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    </span><br><span class=\"line\">son和father有相同的原型，但son的更改对于father没有影响</span><br><span class=\"line\">此时son的constuctor指向Father（）</span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            F.prototype = Origin.prototype;</span><br><span class=\"line\">            Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        Target.prototype.constuctor = Target;<span class=\"comment\">//使Target产生的对象的constuctor指向Target（）</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br></pre></td></tr></table></figure>\n\n<p>命名空间：用对象解决变量重名，模块化开发。</p>\n<h4 id=\"属性的表示方法：\"><a href=\"#属性的表示方法：\" class=\"headerlink\" title=\"属性的表示方法：\"></a>属性的表示方法：</h4><p>obj.属性名<br>obj.[“属性名”]  </p>\n<h3 id=\"遍历枚举\"><a href=\"#遍历枚举\" class=\"headerlink\" title=\"遍历枚举\"></a>遍历枚举</h3><h4 id=\"遍历对象的属性：\"><a href=\"#遍历对象的属性：\" class=\"headerlink\" title=\"遍历对象的属性：\"></a>遍历对象的属性：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>（ <span class=\"keyword\">var</span> 变量名 <span class=\"keyword\">in</span> 对象名）&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">            <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">180</span>,</span><br><span class=\"line\">            <span class=\"attr\">weight</span>: <span class=\"number\">75</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(prop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        可以遍历对象的属性名</span><br></pre></td></tr></table></figure>\n<p>在枚举中调用对象属性不能用  对象名.属性名   ,可以用对象名[属性名]</p>\n<p>A  instanceof B  看A对象的原型链上有没有 B的原型</p>\n<p>typeof可能返回的类型：</p>\n<ul>\n<li>string    </li>\n<li>object  </li>\n<li>undefined  </li>\n<li>function  </li>\n<li>number  </li>\n<li>boolean</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ol>\n<li>函数预编译过程 this - &gt; window</li>\n<li>全局作用域里 this -&gt; window</li>\n<li>call / apply 可以改变函数运行时的this指向</li>\n<li>obj.func();  func() 里面的this指向obj<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;222&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;111&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fun = a.say;</span><br><span class=\"line\">        fun(); <span class=\"comment\">//222</span></span><br><span class=\"line\">        a.say(); <span class=\"comment\">//111</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;333&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>) </span>&#123;</span><br><span class=\"line\">                fun();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b.say(a.say); <span class=\"comment\">//222</span></span><br><span class=\"line\">        b.say = a.say;</span><br><span class=\"line\">        b.say(); <span class=\"comment\">//333</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">arguments</span>.callee() ;可以找到函数的引用名</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> n * <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(<span class=\"number\">100</span>));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        <span class=\"comment\">//用立即执行函数通过递归求100的阶乘</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"浅层克隆（引用值不独立，原始值独立）\"><a href=\"#浅层克隆（引用值不独立，原始值独立）\" class=\"headerlink\" title=\"浅层克隆（引用值不独立，原始值独立）\"></a>浅层克隆（引用值不独立，原始值独立）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//克隆函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> target = target || &#123;&#125;; <span class=\"comment\">//避免用户不传新的对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">                target[prop] = origin[prop];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深层克隆（递归）\"><a href=\"#深层克隆（递归）\" class=\"headerlink\" title=\"深层克隆（递归）\"></a>深层克隆（递归）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepjClone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> target = target || &#123;&#125;,</span><br><span class=\"line\">                toStr = <span class=\"built_in\">Object</span>.prototype.toString,</span><br><span class=\"line\">                arrStr = <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(prigin.hasOfwnPropertyJ(prop))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(origin[prop] !== <span class=\"string\">&quot;null&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span>(origin[prop] == <span class=\"string\">&#x27;object&#x27;</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(toStr.call(origin[prop] == arrStr))&#123;</span><br><span class=\"line\">                            target[prop] = origin[prop];</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            target[prop] = origin[prop];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    deepjClone(origin[prop],target[prop]);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    target[prop] = origin[prop];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义方式：\"><a href=\"#定义方式：\" class=\"headerlink\" title=\"定义方式：\"></a>定义方式：</h3><h4 id=\"数组字面量：var-数组名\"><a href=\"#数组字面量：var-数组名\" class=\"headerlink\" title=\"数组字面量：var 数组名  = [ ];\"></a>数组字面量：<code>var 数组名  = [ ];</code></h4><h4 id=\"构造方法：-var-数组名-new-Array-参数\"><a href=\"#构造方法：-var-数组名-new-Array-参数\" class=\"headerlink\" title=\"构造方法： var 数组名 =  new Array(参数); \"></a>构造方法： <code>var 数组名 =  new Array(参数); </code></h4><p>参数个数为1时代表数组的长度（只能为整数），个数大于1时代表数组的具体内容。</p>\n<p>数组的所有方法全来自 Array.prototype</p>\n<p>数组可以越界读取数据（undefined）</p>\n<h3 id=\"数组的方法：\"><a href=\"#数组的方法：\" class=\"headerlink\" title=\"数组的方法：\"></a>数组的方法：</h3><h4 id=\"1-改变原数组：\"><a href=\"#1-改变原数组：\" class=\"headerlink\" title=\"1. 改变原数组：\"></a>1. 改变原数组：</h4><ul>\n<li>push : 在数组最后面添加内容（可一次添加多个）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">        arr.push(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure></li>\n<li>pop:剪切出数组最后一位<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">        arr.pop();</span><br><span class=\"line\"><span class=\"comment\">//结果为2</span></span><br></pre></td></tr></table></figure></li>\n<li>unshift:在数组最前面加内容(可一次添加多个)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.unshift(<span class=\"number\">0</span>);</span><br><span class=\"line\">数组为：[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>shift:剪切数组最前面的内容<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.shift();</span><br><span class=\"line\">数组为[<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>reverse:数组逆序<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.reverse();</span><br><span class=\"line\">数组为[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n<li>sort：将数组内容排序(按ASCII码排序)</li>\n</ul>\n<h5 id=\"正常使用：\"><a href=\"#正常使用：\" class=\"headerlink\" title=\"正常使用：\"></a>正常使用：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组名.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a , b </span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>  变量名；</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"规则：\"><a href=\"#规则：\" class=\"headerlink\" title=\"规则：\"></a>规则：</h3><ol>\n<li>必须写俩形参</li>\n<li>看返回值： <ol>\n<li>返回值为负数：前一个数放在前面</li>\n<li>返回值为正数：后一个数放在前面</li>\n<li>返回值为0时：顺序不动<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.sort();</span><br><span class=\"line\">   数组为[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">        arr.sort().reverse();</span><br><span class=\"line\">   逆序</span><br><span class=\"line\">   数组为：[<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>] </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort();</span><br><span class=\"line\">   数组为：[<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   顺序</span><br><span class=\"line\">   数组为：[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a &lt; b) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   逆序</span><br><span class=\"line\">   数组为：[<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   升序：</span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   </span><br><span class=\"line\">   降序</span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> b - a;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>splice:数组切片(可在任意位置添加内容)<br>数组名.splice(从第几位开始，截取的长度，在切口处添加新的数据)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.splice(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">数组内容为[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.splice(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">数组内容为：[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">        arr.splice(<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">数组内容为：[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-不改变原数组：\"><a href=\"#2-不改变原数组：\" class=\"headerlink\" title=\"2.不改变原数组：\"></a>2.不改变原数组：</h4></li>\n<li>concat() :连接两个数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        arr2 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">        arr = arr1.concat(arr2);</span><br><span class=\"line\">arr : [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure></li>\n<li>slice : 截取<br>数组.slice(截取开始位置，截取结束位置)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = arr1.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">arr:[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = arr1.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">arr:[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></li>\n<li>join：将数组各位连接起来<br>数组名.join(字符串)；<br>无参数默认为用 , 连接<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = arr1.join(<span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">arr：<span class=\"string\">&quot;1!2!3!4&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>split:将字符串按照某一规则拆分成数组,与join互逆<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"comment\">// arr2 = [5, 6, 7, 8];</span></span><br><span class=\"line\">        <span class=\"comment\">// var arr = arr1.concat(arr2);</span></span><br><span class=\"line\">        <span class=\"comment\">// var arr = arr1.slice(1);</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = arr1.join(<span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">&quot;!&quot;</span>); </span><br><span class=\"line\">arr: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>]</span><br></pre></td></tr></table></figure>\n类数组：像数组的对象<br>属性要为索引（数字）属性，必须有length属性，最好加上push<br>arguments是个类数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;0&quot;</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;2&quot;</span>: <span class=\"string\">&quot;c&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;length&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;push&quot;</span>: <span class=\"built_in\">Array</span>.prototype.push,</span><br><span class=\"line\">    <span class=\"string\">&quot;splice&quot;</span>: <span class=\"built_in\">Array</span>.prototype.splice</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在try里面的发生错误，不会执行错误后的try里的代码</p>\n<p><code>e.name:错误名称</code><br><code>e.message:错误信息</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">输出为：a  e  d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.name + <span class=\"string\">&quot;:&quot;</span> + e.message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">可打印出出错信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"Error-name的六种值对应的信息：\"><a href=\"#Error-name的六种值对应的信息：\" class=\"headerlink\" title=\"Error.name的六种值对应的信息：\"></a>Error.name的六种值对应的信息：</h4><ol>\n<li>EvalError : eval()的使用与定义不一致</li>\n<li>RangeError：数值越界</li>\n<li>ReferenceError：非法或不能识别的引用数值</li>\n<li>SyntaxError：发生语法解析错误</li>\n<li>TypeError：操作数类型错误</li>\n<li>URIError：URI处理函数使用不当</li>\n</ol>\n<h4 id=\"es5-0严格模式：\"><a href=\"#es5-0严格模式：\" class=\"headerlink\" title=\"es5.0严格模式：\"></a>es5.0严格模式：</h4><p>不再兼容es3的一些不规则语法，使用全新的es5规范（不会对不兼容严格模式的浏览器产生影响）</p>\n<p>“use strict”;来启动es5.0严格模式（写在逻辑最顶端）<br>可以使用全局严格模式<br>也可以使用局部函数内严格模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">with</span>(<span class=\"params\">对象名</span>)</span>&#123;</span><br><span class=\"line\">代码体；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以将with里面的代码的作用域链最顶端改为新给出的对象（降低效率）</p>\n","site":{"data":{}},"length":6075,"excerpt":"","more":"<h1 id=\"继承-枚举-数组\"><a href=\"#继承-枚举-数组\" class=\"headerlink\" title=\"继承 枚举 数组\"></a>继承 枚举 数组</h1><hr>\n<h3 id=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变\"><a href=\"#弊端：两个对象的原型会指向同一个内存空间，会一起改变\" class=\"headerlink\" title=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变\"></a>弊端：两个对象的原型会指向同一个内存空间，会一起改变</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Father.prototype.lastNmae = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            Target.prototype = Origin.prototype;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以让son和father有相同的原型，互相之间更改相关联</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变-1\"><a href=\"#弊端：两个对象的原型会指向同一个内存空间，会一起改变-1\" class=\"headerlink\" title=\"弊端：两个对象的原型会指向同一个内存空间，会一起改变\"></a>弊端：两个对象的原型会指向同一个内存空间，会一起改变</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Father.prototype.lastNmae = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            Target.prototype = Origin.prototype;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        Son.prototype.sex = <span class=\"string\">&#x27;male&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">结果为son和father都可以访问sex属性为male</span><br></pre></td></tr></table></figure>\n<h3 id=\"圣杯模式：解决互相影响的问题\"><a href=\"#圣杯模式：解决互相影响的问题\" class=\"headerlink\" title=\"圣杯模式：解决互相影响的问题\"></a>圣杯模式：解决互相影响的问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        Father.prototype.lastName = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            F.prototype = Origin.prototype;</span><br><span class=\"line\">            Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    </span><br><span class=\"line\">son和father有相同的原型，但son的更改对于father没有影响</span><br><span class=\"line\">此时son的constuctor指向Father（）</span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&#x27;xyq&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            F.prototype = Origin.prototype;</span><br><span class=\"line\">            Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        Target.prototype.constuctor = Target;<span class=\"comment\">//使Target产生的对象的constuctor指向Target（）</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inherit(Son, Father);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br></pre></td></tr></table></figure>\n\n<p>命名空间：用对象解决变量重名，模块化开发。</p>\n<h4 id=\"属性的表示方法：\"><a href=\"#属性的表示方法：\" class=\"headerlink\" title=\"属性的表示方法：\"></a>属性的表示方法：</h4><p>obj.属性名<br>obj.[“属性名”]  </p>\n<h3 id=\"遍历枚举\"><a href=\"#遍历枚举\" class=\"headerlink\" title=\"遍历枚举\"></a>遍历枚举</h3><h4 id=\"遍历对象的属性：\"><a href=\"#遍历对象的属性：\" class=\"headerlink\" title=\"遍历对象的属性：\"></a>遍历对象的属性：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>（ <span class=\"keyword\">var</span> 变量名 <span class=\"keyword\">in</span> 对象名）&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">            <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">180</span>,</span><br><span class=\"line\">            <span class=\"attr\">weight</span>: <span class=\"number\">75</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(prop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        可以遍历对象的属性名</span><br></pre></td></tr></table></figure>\n<p>在枚举中调用对象属性不能用  对象名.属性名   ,可以用对象名[属性名]</p>\n<p>A  instanceof B  看A对象的原型链上有没有 B的原型</p>\n<p>typeof可能返回的类型：</p>\n<ul>\n<li>string    </li>\n<li>object  </li>\n<li>undefined  </li>\n<li>function  </li>\n<li>number  </li>\n<li>boolean</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ol>\n<li>函数预编译过程 this - &gt; window</li>\n<li>全局作用域里 this -&gt; window</li>\n<li>call / apply 可以改变函数运行时的this指向</li>\n<li>obj.func();  func() 里面的this指向obj<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;222&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;111&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fun = a.say;</span><br><span class=\"line\">        fun(); <span class=\"comment\">//222</span></span><br><span class=\"line\">        a.say(); <span class=\"comment\">//111</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;333&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>) </span>&#123;</span><br><span class=\"line\">                fun();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b.say(a.say); <span class=\"comment\">//222</span></span><br><span class=\"line\">        b.say = a.say;</span><br><span class=\"line\">        b.say(); <span class=\"comment\">//333</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">arguments</span>.callee() ;可以找到函数的引用名</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> n * <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(<span class=\"number\">100</span>));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        <span class=\"comment\">//用立即执行函数通过递归求100的阶乘</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"浅层克隆（引用值不独立，原始值独立）\"><a href=\"#浅层克隆（引用值不独立，原始值独立）\" class=\"headerlink\" title=\"浅层克隆（引用值不独立，原始值独立）\"></a>浅层克隆（引用值不独立，原始值独立）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//克隆函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> target = target || &#123;&#125;; <span class=\"comment\">//避免用户不传新的对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">                target[prop] = origin[prop];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深层克隆（递归）\"><a href=\"#深层克隆（递归）\" class=\"headerlink\" title=\"深层克隆（递归）\"></a>深层克隆（递归）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepjClone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> target = target || &#123;&#125;,</span><br><span class=\"line\">                toStr = <span class=\"built_in\">Object</span>.prototype.toString,</span><br><span class=\"line\">                arrStr = <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(prigin.hasOfwnPropertyJ(prop))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(origin[prop] !== <span class=\"string\">&quot;null&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span>(origin[prop] == <span class=\"string\">&#x27;object&#x27;</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(toStr.call(origin[prop] == arrStr))&#123;</span><br><span class=\"line\">                            target[prop] = origin[prop];</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            target[prop] = origin[prop];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    deepjClone(origin[prop],target[prop]);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    target[prop] = origin[prop];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义方式：\"><a href=\"#定义方式：\" class=\"headerlink\" title=\"定义方式：\"></a>定义方式：</h3><h4 id=\"数组字面量：var-数组名\"><a href=\"#数组字面量：var-数组名\" class=\"headerlink\" title=\"数组字面量：var 数组名  = [ ];\"></a>数组字面量：<code>var 数组名  = [ ];</code></h4><h4 id=\"构造方法：-var-数组名-new-Array-参数\"><a href=\"#构造方法：-var-数组名-new-Array-参数\" class=\"headerlink\" title=\"构造方法： var 数组名 =  new Array(参数); \"></a>构造方法： <code>var 数组名 =  new Array(参数); </code></h4><p>参数个数为1时代表数组的长度（只能为整数），个数大于1时代表数组的具体内容。</p>\n<p>数组的所有方法全来自 Array.prototype</p>\n<p>数组可以越界读取数据（undefined）</p>\n<h3 id=\"数组的方法：\"><a href=\"#数组的方法：\" class=\"headerlink\" title=\"数组的方法：\"></a>数组的方法：</h3><h4 id=\"1-改变原数组：\"><a href=\"#1-改变原数组：\" class=\"headerlink\" title=\"1. 改变原数组：\"></a>1. 改变原数组：</h4><ul>\n<li>push : 在数组最后面添加内容（可一次添加多个）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">        arr.push(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure></li>\n<li>pop:剪切出数组最后一位<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">        arr.pop();</span><br><span class=\"line\"><span class=\"comment\">//结果为2</span></span><br></pre></td></tr></table></figure></li>\n<li>unshift:在数组最前面加内容(可一次添加多个)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.unshift(<span class=\"number\">0</span>);</span><br><span class=\"line\">数组为：[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>shift:剪切数组最前面的内容<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.shift();</span><br><span class=\"line\">数组为[<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>reverse:数组逆序<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.reverse();</span><br><span class=\"line\">数组为[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n<li>sort：将数组内容排序(按ASCII码排序)</li>\n</ul>\n<h5 id=\"正常使用：\"><a href=\"#正常使用：\" class=\"headerlink\" title=\"正常使用：\"></a>正常使用：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组名.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a , b </span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>  变量名；</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"规则：\"><a href=\"#规则：\" class=\"headerlink\" title=\"规则：\"></a>规则：</h3><ol>\n<li>必须写俩形参</li>\n<li>看返回值： <ol>\n<li>返回值为负数：前一个数放在前面</li>\n<li>返回值为正数：后一个数放在前面</li>\n<li>返回值为0时：顺序不动<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.sort();</span><br><span class=\"line\">   数组为[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">        arr.sort().reverse();</span><br><span class=\"line\">   逆序</span><br><span class=\"line\">   数组为：[<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>] </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort();</span><br><span class=\"line\">   数组为：[<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   顺序</span><br><span class=\"line\">   数组为：[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a &lt; b) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   逆序</span><br><span class=\"line\">   数组为：[<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   升序：</span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   </span><br><span class=\"line\">   降序</span><br><span class=\"line\">   <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">        arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> b - a;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>splice:数组切片(可在任意位置添加内容)<br>数组名.splice(从第几位开始，截取的长度，在切口处添加新的数据)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.splice(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">数组内容为[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">        arr.splice(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">数组内容为：[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">        arr.splice(<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">数组内容为：[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-不改变原数组：\"><a href=\"#2-不改变原数组：\" class=\"headerlink\" title=\"2.不改变原数组：\"></a>2.不改变原数组：</h4></li>\n<li>concat() :连接两个数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        arr2 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">        arr = arr1.concat(arr2);</span><br><span class=\"line\">arr : [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure></li>\n<li>slice : 截取<br>数组.slice(截取开始位置，截取结束位置)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = arr1.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">arr:[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = arr1.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">arr:[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></li>\n<li>join：将数组各位连接起来<br>数组名.join(字符串)；<br>无参数默认为用 , 连接<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = arr1.join(<span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">arr：<span class=\"string\">&quot;1!2!3!4&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>split:将字符串按照某一规则拆分成数组,与join互逆<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"comment\">// arr2 = [5, 6, 7, 8];</span></span><br><span class=\"line\">        <span class=\"comment\">// var arr = arr1.concat(arr2);</span></span><br><span class=\"line\">        <span class=\"comment\">// var arr = arr1.slice(1);</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = arr1.join(<span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">&quot;!&quot;</span>); </span><br><span class=\"line\">arr: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>]</span><br></pre></td></tr></table></figure>\n类数组：像数组的对象<br>属性要为索引（数字）属性，必须有length属性，最好加上push<br>arguments是个类数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;0&quot;</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;2&quot;</span>: <span class=\"string\">&quot;c&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;length&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;push&quot;</span>: <span class=\"built_in\">Array</span>.prototype.push,</span><br><span class=\"line\">    <span class=\"string\">&quot;splice&quot;</span>: <span class=\"built_in\">Array</span>.prototype.splice</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在try里面的发生错误，不会执行错误后的try里的代码</p>\n<p><code>e.name:错误名称</code><br><code>e.message:错误信息</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">输出为：a  e  d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.name + <span class=\"string\">&quot;:&quot;</span> + e.message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">可打印出出错信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"Error-name的六种值对应的信息：\"><a href=\"#Error-name的六种值对应的信息：\" class=\"headerlink\" title=\"Error.name的六种值对应的信息：\"></a>Error.name的六种值对应的信息：</h4><ol>\n<li>EvalError : eval()的使用与定义不一致</li>\n<li>RangeError：数值越界</li>\n<li>ReferenceError：非法或不能识别的引用数值</li>\n<li>SyntaxError：发生语法解析错误</li>\n<li>TypeError：操作数类型错误</li>\n<li>URIError：URI处理函数使用不当</li>\n</ol>\n<h4 id=\"es5-0严格模式：\"><a href=\"#es5-0严格模式：\" class=\"headerlink\" title=\"es5.0严格模式：\"></a>es5.0严格模式：</h4><p>不再兼容es3的一些不规则语法，使用全新的es5规范（不会对不兼容严格模式的浏览器产生影响）</p>\n<p>“use strict”;来启动es5.0严格模式（写在逻辑最顶端）<br>可以使用全局严格模式<br>也可以使用局部函数内严格模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">with</span>(<span class=\"params\">对象名</span>)</span>&#123;</span><br><span class=\"line\">代码体；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以将with里面的代码的作用域链最顶端改为新给出的对象（降低效率）</p>\n"},{"title":"ES6中的解构 符号 异步处理","date":"2021-12-31T08:21:22.000Z","description":"数组和对象解构的介绍、符号这一新增数据类型的介绍和使用场景，js中异步处理的原理的使用","_content":"\n# 解构 符号 异步处理\n----------\n## 解构\n将数组或对象的某一属性提取到变量中(可以互相嵌套使用)   \n可以给结构出来的变量赋默认值（变量名 = 默认值）\n\n### 对象解构\n#### 解构剩余参数：\n将剩余的所有参数都敢放到一个数组或对象中（使用展开运算符）\n```javascript\n    const arr = [1, 2, 3, 4, 5];\n    let [nn1, ...arr1] = arr;\n    console.log(nn1, arr1)\n    // 将第一个结构出来，其他放到arr1 数组中\n```\n#### 同名解构（变量名要和属性名一致）\n##### 语法：\n- 先定义再解构变量：（{变量名，.....} = 对象名）\n```javascript\n        const obj = {\n            name: 'xyq',\n            sex: 'male',\n            age: 20,\n            address: {\n                province: '河南',\n                city: '驻马店'\n            }\n        }\n        let name, age;\n\n        ({\n            name,\n            age\n        } = obj);\n        console.log(name, age)\n```\n- 直接解构 ： let / const / var  {变量名} = 对象名\n```javascript\n        //对象解构\n        const obj = {\n            name: 'xyq',\n            sex: 'male',\n            age: 20,\n            address: {\n                province: '河南',\n                city: '驻马店'\n            }\n        }\n\n        let {\n            name,\n            sex,\n            age,\n            address\n        } = obj;\n\n        console.log(t, sex, age, address)\n```\n\n#### 异名解构\n{属性名：变量名}\n```javascript\n        // 将name解构成变量t\n        let {\n            name,\n            age: t\n        } = obj;\n        console.log(name, t)\n```\n\n#### 嵌套解构\n{属性名：{属性名}}\n```javascript\n        let {\n            name,\n            address: {\n                city\n            }\n        } = obj;\n        // 此时address为 undefined\n        console.log(city)\n```\n### 数组解构\n#### 模拟对象\n数组可以看成特殊的对象，可以参考对象的异名解构\n```javascript\n        const arr = [1, 2, 3, 4, 5];\n        let {\n            0: n1,\n            1: n2,\n        } = arr;\n        console.log(n1, n2);\n```\n\n#### 数组自己的结构\n[变量名，，，，，变量名],按顺序结构数组，不想结构的对象用空格空出\n```javascript\n    const arr = [1, 2, 3, 4, 5];\n    let [n1, n2, , n4, ] = arr;\n    console.log(n1, n2, n4)\n```\n\n### 参数解构\n```javascript\n//常用于函数参数的定义\nfunction ajax({\n    method = \"get\",\n    url = \"/\"\n} = {}) {\n    console.log(method, url)\n}\n\najax()\n```\n\n## 符号\n对象的属性名一定是一个字符串\n\n### 普通符号\n\n符号是ES6新增的一个数据类型，它通过使用函数 `Symbol(符号描述)` 来创建\n\n符号设计的初衷，是为了给对象设置私有属性\n\n私有属性：只能在对象内部使用，外面无法使用\n\n符号具有以下特点：\n\n- 没有字面量\n- 使用 typeof 得到的类型是 symbol\n- **每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同**\n- 符号可以作为对象的属性名存在，这种属性称之为符号属性\n  - 开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问\n  - 符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性\n  - Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性\n  - ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号\n- 符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换\n\n### 共享符号\n根据某个符号名称（符号描述）能够得到同一个符号\n\n```js\nSymbol.for(\"符号名/符号描述\")  //获取共享符号\n```\n\n### 知名符号\n知名符号是一些具有特殊含义的共享符号，通过 Symbol 的静态属性得到\n\nES6 延续了 ES5 的思想：减少魔法，暴露内部实现！\n\n因此，ES6 用知名符号暴露了某些场景的内部实现\n\n1. Symbol.hasInstance\n\n该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定\n\n```js\n\nobj instanceof A\n\n//等效于\n\nA[Symbol.hasInstance](obj) // Function.prototype[Symbol.hasInstance]\n\n```\n\n2. [扩展] Symbol.isConcatSpreadable\n\n该知名符号会影响数组的 concat 方法\n\n3. [扩展] Symbol.toPrimitive\n\n该知名符号会影响类型转换的结果\n\n4. [扩展] Symbol.toStringTag\n\n该知名符号会影响 Object.prototype.toString 的返回值\n\n## 异步处理\n### 事件循环\nJS运行的环境称之为宿主环境。\n\n#### 执行栈：\n  call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。\n\nJS引擎永远执行的是执行栈的最顶部。\n\n#### 异步函数：\n某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。\n\n#### 浏览器宿主环境中包含5个线程：\n\n1. JS引擎：负责执行执行栈的最顶部代码\n2. GUI线程：负责渲染页面 \n3. 事件监听线程：负责监听各种事件\n4. 计时线程：负责计时\n5. 网络线程：负责网络通信\n\n当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。\n\nJS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。\n\n\n事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：\n\n- 宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列\n- 微任务（队列）：MutationObserver，Promise产生的回调进入微队列\n\n#### MutationObserver用于监听某个DOM对象的变化\n\n当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。\n\n###异步处理的通用模型\n\nES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。\n\n值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。\n\n理解该 API，最重要的，是理解它的异步模型\n\n1. ES6 将某一件可能发生异步操作的事情，分为两个阶段：**unsettled** 和 **settled**\n\n![](./images/4.png)\n\n- unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事\n- settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转\n\n事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。\n\n2. ES6将事情划分为三种状态： pending、resolved、rejected\n\n- pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）\n- resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果\n- rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误\n\n既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！\n\n我们将 把事情变为resolved状态的过程叫做：**resolve**，推向该状态时，可能会传递一些数据\n\n我们将 把事情变为rejected状态的过程叫做：**reject**，推向该状态时，同样可能会传递一些数据，通常为错误信息\n\n**始终记住，无论是阶段，还是状态，是不可逆的！**\n\n![](./images/3.png)\n\n3. 当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。\n\n- resolved状态：这是一个正常的已决状态，后续处理表示为 thenable\n- rejected状态：这是一个非正常的已决状态，后续处理表示为 catchable\n\n后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行\n\n![](./images/2.png)\n\n4. 整件事称之为Promise\n\n![](./images/1.png)\n\n### Promise的基本用法\n\n#### 格式：\n```js\nconst pro = new Promise((resolve, reject)=>{\n    // 未决阶段的处理\n    // 通过调用resolve函数将Promise推向已决阶段的resolved状态\n    // 通过调用reject函数将Promise推向已决阶段的rejected状态\n    // resolve和reject均可以传递最多一个参数，表示推向状态的数据\n})\n\npro.then(data=>{\n    //这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行\n    //如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行\n    //data为状态数据\n}, err=>{\n    //这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行\n    //如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行\n    //err为状态数据\n})\n```\n\n#### 细节\n\n1. 未决阶段的处理函数是同步的，会立即执行\n2. thenable和catchable函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列\n3. pro.then可以只添加thenable函数，pro.catch可以单独添加catchable函数\n4. 在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向rejected，并会被catchable捕获\n5. 一旦状态推向了已决阶段，无法再对状态做任何更改\n6. **Promise并没有消除回调，只是让回调变得可控**\n\n### Promise的串联\n\n当后续的Promise需要用到之前的Promise的处理结果时，需要Promise的串联\n\n#### Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\n\n1. 如果当前的Promise是未决的，得到的新的Promise是挂起状态\n2. 如果当前的Promise是已决的，会运行相应的后续处理函数，并将后续处理函数的结果（返回值）作为resolved状态数据，应用到新的Promise中；如果后续处理函数发生错误，则把返回值作为rejected状态数据，应用到新的Promise中。\n\n**后续的Promise一定会等到前面的Promise有了后续处理结果后，才会变成已决状态**\n\n如果前面的Promise的后续处理，返回的是一个Promise，则返回的新的Promise状态和后续处理返回的Promise状态保持一致。\n\n### Promise的其他api\n\n#### 原型成员 (实例成员)\n\n- then：注册一个后续处理函数，当Promise为resolved状态时运行该函数\n- catch：注册一个后续处理函数，当Promise为rejected状态时运行该函数\n- finally：[ES2018]注册一个后续处理函数（无参），当Promise为已决时运行该函数\n\n#### 构造函数成员 （静态成员）\n\n- resolve(数据)：该方法返回一个resolved状态的Promise，传递的数据作为状态数据\n  - 特殊情况：如果传递的数据是Promise，则直接返回传递的Promise对象\n  \n- reject(数据)：该方法返回一个rejected状态的Promise，传递的数据作为状态数据\n\n- all(iterable)：这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。\n\n- race(iterable)：当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象\n\n\n### async 和 await\n\nasync 和 await 是 ES2016 新增两个关键字，它们借鉴了 ES2015 中生成器在实际开发中的应用，目的是简化 Promise api 的使用，并非是替代 Promise。\n\n#### async\n\n目的是简化在函数的返回值中对Promise的创建\n\nasync 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 Promise 对象。\n\n```js\n\nasync function test(){\n    console.log(1);\n    return 2;\n}\n\n//等效于\n\nfunction test(){\n    return new Promise((resolve, reject)=>{\n        console.log(1);\n        resolve(2);\n    })\n}\n\n```\n\n#### await\n\n**await关键字必须出现在async函数中！！！！**\n\nawait用在某个表达式之前，如果表达式是一个Promise，则得到的是thenable中的状态数据。\n\n```js\n\nasync function test1(){\n    console.log(1);\n    return 2;\n}\n\nasync function test2(){\n    const result = await test1();\n    console.log(result);\n}\n\ntest2();\n```\n\n等效于\n\n```js\n\nfunction test1(){\n    return new Promise((resolve, reject)=>{\n        console.log(1);\n        resolve(2);\n    })\n}\n\nfunction test2(){\n    return new Promise((resolve, reject)=>{\n        test1().then(data => {\n            const result = data;\n            console.log(result);\n            resolve();\n        })\n    })\n}\n\ntest2();\n\n```\n\n如果await的表达式不是Promise，则会将其使用Promise.resolve包装后按照规则运行","source":"_posts/解构_符号_异步处理.md","raw":"---\ntitle: ES6中的解构 符号 异步处理\ndate: 2021-12-31 16:21:22\ndescription: 数组和对象解构的介绍、符号这一新增数据类型的介绍和使用场景，js中异步处理的原理的使用\ncategories: \n    - 前端学习笔记\n    - ES6\n\ntags: \n  - ES6\n  - 前端\n---\n\n# 解构 符号 异步处理\n----------\n## 解构\n将数组或对象的某一属性提取到变量中(可以互相嵌套使用)   \n可以给结构出来的变量赋默认值（变量名 = 默认值）\n\n### 对象解构\n#### 解构剩余参数：\n将剩余的所有参数都敢放到一个数组或对象中（使用展开运算符）\n```javascript\n    const arr = [1, 2, 3, 4, 5];\n    let [nn1, ...arr1] = arr;\n    console.log(nn1, arr1)\n    // 将第一个结构出来，其他放到arr1 数组中\n```\n#### 同名解构（变量名要和属性名一致）\n##### 语法：\n- 先定义再解构变量：（{变量名，.....} = 对象名）\n```javascript\n        const obj = {\n            name: 'xyq',\n            sex: 'male',\n            age: 20,\n            address: {\n                province: '河南',\n                city: '驻马店'\n            }\n        }\n        let name, age;\n\n        ({\n            name,\n            age\n        } = obj);\n        console.log(name, age)\n```\n- 直接解构 ： let / const / var  {变量名} = 对象名\n```javascript\n        //对象解构\n        const obj = {\n            name: 'xyq',\n            sex: 'male',\n            age: 20,\n            address: {\n                province: '河南',\n                city: '驻马店'\n            }\n        }\n\n        let {\n            name,\n            sex,\n            age,\n            address\n        } = obj;\n\n        console.log(t, sex, age, address)\n```\n\n#### 异名解构\n{属性名：变量名}\n```javascript\n        // 将name解构成变量t\n        let {\n            name,\n            age: t\n        } = obj;\n        console.log(name, t)\n```\n\n#### 嵌套解构\n{属性名：{属性名}}\n```javascript\n        let {\n            name,\n            address: {\n                city\n            }\n        } = obj;\n        // 此时address为 undefined\n        console.log(city)\n```\n### 数组解构\n#### 模拟对象\n数组可以看成特殊的对象，可以参考对象的异名解构\n```javascript\n        const arr = [1, 2, 3, 4, 5];\n        let {\n            0: n1,\n            1: n2,\n        } = arr;\n        console.log(n1, n2);\n```\n\n#### 数组自己的结构\n[变量名，，，，，变量名],按顺序结构数组，不想结构的对象用空格空出\n```javascript\n    const arr = [1, 2, 3, 4, 5];\n    let [n1, n2, , n4, ] = arr;\n    console.log(n1, n2, n4)\n```\n\n### 参数解构\n```javascript\n//常用于函数参数的定义\nfunction ajax({\n    method = \"get\",\n    url = \"/\"\n} = {}) {\n    console.log(method, url)\n}\n\najax()\n```\n\n## 符号\n对象的属性名一定是一个字符串\n\n### 普通符号\n\n符号是ES6新增的一个数据类型，它通过使用函数 `Symbol(符号描述)` 来创建\n\n符号设计的初衷，是为了给对象设置私有属性\n\n私有属性：只能在对象内部使用，外面无法使用\n\n符号具有以下特点：\n\n- 没有字面量\n- 使用 typeof 得到的类型是 symbol\n- **每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同**\n- 符号可以作为对象的属性名存在，这种属性称之为符号属性\n  - 开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问\n  - 符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性\n  - Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性\n  - ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号\n- 符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换\n\n### 共享符号\n根据某个符号名称（符号描述）能够得到同一个符号\n\n```js\nSymbol.for(\"符号名/符号描述\")  //获取共享符号\n```\n\n### 知名符号\n知名符号是一些具有特殊含义的共享符号，通过 Symbol 的静态属性得到\n\nES6 延续了 ES5 的思想：减少魔法，暴露内部实现！\n\n因此，ES6 用知名符号暴露了某些场景的内部实现\n\n1. Symbol.hasInstance\n\n该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定\n\n```js\n\nobj instanceof A\n\n//等效于\n\nA[Symbol.hasInstance](obj) // Function.prototype[Symbol.hasInstance]\n\n```\n\n2. [扩展] Symbol.isConcatSpreadable\n\n该知名符号会影响数组的 concat 方法\n\n3. [扩展] Symbol.toPrimitive\n\n该知名符号会影响类型转换的结果\n\n4. [扩展] Symbol.toStringTag\n\n该知名符号会影响 Object.prototype.toString 的返回值\n\n## 异步处理\n### 事件循环\nJS运行的环境称之为宿主环境。\n\n#### 执行栈：\n  call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。\n\nJS引擎永远执行的是执行栈的最顶部。\n\n#### 异步函数：\n某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。\n\n#### 浏览器宿主环境中包含5个线程：\n\n1. JS引擎：负责执行执行栈的最顶部代码\n2. GUI线程：负责渲染页面 \n3. 事件监听线程：负责监听各种事件\n4. 计时线程：负责计时\n5. 网络线程：负责网络通信\n\n当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。\n\nJS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。\n\n\n事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：\n\n- 宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列\n- 微任务（队列）：MutationObserver，Promise产生的回调进入微队列\n\n#### MutationObserver用于监听某个DOM对象的变化\n\n当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。\n\n###异步处理的通用模型\n\nES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。\n\n值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。\n\n理解该 API，最重要的，是理解它的异步模型\n\n1. ES6 将某一件可能发生异步操作的事情，分为两个阶段：**unsettled** 和 **settled**\n\n![](./images/4.png)\n\n- unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事\n- settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转\n\n事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。\n\n2. ES6将事情划分为三种状态： pending、resolved、rejected\n\n- pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）\n- resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果\n- rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误\n\n既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！\n\n我们将 把事情变为resolved状态的过程叫做：**resolve**，推向该状态时，可能会传递一些数据\n\n我们将 把事情变为rejected状态的过程叫做：**reject**，推向该状态时，同样可能会传递一些数据，通常为错误信息\n\n**始终记住，无论是阶段，还是状态，是不可逆的！**\n\n![](./images/3.png)\n\n3. 当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。\n\n- resolved状态：这是一个正常的已决状态，后续处理表示为 thenable\n- rejected状态：这是一个非正常的已决状态，后续处理表示为 catchable\n\n后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行\n\n![](./images/2.png)\n\n4. 整件事称之为Promise\n\n![](./images/1.png)\n\n### Promise的基本用法\n\n#### 格式：\n```js\nconst pro = new Promise((resolve, reject)=>{\n    // 未决阶段的处理\n    // 通过调用resolve函数将Promise推向已决阶段的resolved状态\n    // 通过调用reject函数将Promise推向已决阶段的rejected状态\n    // resolve和reject均可以传递最多一个参数，表示推向状态的数据\n})\n\npro.then(data=>{\n    //这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行\n    //如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行\n    //data为状态数据\n}, err=>{\n    //这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行\n    //如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行\n    //err为状态数据\n})\n```\n\n#### 细节\n\n1. 未决阶段的处理函数是同步的，会立即执行\n2. thenable和catchable函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列\n3. pro.then可以只添加thenable函数，pro.catch可以单独添加catchable函数\n4. 在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向rejected，并会被catchable捕获\n5. 一旦状态推向了已决阶段，无法再对状态做任何更改\n6. **Promise并没有消除回调，只是让回调变得可控**\n\n### Promise的串联\n\n当后续的Promise需要用到之前的Promise的处理结果时，需要Promise的串联\n\n#### Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\n\n1. 如果当前的Promise是未决的，得到的新的Promise是挂起状态\n2. 如果当前的Promise是已决的，会运行相应的后续处理函数，并将后续处理函数的结果（返回值）作为resolved状态数据，应用到新的Promise中；如果后续处理函数发生错误，则把返回值作为rejected状态数据，应用到新的Promise中。\n\n**后续的Promise一定会等到前面的Promise有了后续处理结果后，才会变成已决状态**\n\n如果前面的Promise的后续处理，返回的是一个Promise，则返回的新的Promise状态和后续处理返回的Promise状态保持一致。\n\n### Promise的其他api\n\n#### 原型成员 (实例成员)\n\n- then：注册一个后续处理函数，当Promise为resolved状态时运行该函数\n- catch：注册一个后续处理函数，当Promise为rejected状态时运行该函数\n- finally：[ES2018]注册一个后续处理函数（无参），当Promise为已决时运行该函数\n\n#### 构造函数成员 （静态成员）\n\n- resolve(数据)：该方法返回一个resolved状态的Promise，传递的数据作为状态数据\n  - 特殊情况：如果传递的数据是Promise，则直接返回传递的Promise对象\n  \n- reject(数据)：该方法返回一个rejected状态的Promise，传递的数据作为状态数据\n\n- all(iterable)：这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。\n\n- race(iterable)：当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象\n\n\n### async 和 await\n\nasync 和 await 是 ES2016 新增两个关键字，它们借鉴了 ES2015 中生成器在实际开发中的应用，目的是简化 Promise api 的使用，并非是替代 Promise。\n\n#### async\n\n目的是简化在函数的返回值中对Promise的创建\n\nasync 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 Promise 对象。\n\n```js\n\nasync function test(){\n    console.log(1);\n    return 2;\n}\n\n//等效于\n\nfunction test(){\n    return new Promise((resolve, reject)=>{\n        console.log(1);\n        resolve(2);\n    })\n}\n\n```\n\n#### await\n\n**await关键字必须出现在async函数中！！！！**\n\nawait用在某个表达式之前，如果表达式是一个Promise，则得到的是thenable中的状态数据。\n\n```js\n\nasync function test1(){\n    console.log(1);\n    return 2;\n}\n\nasync function test2(){\n    const result = await test1();\n    console.log(result);\n}\n\ntest2();\n```\n\n等效于\n\n```js\n\nfunction test1(){\n    return new Promise((resolve, reject)=>{\n        console.log(1);\n        resolve(2);\n    })\n}\n\nfunction test2(){\n    return new Promise((resolve, reject)=>{\n        test1().then(data => {\n            const result = data;\n            console.log(result);\n            resolve();\n        })\n    })\n}\n\ntest2();\n\n```\n\n如果await的表达式不是Promise，则会将其使用Promise.resolve包装后按照规则运行","slug":"解构_符号_异步处理","published":1,"updated":"2022-01-01T06:34:29.021Z","_id":"ckxu6dnj0001j10ax2gkkep3c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"解构-符号-异步处理\"><a href=\"#解构-符号-异步处理\" class=\"headerlink\" title=\"解构 符号 异步处理\"></a>解构 符号 异步处理</h1><hr>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><p>将数组或对象的某一属性提取到变量中(可以互相嵌套使用)<br>可以给结构出来的变量赋默认值（变量名 = 默认值）</p>\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><h4 id=\"解构剩余参数：\"><a href=\"#解构剩余参数：\" class=\"headerlink\" title=\"解构剩余参数：\"></a>解构剩余参数：</h4><p>将剩余的所有参数都敢放到一个数组或对象中（使用展开运算符）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [nn1, ...arr1] = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nn1, arr1)</span><br><span class=\"line\"><span class=\"comment\">// 将第一个结构出来，其他放到arr1 数组中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"同名解构（变量名要和属性名一致）\"><a href=\"#同名解构（变量名要和属性名一致）\" class=\"headerlink\" title=\"同名解构（变量名要和属性名一致）\"></a>同名解构（变量名要和属性名一致）</h4><h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><ul>\n<li>先定义再解构变量：（{变量名，…..} = 对象名）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">province</span>: <span class=\"string\">&#x27;河南&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">&#x27;驻马店&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name, age;</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age</span><br><span class=\"line\">&#125; = obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, age)</span><br></pre></td></tr></table></figure></li>\n<li>直接解构 ： let / const / var  {变量名} = 对象名<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对象解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">province</span>: <span class=\"string\">&#x27;河南&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">&#x27;驻马店&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    sex,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    address</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t, sex, age, address)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"异名解构\"><a href=\"#异名解构\" class=\"headerlink\" title=\"异名解构\"></a>异名解构</h4><p>{属性名：变量名}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将name解构成变量t</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: t</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套解构\"><a href=\"#嵌套解构\" class=\"headerlink\" title=\"嵌套解构\"></a>嵌套解构</h4><p>{属性名：{属性名}}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        city</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\"><span class=\"comment\">// 此时address为 undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(city)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><h4 id=\"模拟对象\"><a href=\"#模拟对象\" class=\"headerlink\" title=\"模拟对象\"></a>模拟对象</h4><p>数组可以看成特殊的对象，可以参考对象的异名解构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: n1,</span><br><span class=\"line\">    <span class=\"number\">1</span>: n2,</span><br><span class=\"line\">&#125; = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1, n2);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组自己的结构\"><a href=\"#数组自己的结构\" class=\"headerlink\" title=\"数组自己的结构\"></a>数组自己的结构</h4><p>[变量名，，，，，变量名],按顺序结构数组，不想结构的对象用空格空出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [n1, n2, , n4, ] = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1, n2, n4)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数解构\"><a href=\"#参数解构\" class=\"headerlink\" title=\"参数解构\"></a>参数解构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常用于函数参数的定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    method = <span class=\"string\">&quot;get&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    url = <span class=\"string\">&quot;/&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(method, url)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h2><p>对象的属性名一定是一个字符串</p>\n<h3 id=\"普通符号\"><a href=\"#普通符号\" class=\"headerlink\" title=\"普通符号\"></a>普通符号</h3><p>符号是ES6新增的一个数据类型，它通过使用函数 <code>Symbol(符号描述)</code> 来创建</p>\n<p>符号设计的初衷，是为了给对象设置私有属性</p>\n<p>私有属性：只能在对象内部使用，外面无法使用</p>\n<p>符号具有以下特点：</p>\n<ul>\n<li>没有字面量</li>\n<li>使用 typeof 得到的类型是 symbol</li>\n<li><strong>每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</strong></li>\n<li>符号可以作为对象的属性名存在，这种属性称之为符号属性<ul>\n<li>开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问</li>\n<li>符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</li>\n<li>Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性</li>\n<li>ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号</li>\n</ul>\n</li>\n<li>符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换</li>\n</ul>\n<h3 id=\"共享符号\"><a href=\"#共享符号\" class=\"headerlink\" title=\"共享符号\"></a>共享符号</h3><p>根据某个符号名称（符号描述）能够得到同一个符号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;符号名/符号描述&quot;</span>)  <span class=\"comment\">//获取共享符号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"知名符号\"><a href=\"#知名符号\" class=\"headerlink\" title=\"知名符号\"></a>知名符号</h3><p>知名符号是一些具有特殊含义的共享符号，通过 Symbol 的静态属性得到</p>\n<p>ES6 延续了 ES5 的思想：减少魔法，暴露内部实现！</p>\n<p>因此，ES6 用知名符号暴露了某些场景的内部实现</p>\n<ol>\n<li>Symbol.hasInstance</li>\n</ol>\n<p>该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"keyword\">instanceof</span> A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"></span><br><span class=\"line\">A[<span class=\"built_in\">Symbol</span>.hasInstance](obj) <span class=\"comment\">// Function.prototype[Symbol.hasInstance]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>[扩展] Symbol.isConcatSpreadable</li>\n</ol>\n<p>该知名符号会影响数组的 concat 方法</p>\n<ol start=\"3\">\n<li>[扩展] Symbol.toPrimitive</li>\n</ol>\n<p>该知名符号会影响类型转换的结果</p>\n<ol start=\"4\">\n<li>[扩展] Symbol.toStringTag</li>\n</ol>\n<p>该知名符号会影响 Object.prototype.toString 的返回值</p>\n<h2 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h2><h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>JS运行的环境称之为宿主环境。</p>\n<h4 id=\"执行栈：\"><a href=\"#执行栈：\" class=\"headerlink\" title=\"执行栈：\"></a>执行栈：</h4><p>  call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。</p>\n<p>JS引擎永远执行的是执行栈的最顶部。</p>\n<h4 id=\"异步函数：\"><a href=\"#异步函数：\" class=\"headerlink\" title=\"异步函数：\"></a>异步函数：</h4><p>某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。</p>\n<h4 id=\"浏览器宿主环境中包含5个线程：\"><a href=\"#浏览器宿主环境中包含5个线程：\" class=\"headerlink\" title=\"浏览器宿主环境中包含5个线程：\"></a>浏览器宿主环境中包含5个线程：</h4><ol>\n<li>JS引擎：负责执行执行栈的最顶部代码</li>\n<li>GUI线程：负责渲染页面 </li>\n<li>事件监听线程：负责监听各种事件</li>\n<li>计时线程：负责计时</li>\n<li>网络线程：负责网络通信</li>\n</ol>\n<p>当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。</p>\n<p>JS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</p>\n<p>事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：</p>\n<ul>\n<li>宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列</li>\n<li>微任务（队列）：MutationObserver，Promise产生的回调进入微队列</li>\n</ul>\n<h4 id=\"MutationObserver用于监听某个DOM对象的变化\"><a href=\"#MutationObserver用于监听某个DOM对象的变化\" class=\"headerlink\" title=\"MutationObserver用于监听某个DOM对象的变化\"></a>MutationObserver用于监听某个DOM对象的变化</h4><p>当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。</p>\n<p>###异步处理的通用模型</p>\n<p>ES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。</p>\n<p>值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。</p>\n<p>理解该 API，最重要的，是理解它的异步模型</p>\n<ol>\n<li>ES6 将某一件可能发生异步操作的事情，分为两个阶段：<strong>unsettled</strong> 和 <strong>settled</strong></li>\n</ol>\n<p><img src=\"./images/4.png\"></p>\n<ul>\n<li>unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事</li>\n<li>settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转</li>\n</ul>\n<p>事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。</p>\n<ol start=\"2\">\n<li>ES6将事情划分为三种状态： pending、resolved、rejected</li>\n</ol>\n<ul>\n<li>pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）</li>\n<li>resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果</li>\n<li>rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误</li>\n</ul>\n<p>既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！</p>\n<p>我们将 把事情变为resolved状态的过程叫做：<strong>resolve</strong>，推向该状态时，可能会传递一些数据</p>\n<p>我们将 把事情变为rejected状态的过程叫做：<strong>reject</strong>，推向该状态时，同样可能会传递一些数据，通常为错误信息</p>\n<p><strong>始终记住，无论是阶段，还是状态，是不可逆的！</strong></p>\n<p><img src=\"./images/3.png\"></p>\n<ol start=\"3\">\n<li>当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。</li>\n</ol>\n<ul>\n<li>resolved状态：这是一个正常的已决状态，后续处理表示为 thenable</li>\n<li>rejected状态：这是一个非正常的已决状态，后续处理表示为 catchable</li>\n</ul>\n<p>后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行</p>\n<p><img src=\"./images/2.png\"></p>\n<ol start=\"4\">\n<li>整件事称之为Promise</li>\n</ol>\n<p><img src=\"./images/1.png\"></p>\n<h3 id=\"Promise的基本用法\"><a href=\"#Promise的基本用法\" class=\"headerlink\" title=\"Promise的基本用法\"></a>Promise的基本用法</h3><h4 id=\"格式：\"><a href=\"#格式：\" class=\"headerlink\" title=\"格式：\"></a>格式：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 未决阶段的处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过调用resolve函数将Promise推向已决阶段的resolved状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过调用reject函数将Promise推向已决阶段的rejected状态</span></span><br><span class=\"line\">    <span class=\"comment\">// resolve和reject均可以传递最多一个参数，表示推向状态的数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pro.then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行</span></span><br><span class=\"line\">    <span class=\"comment\">//如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行</span></span><br><span class=\"line\">    <span class=\"comment\">//data为状态数据</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行</span></span><br><span class=\"line\">    <span class=\"comment\">//如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行</span></span><br><span class=\"line\">    <span class=\"comment\">//err为状态数据</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h4><ol>\n<li>未决阶段的处理函数是同步的，会立即执行</li>\n<li>thenable和catchable函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</li>\n<li>pro.then可以只添加thenable函数，pro.catch可以单独添加catchable函数</li>\n<li>在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向rejected，并会被catchable捕获</li>\n<li>一旦状态推向了已决阶段，无法再对状态做任何更改</li>\n<li><strong>Promise并没有消除回调，只是让回调变得可控</strong></li>\n</ol>\n<h3 id=\"Promise的串联\"><a href=\"#Promise的串联\" class=\"headerlink\" title=\"Promise的串联\"></a>Promise的串联</h3><p>当后续的Promise需要用到之前的Promise的处理结果时，需要Promise的串联</p>\n<h4 id=\"Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\"><a href=\"#Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\" class=\"headerlink\" title=\"Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\"></a>Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：</h4><ol>\n<li>如果当前的Promise是未决的，得到的新的Promise是挂起状态</li>\n<li>如果当前的Promise是已决的，会运行相应的后续处理函数，并将后续处理函数的结果（返回值）作为resolved状态数据，应用到新的Promise中；如果后续处理函数发生错误，则把返回值作为rejected状态数据，应用到新的Promise中。</li>\n</ol>\n<p><strong>后续的Promise一定会等到前面的Promise有了后续处理结果后，才会变成已决状态</strong></p>\n<p>如果前面的Promise的后续处理，返回的是一个Promise，则返回的新的Promise状态和后续处理返回的Promise状态保持一致。</p>\n<h3 id=\"Promise的其他api\"><a href=\"#Promise的其他api\" class=\"headerlink\" title=\"Promise的其他api\"></a>Promise的其他api</h3><h4 id=\"原型成员-实例成员\"><a href=\"#原型成员-实例成员\" class=\"headerlink\" title=\"原型成员 (实例成员)\"></a>原型成员 (实例成员)</h4><ul>\n<li>then：注册一个后续处理函数，当Promise为resolved状态时运行该函数</li>\n<li>catch：注册一个后续处理函数，当Promise为rejected状态时运行该函数</li>\n<li>finally：[ES2018]注册一个后续处理函数（无参），当Promise为已决时运行该函数</li>\n</ul>\n<h4 id=\"构造函数成员-（静态成员）\"><a href=\"#构造函数成员-（静态成员）\" class=\"headerlink\" title=\"构造函数成员 （静态成员）\"></a>构造函数成员 （静态成员）</h4><ul>\n<li><p>resolve(数据)：该方法返回一个resolved状态的Promise，传递的数据作为状态数据</p>\n<ul>\n<li>特殊情况：如果传递的数据是Promise，则直接返回传递的Promise对象</li>\n</ul>\n</li>\n<li><p>reject(数据)：该方法返回一个rejected状态的Promise，传递的数据作为状态数据</p>\n</li>\n<li><p>all(iterable)：这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</p>\n</li>\n<li><p>race(iterable)：当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象</p>\n</li>\n</ul>\n<h3 id=\"async-和-await\"><a href=\"#async-和-await\" class=\"headerlink\" title=\"async 和 await\"></a>async 和 await</h3><p>async 和 await 是 ES2016 新增两个关键字，它们借鉴了 ES2015 中生成器在实际开发中的应用，目的是简化 Promise api 的使用，并非是替代 Promise。</p>\n<h4 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h4><p>目的是简化在函数的返回值中对Promise的创建</p>\n<p>async 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 Promise 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h4><p><strong>await关键字必须出现在async函数中！！！！</strong></p>\n<p>await用在某个表达式之前，如果表达式是一个Promise，则得到的是thenable中的状态数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> test1();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test2();</span><br></pre></td></tr></table></figure>\n\n<p>等效于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        test1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = data;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test2();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果await的表达式不是Promise，则会将其使用Promise.resolve包装后按照规则运行</p>\n","site":{"data":{}},"length":6487,"excerpt":"","more":"<h1 id=\"解构-符号-异步处理\"><a href=\"#解构-符号-异步处理\" class=\"headerlink\" title=\"解构 符号 异步处理\"></a>解构 符号 异步处理</h1><hr>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><p>将数组或对象的某一属性提取到变量中(可以互相嵌套使用)<br>可以给结构出来的变量赋默认值（变量名 = 默认值）</p>\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><h4 id=\"解构剩余参数：\"><a href=\"#解构剩余参数：\" class=\"headerlink\" title=\"解构剩余参数：\"></a>解构剩余参数：</h4><p>将剩余的所有参数都敢放到一个数组或对象中（使用展开运算符）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [nn1, ...arr1] = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nn1, arr1)</span><br><span class=\"line\"><span class=\"comment\">// 将第一个结构出来，其他放到arr1 数组中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"同名解构（变量名要和属性名一致）\"><a href=\"#同名解构（变量名要和属性名一致）\" class=\"headerlink\" title=\"同名解构（变量名要和属性名一致）\"></a>同名解构（变量名要和属性名一致）</h4><h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><ul>\n<li>先定义再解构变量：（{变量名，…..} = 对象名）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">province</span>: <span class=\"string\">&#x27;河南&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">&#x27;驻马店&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name, age;</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age</span><br><span class=\"line\">&#125; = obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, age)</span><br></pre></td></tr></table></figure></li>\n<li>直接解构 ： let / const / var  {变量名} = 对象名<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对象解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xyq&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">province</span>: <span class=\"string\">&#x27;河南&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">&#x27;驻马店&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    sex,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    address</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t, sex, age, address)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"异名解构\"><a href=\"#异名解构\" class=\"headerlink\" title=\"异名解构\"></a>异名解构</h4><p>{属性名：变量名}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将name解构成变量t</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: t</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套解构\"><a href=\"#嵌套解构\" class=\"headerlink\" title=\"嵌套解构\"></a>嵌套解构</h4><p>{属性名：{属性名}}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        city</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\"><span class=\"comment\">// 此时address为 undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(city)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><h4 id=\"模拟对象\"><a href=\"#模拟对象\" class=\"headerlink\" title=\"模拟对象\"></a>模拟对象</h4><p>数组可以看成特殊的对象，可以参考对象的异名解构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: n1,</span><br><span class=\"line\">    <span class=\"number\">1</span>: n2,</span><br><span class=\"line\">&#125; = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1, n2);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组自己的结构\"><a href=\"#数组自己的结构\" class=\"headerlink\" title=\"数组自己的结构\"></a>数组自己的结构</h4><p>[变量名，，，，，变量名],按顺序结构数组，不想结构的对象用空格空出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [n1, n2, , n4, ] = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1, n2, n4)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数解构\"><a href=\"#参数解构\" class=\"headerlink\" title=\"参数解构\"></a>参数解构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常用于函数参数的定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    method = <span class=\"string\">&quot;get&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    url = <span class=\"string\">&quot;/&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(method, url)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h2><p>对象的属性名一定是一个字符串</p>\n<h3 id=\"普通符号\"><a href=\"#普通符号\" class=\"headerlink\" title=\"普通符号\"></a>普通符号</h3><p>符号是ES6新增的一个数据类型，它通过使用函数 <code>Symbol(符号描述)</code> 来创建</p>\n<p>符号设计的初衷，是为了给对象设置私有属性</p>\n<p>私有属性：只能在对象内部使用，外面无法使用</p>\n<p>符号具有以下特点：</p>\n<ul>\n<li>没有字面量</li>\n<li>使用 typeof 得到的类型是 symbol</li>\n<li><strong>每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</strong></li>\n<li>符号可以作为对象的属性名存在，这种属性称之为符号属性<ul>\n<li>开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问</li>\n<li>符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</li>\n<li>Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性</li>\n<li>ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号</li>\n</ul>\n</li>\n<li>符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换</li>\n</ul>\n<h3 id=\"共享符号\"><a href=\"#共享符号\" class=\"headerlink\" title=\"共享符号\"></a>共享符号</h3><p>根据某个符号名称（符号描述）能够得到同一个符号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;符号名/符号描述&quot;</span>)  <span class=\"comment\">//获取共享符号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"知名符号\"><a href=\"#知名符号\" class=\"headerlink\" title=\"知名符号\"></a>知名符号</h3><p>知名符号是一些具有特殊含义的共享符号，通过 Symbol 的静态属性得到</p>\n<p>ES6 延续了 ES5 的思想：减少魔法，暴露内部实现！</p>\n<p>因此，ES6 用知名符号暴露了某些场景的内部实现</p>\n<ol>\n<li>Symbol.hasInstance</li>\n</ol>\n<p>该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"keyword\">instanceof</span> A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"></span><br><span class=\"line\">A[<span class=\"built_in\">Symbol</span>.hasInstance](obj) <span class=\"comment\">// Function.prototype[Symbol.hasInstance]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>[扩展] Symbol.isConcatSpreadable</li>\n</ol>\n<p>该知名符号会影响数组的 concat 方法</p>\n<ol start=\"3\">\n<li>[扩展] Symbol.toPrimitive</li>\n</ol>\n<p>该知名符号会影响类型转换的结果</p>\n<ol start=\"4\">\n<li>[扩展] Symbol.toStringTag</li>\n</ol>\n<p>该知名符号会影响 Object.prototype.toString 的返回值</p>\n<h2 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h2><h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>JS运行的环境称之为宿主环境。</p>\n<h4 id=\"执行栈：\"><a href=\"#执行栈：\" class=\"headerlink\" title=\"执行栈：\"></a>执行栈：</h4><p>  call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。</p>\n<p>JS引擎永远执行的是执行栈的最顶部。</p>\n<h4 id=\"异步函数：\"><a href=\"#异步函数：\" class=\"headerlink\" title=\"异步函数：\"></a>异步函数：</h4><p>某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。</p>\n<h4 id=\"浏览器宿主环境中包含5个线程：\"><a href=\"#浏览器宿主环境中包含5个线程：\" class=\"headerlink\" title=\"浏览器宿主环境中包含5个线程：\"></a>浏览器宿主环境中包含5个线程：</h4><ol>\n<li>JS引擎：负责执行执行栈的最顶部代码</li>\n<li>GUI线程：负责渲染页面 </li>\n<li>事件监听线程：负责监听各种事件</li>\n<li>计时线程：负责计时</li>\n<li>网络线程：负责网络通信</li>\n</ol>\n<p>当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。</p>\n<p>JS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</p>\n<p>事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：</p>\n<ul>\n<li>宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列</li>\n<li>微任务（队列）：MutationObserver，Promise产生的回调进入微队列</li>\n</ul>\n<h4 id=\"MutationObserver用于监听某个DOM对象的变化\"><a href=\"#MutationObserver用于监听某个DOM对象的变化\" class=\"headerlink\" title=\"MutationObserver用于监听某个DOM对象的变化\"></a>MutationObserver用于监听某个DOM对象的变化</h4><p>当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。</p>\n<p>###异步处理的通用模型</p>\n<p>ES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。</p>\n<p>值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。</p>\n<p>理解该 API，最重要的，是理解它的异步模型</p>\n<ol>\n<li>ES6 将某一件可能发生异步操作的事情，分为两个阶段：<strong>unsettled</strong> 和 <strong>settled</strong></li>\n</ol>\n<p><img src=\"./images/4.png\"></p>\n<ul>\n<li>unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事</li>\n<li>settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转</li>\n</ul>\n<p>事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。</p>\n<ol start=\"2\">\n<li>ES6将事情划分为三种状态： pending、resolved、rejected</li>\n</ol>\n<ul>\n<li>pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）</li>\n<li>resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果</li>\n<li>rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误</li>\n</ul>\n<p>既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！</p>\n<p>我们将 把事情变为resolved状态的过程叫做：<strong>resolve</strong>，推向该状态时，可能会传递一些数据</p>\n<p>我们将 把事情变为rejected状态的过程叫做：<strong>reject</strong>，推向该状态时，同样可能会传递一些数据，通常为错误信息</p>\n<p><strong>始终记住，无论是阶段，还是状态，是不可逆的！</strong></p>\n<p><img src=\"./images/3.png\"></p>\n<ol start=\"3\">\n<li>当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。</li>\n</ol>\n<ul>\n<li>resolved状态：这是一个正常的已决状态，后续处理表示为 thenable</li>\n<li>rejected状态：这是一个非正常的已决状态，后续处理表示为 catchable</li>\n</ul>\n<p>后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行</p>\n<p><img src=\"./images/2.png\"></p>\n<ol start=\"4\">\n<li>整件事称之为Promise</li>\n</ol>\n<p><img src=\"./images/1.png\"></p>\n<h3 id=\"Promise的基本用法\"><a href=\"#Promise的基本用法\" class=\"headerlink\" title=\"Promise的基本用法\"></a>Promise的基本用法</h3><h4 id=\"格式：\"><a href=\"#格式：\" class=\"headerlink\" title=\"格式：\"></a>格式：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 未决阶段的处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过调用resolve函数将Promise推向已决阶段的resolved状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过调用reject函数将Promise推向已决阶段的rejected状态</span></span><br><span class=\"line\">    <span class=\"comment\">// resolve和reject均可以传递最多一个参数，表示推向状态的数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pro.then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行</span></span><br><span class=\"line\">    <span class=\"comment\">//如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行</span></span><br><span class=\"line\">    <span class=\"comment\">//data为状态数据</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行</span></span><br><span class=\"line\">    <span class=\"comment\">//如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行</span></span><br><span class=\"line\">    <span class=\"comment\">//err为状态数据</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h4><ol>\n<li>未决阶段的处理函数是同步的，会立即执行</li>\n<li>thenable和catchable函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</li>\n<li>pro.then可以只添加thenable函数，pro.catch可以单独添加catchable函数</li>\n<li>在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向rejected，并会被catchable捕获</li>\n<li>一旦状态推向了已决阶段，无法再对状态做任何更改</li>\n<li><strong>Promise并没有消除回调，只是让回调变得可控</strong></li>\n</ol>\n<h3 id=\"Promise的串联\"><a href=\"#Promise的串联\" class=\"headerlink\" title=\"Promise的串联\"></a>Promise的串联</h3><p>当后续的Promise需要用到之前的Promise的处理结果时，需要Promise的串联</p>\n<h4 id=\"Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\"><a href=\"#Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\" class=\"headerlink\" title=\"Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：\"></a>Promise对象中，无论是then方法还是catch方法，它们都具有返回值，返回的是一个全新的Promise对象，它的状态满足下面的规则：</h4><ol>\n<li>如果当前的Promise是未决的，得到的新的Promise是挂起状态</li>\n<li>如果当前的Promise是已决的，会运行相应的后续处理函数，并将后续处理函数的结果（返回值）作为resolved状态数据，应用到新的Promise中；如果后续处理函数发生错误，则把返回值作为rejected状态数据，应用到新的Promise中。</li>\n</ol>\n<p><strong>后续的Promise一定会等到前面的Promise有了后续处理结果后，才会变成已决状态</strong></p>\n<p>如果前面的Promise的后续处理，返回的是一个Promise，则返回的新的Promise状态和后续处理返回的Promise状态保持一致。</p>\n<h3 id=\"Promise的其他api\"><a href=\"#Promise的其他api\" class=\"headerlink\" title=\"Promise的其他api\"></a>Promise的其他api</h3><h4 id=\"原型成员-实例成员\"><a href=\"#原型成员-实例成员\" class=\"headerlink\" title=\"原型成员 (实例成员)\"></a>原型成员 (实例成员)</h4><ul>\n<li>then：注册一个后续处理函数，当Promise为resolved状态时运行该函数</li>\n<li>catch：注册一个后续处理函数，当Promise为rejected状态时运行该函数</li>\n<li>finally：[ES2018]注册一个后续处理函数（无参），当Promise为已决时运行该函数</li>\n</ul>\n<h4 id=\"构造函数成员-（静态成员）\"><a href=\"#构造函数成员-（静态成员）\" class=\"headerlink\" title=\"构造函数成员 （静态成员）\"></a>构造函数成员 （静态成员）</h4><ul>\n<li><p>resolve(数据)：该方法返回一个resolved状态的Promise，传递的数据作为状态数据</p>\n<ul>\n<li>特殊情况：如果传递的数据是Promise，则直接返回传递的Promise对象</li>\n</ul>\n</li>\n<li><p>reject(数据)：该方法返回一个rejected状态的Promise，传递的数据作为状态数据</p>\n</li>\n<li><p>all(iterable)：这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</p>\n</li>\n<li><p>race(iterable)：当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象</p>\n</li>\n</ul>\n<h3 id=\"async-和-await\"><a href=\"#async-和-await\" class=\"headerlink\" title=\"async 和 await\"></a>async 和 await</h3><p>async 和 await 是 ES2016 新增两个关键字，它们借鉴了 ES2015 中生成器在实际开发中的应用，目的是简化 Promise api 的使用，并非是替代 Promise。</p>\n<h4 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h4><p>目的是简化在函数的返回值中对Promise的创建</p>\n<p>async 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 Promise 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h4><p><strong>await关键字必须出现在async函数中！！！！</strong></p>\n<p>await用在某个表达式之前，如果表达式是一个Promise，则得到的是thenable中的状态数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> test1();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test2();</span><br></pre></td></tr></table></figure>\n\n<p>等效于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        test1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = data;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test2();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果await的表达式不是Promise，则会将其使用Promise.resolve包装后按照规则运行</p>\n"},{"title":"网络的基本知识","date":"2021-12-31T08:21:22.000Z","description":"网络的基本知识","_content":"\n\n# 网络\n------------------------------------------------\n\nWWW(World Wide Web)\n\n冯诺依曼计算机：  \n运算器，存储器，控制器，输入设备，输出设备\n\nIP地址：网络ID + 主机ID\n\n域名经过DNS解析 为IP地址\n\n127.0.0.1 访问本机\n0.0.0.0  不知道IP地址，访问本机\n\n五层网络模型：\n应用层，运输层，网络层，数据链路层，物理层\n\n发送文件，大量数据要用POST\nGET请求： GET /path?.. = ..&..=.. HTTP1.1 ,        请求的参数都在URL里 ，\n\nPOST请求：\n\n请求：Request：\n- 请求头\n- 数据体\n- 请求方式url版本协议\n\n响应：Response：\n- 响应头\n- 数据体\n- 协议版本   状态码 message\n\n\n### Get和Post请求方式的区别：\n1. 是基于什么前提的？如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议：\nGET和POST几乎没有什么区别，只有名字不一样。\n2. 如果是基于RFC规范的：\n    - 理论上：get和post具有相同语法，但是有不同的语义。get是用来获取数据的，post是用来发送数据的，其它方面没有区别。\n    - 实现上：各种浏览器，就是这个规范的实现者。常见的那些不同：get的数据在URL是可见的，post请求是不显示在URL中的。get请求是有长度限制的，post长度的无限的。get请求的数据可以收藏为书签，post请求到的不可以收藏为书签。get请求后，按后退按钮、刷新按钮无影响，post数据会被重新提交。get编码类型：application/x-www-form-url,post的编码类型有很多：encodeapplication/x-www-form-urlencoded    multipart/form-data。get的历史参数会被保留在浏览器里，post的不会保存在浏览器中。get值允许ASCII，post没有编码限制，允许发二进制。get与post相比get的安全性较差，因为所发的数据是URL的一部分。\n\n### Cookie与Session\n\n1. 如果我们⽤JS的变量来存数据，那么在⻚⾯关闭的时候，数据就消失了。\n\n2. 保持登录状态是怎么做到的呢？\n\n    按照正常的HTTP协议来说，是做不到的。\n因为HTTP协议，上下⽂⽆关协议。\n\n3. 所以说前端⻚⾯上，有可以持久化存储数据的东⻄。⼀旦登录成功，我就记载在这个⾥⾯。\n\n\nCookie是有限制的。\n\nCookie是存在浏览器⾥的，不是存在某个⻚⾯上的。是可以⻓期存储的。Cookie即使是保存在浏览器⾥，也是存放在不同的域名下的。\n\n1. 初始状态：没有登录\n\n2. 访问百度的登录，输⼊⽤户名，密码。\n\n3. 如果⽤户名和密码是正确的。百度的后端会向这个域名下，设置⼀个Cookie。写⼊⽤户的基本信息（加密的）。\n\n4. 以后每⼀次向百度发送请求，浏览器都会⾃动带上这些Cookie。\n\n5. 服务端（后端）看到了带有ID的cookie，就可以解析这个加密的ID，来获取到这个⽤户本身的ID。\n\n6. 如果能获取到本身的ID，那么就证明这个⽤户已经登录过了。所以后端可以继续保留⽤户的信息。\n\n\n\n**缺点**：如果某个坏⼈，复制了我浏览器⾥的cookie，他就可以在他的电脑上登录我的账号了。\n\nXSS注⼊攻击。浏览器 \n\n\n#### 数据存在Session上也有缺点：\n\n如果⽤户量⾮常⼤，上亿的⽤户。\n\n在⽤户量很⼤的时候，服务器端很耗资源的。\n\n因为后端可能不⽌⼀台服务器，⽤户的登录信息，⼀般只存在⼀台服务器上。\n\n因为⽤户的登录操作，在哪台机器上执⾏的，就⼀般存在哪台机器上。\n\n需要通过反向代理。（轮询，IP哈希。）\n\n### B/S结构    C/S结构\n\nClient/Server——Client只负责内容的展示，Server负责提供内容。\n\nBrowser/Server——Browser只负责内容的展示，Server负责提供内容。\n\n\n\n\n⻚⾯的本质是什么？  \n⻚⾯的本质就是⼀个字符串。带有HTML格式的字符串。\n\n浏览器 向服务器 请求⼀个⻚⾯的本质是什么？\n\n（1）www.baidu.com\n\n（2）服务器接收到这个请求后，服务器想要把这个⻚⾯的内容（HTML格式的字符串）返回\n\n给浏览器。\n\n（3）⻚⾯的字符串存在哪⾥呢？存在HTML⽂件⾥。例如：index.html \n\n（4）服务器端要读取⽂件。\n\n（5）将读取出来的内容返回给浏览器。\n\n最后返回的是⼀个字符串，这个字符串的来源可能是⽂件，可能是缓存，可能来⾃于数据库。\n\n服务器：严格的说，服务器是⼀台计算机，这台计算机，只提供服务。（不是⽤户⽤的）\n\n但是，我们常说的这个服务器，指的是服务容器，不是服务器。\n\n服务容器：是⼀个程序。程序可以监听⼀个端⼝。读取⽂件，并且返回。\n\n如果我们想通过访问服务器（服务容器）的⽅式，来访问我们⾃⼰写的⻚⾯。\n\n我们就得装⼀个服务容器的程序。\n\n向后端发出请求：\n1. 在浏览器中直接输入网址（无法用代码控制）\n2. location.href = url; 可以发出网络请求，但是页面会发生跳转。（页面跳转）\n3. 带有src属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）\n4. 带有href属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）\n5. 带有action属性的标签，例如form表单，也可以向后端发出请求。但是form表单发出请求之后，也会页面跳转。（页面会跳转）\n6. ajax请求\n\n**要素；请求方式，url**\n\n\n### 跨域访问资源\n\n哪些东⻄属于资源？\n\njs⽂件算吗？js⽂件肯定是算资源的，但是js⽂件是允许被跨域请求的。\n\ncss⽂件，jpg,png等。src属性的资源都是可以被跨域请求的。href资源⼤部分都是可以被跨域请求的。\n\n##### 哪些资源算跨域请求的资源？\n\n1. 后端接⼝的数据。\n\n2. 其它域的cookie \n\n3. 其它域的缓存\n\n\n##### 什么是其它的域？怎么样算跨域？\n\n⻚⾯本身：有协议（http/https）,域名，端⼝\n\n要请求的数据：http://www.baidu.com:80\n\n协议，域名，端⼝这三个，有任意⼀个不⼀样就算跨域。\n\n跨域这个⾏为，发⽣在哪⾥？\n\n答案：\n\n1. 即使跨域了（协议，域名，端⼝号有不⼀样的），请求也可以发出。\n\n2. 服务器端也是可以接收的。\n\n3. 服务器端也是可以正常处理的。\n\n4. 服务器端也是可以正常返回数据。\n\n5. 浏览器也能接收到这些数据。\n\n6. 接收到之后，发现当前⻚⾯的域和请求的域不同，所以判定为跨域。\n\n7. 我们的代码在这等着结果呢，但是因为浏览器判定跨域了，不会把结果传递给我们的代码。\n\n\n虽然跨域了，但是我们依然需要这个数据，怎么办？\n\n解决跨域问题：\n\n1. 后端（别⼈家的）配合我们进⾏跨域。\n\n pan.baidu.com ——> zhidao.baidu.com\n\n    1）JSONP（正常的情况，返回的数据都是JSON格式。JSONP是⼀种特殊的格式。）\n    2）后端设置Access-Control-Allow-Origin属性以⽀持跨域。（聊天机器⼈课讲，因为需要nodejs）\n\n2. 后端不配合我们进⾏跨域。\n\n    3）iframe（只能显示，不能控制）\n\n    4）通过后端代理（⾃⼰的后端）（后⾯聊天机器⼈讲，因为需要nodejs）\n\n\nreadyState ：\n状态4代表请求完成，已经接收到数据\n\njsonp跨域，只能使用get方法，如果我们设置的是post方法，jQuery会自动转为get方法\n\njQuery会先判断是否同源，如果同源，那么设置的是get就是get，设置的是post就是post\n不是同源的话，就都改为get(跨域)\n\nscript标签，虽然可以引用其他域的资源，浏览器不限制，但是，浏览器会将返回的内容当做js代码执行。\n\njsonp原理：\n前端：\n1. 判断请求与当前页面的域是是否同源，如果同源则发送Ajax，没有跨域\n2. 如果不同源，生成一个script标签\n3. 生成一个随机的callback名字\n4. 设置script标签的src设置为要请求的接口\n5. 将callback作为参数拼接在后面\n    后端：\n6. 后端接收到请求后，开始准备要返回的数据\n7. 后端拼接数据，将要返回的数据用callback的值和括号包裹起来。\n8. 将内容返回\n\n9. 浏览器接收到内容，会当做js代码来执行\n10. 从而执行方法，这样我们就接收到了后端返回给我们的对象。","source":"_posts/网络的使用.md","raw":"---\ntitle: 网络的基本知识\ndate: 2021-12-31 16:21:22\ndescription: 网络的基本知识\ncategories: \n    - 前端学习笔记\n    - 网络\n\ntags: \n  - 网络\n  - 前端\n---\n\n\n# 网络\n------------------------------------------------\n\nWWW(World Wide Web)\n\n冯诺依曼计算机：  \n运算器，存储器，控制器，输入设备，输出设备\n\nIP地址：网络ID + 主机ID\n\n域名经过DNS解析 为IP地址\n\n127.0.0.1 访问本机\n0.0.0.0  不知道IP地址，访问本机\n\n五层网络模型：\n应用层，运输层，网络层，数据链路层，物理层\n\n发送文件，大量数据要用POST\nGET请求： GET /path?.. = ..&..=.. HTTP1.1 ,        请求的参数都在URL里 ，\n\nPOST请求：\n\n请求：Request：\n- 请求头\n- 数据体\n- 请求方式url版本协议\n\n响应：Response：\n- 响应头\n- 数据体\n- 协议版本   状态码 message\n\n\n### Get和Post请求方式的区别：\n1. 是基于什么前提的？如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议：\nGET和POST几乎没有什么区别，只有名字不一样。\n2. 如果是基于RFC规范的：\n    - 理论上：get和post具有相同语法，但是有不同的语义。get是用来获取数据的，post是用来发送数据的，其它方面没有区别。\n    - 实现上：各种浏览器，就是这个规范的实现者。常见的那些不同：get的数据在URL是可见的，post请求是不显示在URL中的。get请求是有长度限制的，post长度的无限的。get请求的数据可以收藏为书签，post请求到的不可以收藏为书签。get请求后，按后退按钮、刷新按钮无影响，post数据会被重新提交。get编码类型：application/x-www-form-url,post的编码类型有很多：encodeapplication/x-www-form-urlencoded    multipart/form-data。get的历史参数会被保留在浏览器里，post的不会保存在浏览器中。get值允许ASCII，post没有编码限制，允许发二进制。get与post相比get的安全性较差，因为所发的数据是URL的一部分。\n\n### Cookie与Session\n\n1. 如果我们⽤JS的变量来存数据，那么在⻚⾯关闭的时候，数据就消失了。\n\n2. 保持登录状态是怎么做到的呢？\n\n    按照正常的HTTP协议来说，是做不到的。\n因为HTTP协议，上下⽂⽆关协议。\n\n3. 所以说前端⻚⾯上，有可以持久化存储数据的东⻄。⼀旦登录成功，我就记载在这个⾥⾯。\n\n\nCookie是有限制的。\n\nCookie是存在浏览器⾥的，不是存在某个⻚⾯上的。是可以⻓期存储的。Cookie即使是保存在浏览器⾥，也是存放在不同的域名下的。\n\n1. 初始状态：没有登录\n\n2. 访问百度的登录，输⼊⽤户名，密码。\n\n3. 如果⽤户名和密码是正确的。百度的后端会向这个域名下，设置⼀个Cookie。写⼊⽤户的基本信息（加密的）。\n\n4. 以后每⼀次向百度发送请求，浏览器都会⾃动带上这些Cookie。\n\n5. 服务端（后端）看到了带有ID的cookie，就可以解析这个加密的ID，来获取到这个⽤户本身的ID。\n\n6. 如果能获取到本身的ID，那么就证明这个⽤户已经登录过了。所以后端可以继续保留⽤户的信息。\n\n\n\n**缺点**：如果某个坏⼈，复制了我浏览器⾥的cookie，他就可以在他的电脑上登录我的账号了。\n\nXSS注⼊攻击。浏览器 \n\n\n#### 数据存在Session上也有缺点：\n\n如果⽤户量⾮常⼤，上亿的⽤户。\n\n在⽤户量很⼤的时候，服务器端很耗资源的。\n\n因为后端可能不⽌⼀台服务器，⽤户的登录信息，⼀般只存在⼀台服务器上。\n\n因为⽤户的登录操作，在哪台机器上执⾏的，就⼀般存在哪台机器上。\n\n需要通过反向代理。（轮询，IP哈希。）\n\n### B/S结构    C/S结构\n\nClient/Server——Client只负责内容的展示，Server负责提供内容。\n\nBrowser/Server——Browser只负责内容的展示，Server负责提供内容。\n\n\n\n\n⻚⾯的本质是什么？  \n⻚⾯的本质就是⼀个字符串。带有HTML格式的字符串。\n\n浏览器 向服务器 请求⼀个⻚⾯的本质是什么？\n\n（1）www.baidu.com\n\n（2）服务器接收到这个请求后，服务器想要把这个⻚⾯的内容（HTML格式的字符串）返回\n\n给浏览器。\n\n（3）⻚⾯的字符串存在哪⾥呢？存在HTML⽂件⾥。例如：index.html \n\n（4）服务器端要读取⽂件。\n\n（5）将读取出来的内容返回给浏览器。\n\n最后返回的是⼀个字符串，这个字符串的来源可能是⽂件，可能是缓存，可能来⾃于数据库。\n\n服务器：严格的说，服务器是⼀台计算机，这台计算机，只提供服务。（不是⽤户⽤的）\n\n但是，我们常说的这个服务器，指的是服务容器，不是服务器。\n\n服务容器：是⼀个程序。程序可以监听⼀个端⼝。读取⽂件，并且返回。\n\n如果我们想通过访问服务器（服务容器）的⽅式，来访问我们⾃⼰写的⻚⾯。\n\n我们就得装⼀个服务容器的程序。\n\n向后端发出请求：\n1. 在浏览器中直接输入网址（无法用代码控制）\n2. location.href = url; 可以发出网络请求，但是页面会发生跳转。（页面跳转）\n3. 带有src属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）\n4. 带有href属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）\n5. 带有action属性的标签，例如form表单，也可以向后端发出请求。但是form表单发出请求之后，也会页面跳转。（页面会跳转）\n6. ajax请求\n\n**要素；请求方式，url**\n\n\n### 跨域访问资源\n\n哪些东⻄属于资源？\n\njs⽂件算吗？js⽂件肯定是算资源的，但是js⽂件是允许被跨域请求的。\n\ncss⽂件，jpg,png等。src属性的资源都是可以被跨域请求的。href资源⼤部分都是可以被跨域请求的。\n\n##### 哪些资源算跨域请求的资源？\n\n1. 后端接⼝的数据。\n\n2. 其它域的cookie \n\n3. 其它域的缓存\n\n\n##### 什么是其它的域？怎么样算跨域？\n\n⻚⾯本身：有协议（http/https）,域名，端⼝\n\n要请求的数据：http://www.baidu.com:80\n\n协议，域名，端⼝这三个，有任意⼀个不⼀样就算跨域。\n\n跨域这个⾏为，发⽣在哪⾥？\n\n答案：\n\n1. 即使跨域了（协议，域名，端⼝号有不⼀样的），请求也可以发出。\n\n2. 服务器端也是可以接收的。\n\n3. 服务器端也是可以正常处理的。\n\n4. 服务器端也是可以正常返回数据。\n\n5. 浏览器也能接收到这些数据。\n\n6. 接收到之后，发现当前⻚⾯的域和请求的域不同，所以判定为跨域。\n\n7. 我们的代码在这等着结果呢，但是因为浏览器判定跨域了，不会把结果传递给我们的代码。\n\n\n虽然跨域了，但是我们依然需要这个数据，怎么办？\n\n解决跨域问题：\n\n1. 后端（别⼈家的）配合我们进⾏跨域。\n\n pan.baidu.com ——> zhidao.baidu.com\n\n    1）JSONP（正常的情况，返回的数据都是JSON格式。JSONP是⼀种特殊的格式。）\n    2）后端设置Access-Control-Allow-Origin属性以⽀持跨域。（聊天机器⼈课讲，因为需要nodejs）\n\n2. 后端不配合我们进⾏跨域。\n\n    3）iframe（只能显示，不能控制）\n\n    4）通过后端代理（⾃⼰的后端）（后⾯聊天机器⼈讲，因为需要nodejs）\n\n\nreadyState ：\n状态4代表请求完成，已经接收到数据\n\njsonp跨域，只能使用get方法，如果我们设置的是post方法，jQuery会自动转为get方法\n\njQuery会先判断是否同源，如果同源，那么设置的是get就是get，设置的是post就是post\n不是同源的话，就都改为get(跨域)\n\nscript标签，虽然可以引用其他域的资源，浏览器不限制，但是，浏览器会将返回的内容当做js代码执行。\n\njsonp原理：\n前端：\n1. 判断请求与当前页面的域是是否同源，如果同源则发送Ajax，没有跨域\n2. 如果不同源，生成一个script标签\n3. 生成一个随机的callback名字\n4. 设置script标签的src设置为要请求的接口\n5. 将callback作为参数拼接在后面\n    后端：\n6. 后端接收到请求后，开始准备要返回的数据\n7. 后端拼接数据，将要返回的数据用callback的值和括号包裹起来。\n8. 将内容返回\n\n9. 浏览器接收到内容，会当做js代码来执行\n10. 从而执行方法，这样我们就接收到了后端返回给我们的对象。","slug":"网络的使用","published":1,"updated":"2022-01-01T06:34:04.959Z","_id":"ckxu6dnj2001n10ax8gokdeur","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><hr>\n<p>WWW(World Wide Web)</p>\n<p>冯诺依曼计算机：<br>运算器，存储器，控制器，输入设备，输出设备</p>\n<p>IP地址：网络ID + 主机ID</p>\n<p>域名经过DNS解析 为IP地址</p>\n<p>127.0.0.1 访问本机<br>0.0.0.0  不知道IP地址，访问本机</p>\n<p>五层网络模型：<br>应用层，运输层，网络层，数据链路层，物理层</p>\n<p>发送文件，大量数据要用POST<br>GET请求： GET /path?.. = ..&amp;..=.. HTTP1.1 ,        请求的参数都在URL里 ，</p>\n<p>POST请求：</p>\n<p>请求：Request：</p>\n<ul>\n<li>请求头</li>\n<li>数据体</li>\n<li>请求方式url版本协议</li>\n</ul>\n<p>响应：Response：</p>\n<ul>\n<li>响应头</li>\n<li>数据体</li>\n<li>协议版本   状态码 message</li>\n</ul>\n<h3 id=\"Get和Post请求方式的区别：\"><a href=\"#Get和Post请求方式的区别：\" class=\"headerlink\" title=\"Get和Post请求方式的区别：\"></a>Get和Post请求方式的区别：</h3><ol>\n<li>是基于什么前提的？如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议：<br>GET和POST几乎没有什么区别，只有名字不一样。</li>\n<li>如果是基于RFC规范的：<ul>\n<li>理论上：get和post具有相同语法，但是有不同的语义。get是用来获取数据的，post是用来发送数据的，其它方面没有区别。</li>\n<li>实现上：各种浏览器，就是这个规范的实现者。常见的那些不同：get的数据在URL是可见的，post请求是不显示在URL中的。get请求是有长度限制的，post长度的无限的。get请求的数据可以收藏为书签，post请求到的不可以收藏为书签。get请求后，按后退按钮、刷新按钮无影响，post数据会被重新提交。get编码类型：application/x-www-form-url,post的编码类型有很多：encodeapplication/x-www-form-urlencoded    multipart/form-data。get的历史参数会被保留在浏览器里，post的不会保存在浏览器中。get值允许ASCII，post没有编码限制，允许发二进制。get与post相比get的安全性较差，因为所发的数据是URL的一部分。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Cookie与Session\"><a href=\"#Cookie与Session\" class=\"headerlink\" title=\"Cookie与Session\"></a>Cookie与Session</h3><ol>\n<li><p>如果我们⽤JS的变量来存数据，那么在⻚⾯关闭的时候，数据就消失了。</p>\n</li>\n<li><p>保持登录状态是怎么做到的呢？</p>\n<p> 按照正常的HTTP协议来说，是做不到的。<br>因为HTTP协议，上下⽂⽆关协议。</p>\n</li>\n<li><p>所以说前端⻚⾯上，有可以持久化存储数据的东⻄。⼀旦登录成功，我就记载在这个⾥⾯。</p>\n</li>\n</ol>\n<p>Cookie是有限制的。</p>\n<p>Cookie是存在浏览器⾥的，不是存在某个⻚⾯上的。是可以⻓期存储的。Cookie即使是保存在浏览器⾥，也是存放在不同的域名下的。</p>\n<ol>\n<li><p>初始状态：没有登录</p>\n</li>\n<li><p>访问百度的登录，输⼊⽤户名，密码。</p>\n</li>\n<li><p>如果⽤户名和密码是正确的。百度的后端会向这个域名下，设置⼀个Cookie。写⼊⽤户的基本信息（加密的）。</p>\n</li>\n<li><p>以后每⼀次向百度发送请求，浏览器都会⾃动带上这些Cookie。</p>\n</li>\n<li><p>服务端（后端）看到了带有ID的cookie，就可以解析这个加密的ID，来获取到这个⽤户本身的ID。</p>\n</li>\n<li><p>如果能获取到本身的ID，那么就证明这个⽤户已经登录过了。所以后端可以继续保留⽤户的信息。</p>\n</li>\n</ol>\n<p><strong>缺点</strong>：如果某个坏⼈，复制了我浏览器⾥的cookie，他就可以在他的电脑上登录我的账号了。</p>\n<p>XSS注⼊攻击。浏览器 </p>\n<h4 id=\"数据存在Session上也有缺点：\"><a href=\"#数据存在Session上也有缺点：\" class=\"headerlink\" title=\"数据存在Session上也有缺点：\"></a>数据存在Session上也有缺点：</h4><p>如果⽤户量⾮常⼤，上亿的⽤户。</p>\n<p>在⽤户量很⼤的时候，服务器端很耗资源的。</p>\n<p>因为后端可能不⽌⼀台服务器，⽤户的登录信息，⼀般只存在⼀台服务器上。</p>\n<p>因为⽤户的登录操作，在哪台机器上执⾏的，就⼀般存在哪台机器上。</p>\n<p>需要通过反向代理。（轮询，IP哈希。）</p>\n<h3 id=\"B-S结构-C-S结构\"><a href=\"#B-S结构-C-S结构\" class=\"headerlink\" title=\"B/S结构    C/S结构\"></a>B/S结构    C/S结构</h3><p>Client/Server——Client只负责内容的展示，Server负责提供内容。</p>\n<p>Browser/Server——Browser只负责内容的展示，Server负责提供内容。</p>\n<p>⻚⾯的本质是什么？<br>⻚⾯的本质就是⼀个字符串。带有HTML格式的字符串。</p>\n<p>浏览器 向服务器 请求⼀个⻚⾯的本质是什么？</p>\n<p>（1）<a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<p>（2）服务器接收到这个请求后，服务器想要把这个⻚⾯的内容（HTML格式的字符串）返回</p>\n<p>给浏览器。</p>\n<p>（3）⻚⾯的字符串存在哪⾥呢？存在HTML⽂件⾥。例如：index.html </p>\n<p>（4）服务器端要读取⽂件。</p>\n<p>（5）将读取出来的内容返回给浏览器。</p>\n<p>最后返回的是⼀个字符串，这个字符串的来源可能是⽂件，可能是缓存，可能来⾃于数据库。</p>\n<p>服务器：严格的说，服务器是⼀台计算机，这台计算机，只提供服务。（不是⽤户⽤的）</p>\n<p>但是，我们常说的这个服务器，指的是服务容器，不是服务器。</p>\n<p>服务容器：是⼀个程序。程序可以监听⼀个端⼝。读取⽂件，并且返回。</p>\n<p>如果我们想通过访问服务器（服务容器）的⽅式，来访问我们⾃⼰写的⻚⾯。</p>\n<p>我们就得装⼀个服务容器的程序。</p>\n<p>向后端发出请求：</p>\n<ol>\n<li>在浏览器中直接输入网址（无法用代码控制）</li>\n<li>location.href = url; 可以发出网络请求，但是页面会发生跳转。（页面跳转）</li>\n<li>带有src属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）</li>\n<li>带有href属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）</li>\n<li>带有action属性的标签，例如form表单，也可以向后端发出请求。但是form表单发出请求之后，也会页面跳转。（页面会跳转）</li>\n<li>ajax请求</li>\n</ol>\n<p><strong>要素；请求方式，url</strong></p>\n<h3 id=\"跨域访问资源\"><a href=\"#跨域访问资源\" class=\"headerlink\" title=\"跨域访问资源\"></a>跨域访问资源</h3><p>哪些东⻄属于资源？</p>\n<p>js⽂件算吗？js⽂件肯定是算资源的，但是js⽂件是允许被跨域请求的。</p>\n<p>css⽂件，jpg,png等。src属性的资源都是可以被跨域请求的。href资源⼤部分都是可以被跨域请求的。</p>\n<h5 id=\"哪些资源算跨域请求的资源？\"><a href=\"#哪些资源算跨域请求的资源？\" class=\"headerlink\" title=\"哪些资源算跨域请求的资源？\"></a>哪些资源算跨域请求的资源？</h5><ol>\n<li><p>后端接⼝的数据。</p>\n</li>\n<li><p>其它域的cookie </p>\n</li>\n<li><p>其它域的缓存</p>\n</li>\n</ol>\n<h5 id=\"什么是其它的域？怎么样算跨域？\"><a href=\"#什么是其它的域？怎么样算跨域？\" class=\"headerlink\" title=\"什么是其它的域？怎么样算跨域？\"></a>什么是其它的域？怎么样算跨域？</h5><p>⻚⾯本身：有协议（http/https）,域名，端⼝</p>\n<p>要请求的数据：<a href=\"http://www.baidu.com/\">http://www.baidu.com:80</a></p>\n<p>协议，域名，端⼝这三个，有任意⼀个不⼀样就算跨域。</p>\n<p>跨域这个⾏为，发⽣在哪⾥？</p>\n<p>答案：</p>\n<ol>\n<li><p>即使跨域了（协议，域名，端⼝号有不⼀样的），请求也可以发出。</p>\n</li>\n<li><p>服务器端也是可以接收的。</p>\n</li>\n<li><p>服务器端也是可以正常处理的。</p>\n</li>\n<li><p>服务器端也是可以正常返回数据。</p>\n</li>\n<li><p>浏览器也能接收到这些数据。</p>\n</li>\n<li><p>接收到之后，发现当前⻚⾯的域和请求的域不同，所以判定为跨域。</p>\n</li>\n<li><p>我们的代码在这等着结果呢，但是因为浏览器判定跨域了，不会把结果传递给我们的代码。</p>\n</li>\n</ol>\n<p>虽然跨域了，但是我们依然需要这个数据，怎么办？</p>\n<p>解决跨域问题：</p>\n<ol>\n<li>后端（别⼈家的）配合我们进⾏跨域。</li>\n</ol>\n<p> pan.baidu.com ——&gt; zhidao.baidu.com</p>\n<pre><code>1）JSONP（正常的情况，返回的数据都是JSON格式。JSONP是⼀种特殊的格式。）\n2）后端设置Access-Control-Allow-Origin属性以⽀持跨域。（聊天机器⼈课讲，因为需要nodejs）\n</code></pre>\n<ol start=\"2\">\n<li><p>后端不配合我们进⾏跨域。</p>\n<p> 3）iframe（只能显示，不能控制）</p>\n<p> 4）通过后端代理（⾃⼰的后端）（后⾯聊天机器⼈讲，因为需要nodejs）</p>\n</li>\n</ol>\n<p>readyState ：<br>状态4代表请求完成，已经接收到数据</p>\n<p>jsonp跨域，只能使用get方法，如果我们设置的是post方法，jQuery会自动转为get方法</p>\n<p>jQuery会先判断是否同源，如果同源，那么设置的是get就是get，设置的是post就是post<br>不是同源的话，就都改为get(跨域)</p>\n<p>script标签，虽然可以引用其他域的资源，浏览器不限制，但是，浏览器会将返回的内容当做js代码执行。</p>\n<p>jsonp原理：<br>前端：</p>\n<ol>\n<li><p>判断请求与当前页面的域是是否同源，如果同源则发送Ajax，没有跨域</p>\n</li>\n<li><p>如果不同源，生成一个script标签</p>\n</li>\n<li><p>生成一个随机的callback名字</p>\n</li>\n<li><p>设置script标签的src设置为要请求的接口</p>\n</li>\n<li><p>将callback作为参数拼接在后面<br> 后端：</p>\n</li>\n<li><p>后端接收到请求后，开始准备要返回的数据</p>\n</li>\n<li><p>后端拼接数据，将要返回的数据用callback的值和括号包裹起来。</p>\n</li>\n<li><p>将内容返回</p>\n</li>\n<li><p>浏览器接收到内容，会当做js代码来执行</p>\n</li>\n<li><p>从而执行方法，这样我们就接收到了后端返回给我们的对象。</p>\n</li>\n</ol>\n","site":{"data":{}},"length":3234,"excerpt":"","more":"<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><hr>\n<p>WWW(World Wide Web)</p>\n<p>冯诺依曼计算机：<br>运算器，存储器，控制器，输入设备，输出设备</p>\n<p>IP地址：网络ID + 主机ID</p>\n<p>域名经过DNS解析 为IP地址</p>\n<p>127.0.0.1 访问本机<br>0.0.0.0  不知道IP地址，访问本机</p>\n<p>五层网络模型：<br>应用层，运输层，网络层，数据链路层，物理层</p>\n<p>发送文件，大量数据要用POST<br>GET请求： GET /path?.. = ..&amp;..=.. HTTP1.1 ,        请求的参数都在URL里 ，</p>\n<p>POST请求：</p>\n<p>请求：Request：</p>\n<ul>\n<li>请求头</li>\n<li>数据体</li>\n<li>请求方式url版本协议</li>\n</ul>\n<p>响应：Response：</p>\n<ul>\n<li>响应头</li>\n<li>数据体</li>\n<li>协议版本   状态码 message</li>\n</ul>\n<h3 id=\"Get和Post请求方式的区别：\"><a href=\"#Get和Post请求方式的区别：\" class=\"headerlink\" title=\"Get和Post请求方式的区别：\"></a>Get和Post请求方式的区别：</h3><ol>\n<li>是基于什么前提的？如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议：<br>GET和POST几乎没有什么区别，只有名字不一样。</li>\n<li>如果是基于RFC规范的：<ul>\n<li>理论上：get和post具有相同语法，但是有不同的语义。get是用来获取数据的，post是用来发送数据的，其它方面没有区别。</li>\n<li>实现上：各种浏览器，就是这个规范的实现者。常见的那些不同：get的数据在URL是可见的，post请求是不显示在URL中的。get请求是有长度限制的，post长度的无限的。get请求的数据可以收藏为书签，post请求到的不可以收藏为书签。get请求后，按后退按钮、刷新按钮无影响，post数据会被重新提交。get编码类型：application/x-www-form-url,post的编码类型有很多：encodeapplication/x-www-form-urlencoded    multipart/form-data。get的历史参数会被保留在浏览器里，post的不会保存在浏览器中。get值允许ASCII，post没有编码限制，允许发二进制。get与post相比get的安全性较差，因为所发的数据是URL的一部分。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Cookie与Session\"><a href=\"#Cookie与Session\" class=\"headerlink\" title=\"Cookie与Session\"></a>Cookie与Session</h3><ol>\n<li><p>如果我们⽤JS的变量来存数据，那么在⻚⾯关闭的时候，数据就消失了。</p>\n</li>\n<li><p>保持登录状态是怎么做到的呢？</p>\n<p> 按照正常的HTTP协议来说，是做不到的。<br>因为HTTP协议，上下⽂⽆关协议。</p>\n</li>\n<li><p>所以说前端⻚⾯上，有可以持久化存储数据的东⻄。⼀旦登录成功，我就记载在这个⾥⾯。</p>\n</li>\n</ol>\n<p>Cookie是有限制的。</p>\n<p>Cookie是存在浏览器⾥的，不是存在某个⻚⾯上的。是可以⻓期存储的。Cookie即使是保存在浏览器⾥，也是存放在不同的域名下的。</p>\n<ol>\n<li><p>初始状态：没有登录</p>\n</li>\n<li><p>访问百度的登录，输⼊⽤户名，密码。</p>\n</li>\n<li><p>如果⽤户名和密码是正确的。百度的后端会向这个域名下，设置⼀个Cookie。写⼊⽤户的基本信息（加密的）。</p>\n</li>\n<li><p>以后每⼀次向百度发送请求，浏览器都会⾃动带上这些Cookie。</p>\n</li>\n<li><p>服务端（后端）看到了带有ID的cookie，就可以解析这个加密的ID，来获取到这个⽤户本身的ID。</p>\n</li>\n<li><p>如果能获取到本身的ID，那么就证明这个⽤户已经登录过了。所以后端可以继续保留⽤户的信息。</p>\n</li>\n</ol>\n<p><strong>缺点</strong>：如果某个坏⼈，复制了我浏览器⾥的cookie，他就可以在他的电脑上登录我的账号了。</p>\n<p>XSS注⼊攻击。浏览器 </p>\n<h4 id=\"数据存在Session上也有缺点：\"><a href=\"#数据存在Session上也有缺点：\" class=\"headerlink\" title=\"数据存在Session上也有缺点：\"></a>数据存在Session上也有缺点：</h4><p>如果⽤户量⾮常⼤，上亿的⽤户。</p>\n<p>在⽤户量很⼤的时候，服务器端很耗资源的。</p>\n<p>因为后端可能不⽌⼀台服务器，⽤户的登录信息，⼀般只存在⼀台服务器上。</p>\n<p>因为⽤户的登录操作，在哪台机器上执⾏的，就⼀般存在哪台机器上。</p>\n<p>需要通过反向代理。（轮询，IP哈希。）</p>\n<h3 id=\"B-S结构-C-S结构\"><a href=\"#B-S结构-C-S结构\" class=\"headerlink\" title=\"B/S结构    C/S结构\"></a>B/S结构    C/S结构</h3><p>Client/Server——Client只负责内容的展示，Server负责提供内容。</p>\n<p>Browser/Server——Browser只负责内容的展示，Server负责提供内容。</p>\n<p>⻚⾯的本质是什么？<br>⻚⾯的本质就是⼀个字符串。带有HTML格式的字符串。</p>\n<p>浏览器 向服务器 请求⼀个⻚⾯的本质是什么？</p>\n<p>（1）<a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<p>（2）服务器接收到这个请求后，服务器想要把这个⻚⾯的内容（HTML格式的字符串）返回</p>\n<p>给浏览器。</p>\n<p>（3）⻚⾯的字符串存在哪⾥呢？存在HTML⽂件⾥。例如：index.html </p>\n<p>（4）服务器端要读取⽂件。</p>\n<p>（5）将读取出来的内容返回给浏览器。</p>\n<p>最后返回的是⼀个字符串，这个字符串的来源可能是⽂件，可能是缓存，可能来⾃于数据库。</p>\n<p>服务器：严格的说，服务器是⼀台计算机，这台计算机，只提供服务。（不是⽤户⽤的）</p>\n<p>但是，我们常说的这个服务器，指的是服务容器，不是服务器。</p>\n<p>服务容器：是⼀个程序。程序可以监听⼀个端⼝。读取⽂件，并且返回。</p>\n<p>如果我们想通过访问服务器（服务容器）的⽅式，来访问我们⾃⼰写的⻚⾯。</p>\n<p>我们就得装⼀个服务容器的程序。</p>\n<p>向后端发出请求：</p>\n<ol>\n<li>在浏览器中直接输入网址（无法用代码控制）</li>\n<li>location.href = url; 可以发出网络请求，但是页面会发生跳转。（页面跳转）</li>\n<li>带有src属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）</li>\n<li>带有href属性的标签，请求是可以发出的，服务端是可以处理也是可以返回的，但是返回之后能否被应用，还要看浏览器。（页面无法处理返回结果）</li>\n<li>带有action属性的标签，例如form表单，也可以向后端发出请求。但是form表单发出请求之后，也会页面跳转。（页面会跳转）</li>\n<li>ajax请求</li>\n</ol>\n<p><strong>要素；请求方式，url</strong></p>\n<h3 id=\"跨域访问资源\"><a href=\"#跨域访问资源\" class=\"headerlink\" title=\"跨域访问资源\"></a>跨域访问资源</h3><p>哪些东⻄属于资源？</p>\n<p>js⽂件算吗？js⽂件肯定是算资源的，但是js⽂件是允许被跨域请求的。</p>\n<p>css⽂件，jpg,png等。src属性的资源都是可以被跨域请求的。href资源⼤部分都是可以被跨域请求的。</p>\n<h5 id=\"哪些资源算跨域请求的资源？\"><a href=\"#哪些资源算跨域请求的资源？\" class=\"headerlink\" title=\"哪些资源算跨域请求的资源？\"></a>哪些资源算跨域请求的资源？</h5><ol>\n<li><p>后端接⼝的数据。</p>\n</li>\n<li><p>其它域的cookie </p>\n</li>\n<li><p>其它域的缓存</p>\n</li>\n</ol>\n<h5 id=\"什么是其它的域？怎么样算跨域？\"><a href=\"#什么是其它的域？怎么样算跨域？\" class=\"headerlink\" title=\"什么是其它的域？怎么样算跨域？\"></a>什么是其它的域？怎么样算跨域？</h5><p>⻚⾯本身：有协议（http/https）,域名，端⼝</p>\n<p>要请求的数据：<a href=\"http://www.baidu.com/\">http://www.baidu.com:80</a></p>\n<p>协议，域名，端⼝这三个，有任意⼀个不⼀样就算跨域。</p>\n<p>跨域这个⾏为，发⽣在哪⾥？</p>\n<p>答案：</p>\n<ol>\n<li><p>即使跨域了（协议，域名，端⼝号有不⼀样的），请求也可以发出。</p>\n</li>\n<li><p>服务器端也是可以接收的。</p>\n</li>\n<li><p>服务器端也是可以正常处理的。</p>\n</li>\n<li><p>服务器端也是可以正常返回数据。</p>\n</li>\n<li><p>浏览器也能接收到这些数据。</p>\n</li>\n<li><p>接收到之后，发现当前⻚⾯的域和请求的域不同，所以判定为跨域。</p>\n</li>\n<li><p>我们的代码在这等着结果呢，但是因为浏览器判定跨域了，不会把结果传递给我们的代码。</p>\n</li>\n</ol>\n<p>虽然跨域了，但是我们依然需要这个数据，怎么办？</p>\n<p>解决跨域问题：</p>\n<ol>\n<li>后端（别⼈家的）配合我们进⾏跨域。</li>\n</ol>\n<p> pan.baidu.com ——&gt; zhidao.baidu.com</p>\n<pre><code>1）JSONP（正常的情况，返回的数据都是JSON格式。JSONP是⼀种特殊的格式。）\n2）后端设置Access-Control-Allow-Origin属性以⽀持跨域。（聊天机器⼈课讲，因为需要nodejs）\n</code></pre>\n<ol start=\"2\">\n<li><p>后端不配合我们进⾏跨域。</p>\n<p> 3）iframe（只能显示，不能控制）</p>\n<p> 4）通过后端代理（⾃⼰的后端）（后⾯聊天机器⼈讲，因为需要nodejs）</p>\n</li>\n</ol>\n<p>readyState ：<br>状态4代表请求完成，已经接收到数据</p>\n<p>jsonp跨域，只能使用get方法，如果我们设置的是post方法，jQuery会自动转为get方法</p>\n<p>jQuery会先判断是否同源，如果同源，那么设置的是get就是get，设置的是post就是post<br>不是同源的话，就都改为get(跨域)</p>\n<p>script标签，虽然可以引用其他域的资源，浏览器不限制，但是，浏览器会将返回的内容当做js代码执行。</p>\n<p>jsonp原理：<br>前端：</p>\n<ol>\n<li><p>判断请求与当前页面的域是是否同源，如果同源则发送Ajax，没有跨域</p>\n</li>\n<li><p>如果不同源，生成一个script标签</p>\n</li>\n<li><p>生成一个随机的callback名字</p>\n</li>\n<li><p>设置script标签的src设置为要请求的接口</p>\n</li>\n<li><p>将callback作为参数拼接在后面<br> 后端：</p>\n</li>\n<li><p>后端接收到请求后，开始准备要返回的数据</p>\n</li>\n<li><p>后端拼接数据，将要返回的数据用callback的值和括号包裹起来。</p>\n</li>\n<li><p>将内容返回</p>\n</li>\n<li><p>浏览器接收到内容，会当做js代码来执行</p>\n</li>\n<li><p>从而执行方法，这样我们就接收到了后端返回给我们的对象。</p>\n</li>\n</ol>\n"},{"title":"迭代器和生成器","date":"2021-12-31T08:21:22.000Z","description":"迭代器和生成器","_content":"\n\n# 迭代器和生成器\n----------\n\n## 迭代器\n\n### 背景知识\n\n1. 什么是迭代？\n\n从一个数据集合中按照一定的顺序，不断取出数据的过程\n\n2. 迭代和遍历的区别？\n\n迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完\n\n遍历强调的是要把整个数据依次全部取出\n\n3. 迭代器\n\n对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象\n\n4. 迭代模式\n\n一种设计模式，用于统一迭代过程，并规范了迭代器规格：\n\n- 迭代器应该具有得到下一个数据的能力\n- 迭代器应该具有判断是否还有后续数据的能力\n\n### JS中的迭代器\n\nJS规定，如果一个对象具有next方法，并且该方法返回一个对象，该对象的格式如下：\n\n```js\n{value: 值, done: 是否迭代完成}\n```\n\n则认为该对象是一个迭代器\n\n含义：\n\n- next方法：用于得到下一个数据\n- 返回的对象\n  - value：下一个数据的值\n  - done：boolean，是否迭代完成\n\n\n### 可迭代协议\n\n**概念回顾**\n\n- 迭代器(iterator)：一个具有next方法的对象，next方法返回下一个数据并且能指示是否迭代完成\n- 迭代器创建函数（iterator creator）：一个返回迭代器的函数\n\n**可迭代协议**\n\nES6规定，如果一个对象具有知名符号属性```Symbol.iterator```，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）\n\n### for-of 循环\n\nfor-of 循环用于遍历可迭代对象，格式如下\n\n```js\n//迭代完成后循环结束\nfor(const item in iterable){\n    //iterable：可迭代对象\n    //item：每次迭代得到的数据\n}\n```\n\n```javascript\nconst arr = [1, 2, 3, 4, 5];\nconst iterator = arr[Symbol.iterator]();\nlet result = iterator.next();\nwhile (!result.done) {\n    console.log(result.value);\n    result = iterator.next();\n}\nfor (const item of arr) {\n    console.log(item)\n}\n```\n\n### 展开运算符与可迭代对象\n\n展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组。\n\n字符串时可迭代的。\n\n\n## 生成器 (Generator)\n\n### 1.什么是生成器？\n\n生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象\n\n### 2. 如何创建生成器？\n\n生成器的创建，必须使用生成器函数（Generator Function）\n\n### 3. 如何书写一个生成器函数呢？\n\n```js\n//这是一个生成器函数，该函数一定返回一个生成器\nfunction* 函数名(){\n\n}\n```\n\n```javascript\n//创建一个生成器函数\nfunction* test() {\n   yield 1;\n   yield 2;\n}\nconst generator = test();\n```\n\n### 4. 生成器函数内部是如何执行的？\n\n生成器函数内部是为了给生成器的每次迭代提供的数据\n\n每次调用生成器的next方法，将导致生成器函数运行到下一个yield关键字位置\n\nyield是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。\n\n### 5. 有哪些需要注意的细节？\n\n1). 生成器函数可以有返回值，返回值出现在第一次done为true时的value属性中\n```javascript\nfunction* test() {\n    yield 1;\n    yield 2;\n    return 10;\n}\nconst generator = test();\n\n运行结果：\ngenerator.next()\n{value: 1, done: false}\ngenerator.next()\n{value: 2, done: false}\ngenerator.next()\n{value: 10, done: true}\n```\n2). 调用生成器的next方法时，可以传递参数，传递的参数会交给yield表达式的返回值\n3). 第一次调用next方法时，传参没有任何意义\n```javascript\nfunction* test() {\n    let n = yield 1;\n    console.log(n);\n    let n1 = yield 2 + n;\n    console.log(n1)\n}\nconst generator = test();\n\n运行结果：\ngenerator.next()\n{value: 1, done: false}\ngenerator.next(33)\n33\n{value: 35, done: false}\ngenerator.next(34)\n 34\n{value: undefined, done: true}\n```\n4). 在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号\n\n```javascript\n\nfunction* test1() {\n    yield 1;\n    yield 2;\n}\n\nfunction* test2() {\n    yield* test1()\n    yield \"a\";\n    yield \"b\";\n}\n\nconst generator = test2();\n\n运行结果：\ngenerator.next()\n{value: 1, done: false}\ngenerator.next()\n{value: 2, done: false}\ngenerator.next()\n{value: 'a', done: false}\ngenerator.next()\n{value: 'b', done: false}\ngenerator.next()\n{value: undefined, done: true}\n```\n### 6. 生成器的其他API\n\n- return方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束\n- throw方法：调用该方法，可以在生成器中产生一个错误\n\n","source":"_posts/迭代器和生成器.md","raw":"---\ntitle: 迭代器和生成器\ndate: 2021-12-31 16:21:22\ndescription: 迭代器和生成器\ncategories: \n  - 前端学习笔记\n  - ES6\ntags: \n  - ES6\n  - 前端\n---\n\n\n# 迭代器和生成器\n----------\n\n## 迭代器\n\n### 背景知识\n\n1. 什么是迭代？\n\n从一个数据集合中按照一定的顺序，不断取出数据的过程\n\n2. 迭代和遍历的区别？\n\n迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完\n\n遍历强调的是要把整个数据依次全部取出\n\n3. 迭代器\n\n对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象\n\n4. 迭代模式\n\n一种设计模式，用于统一迭代过程，并规范了迭代器规格：\n\n- 迭代器应该具有得到下一个数据的能力\n- 迭代器应该具有判断是否还有后续数据的能力\n\n### JS中的迭代器\n\nJS规定，如果一个对象具有next方法，并且该方法返回一个对象，该对象的格式如下：\n\n```js\n{value: 值, done: 是否迭代完成}\n```\n\n则认为该对象是一个迭代器\n\n含义：\n\n- next方法：用于得到下一个数据\n- 返回的对象\n  - value：下一个数据的值\n  - done：boolean，是否迭代完成\n\n\n### 可迭代协议\n\n**概念回顾**\n\n- 迭代器(iterator)：一个具有next方法的对象，next方法返回下一个数据并且能指示是否迭代完成\n- 迭代器创建函数（iterator creator）：一个返回迭代器的函数\n\n**可迭代协议**\n\nES6规定，如果一个对象具有知名符号属性```Symbol.iterator```，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）\n\n### for-of 循环\n\nfor-of 循环用于遍历可迭代对象，格式如下\n\n```js\n//迭代完成后循环结束\nfor(const item in iterable){\n    //iterable：可迭代对象\n    //item：每次迭代得到的数据\n}\n```\n\n```javascript\nconst arr = [1, 2, 3, 4, 5];\nconst iterator = arr[Symbol.iterator]();\nlet result = iterator.next();\nwhile (!result.done) {\n    console.log(result.value);\n    result = iterator.next();\n}\nfor (const item of arr) {\n    console.log(item)\n}\n```\n\n### 展开运算符与可迭代对象\n\n展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组。\n\n字符串时可迭代的。\n\n\n## 生成器 (Generator)\n\n### 1.什么是生成器？\n\n生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象\n\n### 2. 如何创建生成器？\n\n生成器的创建，必须使用生成器函数（Generator Function）\n\n### 3. 如何书写一个生成器函数呢？\n\n```js\n//这是一个生成器函数，该函数一定返回一个生成器\nfunction* 函数名(){\n\n}\n```\n\n```javascript\n//创建一个生成器函数\nfunction* test() {\n   yield 1;\n   yield 2;\n}\nconst generator = test();\n```\n\n### 4. 生成器函数内部是如何执行的？\n\n生成器函数内部是为了给生成器的每次迭代提供的数据\n\n每次调用生成器的next方法，将导致生成器函数运行到下一个yield关键字位置\n\nyield是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。\n\n### 5. 有哪些需要注意的细节？\n\n1). 生成器函数可以有返回值，返回值出现在第一次done为true时的value属性中\n```javascript\nfunction* test() {\n    yield 1;\n    yield 2;\n    return 10;\n}\nconst generator = test();\n\n运行结果：\ngenerator.next()\n{value: 1, done: false}\ngenerator.next()\n{value: 2, done: false}\ngenerator.next()\n{value: 10, done: true}\n```\n2). 调用生成器的next方法时，可以传递参数，传递的参数会交给yield表达式的返回值\n3). 第一次调用next方法时，传参没有任何意义\n```javascript\nfunction* test() {\n    let n = yield 1;\n    console.log(n);\n    let n1 = yield 2 + n;\n    console.log(n1)\n}\nconst generator = test();\n\n运行结果：\ngenerator.next()\n{value: 1, done: false}\ngenerator.next(33)\n33\n{value: 35, done: false}\ngenerator.next(34)\n 34\n{value: undefined, done: true}\n```\n4). 在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号\n\n```javascript\n\nfunction* test1() {\n    yield 1;\n    yield 2;\n}\n\nfunction* test2() {\n    yield* test1()\n    yield \"a\";\n    yield \"b\";\n}\n\nconst generator = test2();\n\n运行结果：\ngenerator.next()\n{value: 1, done: false}\ngenerator.next()\n{value: 2, done: false}\ngenerator.next()\n{value: 'a', done: false}\ngenerator.next()\n{value: 'b', done: false}\ngenerator.next()\n{value: undefined, done: true}\n```\n### 6. 生成器的其他API\n\n- return方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束\n- throw方法：调用该方法，可以在生成器中产生一个错误\n\n","slug":"迭代器和生成器","published":1,"updated":"2022-01-01T06:35:01.949Z","_id":"ckxu6dnj3001q10axhpnldvw7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h1><hr>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><h3 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><ol>\n<li>什么是迭代？</li>\n</ol>\n<p>从一个数据集合中按照一定的顺序，不断取出数据的过程</p>\n<ol start=\"2\">\n<li>迭代和遍历的区别？</li>\n</ol>\n<p>迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完</p>\n<p>遍历强调的是要把整个数据依次全部取出</p>\n<ol start=\"3\">\n<li>迭代器</li>\n</ol>\n<p>对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象</p>\n<ol start=\"4\">\n<li>迭代模式</li>\n</ol>\n<p>一种设计模式，用于统一迭代过程，并规范了迭代器规格：</p>\n<ul>\n<li>迭代器应该具有得到下一个数据的能力</li>\n<li>迭代器应该具有判断是否还有后续数据的能力</li>\n</ul>\n<h3 id=\"JS中的迭代器\"><a href=\"#JS中的迭代器\" class=\"headerlink\" title=\"JS中的迭代器\"></a>JS中的迭代器</h3><p>JS规定，如果一个对象具有next方法，并且该方法返回一个对象，该对象的格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">value</span>: 值, <span class=\"attr\">done</span>: 是否迭代完成&#125;</span><br></pre></td></tr></table></figure>\n\n<p>则认为该对象是一个迭代器</p>\n<p>含义：</p>\n<ul>\n<li>next方法：用于得到下一个数据</li>\n<li>返回的对象<ul>\n<li>value：下一个数据的值</li>\n<li>done：boolean，是否迭代完成</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可迭代协议\"><a href=\"#可迭代协议\" class=\"headerlink\" title=\"可迭代协议\"></a>可迭代协议</h3><p><strong>概念回顾</strong></p>\n<ul>\n<li>迭代器(iterator)：一个具有next方法的对象，next方法返回下一个数据并且能指示是否迭代完成</li>\n<li>迭代器创建函数（iterator creator）：一个返回迭代器的函数</li>\n</ul>\n<p><strong>可迭代协议</strong></p>\n<p>ES6规定，如果一个对象具有知名符号属性<code>Symbol.iterator</code>，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）</p>\n<h3 id=\"for-of-循环\"><a href=\"#for-of-循环\" class=\"headerlink\" title=\"for-of 循环\"></a>for-of 循环</h3><p>for-of 循环用于遍历可迭代对象，格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代完成后循环结束</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> item <span class=\"keyword\">in</span> iterable)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//iterable：可迭代对象</span></span><br><span class=\"line\">    <span class=\"comment\">//item：每次迭代得到的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = iterator.next();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!result.done) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result.value);</span><br><span class=\"line\">    result = iterator.next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"展开运算符与可迭代对象\"><a href=\"#展开运算符与可迭代对象\" class=\"headerlink\" title=\"展开运算符与可迭代对象\"></a>展开运算符与可迭代对象</h3><p>展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组。</p>\n<p>字符串时可迭代的。</p>\n<h2 id=\"生成器-Generator\"><a href=\"#生成器-Generator\" class=\"headerlink\" title=\"生成器 (Generator)\"></a>生成器 (Generator)</h2><h3 id=\"1-什么是生成器？\"><a href=\"#1-什么是生成器？\" class=\"headerlink\" title=\"1.什么是生成器？\"></a>1.什么是生成器？</h3><p>生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象</p>\n<h3 id=\"2-如何创建生成器？\"><a href=\"#2-如何创建生成器？\" class=\"headerlink\" title=\"2. 如何创建生成器？\"></a>2. 如何创建生成器？</h3><p>生成器的创建，必须使用生成器函数（Generator Function）</p>\n<h3 id=\"3-如何书写一个生成器函数呢？\"><a href=\"#3-如何书写一个生成器函数呢？\" class=\"headerlink\" title=\"3. 如何书写一个生成器函数呢？\"></a>3. 如何书写一个生成器函数呢？</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是一个生成器函数，该函数一定返回一个生成器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* 函数名(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个生成器函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-生成器函数内部是如何执行的？\"><a href=\"#4-生成器函数内部是如何执行的？\" class=\"headerlink\" title=\"4. 生成器函数内部是如何执行的？\"></a>4. 生成器函数内部是如何执行的？</h3><p>生成器函数内部是为了给生成器的每次迭代提供的数据</p>\n<p>每次调用生成器的next方法，将导致生成器函数运行到下一个yield关键字位置</p>\n<p>yield是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。</p>\n<h3 id=\"5-有哪些需要注意的细节？\"><a href=\"#5-有哪些需要注意的细节？\" class=\"headerlink\" title=\"5. 有哪些需要注意的细节？\"></a>5. 有哪些需要注意的细节？</h3><p>1). 生成器函数可以有返回值，返回值出现在第一次done为true时的value属性中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test();</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">10</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>2). 调用生成器的next方法时，可以传递参数，传递的参数会交给yield表达式的返回值<br>3). 第一次调用next方法时，传参没有任何意义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n1 = <span class=\"keyword\">yield</span> <span class=\"number\">2</span> + n;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test();</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next(<span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">35</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next(<span class=\"number\">34</span>)</span><br><span class=\"line\"> <span class=\"number\">34</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>4). 在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* test1()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test2();</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-生成器的其他API\"><a href=\"#6-生成器的其他API\" class=\"headerlink\" title=\"6. 生成器的其他API\"></a>6. 生成器的其他API</h3><ul>\n<li>return方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束</li>\n<li>throw方法：调用该方法，可以在生成器中产生一个错误</li>\n</ul>\n","site":{"data":{}},"length":2515,"excerpt":"","more":"<h1 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h1><hr>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><h3 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><ol>\n<li>什么是迭代？</li>\n</ol>\n<p>从一个数据集合中按照一定的顺序，不断取出数据的过程</p>\n<ol start=\"2\">\n<li>迭代和遍历的区别？</li>\n</ol>\n<p>迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完</p>\n<p>遍历强调的是要把整个数据依次全部取出</p>\n<ol start=\"3\">\n<li>迭代器</li>\n</ol>\n<p>对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象</p>\n<ol start=\"4\">\n<li>迭代模式</li>\n</ol>\n<p>一种设计模式，用于统一迭代过程，并规范了迭代器规格：</p>\n<ul>\n<li>迭代器应该具有得到下一个数据的能力</li>\n<li>迭代器应该具有判断是否还有后续数据的能力</li>\n</ul>\n<h3 id=\"JS中的迭代器\"><a href=\"#JS中的迭代器\" class=\"headerlink\" title=\"JS中的迭代器\"></a>JS中的迭代器</h3><p>JS规定，如果一个对象具有next方法，并且该方法返回一个对象，该对象的格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">value</span>: 值, <span class=\"attr\">done</span>: 是否迭代完成&#125;</span><br></pre></td></tr></table></figure>\n\n<p>则认为该对象是一个迭代器</p>\n<p>含义：</p>\n<ul>\n<li>next方法：用于得到下一个数据</li>\n<li>返回的对象<ul>\n<li>value：下一个数据的值</li>\n<li>done：boolean，是否迭代完成</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可迭代协议\"><a href=\"#可迭代协议\" class=\"headerlink\" title=\"可迭代协议\"></a>可迭代协议</h3><p><strong>概念回顾</strong></p>\n<ul>\n<li>迭代器(iterator)：一个具有next方法的对象，next方法返回下一个数据并且能指示是否迭代完成</li>\n<li>迭代器创建函数（iterator creator）：一个返回迭代器的函数</li>\n</ul>\n<p><strong>可迭代协议</strong></p>\n<p>ES6规定，如果一个对象具有知名符号属性<code>Symbol.iterator</code>，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）</p>\n<h3 id=\"for-of-循环\"><a href=\"#for-of-循环\" class=\"headerlink\" title=\"for-of 循环\"></a>for-of 循环</h3><p>for-of 循环用于遍历可迭代对象，格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代完成后循环结束</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> item <span class=\"keyword\">in</span> iterable)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//iterable：可迭代对象</span></span><br><span class=\"line\">    <span class=\"comment\">//item：每次迭代得到的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = iterator.next();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!result.done) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result.value);</span><br><span class=\"line\">    result = iterator.next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"展开运算符与可迭代对象\"><a href=\"#展开运算符与可迭代对象\" class=\"headerlink\" title=\"展开运算符与可迭代对象\"></a>展开运算符与可迭代对象</h3><p>展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组。</p>\n<p>字符串时可迭代的。</p>\n<h2 id=\"生成器-Generator\"><a href=\"#生成器-Generator\" class=\"headerlink\" title=\"生成器 (Generator)\"></a>生成器 (Generator)</h2><h3 id=\"1-什么是生成器？\"><a href=\"#1-什么是生成器？\" class=\"headerlink\" title=\"1.什么是生成器？\"></a>1.什么是生成器？</h3><p>生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象</p>\n<h3 id=\"2-如何创建生成器？\"><a href=\"#2-如何创建生成器？\" class=\"headerlink\" title=\"2. 如何创建生成器？\"></a>2. 如何创建生成器？</h3><p>生成器的创建，必须使用生成器函数（Generator Function）</p>\n<h3 id=\"3-如何书写一个生成器函数呢？\"><a href=\"#3-如何书写一个生成器函数呢？\" class=\"headerlink\" title=\"3. 如何书写一个生成器函数呢？\"></a>3. 如何书写一个生成器函数呢？</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是一个生成器函数，该函数一定返回一个生成器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* 函数名(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个生成器函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-生成器函数内部是如何执行的？\"><a href=\"#4-生成器函数内部是如何执行的？\" class=\"headerlink\" title=\"4. 生成器函数内部是如何执行的？\"></a>4. 生成器函数内部是如何执行的？</h3><p>生成器函数内部是为了给生成器的每次迭代提供的数据</p>\n<p>每次调用生成器的next方法，将导致生成器函数运行到下一个yield关键字位置</p>\n<p>yield是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。</p>\n<h3 id=\"5-有哪些需要注意的细节？\"><a href=\"#5-有哪些需要注意的细节？\" class=\"headerlink\" title=\"5. 有哪些需要注意的细节？\"></a>5. 有哪些需要注意的细节？</h3><p>1). 生成器函数可以有返回值，返回值出现在第一次done为true时的value属性中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test();</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">10</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>2). 调用生成器的next方法时，可以传递参数，传递的参数会交给yield表达式的返回值<br>3). 第一次调用next方法时，传参没有任何意义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n1 = <span class=\"keyword\">yield</span> <span class=\"number\">2</span> + n;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test();</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next(<span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">35</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next(<span class=\"number\">34</span>)</span><br><span class=\"line\"> <span class=\"number\">34</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>4). 在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* test1()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = test2();</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">generator.next()</span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-生成器的其他API\"><a href=\"#6-生成器的其他API\" class=\"headerlink\" title=\"6. 生成器的其他API\"></a>6. 生成器的其他API</h3><ul>\n<li>return方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束</li>\n<li>throw方法：调用该方法，可以在生成器中产生一个错误</li>\n</ul>\n"},{"title":"运动 正则","date":"2021-12-31T08:21:22.000Z","description":"js实现物体的运动，正则表达式的使用，JSON的简单介绍","_content":"\n# 运动 正则\n----------\n## 运动\noffsetLeft：当前位置距离左边界距离 \n多物体运动：要给每个物体单独设置自己的定时器  \n回调机制：执行完主题函数再\n\n\nJSON是一种传输数据的格式（以对象为样板，本质上就是对象（json的属性名要变成字符串样式），但用途有区别，对象就是本地用的，json是用来传输的）\n\n\n#### JSON.stringify(); json — > string\n```javascript\n        var obj = {\n            \"name\": \"xyq\",\n            \"age\": 20\n        }\n        JSON.stringify(obj)\n        返回结果为\n    \t\"{\\\"name\\\":\\\"xyq\\\",\\\"age\\\":20}\"\n```\n\n#### JSON.parse();  string — > json\n```javascript\n        var obj = {\n            \"name\": \"xyq\",\n            \"age\": 20\n        }\n        var json = JSON.stringify(obj) \n        JSON.parse(json)\n        返回值为：\n        {\n            name: \"xyq\",\n            age: 20\n        }\n```\ndom树深度优先原则\n\n## 异步加载JS\n\n### js加载的缺点：\n- 加载工具方法没必要阻塞文档，过得js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。\n- 有些工具方法需要按需加载，用到再加载，不用不加载。\n\n### javascript 异步加载 的 三种方案\n\n1. defer 异步加载，但要等到dom文档全部解析完才会被执行。只有IE能用。可以在script内写语句\n```javascript\n<script type=\"text/javascript\" src=\"tools.js\" defer=\"defer\"></script>\n```\n2. async 异步加载，加载完就执行，async只能加载外部脚本，不能把js写在script 标签里。\n\n1和2 执行时不阻塞页面  \n3. 创建script，插入到DOM中，加载完毕后callBack。\n```javascript\n    <script>\n        var script = document.createElement('script');\n        script.type = \"text/javascript\";\n        script.src = \"demo.js\";\n        document.head.appendChild(script);//执行这一行时js才开始执行\n    </script>\n\n\n        var script = document.createElement('script');\n        script.type = \"text/javascript\";\n        script.src = \"demo.js\";\n        script.onload = function(){ //会等js文件下载完之后在执行\n            语句; \n        }\n        document.head.appendChild(script);\n\n```\n### js加载时间\n\n1. 创建Document对象，开始解析web页面。解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = 'loading'。\n\n2. 遇到link外部css，创建线程加载，并继续解析文档。\n\n3. 遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。\n\n4. 遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档。\n对于async属性的脚本，脚本加载完成后立即执行。（异步禁止使用document.write()）\n\n5. 遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。\n\n6. 当文档解析完成，document.readyState = 'interactive'。\n\n7. 文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()）;\n\n8. document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。\n\n9. 当所有async的脚本加载完成并执行后、img等加载完成后，document.readyState = 'complete'，window对象触发load事件。\n\n10. 从此，以异步响应方式处理用户输入、网络事件等。\n\n## [正则表达式](https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp)\n\n多行字符串（更清晰，通过 \\ 将一行的结束符转义）\n```javascript\n        var test = \"\\\n        <div></div>\\\n        <span></span>\\\n        \";\n```\n### 正则表达式两种创建方式：\n1. 直接量(var 变量名  = / 字符串 /属性（可不写）  )\nvar reg = /abc/;\n2. new RegExp(var 变量名 = new RegExp(\"规则\" ，\"属性（可不写）\");)\n\n    `var reg = new RegExp(\"abc\");`\n\n```javascript\n[ ]:表达式（里面填符合要求的范围）\n        var reg = /[ab][cd][d]/g;\n        var str = \"abcd\";\n        str.match(reg)\n        返回值：\n    \t[\"bcd\"]\n```\n\n```javascript\n^放在表达式里表示 非（除了）\n\n         var reg = /[^a]/;//匹配第一位不是a的字符串\n         var str = \"abcd\";\n         str.match(reg)\n```\n\n```javascript\n（条件 | 条件 |条件）：可表示范围\n        var reg = /(abc|bcd)/g;\n        可匹配是abc 或 bcd 的字符串\n        \n```\n\n\\n : 与第n子表达式个完全一样的匹配条件（n必须为具体的数字）\n\nvar reg = /(\\w)\\1\\1\\1/g;   //匹配4个完全一样的字符串（例如 “aaaa”）\n \nvar reg = /(\\w)\\1(\\w)\\2/g; //可匹配AABB样式的字符串  \n#### 方括号\n方括号用于查找某个范围内的字符：\n| 表达式 | 描述  | \n| :---  | :--------------- | \n| [abc]  | 查找方括号之间的任何字符。|\n| [^abc] | 查找任何不在方括号之间的字符。|\n| [0-9] | 查找任何从 0 至 9 的数字。|\n| [a-z] | 查找任何从小写 a 到小写 z 的字符。|\n| [A-Z] | 查找任何从大写 A 到大写 Z 的字符。|\n| [A-z] | 查找任何从大写 A 到小写 z 的字符。|\n| [adgk] | 查找给定集合内的任何字符。|\n| [^adgk] | 查找给定集合外的任何字符。|\n| (red\\|blue\\|green) | 查找任何指定的选项。|\n|\n\n\n#### 元字符（Metacharacter）\n是拥有特殊含义的字符：\n| 元字符 | 描述 | \n| :---- | :---- | \n|.查找单个字符，除了换行和行结束符.\n| \\w |     [ 0 - 9A-z_]查找单词字符。\n| \\W | 查找非单词字符。\n| \\d |    [ 0 - 9]查找数字。\n| \\D | 查找非数字字符。\n| \\s | 查找空白字符。\n| \\S | 查找非空白字符。\n| \\b | 匹配单词边界。\n| \\B | 匹配非单词边界。\n| \\0 | 查找 NUL 字符。\n| \\n | 查找换行符。\n| \\f | 查找换页符。\n| \\r | 查找回车符。\n| \\t | 查找制表符。\n| \\v | 查找垂直制表符。\n| \\x | xx查找以八进制数 xxx 规定的字符。\n| \\x | dd查找以十六进制数 dd 规定的字符。\n| \\u | xxxx查找以十六进制数 xxxx 规定的 Unicode 字符。\n|\n\n\n#### 量词\n| 量词 | 描述 |\n| :---   | :--- |\n| n+ | 匹配任何包含至少一个 n 的字符串。| \n| n* | 匹配任何包含零个或多个 n 的字符串。 |\n| n? | 匹配任何包含零个或一个 n 的字符串。|\n| n{X} | 匹配包含 X 个 n 的序列的字符串。|\n| n{X,Y} | 匹配包含 X 至 Y 个 n 的序列的字符串。|\n| n{X,} | 匹配包含至少 X 个 n 的序列的字符串。|\n| n$ | 匹配任何结尾为 n 的字符串。|\n| ^n | 匹配任何开头为 n 的字符串。|\n| ?=n | 匹配任何其后紧接指定字符串 n 的字符串。|\n| ?!n | 匹配任何其后没有紧接指定字符串 n 的字符串。|\n|\n\n#### RegExp 对象属性\n| 属性 | 描述 | FF | IE |\n| ----- | ----- | -----| --|\n| globalRegExp |  对象是否具有标志 g | 1 | 4 | \n| ignoreCaseRegExp |  对象是否具有标志 i | 。1 | 4 | \n| lastIndex | 一个整数，标示开始下一次匹配的字符位 | 1 | 4 | \n| multilineRegExp |  对象是否具有标志 m | 。1 | 4 | \n| source  | 正则表达式的源文本。 | 1 | 4 |\n|\n\n#### RegExp 对象方法\n| 方法| 描述| FF| IE| \n| ---- | ---- | ---- | ---- |\n| compile| 编译正则表达式。| 1| 4| \n| exec| 检索字符串中指定的值。返回找到的值，并确定其位置。| 1| 4| \n| test| 检索字符串中指定的值。返回 true 或 false。| 1| 4|\n|\n\n\n#### 支持正则表达式的 String 对象的方法\n| 方法| 描述| FF| IE|\n| ---- | ---- | ---- | ----|\n| search| 检索与正则表达式相匹配的值。| 1| 4| \n| match| 找到一个或多个正则表达式的匹配。| 1| 4| \n| replace| 替换与正则表达式匹配的子串。| 1| 4| \n| split| 把字符串分割为字符串数组。| 1| 4|\n|\n```javascript\n\n        var str = \"aa\";\n        console.log(str.replace(\"a\", \"b\"));\n        打印结果为ba\n        \n        var str = \"aa\";\n        var reg = /a/g;\n        console.log(str.replace(reg, \"b\"));    \n        打印结果为bb                      \n        \n        var str = \"aabb\";\n        var reg = /(\\w)\\1(\\w)\\2/g;\n        console.log(str.replace(reg, \"$2$2$1$1\")); //可以通过 $n 获取第n 个子表达式的匹配条件\n        打印结果为bbaa\n        \n        var str = \"the-first-name\";\n        var reg = /-(\\w)/g;\n        console.log(str.replace(reg, function($, $1) {\n            return $1.toUpperCase();\n        }))\n        打印结果为theFirstName\n```\n\n\n正则表达式默认为贪婪匹配（总是往最大的方向去匹配）  \n取消贪婪匹配（匹配最短）（在每个量词后面加上一个 ？）\n```javascript\n        var reg = /a{3,5}?/g;\n        var reg1 = /a{3,5}/g;\n        var str = \"aaaaaaaaaaaaaaaa\";\n        console.log(str.match(reg));\n        console.log(str.match(reg1));\n        \n        打印结果为：\n        [\"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]\n        [\"aaaaa\", \"aaaaa\", \"aaaaa\"]\n\n```\n\n```javascript\nvar reg = /^(?!\\d+$)(?![A-z]+$)[0-9A-z]{8,16}$/;\n匹配密码8 - 16位不能只有数字或字母\n```\n\n","source":"_posts/运动_正则.md","raw":"---\ntitle: 运动 正则\ndate: 2021-12-31 16:21:22\ndescription: js实现物体的运动，正则表达式的使用，JSON的简单介绍\ncategories: \n    - 前端学习笔记\n    - js\ntags: \n    - js\n    - DOM\n    - 前端\n---\n\n# 运动 正则\n----------\n## 运动\noffsetLeft：当前位置距离左边界距离 \n多物体运动：要给每个物体单独设置自己的定时器  \n回调机制：执行完主题函数再\n\n\nJSON是一种传输数据的格式（以对象为样板，本质上就是对象（json的属性名要变成字符串样式），但用途有区别，对象就是本地用的，json是用来传输的）\n\n\n#### JSON.stringify(); json — > string\n```javascript\n        var obj = {\n            \"name\": \"xyq\",\n            \"age\": 20\n        }\n        JSON.stringify(obj)\n        返回结果为\n    \t\"{\\\"name\\\":\\\"xyq\\\",\\\"age\\\":20}\"\n```\n\n#### JSON.parse();  string — > json\n```javascript\n        var obj = {\n            \"name\": \"xyq\",\n            \"age\": 20\n        }\n        var json = JSON.stringify(obj) \n        JSON.parse(json)\n        返回值为：\n        {\n            name: \"xyq\",\n            age: 20\n        }\n```\ndom树深度优先原则\n\n## 异步加载JS\n\n### js加载的缺点：\n- 加载工具方法没必要阻塞文档，过得js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。\n- 有些工具方法需要按需加载，用到再加载，不用不加载。\n\n### javascript 异步加载 的 三种方案\n\n1. defer 异步加载，但要等到dom文档全部解析完才会被执行。只有IE能用。可以在script内写语句\n```javascript\n<script type=\"text/javascript\" src=\"tools.js\" defer=\"defer\"></script>\n```\n2. async 异步加载，加载完就执行，async只能加载外部脚本，不能把js写在script 标签里。\n\n1和2 执行时不阻塞页面  \n3. 创建script，插入到DOM中，加载完毕后callBack。\n```javascript\n    <script>\n        var script = document.createElement('script');\n        script.type = \"text/javascript\";\n        script.src = \"demo.js\";\n        document.head.appendChild(script);//执行这一行时js才开始执行\n    </script>\n\n\n        var script = document.createElement('script');\n        script.type = \"text/javascript\";\n        script.src = \"demo.js\";\n        script.onload = function(){ //会等js文件下载完之后在执行\n            语句; \n        }\n        document.head.appendChild(script);\n\n```\n### js加载时间\n\n1. 创建Document对象，开始解析web页面。解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = 'loading'。\n\n2. 遇到link外部css，创建线程加载，并继续解析文档。\n\n3. 遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。\n\n4. 遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档。\n对于async属性的脚本，脚本加载完成后立即执行。（异步禁止使用document.write()）\n\n5. 遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。\n\n6. 当文档解析完成，document.readyState = 'interactive'。\n\n7. 文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()）;\n\n8. document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。\n\n9. 当所有async的脚本加载完成并执行后、img等加载完成后，document.readyState = 'complete'，window对象触发load事件。\n\n10. 从此，以异步响应方式处理用户输入、网络事件等。\n\n## [正则表达式](https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp)\n\n多行字符串（更清晰，通过 \\ 将一行的结束符转义）\n```javascript\n        var test = \"\\\n        <div></div>\\\n        <span></span>\\\n        \";\n```\n### 正则表达式两种创建方式：\n1. 直接量(var 变量名  = / 字符串 /属性（可不写）  )\nvar reg = /abc/;\n2. new RegExp(var 变量名 = new RegExp(\"规则\" ，\"属性（可不写）\");)\n\n    `var reg = new RegExp(\"abc\");`\n\n```javascript\n[ ]:表达式（里面填符合要求的范围）\n        var reg = /[ab][cd][d]/g;\n        var str = \"abcd\";\n        str.match(reg)\n        返回值：\n    \t[\"bcd\"]\n```\n\n```javascript\n^放在表达式里表示 非（除了）\n\n         var reg = /[^a]/;//匹配第一位不是a的字符串\n         var str = \"abcd\";\n         str.match(reg)\n```\n\n```javascript\n（条件 | 条件 |条件）：可表示范围\n        var reg = /(abc|bcd)/g;\n        可匹配是abc 或 bcd 的字符串\n        \n```\n\n\\n : 与第n子表达式个完全一样的匹配条件（n必须为具体的数字）\n\nvar reg = /(\\w)\\1\\1\\1/g;   //匹配4个完全一样的字符串（例如 “aaaa”）\n \nvar reg = /(\\w)\\1(\\w)\\2/g; //可匹配AABB样式的字符串  \n#### 方括号\n方括号用于查找某个范围内的字符：\n| 表达式 | 描述  | \n| :---  | :--------------- | \n| [abc]  | 查找方括号之间的任何字符。|\n| [^abc] | 查找任何不在方括号之间的字符。|\n| [0-9] | 查找任何从 0 至 9 的数字。|\n| [a-z] | 查找任何从小写 a 到小写 z 的字符。|\n| [A-Z] | 查找任何从大写 A 到大写 Z 的字符。|\n| [A-z] | 查找任何从大写 A 到小写 z 的字符。|\n| [adgk] | 查找给定集合内的任何字符。|\n| [^adgk] | 查找给定集合外的任何字符。|\n| (red\\|blue\\|green) | 查找任何指定的选项。|\n|\n\n\n#### 元字符（Metacharacter）\n是拥有特殊含义的字符：\n| 元字符 | 描述 | \n| :---- | :---- | \n|.查找单个字符，除了换行和行结束符.\n| \\w |     [ 0 - 9A-z_]查找单词字符。\n| \\W | 查找非单词字符。\n| \\d |    [ 0 - 9]查找数字。\n| \\D | 查找非数字字符。\n| \\s | 查找空白字符。\n| \\S | 查找非空白字符。\n| \\b | 匹配单词边界。\n| \\B | 匹配非单词边界。\n| \\0 | 查找 NUL 字符。\n| \\n | 查找换行符。\n| \\f | 查找换页符。\n| \\r | 查找回车符。\n| \\t | 查找制表符。\n| \\v | 查找垂直制表符。\n| \\x | xx查找以八进制数 xxx 规定的字符。\n| \\x | dd查找以十六进制数 dd 规定的字符。\n| \\u | xxxx查找以十六进制数 xxxx 规定的 Unicode 字符。\n|\n\n\n#### 量词\n| 量词 | 描述 |\n| :---   | :--- |\n| n+ | 匹配任何包含至少一个 n 的字符串。| \n| n* | 匹配任何包含零个或多个 n 的字符串。 |\n| n? | 匹配任何包含零个或一个 n 的字符串。|\n| n{X} | 匹配包含 X 个 n 的序列的字符串。|\n| n{X,Y} | 匹配包含 X 至 Y 个 n 的序列的字符串。|\n| n{X,} | 匹配包含至少 X 个 n 的序列的字符串。|\n| n$ | 匹配任何结尾为 n 的字符串。|\n| ^n | 匹配任何开头为 n 的字符串。|\n| ?=n | 匹配任何其后紧接指定字符串 n 的字符串。|\n| ?!n | 匹配任何其后没有紧接指定字符串 n 的字符串。|\n|\n\n#### RegExp 对象属性\n| 属性 | 描述 | FF | IE |\n| ----- | ----- | -----| --|\n| globalRegExp |  对象是否具有标志 g | 1 | 4 | \n| ignoreCaseRegExp |  对象是否具有标志 i | 。1 | 4 | \n| lastIndex | 一个整数，标示开始下一次匹配的字符位 | 1 | 4 | \n| multilineRegExp |  对象是否具有标志 m | 。1 | 4 | \n| source  | 正则表达式的源文本。 | 1 | 4 |\n|\n\n#### RegExp 对象方法\n| 方法| 描述| FF| IE| \n| ---- | ---- | ---- | ---- |\n| compile| 编译正则表达式。| 1| 4| \n| exec| 检索字符串中指定的值。返回找到的值，并确定其位置。| 1| 4| \n| test| 检索字符串中指定的值。返回 true 或 false。| 1| 4|\n|\n\n\n#### 支持正则表达式的 String 对象的方法\n| 方法| 描述| FF| IE|\n| ---- | ---- | ---- | ----|\n| search| 检索与正则表达式相匹配的值。| 1| 4| \n| match| 找到一个或多个正则表达式的匹配。| 1| 4| \n| replace| 替换与正则表达式匹配的子串。| 1| 4| \n| split| 把字符串分割为字符串数组。| 1| 4|\n|\n```javascript\n\n        var str = \"aa\";\n        console.log(str.replace(\"a\", \"b\"));\n        打印结果为ba\n        \n        var str = \"aa\";\n        var reg = /a/g;\n        console.log(str.replace(reg, \"b\"));    \n        打印结果为bb                      \n        \n        var str = \"aabb\";\n        var reg = /(\\w)\\1(\\w)\\2/g;\n        console.log(str.replace(reg, \"$2$2$1$1\")); //可以通过 $n 获取第n 个子表达式的匹配条件\n        打印结果为bbaa\n        \n        var str = \"the-first-name\";\n        var reg = /-(\\w)/g;\n        console.log(str.replace(reg, function($, $1) {\n            return $1.toUpperCase();\n        }))\n        打印结果为theFirstName\n```\n\n\n正则表达式默认为贪婪匹配（总是往最大的方向去匹配）  \n取消贪婪匹配（匹配最短）（在每个量词后面加上一个 ？）\n```javascript\n        var reg = /a{3,5}?/g;\n        var reg1 = /a{3,5}/g;\n        var str = \"aaaaaaaaaaaaaaaa\";\n        console.log(str.match(reg));\n        console.log(str.match(reg1));\n        \n        打印结果为：\n        [\"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]\n        [\"aaaaa\", \"aaaaa\", \"aaaaa\"]\n\n```\n\n```javascript\nvar reg = /^(?!\\d+$)(?![A-z]+$)[0-9A-z]{8,16}$/;\n匹配密码8 - 16位不能只有数字或字母\n```\n\n","slug":"运动_正则","published":1,"updated":"2022-01-01T06:34:48.730Z","_id":"ckxu6dnj5001u10ax97yefntz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"运动-正则\"><a href=\"#运动-正则\" class=\"headerlink\" title=\"运动 正则\"></a>运动 正则</h1><hr>\n<h2 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h2><p>offsetLeft：当前位置距离左边界距离<br>多物体运动：要给每个物体单独设置自己的定时器<br>回调机制：执行完主题函数再</p>\n<p>JSON是一种传输数据的格式（以对象为样板，本质上就是对象（json的属性名要变成字符串样式），但用途有区别，对象就是本地用的，json是用来传输的）</p>\n<h4 id=\"JSON-stringify-json-—-gt-string\"><a href=\"#JSON-stringify-json-—-gt-string\" class=\"headerlink\" title=\"JSON.stringify(); json — &gt; string\"></a>JSON.stringify(); json — &gt; string</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;xyq&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.stringify(obj)</span><br><span class=\"line\">   返回结果为</span><br><span class=\"line\"><span class=\"string\">&quot;&#123;\\&quot;name\\&quot;:\\&quot;xyq\\&quot;,\\&quot;age\\&quot;:20&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON-parse-string-—-gt-json\"><a href=\"#JSON-parse-string-—-gt-json\" class=\"headerlink\" title=\"JSON.parse();  string — &gt; json\"></a>JSON.parse();  string — &gt; json</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;xyq&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.stringify(obj) </span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.parse(json)</span><br><span class=\"line\">返回值为：</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;xyq&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>dom树深度优先原则</p>\n<h2 id=\"异步加载JS\"><a href=\"#异步加载JS\" class=\"headerlink\" title=\"异步加载JS\"></a>异步加载JS</h2><h3 id=\"js加载的缺点：\"><a href=\"#js加载的缺点：\" class=\"headerlink\" title=\"js加载的缺点：\"></a>js加载的缺点：</h3><ul>\n<li>加载工具方法没必要阻塞文档，过得js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。</li>\n<li>有些工具方法需要按需加载，用到再加载，不用不加载。</li>\n</ul>\n<h3 id=\"javascript-异步加载-的-三种方案\"><a href=\"#javascript-异步加载-的-三种方案\" class=\"headerlink\" title=\"javascript 异步加载 的 三种方案\"></a>javascript 异步加载 的 三种方案</h3><ol>\n<li>defer 异步加载，但要等到dom文档全部解析完才会被执行。只有IE能用。可以在script内写语句<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;tools.js&quot;</span> defer=<span class=\"string\">&quot;defer&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>async 异步加载，加载完就执行，async只能加载外部脚本，不能把js写在script 标签里。</li>\n</ol>\n<p>1和2 执行时不阻塞页面<br>3. 创建script，插入到DOM中，加载完毕后callBack。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">        script.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">        script.src = <span class=\"string\">&quot;demo.js&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.head.appendChild(script);<span class=\"comment\">//执行这一行时js才开始执行</span></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">        script.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">        script.src = <span class=\"string\">&quot;demo.js&quot;</span>;</span><br><span class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//会等js文件下载完之后在执行</span></span><br><span class=\"line\">            语句; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"js加载时间\"><a href=\"#js加载时间\" class=\"headerlink\" title=\"js加载时间\"></a>js加载时间</h3><ol>\n<li><p>创建Document对象，开始解析web页面。解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = ‘loading’。</p>\n</li>\n<li><p>遇到link外部css，创建线程加载，并继续解析文档。</p>\n</li>\n<li><p>遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。</p>\n</li>\n<li><p>遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档。<br>对于async属性的脚本，脚本加载完成后立即执行。（异步禁止使用document.write()）</p>\n</li>\n<li><p>遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。</p>\n</li>\n<li><p>当文档解析完成，document.readyState = ‘interactive’。</p>\n</li>\n<li><p>文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()）;</p>\n</li>\n<li><p>document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。</p>\n</li>\n<li><p>当所有async的脚本加载完成并执行后、img等加载完成后，document.readyState = ‘complete’，window对象触发load事件。</p>\n</li>\n<li><p>从此，以异步响应方式处理用户输入、网络事件等。</p>\n</li>\n</ol>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a><a href=\"https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp\">正则表达式</a></h2><p>多行字符串（更清晰，通过 \\ 将一行的结束符转义）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> test = <span class=\"string\">&quot;\\</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;&lt;/div&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;&lt;/span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">        &quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则表达式两种创建方式：\"><a href=\"#正则表达式两种创建方式：\" class=\"headerlink\" title=\"正则表达式两种创建方式：\"></a>正则表达式两种创建方式：</h3><ol>\n<li><p>直接量(var 变量名  = / 字符串 /属性（可不写）  )<br>var reg = /abc/;</p>\n</li>\n<li><p>new RegExp(var 变量名 = new RegExp(“规则” ，”属性（可不写）”);)</p>\n<p> <code>var reg = new RegExp(&quot;abc&quot;);</code></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ ]:表达式（里面填符合要求的范围）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[ab][cd][d]/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">        str.match(reg)</span><br><span class=\"line\">        返回值：</span><br><span class=\"line\">    \t[<span class=\"string\">&quot;bcd&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^放在表达式里表示 非（除了）</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^a]/</span>;<span class=\"comment\">//匹配第一位不是a的字符串</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">         str.match(reg)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（条件 | 条件 |条件）：可表示范围</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(abc|bcd)/g</span>;</span><br><span class=\"line\">        可匹配是abc 或 bcd 的字符串</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<p>\\n : 与第n子表达式个完全一样的匹配条件（n必须为具体的数字）</p>\n<p>var reg = /(\\w)\\1\\1\\1/g;   //匹配4个完全一样的字符串（例如 “aaaa”）</p>\n<p>var reg = /(\\w)\\1(\\w)\\2/g; //可匹配AABB样式的字符串  </p>\n<h4 id=\"方括号\"><a href=\"#方括号\" class=\"headerlink\" title=\"方括号\"></a>方括号</h4><p>方括号用于查找某个范围内的字符：<br>| 表达式 | 描述  |<br>| :—  | :————— |<br>| [abc]  | 查找方括号之间的任何字符。|<br>| [^abc] | 查找任何不在方括号之间的字符。|<br>| [0-9] | 查找任何从 0 至 9 的数字。|<br>| [a-z] | 查找任何从小写 a 到小写 z 的字符。|<br>| [A-Z] | 查找任何从大写 A 到大写 Z 的字符。|<br>| [A-z] | 查找任何从大写 A 到小写 z 的字符。|<br>| [adgk] | 查找给定集合内的任何字符。|<br>| [^adgk] | 查找给定集合外的任何字符。|<br>| (red|blue|green) | 查找任何指定的选项。|<br>|</p>\n<h4 id=\"元字符（Metacharacter）\"><a href=\"#元字符（Metacharacter）\" class=\"headerlink\" title=\"元字符（Metacharacter）\"></a>元字符（Metacharacter）</h4><p>是拥有特殊含义的字符：<br>| 元字符 | 描述 |<br>| :—- | :—- |<br>|.查找单个字符，除了换行和行结束符.<br>| \\w |     [ 0 - 9A-z_]查找单词字符。<br>| \\W | 查找非单词字符。<br>| \\d |    [ 0 - 9]查找数字。<br>| \\D | 查找非数字字符。<br>| \\s | 查找空白字符。<br>| \\S | 查找非空白字符。<br>| \\b | 匹配单词边界。<br>| \\B | 匹配非单词边界。<br>| \\0 | 查找 NUL 字符。<br>| \\n | 查找换行符。<br>| \\f | 查找换页符。<br>| \\r | 查找回车符。<br>| \\t | 查找制表符。<br>| \\v | 查找垂直制表符。<br>| \\x | xx查找以八进制数 xxx 规定的字符。<br>| \\x | dd查找以十六进制数 dd 规定的字符。<br>| \\u | xxxx查找以十六进制数 xxxx 规定的 Unicode 字符。<br>|</p>\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><table>\n<thead>\n<tr>\n<th align=\"left\">量词</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">n+</td>\n<td align=\"left\">匹配任何包含至少一个 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n*</td>\n<td align=\"left\">匹配任何包含零个或多个 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n?</td>\n<td align=\"left\">匹配任何包含零个或一个 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n{X}</td>\n<td align=\"left\">匹配包含 X 个 n 的序列的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n{X,Y}</td>\n<td align=\"left\">匹配包含 X 至 Y 个 n 的序列的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n{X,}</td>\n<td align=\"left\">匹配包含至少 X 个 n 的序列的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n$</td>\n<td align=\"left\">匹配任何结尾为 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">^n</td>\n<td align=\"left\">匹配任何开头为 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">?=n</td>\n<td align=\"left\">匹配任何其后紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">?!n</td>\n<td align=\"left\">匹配任何其后没有紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"RegExp-对象属性\"><a href=\"#RegExp-对象属性\" class=\"headerlink\" title=\"RegExp 对象属性\"></a>RegExp 对象属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>FF</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>globalRegExp</td>\n<td>对象是否具有标志 g</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>ignoreCaseRegExp</td>\n<td>对象是否具有标志 i</td>\n<td>。1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>lastIndex</td>\n<td>一个整数，标示开始下一次匹配的字符位</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>multilineRegExp</td>\n<td>对象是否具有标志 m</td>\n<td>。1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>source</td>\n<td>正则表达式的源文本。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"RegExp-对象方法\"><a href=\"#RegExp-对象方法\" class=\"headerlink\" title=\"RegExp 对象方法\"></a>RegExp 对象方法</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>FF</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>编译正则表达式。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>检索字符串中指定的值。返回找到的值，并确定其位置。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>test</td>\n<td>检索字符串中指定的值。返回 true 或 false。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>FF</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>search</td>\n<td>检索与正则表达式相匹配的值。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>match</td>\n<td>找到一个或多个正则表达式的匹配。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换与正则表达式匹配的子串。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>split</td>\n<td>把字符串分割为字符串数组。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aa&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">打印结果为ba</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aa&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a/g</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(reg, <span class=\"string\">&quot;b&quot;</span>));    </span><br><span class=\"line\">打印结果为bb                      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aabb&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\w)\\1(\\w)\\2/g</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(reg, <span class=\"string\">&quot;$2$2$1$1&quot;</span>)); <span class=\"comment\">//可以通过 $n 获取第n 个子表达式的匹配条件</span></span><br><span class=\"line\">打印结果为bbaa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;the-first-name&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/-(\\w)/g</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(reg, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, $<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $<span class=\"number\">1.</span>toUpperCase();</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">打印结果为theFirstName</span><br></pre></td></tr></table></figure>\n\n\n<p>正则表达式默认为贪婪匹配（总是往最大的方向去匹配）<br>取消贪婪匹配（匹配最短）（在每个量词后面加上一个 ？）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a&#123;3,5&#125;?/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/a&#123;3,5&#125;/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.match(reg1));</span><br><span class=\"line\"></span><br><span class=\"line\">打印结果为：</span><br><span class=\"line\">[<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>]</span><br><span class=\"line\">[<span class=\"string\">&quot;aaaaa&quot;</span>, <span class=\"string\">&quot;aaaaa&quot;</span>, <span class=\"string\">&quot;aaaaa&quot;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(?!\\d+$)(?![A-z]+$)[0-9A-z]&#123;8,16&#125;$/</span>;</span><br><span class=\"line\">匹配密码<span class=\"number\">8</span> - <span class=\"number\">16</span>位不能只有数字或字母</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":4579,"excerpt":"","more":"<h1 id=\"运动-正则\"><a href=\"#运动-正则\" class=\"headerlink\" title=\"运动 正则\"></a>运动 正则</h1><hr>\n<h2 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h2><p>offsetLeft：当前位置距离左边界距离<br>多物体运动：要给每个物体单独设置自己的定时器<br>回调机制：执行完主题函数再</p>\n<p>JSON是一种传输数据的格式（以对象为样板，本质上就是对象（json的属性名要变成字符串样式），但用途有区别，对象就是本地用的，json是用来传输的）</p>\n<h4 id=\"JSON-stringify-json-—-gt-string\"><a href=\"#JSON-stringify-json-—-gt-string\" class=\"headerlink\" title=\"JSON.stringify(); json — &gt; string\"></a>JSON.stringify(); json — &gt; string</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;xyq&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.stringify(obj)</span><br><span class=\"line\">   返回结果为</span><br><span class=\"line\"><span class=\"string\">&quot;&#123;\\&quot;name\\&quot;:\\&quot;xyq\\&quot;,\\&quot;age\\&quot;:20&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON-parse-string-—-gt-json\"><a href=\"#JSON-parse-string-—-gt-json\" class=\"headerlink\" title=\"JSON.parse();  string — &gt; json\"></a>JSON.parse();  string — &gt; json</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;xyq&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.stringify(obj) </span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.parse(json)</span><br><span class=\"line\">返回值为：</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;xyq&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>dom树深度优先原则</p>\n<h2 id=\"异步加载JS\"><a href=\"#异步加载JS\" class=\"headerlink\" title=\"异步加载JS\"></a>异步加载JS</h2><h3 id=\"js加载的缺点：\"><a href=\"#js加载的缺点：\" class=\"headerlink\" title=\"js加载的缺点：\"></a>js加载的缺点：</h3><ul>\n<li>加载工具方法没必要阻塞文档，过得js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。</li>\n<li>有些工具方法需要按需加载，用到再加载，不用不加载。</li>\n</ul>\n<h3 id=\"javascript-异步加载-的-三种方案\"><a href=\"#javascript-异步加载-的-三种方案\" class=\"headerlink\" title=\"javascript 异步加载 的 三种方案\"></a>javascript 异步加载 的 三种方案</h3><ol>\n<li>defer 异步加载，但要等到dom文档全部解析完才会被执行。只有IE能用。可以在script内写语句<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;tools.js&quot;</span> defer=<span class=\"string\">&quot;defer&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>async 异步加载，加载完就执行，async只能加载外部脚本，不能把js写在script 标签里。</li>\n</ol>\n<p>1和2 执行时不阻塞页面<br>3. 创建script，插入到DOM中，加载完毕后callBack。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">        script.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">        script.src = <span class=\"string\">&quot;demo.js&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.head.appendChild(script);<span class=\"comment\">//执行这一行时js才开始执行</span></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">        script.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">        script.src = <span class=\"string\">&quot;demo.js&quot;</span>;</span><br><span class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//会等js文件下载完之后在执行</span></span><br><span class=\"line\">            语句; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"js加载时间\"><a href=\"#js加载时间\" class=\"headerlink\" title=\"js加载时间\"></a>js加载时间</h3><ol>\n<li><p>创建Document对象，开始解析web页面。解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = ‘loading’。</p>\n</li>\n<li><p>遇到link外部css，创建线程加载，并继续解析文档。</p>\n</li>\n<li><p>遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。</p>\n</li>\n<li><p>遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档。<br>对于async属性的脚本，脚本加载完成后立即执行。（异步禁止使用document.write()）</p>\n</li>\n<li><p>遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。</p>\n</li>\n<li><p>当文档解析完成，document.readyState = ‘interactive’。</p>\n</li>\n<li><p>文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()）;</p>\n</li>\n<li><p>document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。</p>\n</li>\n<li><p>当所有async的脚本加载完成并执行后、img等加载完成后，document.readyState = ‘complete’，window对象触发load事件。</p>\n</li>\n<li><p>从此，以异步响应方式处理用户输入、网络事件等。</p>\n</li>\n</ol>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a><a href=\"https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp\">正则表达式</a></h2><p>多行字符串（更清晰，通过 \\ 将一行的结束符转义）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> test = <span class=\"string\">&quot;\\</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;&lt;/div&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;&lt;/span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">        &quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则表达式两种创建方式：\"><a href=\"#正则表达式两种创建方式：\" class=\"headerlink\" title=\"正则表达式两种创建方式：\"></a>正则表达式两种创建方式：</h3><ol>\n<li><p>直接量(var 变量名  = / 字符串 /属性（可不写）  )<br>var reg = /abc/;</p>\n</li>\n<li><p>new RegExp(var 变量名 = new RegExp(“规则” ，”属性（可不写）”);)</p>\n<p> <code>var reg = new RegExp(&quot;abc&quot;);</code></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ ]:表达式（里面填符合要求的范围）</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[ab][cd][d]/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">        str.match(reg)</span><br><span class=\"line\">        返回值：</span><br><span class=\"line\">    \t[<span class=\"string\">&quot;bcd&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^放在表达式里表示 非（除了）</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^a]/</span>;<span class=\"comment\">//匹配第一位不是a的字符串</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">         str.match(reg)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（条件 | 条件 |条件）：可表示范围</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(abc|bcd)/g</span>;</span><br><span class=\"line\">        可匹配是abc 或 bcd 的字符串</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<p>\\n : 与第n子表达式个完全一样的匹配条件（n必须为具体的数字）</p>\n<p>var reg = /(\\w)\\1\\1\\1/g;   //匹配4个完全一样的字符串（例如 “aaaa”）</p>\n<p>var reg = /(\\w)\\1(\\w)\\2/g; //可匹配AABB样式的字符串  </p>\n<h4 id=\"方括号\"><a href=\"#方括号\" class=\"headerlink\" title=\"方括号\"></a>方括号</h4><p>方括号用于查找某个范围内的字符：<br>| 表达式 | 描述  |<br>| :—  | :————— |<br>| [abc]  | 查找方括号之间的任何字符。|<br>| [^abc] | 查找任何不在方括号之间的字符。|<br>| [0-9] | 查找任何从 0 至 9 的数字。|<br>| [a-z] | 查找任何从小写 a 到小写 z 的字符。|<br>| [A-Z] | 查找任何从大写 A 到大写 Z 的字符。|<br>| [A-z] | 查找任何从大写 A 到小写 z 的字符。|<br>| [adgk] | 查找给定集合内的任何字符。|<br>| [^adgk] | 查找给定集合外的任何字符。|<br>| (red|blue|green) | 查找任何指定的选项。|<br>|</p>\n<h4 id=\"元字符（Metacharacter）\"><a href=\"#元字符（Metacharacter）\" class=\"headerlink\" title=\"元字符（Metacharacter）\"></a>元字符（Metacharacter）</h4><p>是拥有特殊含义的字符：<br>| 元字符 | 描述 |<br>| :—- | :—- |<br>|.查找单个字符，除了换行和行结束符.<br>| \\w |     [ 0 - 9A-z_]查找单词字符。<br>| \\W | 查找非单词字符。<br>| \\d |    [ 0 - 9]查找数字。<br>| \\D | 查找非数字字符。<br>| \\s | 查找空白字符。<br>| \\S | 查找非空白字符。<br>| \\b | 匹配单词边界。<br>| \\B | 匹配非单词边界。<br>| \\0 | 查找 NUL 字符。<br>| \\n | 查找换行符。<br>| \\f | 查找换页符。<br>| \\r | 查找回车符。<br>| \\t | 查找制表符。<br>| \\v | 查找垂直制表符。<br>| \\x | xx查找以八进制数 xxx 规定的字符。<br>| \\x | dd查找以十六进制数 dd 规定的字符。<br>| \\u | xxxx查找以十六进制数 xxxx 规定的 Unicode 字符。<br>|</p>\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><table>\n<thead>\n<tr>\n<th align=\"left\">量词</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">n+</td>\n<td align=\"left\">匹配任何包含至少一个 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n*</td>\n<td align=\"left\">匹配任何包含零个或多个 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n?</td>\n<td align=\"left\">匹配任何包含零个或一个 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n{X}</td>\n<td align=\"left\">匹配包含 X 个 n 的序列的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n{X,Y}</td>\n<td align=\"left\">匹配包含 X 至 Y 个 n 的序列的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n{X,}</td>\n<td align=\"left\">匹配包含至少 X 个 n 的序列的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">n$</td>\n<td align=\"left\">匹配任何结尾为 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">^n</td>\n<td align=\"left\">匹配任何开头为 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">?=n</td>\n<td align=\"left\">匹配任何其后紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">?!n</td>\n<td align=\"left\">匹配任何其后没有紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"RegExp-对象属性\"><a href=\"#RegExp-对象属性\" class=\"headerlink\" title=\"RegExp 对象属性\"></a>RegExp 对象属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>FF</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>globalRegExp</td>\n<td>对象是否具有标志 g</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>ignoreCaseRegExp</td>\n<td>对象是否具有标志 i</td>\n<td>。1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>lastIndex</td>\n<td>一个整数，标示开始下一次匹配的字符位</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>multilineRegExp</td>\n<td>对象是否具有标志 m</td>\n<td>。1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>source</td>\n<td>正则表达式的源文本。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"RegExp-对象方法\"><a href=\"#RegExp-对象方法\" class=\"headerlink\" title=\"RegExp 对象方法\"></a>RegExp 对象方法</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>FF</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>编译正则表达式。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>检索字符串中指定的值。返回找到的值，并确定其位置。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>test</td>\n<td>检索字符串中指定的值。返回 true 或 false。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>FF</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>search</td>\n<td>检索与正则表达式相匹配的值。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>match</td>\n<td>找到一个或多个正则表达式的匹配。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换与正则表达式匹配的子串。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>split</td>\n<td>把字符串分割为字符串数组。</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aa&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">打印结果为ba</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aa&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a/g</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(reg, <span class=\"string\">&quot;b&quot;</span>));    </span><br><span class=\"line\">打印结果为bb                      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aabb&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\w)\\1(\\w)\\2/g</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(reg, <span class=\"string\">&quot;$2$2$1$1&quot;</span>)); <span class=\"comment\">//可以通过 $n 获取第n 个子表达式的匹配条件</span></span><br><span class=\"line\">打印结果为bbaa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;the-first-name&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/-(\\w)/g</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.replace(reg, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, $<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $<span class=\"number\">1.</span>toUpperCase();</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">打印结果为theFirstName</span><br></pre></td></tr></table></figure>\n\n\n<p>正则表达式默认为贪婪匹配（总是往最大的方向去匹配）<br>取消贪婪匹配（匹配最短）（在每个量词后面加上一个 ？）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a&#123;3,5&#125;?/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/a&#123;3,5&#125;/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;aaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str.match(reg1));</span><br><span class=\"line\"></span><br><span class=\"line\">打印结果为：</span><br><span class=\"line\">[<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>]</span><br><span class=\"line\">[<span class=\"string\">&quot;aaaaa&quot;</span>, <span class=\"string\">&quot;aaaaa&quot;</span>, <span class=\"string\">&quot;aaaaa&quot;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(?!\\d+$)(?![A-z]+$)[0-9A-z]&#123;8,16&#125;$/</span>;</span><br><span class=\"line\">匹配密码<span class=\"number\">8</span> - <span class=\"number\">16</span>位不能只有数字或字母</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CSS3选择器","date":"2021-12-31T08:21:22.000Z","description":"CSS3 的各种选择器：关系选择器、属性选择器、伪类选择器","_content":"\n# 选择器：\n-----\n## 关系选择器：\n-  \\+ ：下一个满足条件的兄弟元素节点。\n`div + P{}  //选出div的兄弟节点并且是p标签`\n\n- ~ ： 后面的满足条件的所有兄弟节点\n`div ~ p{}  //选出div兄弟节点中所有的p节点`\n\n## 属性选择器：\n- [attribute\\~=\"value\"] 选择器选取属性值包含指定词的元素。\n- [attribute|=\"value\"] 选择器用于选取指定属性以指定值开头的元素。\n- [attribute^=\"value\"] 选择器用于选取指定属性以指定值开头的元素。\n- [attribute$=\"value\"] 选择器用于选取指定属性以指定值结尾的元素。\n- [attribute*=\"value\"] 选择器选取属性值包含指定词的元素。\n- ::placeholer  选择带placeholeder元素\n- ::selection   设置页面字体选中后的状态\n\n## 伪类选择器：\n当前元素的状态（全部是当前元素的限制条件,想操作谁就选谁）\n- :not  不是什么什么\n- :root 根目录选择器（HTML下是html标签）\n- :target 选择被锚点标记之后的元素\n\n### 要考虑其他元素（要关注其他元素）：\n- :first-child 第一个子元素\n- :last-child 最后一个子元素\n- :only-child  仅有一个子元素\n- :nth-child(n) 第n 个子元素 （可写计算公式 ，n从0开始查数）CSS从1开始查数 \n- :nth-last-child(n) 第n 个子元素,倒着数 （可写计算公式）\n\n\n### 不用考虑其他元素(不关注其他类型元素)：\n- :first-of-type  当前类型的第一个\n- :last-of-type  当前类型的最后一个\n- :only-of-type  当前类型的仅有一个\n- :nth-of-type  当前类型的第n个\n- :nth-of-last-type  当前类型的第n个，倒着查\n- :empty \t元素内容为空\n- :checked  元素被选中状态\n- :disabled  被禁用的\n- :ready-only  只能读,不能写的\n:ready-write  可读可写的\n\n当给html和body设置高度为100%后，再给里面的元素高度设置100%可充满整个页面。\n\n\n### border：\n#### border-radious : \n(左上，右上，右下，左下)  \n（上，上，下，下 / 左，右，右，左）不常用 \n\n可写为border-top-left-radious:左上角  \n用正方形画四分之一圆：一个角的值等于正方形的边长\n\n\n#### box-shadow：\n普通写法：   \n（inset（内阴影默认为外阴影（不写）），水平偏移量（正是向右，负是向左），垂直偏移量（正值向下，负值向上），阴影模糊程度（基于原边框向两侧同时模糊），传播距离（可选）（在四个方向上同时增大阴影的大小），颜色）。\n\n可设置多个box-shadow值，先写的在上面，重复的会加重颜色。\n\n阴影在背景颜色是上面，在文字的下面\n\n\n#### border-image：\n`border-image-source:url()  引入图片`\n\n- border-image-slice：(1-5个参数，前四个参数只能为数值，不能带px表示图片的分割方式，最后一个参数填上fill会把内容区也填充)\n\n\n- border-image-ouset  向外延伸多少\nborder-image-width  图片显示的宽度（为1表示完全填充，默认为1）\n- border-image-repeat  默认为stretch将被分割的图像使用拉伸的方式来填充满边框图像区域。\n- repeat：将被分割的图像使用重复平铺的方式来填充满边框图像区域。当图像碰到边界时，如果超过则被截断。\n- round：与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会根据情况缩放图像。\n- space： 与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。\n\n#### background：\n##### 渐变两种生成方法：\n- linear-gradient()线性渐变，\n- radial-gradient()径向渐变，当成一个图片来看待\n\n##### background\n- background-image ： 可以添加多个背景图片，多url\n- background-origin:图片的起始位置（结束位置无法确定），\n    - border-box；从边框开始，\n    - padding-box：从padding开始(默认值)\n    - content-box:从content开始 \n- background-clip:图片的截断部分，从哪开始以外部分都不显示，\n    - border-box：（默认值），\n    - padding-box：,content-box:，text（除了文字展示范围内展示图片（只在文字下面展示），以外区域不展示图片，只在webkit下可以用，需配合谷歌特有属性 \n- \\-webkit-text-fill-color:transparent使用，用完之后文字会变成背景的一部分，这时候在设置阴影，阴影会显示在文字的前面，可以适当设置阴影的透明度来缓冲效果）\n- background-attchent:\n    - fixed：背景图像相对于视口（viewport）固定，当范围超出原来容器就不会再显示了。；\n    - scroll：背景图像相对于元素固定，也就是说当元素内容滚动时背景图像不会跟着滚动，因为背景图像总是要跟着元素本身，但会随元素的祖先元素或窗体一起滚动。（默认值）；\n    - local：背景图像相对于元素内容固定，也就是说当元素随元素滚动时背景图像也会跟着滚动，因为背景图像总是要跟着内容\n- background-repeat: 可以填两个值代表水平和垂直方向，   \n    - repeat-x：背景图像在横向上平铺;\n    - repeat-y：背景图像在纵向上平铺;\n    - repeat：背景图像在横向和纵向平铺;\n    - no-repeat：背景图像不平铺(默认值);\n    - round：当背景图像不能以整数次平铺时，会根据情况缩放图像。;\n    - space：当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。\n- background-size:\n- background-position:定位开始位置参考图片的起始位置（background-origin）\t\n\n\n#### 渐变：\n`linear-gradient(方向(可选，默认为自下到上 to bottom,to top right ：到右上)，起始颜色，结束颜色)`\n\n[参考](http://css.doyoe.com/)\n\nborder-color的默认值等于color\t \t\n\n#### Text：\n- text-shadow：（水平偏移，垂直偏移，模糊值，颜色 ）\n- \\-webkit-text-stroke:描边（宽度，颜色）\n\n调用外部的字体包：\n\n```css\n@font-face{\nfont-family:  字体的名称;\nsrc:url() /*地址*/\n}\n```\n\n`user-select: none; /*禁止文字被复制*/`\n\n#### box:\nIE6混杂模式的盒模型  \nbox-width = width;  \n触发方式：box-sizing = border-box;\n\n#### overflow:\n- hidden(溢出部分隐藏);\n- scroll(溢出之后出现滚动条) ;\n- auto(溢出之后出现滚动条，更标准)，  \n可单独设置x,y轴（overflow）\n\n#### resize: 必须配合overflow来使用，不然没效果\n- none：不允许用户调整元素大小。\n- both：用户可以调节元素的宽度和高度。\n- horizontal：用户可以调节元素的宽度。\n- vertical：用户可以调节元素的高度。\n\n### 弹性盒模型：flex\n#### 弹性盒\nflex-shrink:计算要计算加权，而且压缩的部分是盒子的内容区。\n\n压缩大小 = 自己真实内容区 * flex-shrink / 所有元素（真实内容区 * flex-shrink）的总和  * 要压缩的总范围。\n\n只设置 flex-basis 或flex-basis > width代表元素的最小宽度，会随内容区增大；  \n设置width后，并且width > flex-basis，width表示元素的最大宽度，则flex-basis < realwidth < width。\n","source":"_posts/选择器.md","raw":"---\ntitle: CSS3选择器\ndate: 2021-12-31 16:21:22\ndescription: CSS3 的各种选择器：关系选择器、属性选择器、伪类选择器\ncategories: \n    - 前端学习笔记\n    - CSS \ntags: \n    - CSS\n    - 前端\n---\n\n# 选择器：\n-----\n## 关系选择器：\n-  \\+ ：下一个满足条件的兄弟元素节点。\n`div + P{}  //选出div的兄弟节点并且是p标签`\n\n- ~ ： 后面的满足条件的所有兄弟节点\n`div ~ p{}  //选出div兄弟节点中所有的p节点`\n\n## 属性选择器：\n- [attribute\\~=\"value\"] 选择器选取属性值包含指定词的元素。\n- [attribute|=\"value\"] 选择器用于选取指定属性以指定值开头的元素。\n- [attribute^=\"value\"] 选择器用于选取指定属性以指定值开头的元素。\n- [attribute$=\"value\"] 选择器用于选取指定属性以指定值结尾的元素。\n- [attribute*=\"value\"] 选择器选取属性值包含指定词的元素。\n- ::placeholer  选择带placeholeder元素\n- ::selection   设置页面字体选中后的状态\n\n## 伪类选择器：\n当前元素的状态（全部是当前元素的限制条件,想操作谁就选谁）\n- :not  不是什么什么\n- :root 根目录选择器（HTML下是html标签）\n- :target 选择被锚点标记之后的元素\n\n### 要考虑其他元素（要关注其他元素）：\n- :first-child 第一个子元素\n- :last-child 最后一个子元素\n- :only-child  仅有一个子元素\n- :nth-child(n) 第n 个子元素 （可写计算公式 ，n从0开始查数）CSS从1开始查数 \n- :nth-last-child(n) 第n 个子元素,倒着数 （可写计算公式）\n\n\n### 不用考虑其他元素(不关注其他类型元素)：\n- :first-of-type  当前类型的第一个\n- :last-of-type  当前类型的最后一个\n- :only-of-type  当前类型的仅有一个\n- :nth-of-type  当前类型的第n个\n- :nth-of-last-type  当前类型的第n个，倒着查\n- :empty \t元素内容为空\n- :checked  元素被选中状态\n- :disabled  被禁用的\n- :ready-only  只能读,不能写的\n:ready-write  可读可写的\n\n当给html和body设置高度为100%后，再给里面的元素高度设置100%可充满整个页面。\n\n\n### border：\n#### border-radious : \n(左上，右上，右下，左下)  \n（上，上，下，下 / 左，右，右，左）不常用 \n\n可写为border-top-left-radious:左上角  \n用正方形画四分之一圆：一个角的值等于正方形的边长\n\n\n#### box-shadow：\n普通写法：   \n（inset（内阴影默认为外阴影（不写）），水平偏移量（正是向右，负是向左），垂直偏移量（正值向下，负值向上），阴影模糊程度（基于原边框向两侧同时模糊），传播距离（可选）（在四个方向上同时增大阴影的大小），颜色）。\n\n可设置多个box-shadow值，先写的在上面，重复的会加重颜色。\n\n阴影在背景颜色是上面，在文字的下面\n\n\n#### border-image：\n`border-image-source:url()  引入图片`\n\n- border-image-slice：(1-5个参数，前四个参数只能为数值，不能带px表示图片的分割方式，最后一个参数填上fill会把内容区也填充)\n\n\n- border-image-ouset  向外延伸多少\nborder-image-width  图片显示的宽度（为1表示完全填充，默认为1）\n- border-image-repeat  默认为stretch将被分割的图像使用拉伸的方式来填充满边框图像区域。\n- repeat：将被分割的图像使用重复平铺的方式来填充满边框图像区域。当图像碰到边界时，如果超过则被截断。\n- round：与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会根据情况缩放图像。\n- space： 与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。\n\n#### background：\n##### 渐变两种生成方法：\n- linear-gradient()线性渐变，\n- radial-gradient()径向渐变，当成一个图片来看待\n\n##### background\n- background-image ： 可以添加多个背景图片，多url\n- background-origin:图片的起始位置（结束位置无法确定），\n    - border-box；从边框开始，\n    - padding-box：从padding开始(默认值)\n    - content-box:从content开始 \n- background-clip:图片的截断部分，从哪开始以外部分都不显示，\n    - border-box：（默认值），\n    - padding-box：,content-box:，text（除了文字展示范围内展示图片（只在文字下面展示），以外区域不展示图片，只在webkit下可以用，需配合谷歌特有属性 \n- \\-webkit-text-fill-color:transparent使用，用完之后文字会变成背景的一部分，这时候在设置阴影，阴影会显示在文字的前面，可以适当设置阴影的透明度来缓冲效果）\n- background-attchent:\n    - fixed：背景图像相对于视口（viewport）固定，当范围超出原来容器就不会再显示了。；\n    - scroll：背景图像相对于元素固定，也就是说当元素内容滚动时背景图像不会跟着滚动，因为背景图像总是要跟着元素本身，但会随元素的祖先元素或窗体一起滚动。（默认值）；\n    - local：背景图像相对于元素内容固定，也就是说当元素随元素滚动时背景图像也会跟着滚动，因为背景图像总是要跟着内容\n- background-repeat: 可以填两个值代表水平和垂直方向，   \n    - repeat-x：背景图像在横向上平铺;\n    - repeat-y：背景图像在纵向上平铺;\n    - repeat：背景图像在横向和纵向平铺;\n    - no-repeat：背景图像不平铺(默认值);\n    - round：当背景图像不能以整数次平铺时，会根据情况缩放图像。;\n    - space：当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。\n- background-size:\n- background-position:定位开始位置参考图片的起始位置（background-origin）\t\n\n\n#### 渐变：\n`linear-gradient(方向(可选，默认为自下到上 to bottom,to top right ：到右上)，起始颜色，结束颜色)`\n\n[参考](http://css.doyoe.com/)\n\nborder-color的默认值等于color\t \t\n\n#### Text：\n- text-shadow：（水平偏移，垂直偏移，模糊值，颜色 ）\n- \\-webkit-text-stroke:描边（宽度，颜色）\n\n调用外部的字体包：\n\n```css\n@font-face{\nfont-family:  字体的名称;\nsrc:url() /*地址*/\n}\n```\n\n`user-select: none; /*禁止文字被复制*/`\n\n#### box:\nIE6混杂模式的盒模型  \nbox-width = width;  \n触发方式：box-sizing = border-box;\n\n#### overflow:\n- hidden(溢出部分隐藏);\n- scroll(溢出之后出现滚动条) ;\n- auto(溢出之后出现滚动条，更标准)，  \n可单独设置x,y轴（overflow）\n\n#### resize: 必须配合overflow来使用，不然没效果\n- none：不允许用户调整元素大小。\n- both：用户可以调节元素的宽度和高度。\n- horizontal：用户可以调节元素的宽度。\n- vertical：用户可以调节元素的高度。\n\n### 弹性盒模型：flex\n#### 弹性盒\nflex-shrink:计算要计算加权，而且压缩的部分是盒子的内容区。\n\n压缩大小 = 自己真实内容区 * flex-shrink / 所有元素（真实内容区 * flex-shrink）的总和  * 要压缩的总范围。\n\n只设置 flex-basis 或flex-basis > width代表元素的最小宽度，会随内容区增大；  \n设置width后，并且width > flex-basis，width表示元素的最大宽度，则flex-basis < realwidth < width。\n","slug":"选择器","published":1,"updated":"2022-01-01T06:35:11.683Z","_id":"ckxu6dnj6001x10axeqr41q7l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"选择器：\"><a href=\"#选择器：\" class=\"headerlink\" title=\"选择器：\"></a>选择器：</h1><hr>\n<h2 id=\"关系选择器：\"><a href=\"#关系选择器：\" class=\"headerlink\" title=\"关系选择器：\"></a>关系选择器：</h2><ul>\n<li><p> + ：下一个满足条件的兄弟元素节点。<br><code>div + P&#123;&#125;  //选出div的兄弟节点并且是p标签</code></p>\n</li>\n<li><p>~ ： 后面的满足条件的所有兄弟节点<br><code>div ~ p&#123;&#125;  //选出div兄弟节点中所有的p节点</code></p>\n</li>\n</ul>\n<h2 id=\"属性选择器：\"><a href=\"#属性选择器：\" class=\"headerlink\" title=\"属性选择器：\"></a>属性选择器：</h2><ul>\n<li>[attribute~=”value”] 选择器选取属性值包含指定词的元素。</li>\n<li>[attribute|=”value”] 选择器用于选取指定属性以指定值开头的元素。</li>\n<li>[attribute^=”value”] 选择器用于选取指定属性以指定值开头的元素。</li>\n<li>[attribute$=”value”] 选择器用于选取指定属性以指定值结尾的元素。</li>\n<li>[attribute*=”value”] 选择器选取属性值包含指定词的元素。</li>\n<li>::placeholer  选择带placeholeder元素</li>\n<li>::selection   设置页面字体选中后的状态</li>\n</ul>\n<h2 id=\"伪类选择器：\"><a href=\"#伪类选择器：\" class=\"headerlink\" title=\"伪类选择器：\"></a>伪类选择器：</h2><p>当前元素的状态（全部是当前元素的限制条件,想操作谁就选谁）</p>\n<ul>\n<li>:not  不是什么什么</li>\n<li>:root 根目录选择器（HTML下是html标签）</li>\n<li>:target 选择被锚点标记之后的元素</li>\n</ul>\n<h3 id=\"要考虑其他元素（要关注其他元素）：\"><a href=\"#要考虑其他元素（要关注其他元素）：\" class=\"headerlink\" title=\"要考虑其他元素（要关注其他元素）：\"></a>要考虑其他元素（要关注其他元素）：</h3><ul>\n<li>:first-child 第一个子元素</li>\n<li>:last-child 最后一个子元素</li>\n<li>:only-child  仅有一个子元素</li>\n<li>:nth-child(n) 第n 个子元素 （可写计算公式 ，n从0开始查数）CSS从1开始查数 </li>\n<li>:nth-last-child(n) 第n 个子元素,倒着数 （可写计算公式）</li>\n</ul>\n<h3 id=\"不用考虑其他元素-不关注其他类型元素-：\"><a href=\"#不用考虑其他元素-不关注其他类型元素-：\" class=\"headerlink\" title=\"不用考虑其他元素(不关注其他类型元素)：\"></a>不用考虑其他元素(不关注其他类型元素)：</h3><ul>\n<li>:first-of-type  当前类型的第一个</li>\n<li>:last-of-type  当前类型的最后一个</li>\n<li>:only-of-type  当前类型的仅有一个</li>\n<li>:nth-of-type  当前类型的第n个</li>\n<li>:nth-of-last-type  当前类型的第n个，倒着查</li>\n<li>:empty     元素内容为空</li>\n<li>:checked  元素被选中状态</li>\n<li>:disabled  被禁用的</li>\n<li>:ready-only  只能读,不能写的<br>:ready-write  可读可写的</li>\n</ul>\n<p>当给html和body设置高度为100%后，再给里面的元素高度设置100%可充满整个页面。</p>\n<h3 id=\"border：\"><a href=\"#border：\" class=\"headerlink\" title=\"border：\"></a>border：</h3><h4 id=\"border-radious\"><a href=\"#border-radious\" class=\"headerlink\" title=\"border-radious :\"></a>border-radious :</h4><p>(左上，右上，右下，左下)<br>（上，上，下，下 / 左，右，右，左）不常用 </p>\n<p>可写为border-top-left-radious:左上角<br>用正方形画四分之一圆：一个角的值等于正方形的边长</p>\n<h4 id=\"box-shadow：\"><a href=\"#box-shadow：\" class=\"headerlink\" title=\"box-shadow：\"></a>box-shadow：</h4><p>普通写法：<br>（inset（内阴影默认为外阴影（不写）），水平偏移量（正是向右，负是向左），垂直偏移量（正值向下，负值向上），阴影模糊程度（基于原边框向两侧同时模糊），传播距离（可选）（在四个方向上同时增大阴影的大小），颜色）。</p>\n<p>可设置多个box-shadow值，先写的在上面，重复的会加重颜色。</p>\n<p>阴影在背景颜色是上面，在文字的下面</p>\n<h4 id=\"border-image：\"><a href=\"#border-image：\" class=\"headerlink\" title=\"border-image：\"></a>border-image：</h4><p><code>border-image-source:url()  引入图片</code></p>\n<ul>\n<li>border-image-slice：(1-5个参数，前四个参数只能为数值，不能带px表示图片的分割方式，最后一个参数填上fill会把内容区也填充)</li>\n</ul>\n<ul>\n<li>border-image-ouset  向外延伸多少<br>border-image-width  图片显示的宽度（为1表示完全填充，默认为1）</li>\n<li>border-image-repeat  默认为stretch将被分割的图像使用拉伸的方式来填充满边框图像区域。</li>\n<li>repeat：将被分割的图像使用重复平铺的方式来填充满边框图像区域。当图像碰到边界时，如果超过则被截断。</li>\n<li>round：与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会根据情况缩放图像。</li>\n<li>space： 与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。</li>\n</ul>\n<h4 id=\"background：\"><a href=\"#background：\" class=\"headerlink\" title=\"background：\"></a>background：</h4><h5 id=\"渐变两种生成方法：\"><a href=\"#渐变两种生成方法：\" class=\"headerlink\" title=\"渐变两种生成方法：\"></a>渐变两种生成方法：</h5><ul>\n<li>linear-gradient()线性渐变，</li>\n<li>radial-gradient()径向渐变，当成一个图片来看待</li>\n</ul>\n<h5 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h5><ul>\n<li>background-image ： 可以添加多个背景图片，多url</li>\n<li>background-origin:图片的起始位置（结束位置无法确定），<ul>\n<li>border-box；从边框开始，</li>\n<li>padding-box：从padding开始(默认值)</li>\n<li>content-box:从content开始 </li>\n</ul>\n</li>\n<li>background-clip:图片的截断部分，从哪开始以外部分都不显示，<ul>\n<li>border-box：（默认值），</li>\n<li>padding-box：,content-box:，text（除了文字展示范围内展示图片（只在文字下面展示），以外区域不展示图片，只在webkit下可以用，需配合谷歌特有属性 </li>\n</ul>\n</li>\n<li>-webkit-text-fill-color:transparent使用，用完之后文字会变成背景的一部分，这时候在设置阴影，阴影会显示在文字的前面，可以适当设置阴影的透明度来缓冲效果）</li>\n<li>background-attchent:<ul>\n<li>fixed：背景图像相对于视口（viewport）固定，当范围超出原来容器就不会再显示了。；</li>\n<li>scroll：背景图像相对于元素固定，也就是说当元素内容滚动时背景图像不会跟着滚动，因为背景图像总是要跟着元素本身，但会随元素的祖先元素或窗体一起滚动。（默认值）；</li>\n<li>local：背景图像相对于元素内容固定，也就是说当元素随元素滚动时背景图像也会跟着滚动，因为背景图像总是要跟着内容</li>\n</ul>\n</li>\n<li>background-repeat: 可以填两个值代表水平和垂直方向，   <ul>\n<li>repeat-x：背景图像在横向上平铺;</li>\n<li>repeat-y：背景图像在纵向上平铺;</li>\n<li>repeat：背景图像在横向和纵向平铺;</li>\n<li>no-repeat：背景图像不平铺(默认值);</li>\n<li>round：当背景图像不能以整数次平铺时，会根据情况缩放图像。;</li>\n<li>space：当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。</li>\n</ul>\n</li>\n<li>background-size:</li>\n<li>background-position:定位开始位置参考图片的起始位置（background-origin）    </li>\n</ul>\n<h4 id=\"渐变：\"><a href=\"#渐变：\" class=\"headerlink\" title=\"渐变：\"></a>渐变：</h4><p><code>linear-gradient(方向(可选，默认为自下到上 to bottom,to top right ：到右上)，起始颜色，结束颜色)</code></p>\n<p><a href=\"http://css.doyoe.com/\">参考</a></p>\n<p>border-color的默认值等于color         </p>\n<h4 id=\"Text：\"><a href=\"#Text：\" class=\"headerlink\" title=\"Text：\"></a>Text：</h4><ul>\n<li>text-shadow：（水平偏移，垂直偏移，模糊值，颜色 ）</li>\n<li>-webkit-text-stroke:描边（宽度，颜色）</li>\n</ul>\n<p>调用外部的字体包：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>:  字体的名称;</span><br><span class=\"line\"><span class=\"attribute\">src</span>:<span class=\"built_in\">url</span>() /*地址*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>user-select: none; /*禁止文字被复制*/</code></p>\n<h4 id=\"box\"><a href=\"#box\" class=\"headerlink\" title=\"box:\"></a>box:</h4><p>IE6混杂模式的盒模型<br>box-width = width;<br>触发方式：box-sizing = border-box;</p>\n<h4 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow:\"></a>overflow:</h4><ul>\n<li>hidden(溢出部分隐藏);</li>\n<li>scroll(溢出之后出现滚动条) ;</li>\n<li>auto(溢出之后出现滚动条，更标准)，<br>可单独设置x,y轴（overflow）</li>\n</ul>\n<h4 id=\"resize-必须配合overflow来使用，不然没效果\"><a href=\"#resize-必须配合overflow来使用，不然没效果\" class=\"headerlink\" title=\"resize: 必须配合overflow来使用，不然没效果\"></a>resize: 必须配合overflow来使用，不然没效果</h4><ul>\n<li>none：不允许用户调整元素大小。</li>\n<li>both：用户可以调节元素的宽度和高度。</li>\n<li>horizontal：用户可以调节元素的宽度。</li>\n<li>vertical：用户可以调节元素的高度。</li>\n</ul>\n<h3 id=\"弹性盒模型：flex\"><a href=\"#弹性盒模型：flex\" class=\"headerlink\" title=\"弹性盒模型：flex\"></a>弹性盒模型：flex</h3><h4 id=\"弹性盒\"><a href=\"#弹性盒\" class=\"headerlink\" title=\"弹性盒\"></a>弹性盒</h4><p>flex-shrink:计算要计算加权，而且压缩的部分是盒子的内容区。</p>\n<p>压缩大小 = 自己真实内容区 * flex-shrink / 所有元素（真实内容区 * flex-shrink）的总和  * 要压缩的总范围。</p>\n<p>只设置 flex-basis 或flex-basis &gt; width代表元素的最小宽度，会随内容区增大；<br>设置width后，并且width &gt; flex-basis，width表示元素的最大宽度，则flex-basis &lt; realwidth &lt; width。</p>\n","site":{"data":{}},"length":3183,"excerpt":"","more":"<h1 id=\"选择器：\"><a href=\"#选择器：\" class=\"headerlink\" title=\"选择器：\"></a>选择器：</h1><hr>\n<h2 id=\"关系选择器：\"><a href=\"#关系选择器：\" class=\"headerlink\" title=\"关系选择器：\"></a>关系选择器：</h2><ul>\n<li><p> + ：下一个满足条件的兄弟元素节点。<br><code>div + P&#123;&#125;  //选出div的兄弟节点并且是p标签</code></p>\n</li>\n<li><p>~ ： 后面的满足条件的所有兄弟节点<br><code>div ~ p&#123;&#125;  //选出div兄弟节点中所有的p节点</code></p>\n</li>\n</ul>\n<h2 id=\"属性选择器：\"><a href=\"#属性选择器：\" class=\"headerlink\" title=\"属性选择器：\"></a>属性选择器：</h2><ul>\n<li>[attribute~=”value”] 选择器选取属性值包含指定词的元素。</li>\n<li>[attribute|=”value”] 选择器用于选取指定属性以指定值开头的元素。</li>\n<li>[attribute^=”value”] 选择器用于选取指定属性以指定值开头的元素。</li>\n<li>[attribute$=”value”] 选择器用于选取指定属性以指定值结尾的元素。</li>\n<li>[attribute*=”value”] 选择器选取属性值包含指定词的元素。</li>\n<li>::placeholer  选择带placeholeder元素</li>\n<li>::selection   设置页面字体选中后的状态</li>\n</ul>\n<h2 id=\"伪类选择器：\"><a href=\"#伪类选择器：\" class=\"headerlink\" title=\"伪类选择器：\"></a>伪类选择器：</h2><p>当前元素的状态（全部是当前元素的限制条件,想操作谁就选谁）</p>\n<ul>\n<li>:not  不是什么什么</li>\n<li>:root 根目录选择器（HTML下是html标签）</li>\n<li>:target 选择被锚点标记之后的元素</li>\n</ul>\n<h3 id=\"要考虑其他元素（要关注其他元素）：\"><a href=\"#要考虑其他元素（要关注其他元素）：\" class=\"headerlink\" title=\"要考虑其他元素（要关注其他元素）：\"></a>要考虑其他元素（要关注其他元素）：</h3><ul>\n<li>:first-child 第一个子元素</li>\n<li>:last-child 最后一个子元素</li>\n<li>:only-child  仅有一个子元素</li>\n<li>:nth-child(n) 第n 个子元素 （可写计算公式 ，n从0开始查数）CSS从1开始查数 </li>\n<li>:nth-last-child(n) 第n 个子元素,倒着数 （可写计算公式）</li>\n</ul>\n<h3 id=\"不用考虑其他元素-不关注其他类型元素-：\"><a href=\"#不用考虑其他元素-不关注其他类型元素-：\" class=\"headerlink\" title=\"不用考虑其他元素(不关注其他类型元素)：\"></a>不用考虑其他元素(不关注其他类型元素)：</h3><ul>\n<li>:first-of-type  当前类型的第一个</li>\n<li>:last-of-type  当前类型的最后一个</li>\n<li>:only-of-type  当前类型的仅有一个</li>\n<li>:nth-of-type  当前类型的第n个</li>\n<li>:nth-of-last-type  当前类型的第n个，倒着查</li>\n<li>:empty     元素内容为空</li>\n<li>:checked  元素被选中状态</li>\n<li>:disabled  被禁用的</li>\n<li>:ready-only  只能读,不能写的<br>:ready-write  可读可写的</li>\n</ul>\n<p>当给html和body设置高度为100%后，再给里面的元素高度设置100%可充满整个页面。</p>\n<h3 id=\"border：\"><a href=\"#border：\" class=\"headerlink\" title=\"border：\"></a>border：</h3><h4 id=\"border-radious\"><a href=\"#border-radious\" class=\"headerlink\" title=\"border-radious :\"></a>border-radious :</h4><p>(左上，右上，右下，左下)<br>（上，上，下，下 / 左，右，右，左）不常用 </p>\n<p>可写为border-top-left-radious:左上角<br>用正方形画四分之一圆：一个角的值等于正方形的边长</p>\n<h4 id=\"box-shadow：\"><a href=\"#box-shadow：\" class=\"headerlink\" title=\"box-shadow：\"></a>box-shadow：</h4><p>普通写法：<br>（inset（内阴影默认为外阴影（不写）），水平偏移量（正是向右，负是向左），垂直偏移量（正值向下，负值向上），阴影模糊程度（基于原边框向两侧同时模糊），传播距离（可选）（在四个方向上同时增大阴影的大小），颜色）。</p>\n<p>可设置多个box-shadow值，先写的在上面，重复的会加重颜色。</p>\n<p>阴影在背景颜色是上面，在文字的下面</p>\n<h4 id=\"border-image：\"><a href=\"#border-image：\" class=\"headerlink\" title=\"border-image：\"></a>border-image：</h4><p><code>border-image-source:url()  引入图片</code></p>\n<ul>\n<li>border-image-slice：(1-5个参数，前四个参数只能为数值，不能带px表示图片的分割方式，最后一个参数填上fill会把内容区也填充)</li>\n</ul>\n<ul>\n<li>border-image-ouset  向外延伸多少<br>border-image-width  图片显示的宽度（为1表示完全填充，默认为1）</li>\n<li>border-image-repeat  默认为stretch将被分割的图像使用拉伸的方式来填充满边框图像区域。</li>\n<li>repeat：将被分割的图像使用重复平铺的方式来填充满边框图像区域。当图像碰到边界时，如果超过则被截断。</li>\n<li>round：与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会根据情况缩放图像。</li>\n<li>space： 与 repeat 关键字类似。不同在于，当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。</li>\n</ul>\n<h4 id=\"background：\"><a href=\"#background：\" class=\"headerlink\" title=\"background：\"></a>background：</h4><h5 id=\"渐变两种生成方法：\"><a href=\"#渐变两种生成方法：\" class=\"headerlink\" title=\"渐变两种生成方法：\"></a>渐变两种生成方法：</h5><ul>\n<li>linear-gradient()线性渐变，</li>\n<li>radial-gradient()径向渐变，当成一个图片来看待</li>\n</ul>\n<h5 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h5><ul>\n<li>background-image ： 可以添加多个背景图片，多url</li>\n<li>background-origin:图片的起始位置（结束位置无法确定），<ul>\n<li>border-box；从边框开始，</li>\n<li>padding-box：从padding开始(默认值)</li>\n<li>content-box:从content开始 </li>\n</ul>\n</li>\n<li>background-clip:图片的截断部分，从哪开始以外部分都不显示，<ul>\n<li>border-box：（默认值），</li>\n<li>padding-box：,content-box:，text（除了文字展示范围内展示图片（只在文字下面展示），以外区域不展示图片，只在webkit下可以用，需配合谷歌特有属性 </li>\n</ul>\n</li>\n<li>-webkit-text-fill-color:transparent使用，用完之后文字会变成背景的一部分，这时候在设置阴影，阴影会显示在文字的前面，可以适当设置阴影的透明度来缓冲效果）</li>\n<li>background-attchent:<ul>\n<li>fixed：背景图像相对于视口（viewport）固定，当范围超出原来容器就不会再显示了。；</li>\n<li>scroll：背景图像相对于元素固定，也就是说当元素内容滚动时背景图像不会跟着滚动，因为背景图像总是要跟着元素本身，但会随元素的祖先元素或窗体一起滚动。（默认值）；</li>\n<li>local：背景图像相对于元素内容固定，也就是说当元素随元素滚动时背景图像也会跟着滚动，因为背景图像总是要跟着内容</li>\n</ul>\n</li>\n<li>background-repeat: 可以填两个值代表水平和垂直方向，   <ul>\n<li>repeat-x：背景图像在横向上平铺;</li>\n<li>repeat-y：背景图像在纵向上平铺;</li>\n<li>repeat：背景图像在横向和纵向平铺;</li>\n<li>no-repeat：背景图像不平铺(默认值);</li>\n<li>round：当背景图像不能以整数次平铺时，会根据情况缩放图像。;</li>\n<li>space：当背景图像不能以整数次平铺时，会用空白间隙填充在图像周围。</li>\n</ul>\n</li>\n<li>background-size:</li>\n<li>background-position:定位开始位置参考图片的起始位置（background-origin）    </li>\n</ul>\n<h4 id=\"渐变：\"><a href=\"#渐变：\" class=\"headerlink\" title=\"渐变：\"></a>渐变：</h4><p><code>linear-gradient(方向(可选，默认为自下到上 to bottom,to top right ：到右上)，起始颜色，结束颜色)</code></p>\n<p><a href=\"http://css.doyoe.com/\">参考</a></p>\n<p>border-color的默认值等于color         </p>\n<h4 id=\"Text：\"><a href=\"#Text：\" class=\"headerlink\" title=\"Text：\"></a>Text：</h4><ul>\n<li>text-shadow：（水平偏移，垂直偏移，模糊值，颜色 ）</li>\n<li>-webkit-text-stroke:描边（宽度，颜色）</li>\n</ul>\n<p>调用外部的字体包：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>:  字体的名称;</span><br><span class=\"line\"><span class=\"attribute\">src</span>:<span class=\"built_in\">url</span>() /*地址*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>user-select: none; /*禁止文字被复制*/</code></p>\n<h4 id=\"box\"><a href=\"#box\" class=\"headerlink\" title=\"box:\"></a>box:</h4><p>IE6混杂模式的盒模型<br>box-width = width;<br>触发方式：box-sizing = border-box;</p>\n<h4 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow:\"></a>overflow:</h4><ul>\n<li>hidden(溢出部分隐藏);</li>\n<li>scroll(溢出之后出现滚动条) ;</li>\n<li>auto(溢出之后出现滚动条，更标准)，<br>可单独设置x,y轴（overflow）</li>\n</ul>\n<h4 id=\"resize-必须配合overflow来使用，不然没效果\"><a href=\"#resize-必须配合overflow来使用，不然没效果\" class=\"headerlink\" title=\"resize: 必须配合overflow来使用，不然没效果\"></a>resize: 必须配合overflow来使用，不然没效果</h4><ul>\n<li>none：不允许用户调整元素大小。</li>\n<li>both：用户可以调节元素的宽度和高度。</li>\n<li>horizontal：用户可以调节元素的宽度。</li>\n<li>vertical：用户可以调节元素的高度。</li>\n</ul>\n<h3 id=\"弹性盒模型：flex\"><a href=\"#弹性盒模型：flex\" class=\"headerlink\" title=\"弹性盒模型：flex\"></a>弹性盒模型：flex</h3><h4 id=\"弹性盒\"><a href=\"#弹性盒\" class=\"headerlink\" title=\"弹性盒\"></a>弹性盒</h4><p>flex-shrink:计算要计算加权，而且压缩的部分是盒子的内容区。</p>\n<p>压缩大小 = 自己真实内容区 * flex-shrink / 所有元素（真实内容区 * flex-shrink）的总和  * 要压缩的总范围。</p>\n<p>只设置 flex-basis 或flex-basis &gt; width代表元素的最小宽度，会随内容区增大；<br>设置width后，并且width &gt; flex-basis，width表示元素的最大宽度，则flex-basis &lt; realwidth &lt; width。</p>\n"},{"title":"vue2中的$listeners和v-module","date":"2022-01-01T06:02:47.000Z","description":"vue2中的事件监视函数$listeners和表达绑定事件v-model的使用","comments":1,"toc":true,"_content":"\n# 事件修饰符\n\n**针对`dom`节点的原生事件**，`vue`支持多种修饰符以简化代码\n\n详见：[事件修饰符、按键修饰符、系统修饰符](https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6)\n\n# $listeners\n\n`$listeners`是`vue`的一个实例属性，它用于获取父组件传过来的所有事件函数\n\n```html\n<!-- 父组件 -->\n<Child @event1=\"handleEvent1\" @event2=\"handleEvent2\" />\n```\n\n\n\n```js\n// 子组件\nthis.$listeners // { event1: handleEvent1, event2: handleEvent2 }\n```\n\n> `$emit`和`$listeners`通信的异同\n>\n> 相同点：均可实现子组件向父组件传递消息\n>\n> 差异点：\n>\n> - `$emit`更加符合单向数据流，子组件仅发出通知，由父组件监听做出改变；而`$listeners`则是在子组件中直接使用了父组件的方法。\n> - 调试工具可以监听到子组件`$emit`的事件，但无法监听到`$listeners`中的方法调用。（想想为什么）\n> - 由于`$listeners`中可以获得传递过来的方法，因此调用方法可以得到其返回值。但`$emit`仅仅是向父组件发出通知，无法知晓父组件处理的结果\n\n> 对于上述中的第三点，可以在`$emit`中传递回调函数来解决\n>\n> 父组件：\n>\n> ```vue\n> <template>\n> \t<Child @click=\"handleClick\" />\n> </template>\n> \n> <script>\n>   import Child from \"./Child\"\n> \texport default {\n>     components:{\n>       Child\n>     },\n>     methods:{\n>       handleClick(data, callback){\n>         console.log(data); // 得到子组件事件中的数据\n>         setTimeout(()=>{\n>           callback(1); // 一段时间后，调用子组件传递的回调函数\n>         }, 3000)\n>       }\n>     }\n>   }\n> </script>\n> ```\n>\n> 子组件：\n>\n> ```vue\n> <template>\n> \t<button @click=\"handleClick\">\n>     click\n>   </button>\n> </template>\n> \n> <script>\n> \texport default {\n>     methods:{\n>       handleClick(){\n>         this.$emit(\"click\", 123, (data)=>{\n>           console.log(data); // data为父组件处理完成后得到的数据\n>         })\n>       }\n>     }\n>   }\n> </script>\n> ```\n\n# v-model\n\n`v-model`指令实质是一个语法糖，它是`value`属性和`input`事件的*结合体*\n\n```html\n<input :value=\"data\" @input=\"data=$event.target.value\" />\n<!-- 等同于 -->\n<input v-model=\"data\" />\n```\n\n详见：[表单输入绑定](https://cn.vuejs.org/v2/guide/forms.html)","source":"_posts/$listeners&v-module.md","raw":"---\ntitle: vue2中的$listeners和v-module\ndate: 2022-01-01 14:02:47\ndescription: vue2中的事件监视函数$listeners和表达绑定事件v-model的使用\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n\t- 前端学习笔记 \n\t- vue\ntags:   #标签\n\t- vue2\n\t- 前端\n---\n\n# 事件修饰符\n\n**针对`dom`节点的原生事件**，`vue`支持多种修饰符以简化代码\n\n详见：[事件修饰符、按键修饰符、系统修饰符](https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6)\n\n# $listeners\n\n`$listeners`是`vue`的一个实例属性，它用于获取父组件传过来的所有事件函数\n\n```html\n<!-- 父组件 -->\n<Child @event1=\"handleEvent1\" @event2=\"handleEvent2\" />\n```\n\n\n\n```js\n// 子组件\nthis.$listeners // { event1: handleEvent1, event2: handleEvent2 }\n```\n\n> `$emit`和`$listeners`通信的异同\n>\n> 相同点：均可实现子组件向父组件传递消息\n>\n> 差异点：\n>\n> - `$emit`更加符合单向数据流，子组件仅发出通知，由父组件监听做出改变；而`$listeners`则是在子组件中直接使用了父组件的方法。\n> - 调试工具可以监听到子组件`$emit`的事件，但无法监听到`$listeners`中的方法调用。（想想为什么）\n> - 由于`$listeners`中可以获得传递过来的方法，因此调用方法可以得到其返回值。但`$emit`仅仅是向父组件发出通知，无法知晓父组件处理的结果\n\n> 对于上述中的第三点，可以在`$emit`中传递回调函数来解决\n>\n> 父组件：\n>\n> ```vue\n> <template>\n> \t<Child @click=\"handleClick\" />\n> </template>\n> \n> <script>\n>   import Child from \"./Child\"\n> \texport default {\n>     components:{\n>       Child\n>     },\n>     methods:{\n>       handleClick(data, callback){\n>         console.log(data); // 得到子组件事件中的数据\n>         setTimeout(()=>{\n>           callback(1); // 一段时间后，调用子组件传递的回调函数\n>         }, 3000)\n>       }\n>     }\n>   }\n> </script>\n> ```\n>\n> 子组件：\n>\n> ```vue\n> <template>\n> \t<button @click=\"handleClick\">\n>     click\n>   </button>\n> </template>\n> \n> <script>\n> \texport default {\n>     methods:{\n>       handleClick(){\n>         this.$emit(\"click\", 123, (data)=>{\n>           console.log(data); // data为父组件处理完成后得到的数据\n>         })\n>       }\n>     }\n>   }\n> </script>\n> ```\n\n# v-model\n\n`v-model`指令实质是一个语法糖，它是`value`属性和`input`事件的*结合体*\n\n```html\n<input :value=\"data\" @input=\"data=$event.target.value\" />\n<!-- 等同于 -->\n<input v-model=\"data\" />\n```\n\n详见：[表单输入绑定](https://cn.vuejs.org/v2/guide/forms.html)","slug":"$listeners&v-module","published":1,"updated":"2022-01-01T06:19:05.908Z","_id":"ckxvf7cl60000ccax2n0ccxl9","layout":"post","photos":[],"link":"","content":"<h1 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h1><p><strong>针对<code>dom</code>节点的原生事件</strong>，<code>vue</code>支持多种修饰符以简化代码</p>\n<p>详见：<a href=\"https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\">事件修饰符、按键修饰符、系统修饰符</a></p>\n<h1 id=\"listeners\"><a href=\"#listeners\" class=\"headerlink\" title=\"$listeners\"></a>$listeners</h1><p><code>$listeners</code>是<code>vue</code>的一个实例属性，它用于获取父组件传过来的所有事件函数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> @<span class=\"attr\">event1</span>=<span class=\"string\">&quot;handleEvent1&quot;</span> @<span class=\"attr\">event2</span>=<span class=\"string\">&quot;handleEvent2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$listeners <span class=\"comment\">// &#123; event1: handleEvent1, event2: handleEvent2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>$emit</code>和<code>$listeners</code>通信的异同</p>\n<p>相同点：均可实现子组件向父组件传递消息</p>\n<p>差异点：</p>\n<ul>\n<li><code>$emit</code>更加符合单向数据流，子组件仅发出通知，由父组件监听做出改变；而<code>$listeners</code>则是在子组件中直接使用了父组件的方法。</li>\n<li>调试工具可以监听到子组件<code>$emit</code>的事件，但无法监听到<code>$listeners</code>中的方法调用。（想想为什么）</li>\n<li>由于<code>$listeners</code>中可以获得传递过来的方法，因此调用方法可以得到其返回值。但<code>$emit</code>仅仅是向父组件发出通知，无法知晓父组件处理的结果</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>对于上述中的第三点，可以在<code>$emit</code>中传递回调函数来解决</p>\n<p>父组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;Child @click=&quot;handleClick&quot; /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import Child from &quot;./Child&quot;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">      Child</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      handleClick(data, callback)&#123;</span><br><span class=\"line\">        console.log(data); // 得到子组件事件中的数据</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">          callback(1); // 一段时间后，调用子组件传递的回调函数</span><br><span class=\"line\">        &#125;, 3000)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;handleClick&quot;&gt;</span><br><span class=\"line\">    click</span><br><span class=\"line\">  &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      handleClick()&#123;</span><br><span class=\"line\">        this.$emit(&quot;click&quot;, 123, (data)=&gt;&#123;</span><br><span class=\"line\">          console.log(data); // data为父组件处理完成后得到的数据</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h1><p><code>v-model</code>指令实质是一个语法糖，它是<code>value</code>属性和<code>input</code>事件的<em>结合体</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;data&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;data=$event.target.value&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等同于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>详见：<a href=\"https://cn.vuejs.org/v2/guide/forms.html\">表单输入绑定</a></p>\n","site":{"data":{}},"length":1430,"excerpt":"","more":"<h1 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h1><p><strong>针对<code>dom</code>节点的原生事件</strong>，<code>vue</code>支持多种修饰符以简化代码</p>\n<p>详见：<a href=\"https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\">事件修饰符、按键修饰符、系统修饰符</a></p>\n<h1 id=\"listeners\"><a href=\"#listeners\" class=\"headerlink\" title=\"$listeners\"></a>$listeners</h1><p><code>$listeners</code>是<code>vue</code>的一个实例属性，它用于获取父组件传过来的所有事件函数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> @<span class=\"attr\">event1</span>=<span class=\"string\">&quot;handleEvent1&quot;</span> @<span class=\"attr\">event2</span>=<span class=\"string\">&quot;handleEvent2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$listeners <span class=\"comment\">// &#123; event1: handleEvent1, event2: handleEvent2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>$emit</code>和<code>$listeners</code>通信的异同</p>\n<p>相同点：均可实现子组件向父组件传递消息</p>\n<p>差异点：</p>\n<ul>\n<li><code>$emit</code>更加符合单向数据流，子组件仅发出通知，由父组件监听做出改变；而<code>$listeners</code>则是在子组件中直接使用了父组件的方法。</li>\n<li>调试工具可以监听到子组件<code>$emit</code>的事件，但无法监听到<code>$listeners</code>中的方法调用。（想想为什么）</li>\n<li>由于<code>$listeners</code>中可以获得传递过来的方法，因此调用方法可以得到其返回值。但<code>$emit</code>仅仅是向父组件发出通知，无法知晓父组件处理的结果</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>对于上述中的第三点，可以在<code>$emit</code>中传递回调函数来解决</p>\n<p>父组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;Child @click=&quot;handleClick&quot; /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import Child from &quot;./Child&quot;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">      Child</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      handleClick(data, callback)&#123;</span><br><span class=\"line\">        console.log(data); // 得到子组件事件中的数据</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">          callback(1); // 一段时间后，调用子组件传递的回调函数</span><br><span class=\"line\">        &#125;, 3000)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;handleClick&quot;&gt;</span><br><span class=\"line\">    click</span><br><span class=\"line\">  &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      handleClick()&#123;</span><br><span class=\"line\">        this.$emit(&quot;click&quot;, 123, (data)=&gt;&#123;</span><br><span class=\"line\">          console.log(data); // data为父组件处理完成后得到的数据</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h1><p><code>v-model</code>指令实质是一个语法糖，它是<code>value</code>属性和<code>input</code>事件的<em>结合体</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;data&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;data=$event.target.value&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等同于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>详见：<a href=\"https://cn.vuejs.org/v2/guide/forms.html\">表单输入绑定</a></p>\n"},{"title":"2022. 将一维数组转变成二维数组","date":"2022-01-01T05:59:47.000Z","description":"先判断能否转变，再循环一维数组数组转变成二维数组数组。","comments":1,"toc":true,"_content":"\n# 2022. 将一维数组转变成二维数组\n\n## [查看原题](https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/)\n\n## 解题思路\n\n先判断能否转变，再循环一维数组数组转变成二维数组数组。\n\n1. 若 original.length !== m * n 说明一位数组的长度过长或过短，直接返回 空数组[] ；\n2. 截取数组的n个长度添加到二维数组中。\n\n## 代码\n\n```javascript\n\n/**\n * @param {number[]} original\n * @param {number} m\n * @param {number} n\n * @return {number[][]}\n */\nvar construct2DArray = function(original, m, n) {\n\t// 元素个数不够或多余不能转为\n\tif(original.length !== m * n){\n\t\treturn [];\n\t}\n\n\n\tlet result= [];\n\tfor(let i =0 ;i < m ;i++){\n\t\tresult.push(original.splice(0,n))\n\t}\n\n\treturn result;\n};\n\n```","source":"_posts/2022. 将一维数组转变成二维数组.md","raw":"---\ntitle: 2022. 将一维数组转变成二维数组\ndate: 2022-01-01 13:59:47\ndescription: 先判断能否转变，再循环一维数组数组转变成二维数组数组。\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \"leetcode题解\" #分类\ntags:   #标签\n\t- js\n\t- leetcode\n\t- 算法\n---\n\n# 2022. 将一维数组转变成二维数组\n\n## [查看原题](https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/)\n\n## 解题思路\n\n先判断能否转变，再循环一维数组数组转变成二维数组数组。\n\n1. 若 original.length !== m * n 说明一位数组的长度过长或过短，直接返回 空数组[] ；\n2. 截取数组的n个长度添加到二维数组中。\n\n## 代码\n\n```javascript\n\n/**\n * @param {number[]} original\n * @param {number} m\n * @param {number} n\n * @return {number[][]}\n */\nvar construct2DArray = function(original, m, n) {\n\t// 元素个数不够或多余不能转为\n\tif(original.length !== m * n){\n\t\treturn [];\n\t}\n\n\n\tlet result= [];\n\tfor(let i =0 ;i < m ;i++){\n\t\tresult.push(original.splice(0,n))\n\t}\n\n\treturn result;\n};\n\n```","slug":"2022. 将一维数组转变成二维数组","published":1,"updated":"2022-01-01T05:59:43.397Z","layout":"post","photos":[],"link":"","_id":"ckxvf7clb0001ccax2zkd8t4o","content":"<h1 id=\"2022-将一维数组转变成二维数组\"><a href=\"#2022-将一维数组转变成二维数组\" class=\"headerlink\" title=\"2022. 将一维数组转变成二维数组\"></a>2022. 将一维数组转变成二维数组</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先判断能否转变，再循环一维数组数组转变成二维数组数组。</p>\n<ol>\n<li>若 original.length !== m * n 说明一位数组的长度过长或过短，直接返回 空数组[] ；</li>\n<li>截取数组的n个长度添加到二维数组中。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">original</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> construct2DArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">original, m, n</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 元素个数不够或多余不能转为</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(original.length !== m * n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> [];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result= [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i &lt; m ;i++)&#123;</span><br><span class=\"line\">\t\tresult.push(original.splice(<span class=\"number\">0</span>,n))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":485,"excerpt":"","more":"<h1 id=\"2022-将一维数组转变成二维数组\"><a href=\"#2022-将一维数组转变成二维数组\" class=\"headerlink\" title=\"2022. 将一维数组转变成二维数组\"></a>2022. 将一维数组转变成二维数组</h1><h2 id=\"查看原题\"><a href=\"#查看原题\" class=\"headerlink\" title=\"查看原题\"></a><a href=\"https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/\">查看原题</a></h2><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先判断能否转变，再循环一维数组数组转变成二维数组数组。</p>\n<ol>\n<li>若 original.length !== m * n 说明一位数组的长度过长或过短，直接返回 空数组[] ；</li>\n<li>截取数组的n个长度添加到二维数组中。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">original</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> construct2DArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">original, m, n</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 元素个数不够或多余不能转为</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(original.length !== m * n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> [];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result= [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i &lt; m ;i++)&#123;</span><br><span class=\"line\">\t\tresult.push(original.splice(<span class=\"number\">0</span>,n))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"vue2中的v-model","date":"2022-01-01T06:02:47.000Z","description":"v-model的原理使用规则","comments":1,"toc":true,"_content":"\n面试题：请阐述一下 `v-model` 的原理\n\n`v-model`即可以作用于表单元素，又可作用于自定义组件，无论是哪一种情况，它都是一个语法糖，最终会生成一个属性和一个事件\n\n**当其作用于表单元素时**，`vue`会根据作用的表单元素类型而生成合适的属性和事件。例如，作用于普通文本框的时候，它会生成`value`属性和`input`事件，而当其作用于单选框或多选框时，它会生成`checked`属性和`change`事件。\n\n`v-model`也可作用于自定义组件，**当其作用于自定义组件时**，默认情况下，它会生成一个`value`属性和`input`事件。\n\n```html\n<Comp v-model=\"data\" />\n<!-- 等效于 -->\n<Comp :value=\"data\" @input=\"data=$event\" />\n```\n\n开发者可以通过组件的`model`配置来改变生成的属性和事件\n\n```js\n// Comp\nconst Comp = {\n  model: {\n    prop: \"number\", // 默认为 value\n    event: \"change\" // 默认为 input\n  }\n  // ...\n}\n```\n\n```html\n<Comp v-model=\"data\" />\n<!-- 等效于 -->\n<Comp :number=\"data\" @change=\"data=$event\" />\n```\n\n","source":"_posts/v-model.md","raw":"---\ntitle: vue2中的v-model\ndate: 2022-01-01 14:02:47\ndescription: v-model的原理使用规则\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n\t- 前端学习笔记 \n\t- vue\ntags:   #标签\n\t- vue2\n\t- 前端\n---\n\n面试题：请阐述一下 `v-model` 的原理\n\n`v-model`即可以作用于表单元素，又可作用于自定义组件，无论是哪一种情况，它都是一个语法糖，最终会生成一个属性和一个事件\n\n**当其作用于表单元素时**，`vue`会根据作用的表单元素类型而生成合适的属性和事件。例如，作用于普通文本框的时候，它会生成`value`属性和`input`事件，而当其作用于单选框或多选框时，它会生成`checked`属性和`change`事件。\n\n`v-model`也可作用于自定义组件，**当其作用于自定义组件时**，默认情况下，它会生成一个`value`属性和`input`事件。\n\n```html\n<Comp v-model=\"data\" />\n<!-- 等效于 -->\n<Comp :value=\"data\" @input=\"data=$event\" />\n```\n\n开发者可以通过组件的`model`配置来改变生成的属性和事件\n\n```js\n// Comp\nconst Comp = {\n  model: {\n    prop: \"number\", // 默认为 value\n    event: \"change\" // 默认为 input\n  }\n  // ...\n}\n```\n\n```html\n<Comp v-model=\"data\" />\n<!-- 等效于 -->\n<Comp :number=\"data\" @change=\"data=$event\" />\n```\n\n","slug":"v-model","published":1,"updated":"2022-01-01T06:06:28.433Z","_id":"ckxvf7cle0002ccaxb60heplu","layout":"post","photos":[],"link":"","content":"<p>面试题：请阐述一下 <code>v-model</code> 的原理</p>\n<p><code>v-model</code>即可以作用于表单元素，又可作用于自定义组件，无论是哪一种情况，它都是一个语法糖，最终会生成一个属性和一个事件</p>\n<p><strong>当其作用于表单元素时</strong>，<code>vue</code>会根据作用的表单元素类型而生成合适的属性和事件。例如，作用于普通文本框的时候，它会生成<code>value</code>属性和<code>input</code>事件，而当其作用于单选框或多选框时，它会生成<code>checked</code>属性和<code>change</code>事件。</p>\n<p><code>v-model</code>也可作用于自定义组件，<strong>当其作用于自定义组件时</strong>，默认情况下，它会生成一个<code>value</code>属性和<code>input</code>事件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等效于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;data&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;data=$event&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>开发者可以通过组件的<code>model</code>配置来改变生成的属性和事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Comp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Comp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">model</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">prop</span>: <span class=\"string\">&quot;number&quot;</span>, <span class=\"comment\">// 默认为 value</span></span><br><span class=\"line\">    <span class=\"attr\">event</span>: <span class=\"string\">&quot;change&quot;</span> <span class=\"comment\">// 默认为 input</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等效于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">:number</span>=<span class=\"string\">&quot;data&quot;</span> @<span class=\"attr\">change</span>=<span class=\"string\">&quot;data=$event&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":650,"excerpt":"","more":"<p>面试题：请阐述一下 <code>v-model</code> 的原理</p>\n<p><code>v-model</code>即可以作用于表单元素，又可作用于自定义组件，无论是哪一种情况，它都是一个语法糖，最终会生成一个属性和一个事件</p>\n<p><strong>当其作用于表单元素时</strong>，<code>vue</code>会根据作用的表单元素类型而生成合适的属性和事件。例如，作用于普通文本框的时候，它会生成<code>value</code>属性和<code>input</code>事件，而当其作用于单选框或多选框时，它会生成<code>checked</code>属性和<code>change</code>事件。</p>\n<p><code>v-model</code>也可作用于自定义组件，<strong>当其作用于自定义组件时</strong>，默认情况下，它会生成一个<code>value</code>属性和<code>input</code>事件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等效于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;data&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;data=$event&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>开发者可以通过组件的<code>model</code>配置来改变生成的属性和事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Comp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Comp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">model</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">prop</span>: <span class=\"string\">&quot;number&quot;</span>, <span class=\"comment\">// 默认为 value</span></span><br><span class=\"line\">    <span class=\"attr\">event</span>: <span class=\"string\">&quot;change&quot;</span> <span class=\"comment\">// 默认为 input</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等效于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">:number</span>=<span class=\"string\">&quot;data&quot;</span> @<span class=\"attr\">change</span>=<span class=\"string\">&quot;data=$event&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue2中的动态路由","date":"2022-01-01T06:02:47.000Z","description":"动态路由的使用","comments":1,"toc":true,"_content":"\n\n# 文章列表页逻辑\n\n## 路由跳转逻辑\n\n![image-20210107140253824](http://mdrs.yuanjin.tech/img/20210107140253.png)\n\n## 组件逻辑\n\n![image-20210107142310757](http://mdrs.yuanjin.tech/img/20210107142310.png)\n\n### BlogList\n\n![image-20210107153623557](http://mdrs.yuanjin.tech/img/20210107153623.png)\n\n### BlogCategory\n\n![image-20210107154531659](http://mdrs.yuanjin.tech/img/20210107154531.png)\n\n# 知识\n\n## 动态路由\n\n我们希望下面的地址都能够匹配到`Blog`组件\n\n- `/article`，显示全部文章\n- `/article/cate/1`，显示分类`id`为`1`的文章\n- `/article/cate/3`，显示分类`id`为`3`的文章\n- ...\n\n第一种情况很简单，只需要将一个固定的地址匹配到`Blog`组件即可\n\n```js\n{\n  path: \"/article\",\n  name: \"Blog\",\n  component: Blog\n}\n```\n\n但后面的情况则不同：匹配到`Blog`组件的地址中，有一部分是动态变化的，则需要使用一种特殊的表达方式：\n\n```js\n{\n  path: \"/article/cate/:categoryId\",\n  name: \"CategoryBlog\",\n  component: Blog\n}\n```\n\n在地址中使用`:xxx`，来表达这一部分的内容是变化的，在`vue-router`中，将变化的这一部分称之为`params`，可以在`vue`组件中通过`this.$route.params`来获取\n\n```js\n// 访问 /article/cate/3\nthis.$route.params // { categoryId: \"3\" }\n// 访问 /article/cate/1\nthis.$route.params // { categoryId: \"1\" }\n```\n\n### 动态路由的导航\n\n```vue\n<router-link to=\"/article/cate/3\">to article of category 3</router-link>\n\n<router-link :to=\"{\n   name: 'CategoryBlog',\n   params: {\n       categoryId: 3           \n   }                    \n}\">to article of category 3</router-link>\n```\n\n## 编程式导航\n\n除了使用`<RouterLink>`超链接导航外，`vue-router`还允许在代码中跳转页面\n\n```js\nthis.$router.push(\"跳转地址\"); // 普通跳转\nthis.$router.push({ // 命名路由跳转\n  name:\"Blog\"\n})\n\nthis.$router.go(-1); // 回退。类似于 history.go\n```\n\n## watch\n\n利用`watch`配置，可以直接观察某个数据的变化，变化时可以做一些处理\n\n```js\nexport default {\n  // ... 其他配置\n  watch: {\n    // 观察 this.$route 的变化，变化后，会调用该函数\n    $route(newVal, oldVal){\n      // newVal：this.$route 新的值，等同 this.$route\n      // oldVal：this.$route 旧的值\n    },\n    // 完整写法\n    $route: {\n      handler(newVal, oldVal){},\n      deep: false, // 是否监听该数据内部属性的变化，默认 false\n      immediate: false // 是否立即执行一次 handler，默认 false\n    }\n    // 观察 this.$route.params 的变化，变化后，会调用该函数\n    [\"$route.params\"](newVal, oldVal){\n      // newVal：this.$route.params 新的值，等同 this.$route.params\n      // oldVal：this.$route.params 旧的值\n    },\n  \t// 完整写法\n    [\"$route.params\"]: {\n      handler(newVal, oldVal){},\n      deep: false, // 是否监听该数据内部属性的变化，默认 false\n      immediate: false // 是否立即执行一次 handler，默认 false\n    }\n  }\n}\n```\n\n","source":"_posts/动态路由&watch.md","raw":"---\ntitle: vue2中的动态路由\ndate: 2022-01-01 14:02:47\ndescription: 动态路由的使用\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n\n# 文章列表页逻辑\n\n## 路由跳转逻辑\n\n![image-20210107140253824](http://mdrs.yuanjin.tech/img/20210107140253.png)\n\n## 组件逻辑\n\n![image-20210107142310757](http://mdrs.yuanjin.tech/img/20210107142310.png)\n\n### BlogList\n\n![image-20210107153623557](http://mdrs.yuanjin.tech/img/20210107153623.png)\n\n### BlogCategory\n\n![image-20210107154531659](http://mdrs.yuanjin.tech/img/20210107154531.png)\n\n# 知识\n\n## 动态路由\n\n我们希望下面的地址都能够匹配到`Blog`组件\n\n- `/article`，显示全部文章\n- `/article/cate/1`，显示分类`id`为`1`的文章\n- `/article/cate/3`，显示分类`id`为`3`的文章\n- ...\n\n第一种情况很简单，只需要将一个固定的地址匹配到`Blog`组件即可\n\n```js\n{\n  path: \"/article\",\n  name: \"Blog\",\n  component: Blog\n}\n```\n\n但后面的情况则不同：匹配到`Blog`组件的地址中，有一部分是动态变化的，则需要使用一种特殊的表达方式：\n\n```js\n{\n  path: \"/article/cate/:categoryId\",\n  name: \"CategoryBlog\",\n  component: Blog\n}\n```\n\n在地址中使用`:xxx`，来表达这一部分的内容是变化的，在`vue-router`中，将变化的这一部分称之为`params`，可以在`vue`组件中通过`this.$route.params`来获取\n\n```js\n// 访问 /article/cate/3\nthis.$route.params // { categoryId: \"3\" }\n// 访问 /article/cate/1\nthis.$route.params // { categoryId: \"1\" }\n```\n\n### 动态路由的导航\n\n```vue\n<router-link to=\"/article/cate/3\">to article of category 3</router-link>\n\n<router-link :to=\"{\n   name: 'CategoryBlog',\n   params: {\n       categoryId: 3           \n   }                    \n}\">to article of category 3</router-link>\n```\n\n## 编程式导航\n\n除了使用`<RouterLink>`超链接导航外，`vue-router`还允许在代码中跳转页面\n\n```js\nthis.$router.push(\"跳转地址\"); // 普通跳转\nthis.$router.push({ // 命名路由跳转\n  name:\"Blog\"\n})\n\nthis.$router.go(-1); // 回退。类似于 history.go\n```\n\n## watch\n\n利用`watch`配置，可以直接观察某个数据的变化，变化时可以做一些处理\n\n```js\nexport default {\n  // ... 其他配置\n  watch: {\n    // 观察 this.$route 的变化，变化后，会调用该函数\n    $route(newVal, oldVal){\n      // newVal：this.$route 新的值，等同 this.$route\n      // oldVal：this.$route 旧的值\n    },\n    // 完整写法\n    $route: {\n      handler(newVal, oldVal){},\n      deep: false, // 是否监听该数据内部属性的变化，默认 false\n      immediate: false // 是否立即执行一次 handler，默认 false\n    }\n    // 观察 this.$route.params 的变化，变化后，会调用该函数\n    [\"$route.params\"](newVal, oldVal){\n      // newVal：this.$route.params 新的值，等同 this.$route.params\n      // oldVal：this.$route.params 旧的值\n    },\n  \t// 完整写法\n    [\"$route.params\"]: {\n      handler(newVal, oldVal){},\n      deep: false, // 是否监听该数据内部属性的变化，默认 false\n      immediate: false // 是否立即执行一次 handler，默认 false\n    }\n  }\n}\n```\n\n","slug":"动态路由&watch","published":1,"updated":"2022-01-01T06:17:16.228Z","_id":"ckxvf7clg0004ccax0nl2amzr","layout":"post","photos":[],"link":"","content":"<h1 id=\"文章列表页逻辑\"><a href=\"#文章列表页逻辑\" class=\"headerlink\" title=\"文章列表页逻辑\"></a>文章列表页逻辑</h1><h2 id=\"路由跳转逻辑\"><a href=\"#路由跳转逻辑\" class=\"headerlink\" title=\"路由跳转逻辑\"></a>路由跳转逻辑</h2><p><img src=\"http://mdrs.yuanjin.tech/img/20210107140253.png\" alt=\"image-20210107140253824\"></p>\n<h2 id=\"组件逻辑\"><a href=\"#组件逻辑\" class=\"headerlink\" title=\"组件逻辑\"></a>组件逻辑</h2><p><img src=\"http://mdrs.yuanjin.tech/img/20210107142310.png\" alt=\"image-20210107142310757\"></p>\n<h3 id=\"BlogList\"><a href=\"#BlogList\" class=\"headerlink\" title=\"BlogList\"></a>BlogList</h3><p><img src=\"http://mdrs.yuanjin.tech/img/20210107153623.png\" alt=\"image-20210107153623557\"></p>\n<h3 id=\"BlogCategory\"><a href=\"#BlogCategory\" class=\"headerlink\" title=\"BlogCategory\"></a>BlogCategory</h3><p><img src=\"http://mdrs.yuanjin.tech/img/20210107154531.png\" alt=\"image-20210107154531659\"></p>\n<h1 id=\"知识\"><a href=\"#知识\" class=\"headerlink\" title=\"知识\"></a>知识</h1><h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>我们希望下面的地址都能够匹配到<code>Blog</code>组件</p>\n<ul>\n<li><code>/article</code>，显示全部文章</li>\n<li><code>/article/cate/1</code>，显示分类<code>id</code>为<code>1</code>的文章</li>\n<li><code>/article/cate/3</code>，显示分类<code>id</code>为<code>3</code>的文章</li>\n<li>…</li>\n</ul>\n<p>第一种情况很简单，只需要将一个固定的地址匹配到<code>Blog</code>组件即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&quot;/article&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;Blog&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: Blog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但后面的情况则不同：匹配到<code>Blog</code>组件的地址中，有一部分是动态变化的，则需要使用一种特殊的表达方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&quot;/article/cate/:categoryId&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;CategoryBlog&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: Blog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在地址中使用<code>:xxx</code>，来表达这一部分的内容是变化的，在<code>vue-router</code>中，将变化的这一部分称之为<code>params</code>，可以在<code>vue</code>组件中通过<code>this.$route.params</code>来获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 访问 /article/cate/3</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$route.params <span class=\"comment\">// &#123; categoryId: &quot;3&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 访问 /article/cate/1</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$route.params <span class=\"comment\">// &#123; categoryId: &quot;1&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态路由的导航\"><a href=\"#动态路由的导航\" class=\"headerlink\" title=\"动态路由的导航\"></a>动态路由的导航</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/article/cate/3&quot;&gt;to article of category 3&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;</span><br><span class=\"line\">   name: &#x27;CategoryBlog&#x27;,</span><br><span class=\"line\">   params: &#123;</span><br><span class=\"line\">       categoryId: 3           </span><br><span class=\"line\">   &#125;                    </span><br><span class=\"line\">&#125;&quot;&gt;to article of category 3&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><p>除了使用<code>&lt;RouterLink&gt;</code>超链接导航外，<code>vue-router</code>还允许在代码中跳转页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(<span class=\"string\">&quot;跳转地址&quot;</span>); <span class=\"comment\">// 普通跳转</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123; <span class=\"comment\">// 命名路由跳转</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Blog&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.go(-<span class=\"number\">1</span>); <span class=\"comment\">// 回退。类似于 history.go</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p>利用<code>watch</code>配置，可以直接观察某个数据的变化，变化时可以做一些处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... 其他配置</span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 观察 this.$route 的变化，变化后，会调用该函数</span></span><br><span class=\"line\">    $route(newVal, oldVal)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// newVal：this.$route 新的值，等同 this.$route</span></span><br><span class=\"line\">      <span class=\"comment\">// oldVal：this.$route 旧的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 完整写法</span></span><br><span class=\"line\">    <span class=\"attr\">$route</span>: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否监听该数据内部属性的变化，默认 false</span></span><br><span class=\"line\">      <span class=\"attr\">immediate</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 是否立即执行一次 handler，默认 false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 观察 this.$route.params 的变化，变化后，会调用该函数</span></span><br><span class=\"line\">    [<span class=\"string\">&quot;$route.params&quot;</span>](newVal, oldVal)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// newVal：this.$route.params 新的值，等同 this.$route.params</span></span><br><span class=\"line\">      <span class=\"comment\">// oldVal：this.$route.params 旧的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \t<span class=\"comment\">// 完整写法</span></span><br><span class=\"line\">    [<span class=\"string\">&quot;$route.params&quot;</span>]: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否监听该数据内部属性的变化，默认 false</span></span><br><span class=\"line\">      <span class=\"attr\">immediate</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 是否立即执行一次 handler，默认 false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1816,"excerpt":"","more":"<h1 id=\"文章列表页逻辑\"><a href=\"#文章列表页逻辑\" class=\"headerlink\" title=\"文章列表页逻辑\"></a>文章列表页逻辑</h1><h2 id=\"路由跳转逻辑\"><a href=\"#路由跳转逻辑\" class=\"headerlink\" title=\"路由跳转逻辑\"></a>路由跳转逻辑</h2><p><img src=\"http://mdrs.yuanjin.tech/img/20210107140253.png\" alt=\"image-20210107140253824\"></p>\n<h2 id=\"组件逻辑\"><a href=\"#组件逻辑\" class=\"headerlink\" title=\"组件逻辑\"></a>组件逻辑</h2><p><img src=\"http://mdrs.yuanjin.tech/img/20210107142310.png\" alt=\"image-20210107142310757\"></p>\n<h3 id=\"BlogList\"><a href=\"#BlogList\" class=\"headerlink\" title=\"BlogList\"></a>BlogList</h3><p><img src=\"http://mdrs.yuanjin.tech/img/20210107153623.png\" alt=\"image-20210107153623557\"></p>\n<h3 id=\"BlogCategory\"><a href=\"#BlogCategory\" class=\"headerlink\" title=\"BlogCategory\"></a>BlogCategory</h3><p><img src=\"http://mdrs.yuanjin.tech/img/20210107154531.png\" alt=\"image-20210107154531659\"></p>\n<h1 id=\"知识\"><a href=\"#知识\" class=\"headerlink\" title=\"知识\"></a>知识</h1><h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>我们希望下面的地址都能够匹配到<code>Blog</code>组件</p>\n<ul>\n<li><code>/article</code>，显示全部文章</li>\n<li><code>/article/cate/1</code>，显示分类<code>id</code>为<code>1</code>的文章</li>\n<li><code>/article/cate/3</code>，显示分类<code>id</code>为<code>3</code>的文章</li>\n<li>…</li>\n</ul>\n<p>第一种情况很简单，只需要将一个固定的地址匹配到<code>Blog</code>组件即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&quot;/article&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;Blog&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: Blog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但后面的情况则不同：匹配到<code>Blog</code>组件的地址中，有一部分是动态变化的，则需要使用一种特殊的表达方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&quot;/article/cate/:categoryId&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;CategoryBlog&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: Blog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在地址中使用<code>:xxx</code>，来表达这一部分的内容是变化的，在<code>vue-router</code>中，将变化的这一部分称之为<code>params</code>，可以在<code>vue</code>组件中通过<code>this.$route.params</code>来获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 访问 /article/cate/3</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$route.params <span class=\"comment\">// &#123; categoryId: &quot;3&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 访问 /article/cate/1</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$route.params <span class=\"comment\">// &#123; categoryId: &quot;1&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态路由的导航\"><a href=\"#动态路由的导航\" class=\"headerlink\" title=\"动态路由的导航\"></a>动态路由的导航</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/article/cate/3&quot;&gt;to article of category 3&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;</span><br><span class=\"line\">   name: &#x27;CategoryBlog&#x27;,</span><br><span class=\"line\">   params: &#123;</span><br><span class=\"line\">       categoryId: 3           </span><br><span class=\"line\">   &#125;                    </span><br><span class=\"line\">&#125;&quot;&gt;to article of category 3&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><p>除了使用<code>&lt;RouterLink&gt;</code>超链接导航外，<code>vue-router</code>还允许在代码中跳转页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(<span class=\"string\">&quot;跳转地址&quot;</span>); <span class=\"comment\">// 普通跳转</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123; <span class=\"comment\">// 命名路由跳转</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Blog&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.go(-<span class=\"number\">1</span>); <span class=\"comment\">// 回退。类似于 history.go</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p>利用<code>watch</code>配置，可以直接观察某个数据的变化，变化时可以做一些处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... 其他配置</span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 观察 this.$route 的变化，变化后，会调用该函数</span></span><br><span class=\"line\">    $route(newVal, oldVal)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// newVal：this.$route 新的值，等同 this.$route</span></span><br><span class=\"line\">      <span class=\"comment\">// oldVal：this.$route 旧的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 完整写法</span></span><br><span class=\"line\">    <span class=\"attr\">$route</span>: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否监听该数据内部属性的变化，默认 false</span></span><br><span class=\"line\">      <span class=\"attr\">immediate</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 是否立即执行一次 handler，默认 false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 观察 this.$route.params 的变化，变化后，会调用该函数</span></span><br><span class=\"line\">    [<span class=\"string\">&quot;$route.params&quot;</span>](newVal, oldVal)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// newVal：this.$route.params 新的值，等同 this.$route.params</span></span><br><span class=\"line\">      <span class=\"comment\">// oldVal：this.$route.params 旧的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \t<span class=\"comment\">// 完整写法</span></span><br><span class=\"line\">    [<span class=\"string\">&quot;$route.params&quot;</span>]: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否监听该数据内部属性的变化，默认 false</span></span><br><span class=\"line\">      <span class=\"attr\">immediate</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 是否立即执行一次 handler，默认 false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue2中的注入","date":"2022-01-01T06:02:47.000Z","description":"vue2中的页面渲染流程和原理","comments":1,"toc":true,"_content":"\n## 注入\n\n![image-20201110163548294](http://mdrs.yuanjin.tech/img/20201110163548.png)\n\nvue会将以下配置注入到vue实例：\n\n- data：和界面相关的数据\n- computed：通过已有数据计算得来的数据，\n- methods：方法\n\n> 模板中可以使用vue实例中的成员\n\n // 对象或数组默认值必须从一个工厂函数获取\n\n## 虚拟DOM树\n\n直接操作真实的DOM会引发严重的效率问题，vue使用虚拟DOM（vnode）的方式来描述要渲染的内容\n\nvnode是一个**普通的**JS对象，用于描述界面上应该有什么，比如：\n\n```js\nvar vnode = {\n  tag: \"h1\",\n  children: [\n    { tag: undefined, text: \"第一个vue应用：Hello World\"}\n  ]\n}\n```\n\n上面的对象描述了：\n\n```\n有一个标签名为h1的节点，它有一个子节点，该子节点是一个文本，内容为「第一个vue应用：Hello World」\n```\n\n**vue模板并不是真实的DOM，它会被编译为虚拟DOM**\n\n```html\n<div id=\"app\">\n  <h1>第一个vue应用：{{title}}</h1>\n  <p>作者：{{author}}</p>\n</div>\n```\n\n上面的模板会被编译为类似下面结构的虚拟DOM\n\n```js\n{\n  tag: \"div\",\n  children: [\n    { tag: \"h1\", children: [ { text: \"第一个vue应用：Hello World\" } ] },\n    { tag: \"p\", children: [ { text: \"作者：袁\" } ] }\n  ]\n}\n```\n\n虚拟DOM树会最终生成为真实的DOM树\n\n![image-20201106144536733](http://mdrs.yuanjin.tech/img/20201106144536.png)\n\n当数据变化后，将引发重新渲染，vue会比较新旧两棵vnode tree，找出差异，然后仅把差异部分应用到真实dom tree中\n\n![image-20201106145409844](http://mdrs.yuanjin.tech/img/20201106145409.png)\n\n**可见，在vue中，要得到最终的界面，必须要生成一个vnode tree**\n\nvue通过以下逻辑生成vnode tree：\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201106152046.png\" style=\"zoom:40%;\" />\n\n\n\n**注意：虚拟节点树必须是单根的**\n\n## 挂载\n\n将生成的真实DOM树，放置到某个元素位置，称之为**挂载**\n\n挂载的方式：\n\n1. 通过`el:\"css选择器\"`进行配置\n2. 通过`vue实例.$mount(\"css选择器\")`进行配置\n\n## 完整流程\n\n<img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n","source":"_posts/基础知识.md","raw":"---\ntitle: vue2中的注入\ndate: 2022-01-01 14:02:47\ndescription: vue2中的页面渲染流程和原理\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n---\n\n## 注入\n\n![image-20201110163548294](http://mdrs.yuanjin.tech/img/20201110163548.png)\n\nvue会将以下配置注入到vue实例：\n\n- data：和界面相关的数据\n- computed：通过已有数据计算得来的数据，\n- methods：方法\n\n> 模板中可以使用vue实例中的成员\n\n // 对象或数组默认值必须从一个工厂函数获取\n\n## 虚拟DOM树\n\n直接操作真实的DOM会引发严重的效率问题，vue使用虚拟DOM（vnode）的方式来描述要渲染的内容\n\nvnode是一个**普通的**JS对象，用于描述界面上应该有什么，比如：\n\n```js\nvar vnode = {\n  tag: \"h1\",\n  children: [\n    { tag: undefined, text: \"第一个vue应用：Hello World\"}\n  ]\n}\n```\n\n上面的对象描述了：\n\n```\n有一个标签名为h1的节点，它有一个子节点，该子节点是一个文本，内容为「第一个vue应用：Hello World」\n```\n\n**vue模板并不是真实的DOM，它会被编译为虚拟DOM**\n\n```html\n<div id=\"app\">\n  <h1>第一个vue应用：{{title}}</h1>\n  <p>作者：{{author}}</p>\n</div>\n```\n\n上面的模板会被编译为类似下面结构的虚拟DOM\n\n```js\n{\n  tag: \"div\",\n  children: [\n    { tag: \"h1\", children: [ { text: \"第一个vue应用：Hello World\" } ] },\n    { tag: \"p\", children: [ { text: \"作者：袁\" } ] }\n  ]\n}\n```\n\n虚拟DOM树会最终生成为真实的DOM树\n\n![image-20201106144536733](http://mdrs.yuanjin.tech/img/20201106144536.png)\n\n当数据变化后，将引发重新渲染，vue会比较新旧两棵vnode tree，找出差异，然后仅把差异部分应用到真实dom tree中\n\n![image-20201106145409844](http://mdrs.yuanjin.tech/img/20201106145409.png)\n\n**可见，在vue中，要得到最终的界面，必须要生成一个vnode tree**\n\nvue通过以下逻辑生成vnode tree：\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201106152046.png\" style=\"zoom:40%;\" />\n\n\n\n**注意：虚拟节点树必须是单根的**\n\n## 挂载\n\n将生成的真实DOM树，放置到某个元素位置，称之为**挂载**\n\n挂载的方式：\n\n1. 通过`el:\"css选择器\"`进行配置\n2. 通过`vue实例.$mount(\"css选择器\")`进行配置\n\n## 完整流程\n\n<img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n","slug":"基础知识","published":1,"updated":"2022-01-01T06:26:41.148Z","_id":"ckxvf7cli0006ccaxeq725fzz","layout":"post","photos":[],"link":"","content":"<h2 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h2><p><img src=\"http://mdrs.yuanjin.tech/img/20201110163548.png\" alt=\"image-20201110163548294\"></p>\n<p>vue会将以下配置注入到vue实例：</p>\n<ul>\n<li>data：和界面相关的数据</li>\n<li>computed：通过已有数据计算得来的数据，</li>\n<li>methods：方法</li>\n</ul>\n<blockquote>\n<p>模板中可以使用vue实例中的成员</p>\n</blockquote>\n<p> // 对象或数组默认值必须从一个工厂函数获取</p>\n<h2 id=\"虚拟DOM树\"><a href=\"#虚拟DOM树\" class=\"headerlink\" title=\"虚拟DOM树\"></a>虚拟DOM树</h2><p>直接操作真实的DOM会引发严重的效率问题，vue使用虚拟DOM（vnode）的方式来描述要渲染的内容</p>\n<p>vnode是一个<strong>普通的</strong>JS对象，用于描述界面上应该有什么，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vnode = &#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&quot;h1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">tag</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">text</span>: <span class=\"string\">&quot;第一个vue应用：Hello World&quot;</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的对象描述了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一个标签名为h1的节点，它有一个子节点，该子节点是一个文本，内容为「第一个vue应用：Hello World」</span><br></pre></td></tr></table></figure>\n\n<p><strong>vue模板并不是真实的DOM，它会被编译为虚拟DOM</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>第一个vue应用：&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>作者：&#123;&#123;author&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的模板会被编译为类似下面结构的虚拟DOM</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">tag</span>: <span class=\"string\">&quot;h1&quot;</span>, <span class=\"attr\">children</span>: [ &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;第一个vue应用：Hello World&quot;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">tag</span>: <span class=\"string\">&quot;p&quot;</span>, <span class=\"attr\">children</span>: [ &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;作者：袁&quot;</span> &#125; ] &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虚拟DOM树会最终生成为真实的DOM树</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201106144536.png\" alt=\"image-20201106144536733\"></p>\n<p>当数据变化后，将引发重新渲染，vue会比较新旧两棵vnode tree，找出差异，然后仅把差异部分应用到真实dom tree中</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201106145409.png\" alt=\"image-20201106145409844\"></p>\n<p><strong>可见，在vue中，要得到最终的界面，必须要生成一个vnode tree</strong></p>\n<p>vue通过以下逻辑生成vnode tree：</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20201106152046.png\" style=\"zoom:40%;\" />\n\n\n\n<p><strong>注意：虚拟节点树必须是单根的</strong></p>\n<h2 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h2><p>将生成的真实DOM树，放置到某个元素位置，称之为<strong>挂载</strong></p>\n<p>挂载的方式：</p>\n<ol>\n<li>通过<code>el:&quot;css选择器&quot;</code>进行配置</li>\n<li>通过<code>vue实例.$mount(&quot;css选择器&quot;)</code>进行配置</li>\n</ol>\n<h2 id=\"完整流程\"><a href=\"#完整流程\" class=\"headerlink\" title=\"完整流程\"></a>完整流程</h2><img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"length":1046,"excerpt":"","more":"<h2 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h2><p><img src=\"http://mdrs.yuanjin.tech/img/20201110163548.png\" alt=\"image-20201110163548294\"></p>\n<p>vue会将以下配置注入到vue实例：</p>\n<ul>\n<li>data：和界面相关的数据</li>\n<li>computed：通过已有数据计算得来的数据，</li>\n<li>methods：方法</li>\n</ul>\n<blockquote>\n<p>模板中可以使用vue实例中的成员</p>\n</blockquote>\n<p> // 对象或数组默认值必须从一个工厂函数获取</p>\n<h2 id=\"虚拟DOM树\"><a href=\"#虚拟DOM树\" class=\"headerlink\" title=\"虚拟DOM树\"></a>虚拟DOM树</h2><p>直接操作真实的DOM会引发严重的效率问题，vue使用虚拟DOM（vnode）的方式来描述要渲染的内容</p>\n<p>vnode是一个<strong>普通的</strong>JS对象，用于描述界面上应该有什么，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vnode = &#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&quot;h1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">tag</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">text</span>: <span class=\"string\">&quot;第一个vue应用：Hello World&quot;</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的对象描述了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一个标签名为h1的节点，它有一个子节点，该子节点是一个文本，内容为「第一个vue应用：Hello World」</span><br></pre></td></tr></table></figure>\n\n<p><strong>vue模板并不是真实的DOM，它会被编译为虚拟DOM</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>第一个vue应用：&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>作者：&#123;&#123;author&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的模板会被编译为类似下面结构的虚拟DOM</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">tag</span>: <span class=\"string\">&quot;h1&quot;</span>, <span class=\"attr\">children</span>: [ &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;第一个vue应用：Hello World&quot;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">tag</span>: <span class=\"string\">&quot;p&quot;</span>, <span class=\"attr\">children</span>: [ &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;作者：袁&quot;</span> &#125; ] &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虚拟DOM树会最终生成为真实的DOM树</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201106144536.png\" alt=\"image-20201106144536733\"></p>\n<p>当数据变化后，将引发重新渲染，vue会比较新旧两棵vnode tree，找出差异，然后仅把差异部分应用到真实dom tree中</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201106145409.png\" alt=\"image-20201106145409844\"></p>\n<p><strong>可见，在vue中，要得到最终的界面，必须要生成一个vnode tree</strong></p>\n<p>vue通过以下逻辑生成vnode tree：</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20201106152046.png\" style=\"zoom:40%;\" />\n\n\n\n<p><strong>注意：虚拟节点树必须是单根的</strong></p>\n<h2 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h2><p>将生成的真实DOM树，放置到某个元素位置，称之为<strong>挂载</strong></p>\n<p>挂载的方式：</p>\n<ol>\n<li>通过<code>el:&quot;css选择器&quot;</code>进行配置</li>\n<li>通过<code>vue实例.$mount(&quot;css选择器&quot;)</code>进行配置</li>\n</ol>\n<h2 id=\"完整流程\"><a href=\"#完整流程\" class=\"headerlink\" title=\"完整流程\"></a>完整流程</h2><img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n"},{"title":"vue2中的插槽","date":"2022-01-01T06:30:47.000Z","description":"vue2中的插槽的作用和定义方法","comments":1,"toc":true,"_content":"\n在某些组件的模板中，有一部分区域需要父组件来指定\n\n```html\n<!-- message组件：一个弹窗消息 -->\n<div class=\"message-container\">\n  <div class=\"content\">\n    <!-- 这里是消息内容，可以是一个文本，也可能是一段html，具体是什么不知道，需要父组件指定 -->\n  </div>\n  <button>确定</button>\n  <button>关闭</button>\n</div>\n```\n\n# 插槽的简单用法\n\n此时，就需要使用插槽来定制组件的功能\n\n```html\n<!-- message组件：一个弹窗消息 -->\n<div class=\"message-container\">\n  <div class=\"content\">\n    <!-- slot是vue的内置组件 -->\n    <slot></slot>\n  </div>\n  <button>确定</button>\n  <button>关闭</button>\n</div>\n\n<!-- 父组件App -->\n<Message>\n\t<div class=\"app-message\">\n        <p>App Message</p>\n        <a href=\"\">detail</a>\n  \t</div>\n</Message>\n\n<!-- 最终的结果 -->\n<div class=\"message-co r\">\n  <div class=\"content\" \n    <div class=\"app-message >\n    <p>App Message</p>\n      <a href=\"\">detai \n    </div>\n  </div>\n  <button>确定</button>\n  <button>关闭</button>\n</div>\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202152326.png\" alt=\"image-20201202152326210\" style=\"zoom:40%;\" />\n\n# 具名插槽\n\n如果某个组件中需要父元素传递多个区域的内容，也就意味着需要提供多个插槽\n\n为了避免冲突，就需要给不同的插槽赋予不同的名字\n\n父组件中要使用 v-slot 指令，简写为 #\n\n```html\n<!-- Layout 组件 -->\n<div class=\"layout-container\">\n  <header>\n    <!-- 我们希望把页头放这里，提供插槽，名为header -->\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <!-- 我们希望把主要内容放这里，提供插槽，名为default -->\n    <slot></slot>\n  </main>\n  <footer>\n    <!-- 我们希望把页脚放这里，提供插槽，名为footer -->\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n\n<!-- 父组件App -->\n<BaseLayout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template v-slot:default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  <template v-slot:default>\n    \n  <template v-slot:footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202153229.png\" alt=\"image-20201202153229391\" style=\"zoom:50%;\" />\n\n","source":"_posts/插槽.md","raw":"---\ntitle: vue2中的插槽\ndate: 2022-01-01 14:30:47\ndescription: vue2中的插槽的作用和定义方法\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n---\n\n在某些组件的模板中，有一部分区域需要父组件来指定\n\n```html\n<!-- message组件：一个弹窗消息 -->\n<div class=\"message-container\">\n  <div class=\"content\">\n    <!-- 这里是消息内容，可以是一个文本，也可能是一段html，具体是什么不知道，需要父组件指定 -->\n  </div>\n  <button>确定</button>\n  <button>关闭</button>\n</div>\n```\n\n# 插槽的简单用法\n\n此时，就需要使用插槽来定制组件的功能\n\n```html\n<!-- message组件：一个弹窗消息 -->\n<div class=\"message-container\">\n  <div class=\"content\">\n    <!-- slot是vue的内置组件 -->\n    <slot></slot>\n  </div>\n  <button>确定</button>\n  <button>关闭</button>\n</div>\n\n<!-- 父组件App -->\n<Message>\n\t<div class=\"app-message\">\n        <p>App Message</p>\n        <a href=\"\">detail</a>\n  \t</div>\n</Message>\n\n<!-- 最终的结果 -->\n<div class=\"message-co r\">\n  <div class=\"content\" \n    <div class=\"app-message >\n    <p>App Message</p>\n      <a href=\"\">detai \n    </div>\n  </div>\n  <button>确定</button>\n  <button>关闭</button>\n</div>\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202152326.png\" alt=\"image-20201202152326210\" style=\"zoom:40%;\" />\n\n# 具名插槽\n\n如果某个组件中需要父元素传递多个区域的内容，也就意味着需要提供多个插槽\n\n为了避免冲突，就需要给不同的插槽赋予不同的名字\n\n父组件中要使用 v-slot 指令，简写为 #\n\n```html\n<!-- Layout 组件 -->\n<div class=\"layout-container\">\n  <header>\n    <!-- 我们希望把页头放这里，提供插槽，名为header -->\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <!-- 我们希望把主要内容放这里，提供插槽，名为default -->\n    <slot></slot>\n  </main>\n  <footer>\n    <!-- 我们希望把页脚放这里，提供插槽，名为footer -->\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n\n<!-- 父组件App -->\n<BaseLayout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template v-slot:default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  <template v-slot:default>\n    \n  <template v-slot:footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202153229.png\" alt=\"image-20201202153229391\" style=\"zoom:50%;\" />\n\n","slug":"插槽","published":1,"updated":"2022-01-01T06:22:06.463Z","_id":"ckxvf7cm1000accax9tfpghc2","layout":"post","photos":[],"link":"","content":"<p>在某些组件的模板中，有一部分区域需要父组件来指定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- message组件：一个弹窗消息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里是消息内容，可以是一个文本，也可能是一段html，具体是什么不知道，需要父组件指定 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插槽的简单用法\"><a href=\"#插槽的简单用法\" class=\"headerlink\" title=\"插槽的简单用法\"></a>插槽的简单用法</h1><p>此时，就需要使用插槽来定制组件的功能</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- message组件：一个弹窗消息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slot是vue的内置组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件App --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Message</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app-message&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>App Message<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>detail<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Message</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 最终的结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-co r&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    &lt;<span class=\"attr\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app-message &gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    &lt;p&gt;App Message&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      &lt;a href=&quot;</span>&quot;&gt;</span>detai </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202152326.png\" alt=\"image-20201202152326210\" style=\"zoom:40%;\" />\n\n<h1 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h1><p>如果某个组件中需要父元素传递多个区域的内容，也就意味着需要提供多个插槽</p>\n<p>为了避免冲突，就需要给不同的插槽赋予不同的名字</p>\n<p>父组件中要使用 v-slot 指令，简写为 #</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Layout 组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;layout-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页头放这里，提供插槽，名为header --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把主要内容放这里，提供插槽，名为default --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页脚放这里，提供插槽，名为footer --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件App --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BaseLayout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202153229.png\" alt=\"image-20201202153229391\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"length":1968,"excerpt":"","more":"<p>在某些组件的模板中，有一部分区域需要父组件来指定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- message组件：一个弹窗消息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里是消息内容，可以是一个文本，也可能是一段html，具体是什么不知道，需要父组件指定 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插槽的简单用法\"><a href=\"#插槽的简单用法\" class=\"headerlink\" title=\"插槽的简单用法\"></a>插槽的简单用法</h1><p>此时，就需要使用插槽来定制组件的功能</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- message组件：一个弹窗消息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- slot是vue的内置组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件App --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Message</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app-message&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>App Message<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>detail<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Message</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 最终的结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-co r&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    &lt;<span class=\"attr\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app-message &gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    &lt;p&gt;App Message&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      &lt;a href=&quot;</span>&quot;&gt;</span>detai </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202152326.png\" alt=\"image-20201202152326210\" style=\"zoom:40%;\" />\n\n<h1 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h1><p>如果某个组件中需要父元素传递多个区域的内容，也就意味着需要提供多个插槽</p>\n<p>为了避免冲突，就需要给不同的插槽赋予不同的名字</p>\n<p>父组件中要使用 v-slot 指令，简写为 #</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Layout 组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;layout-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页头放这里，提供插槽，名为header --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把主要内容放这里，提供插槽，名为default --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页脚放这里，提供插槽，名为footer --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件App --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BaseLayout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202153229.png\" alt=\"image-20201202153229391\" style=\"zoom:50%;\" />\n\n"},{"title":"vue2中的ref","date":"2022-01-01T06:02:47.000Z","description":"vue2中使用css module和ref操作dom元素","comments":1,"toc":true,"_content":"\n\n# 使用css module\n\n需要将样式文件命名为`xxx.module.ooo`\n\n`xxx`为文件名\n\n`ooo`为样式文件后缀名，可以是`css`、`less`\n\n\n\n# 得到组件渲染的Dom\n\n```js\n  /**\n    获取某个组件渲染的Dom根元素\n  */\nfunction getComponentRootDom(comp, props){\n  const vm = new Vue({\n    render: h => h(comp, {props})\n  })\n  vm.$mount();\n  return vm.$el;\n}\n```\n\n\n\n# 扩展vue实例\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203172154.jpg\" alt=\"扩展vue实例\" style=\"zoom:33%;\" />\n\n# ref\n\n```html\n<template>\n\t<div>\n    <p ref=\"para\">some paragraph</p>\n    <ChildComp ref=\"comp\" />\n    <button @click=\"handleClick\">查看所有引用</button>\n  </div>\n</template>\n\n<script>\n  import ChildComp from \"./ChildComp\"\n\texport default {\n    components:{\n      ChildComp\n    },\n    methods:{\n      handleClick(){\n        // 获取持有的所有引用\n        console.log(this.$refs);\n        /*\n        {\n        \tpara: p元素（原生DOM）,\n        \tcomp: ChildComp的组件实例\n        }\n        */\n      }\n    }\n  }\n</script>\n```\n\n\n\n> 通过`ref`可以直接操作`dom`元素，甚至可能直接改动子组件，这些都不符合`vue`的设计理念。\n>\n> 除非迫不得已，否则不要使用`ref`\n\n","source":"_posts/弹出消息.md","raw":"---\ntitle: vue2中的ref\ndate: 2022-01-01 14:02:47\ndescription: vue2中使用css module和ref操作dom元素\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n\n# 使用css module\n\n需要将样式文件命名为`xxx.module.ooo`\n\n`xxx`为文件名\n\n`ooo`为样式文件后缀名，可以是`css`、`less`\n\n\n\n# 得到组件渲染的Dom\n\n```js\n  /**\n    获取某个组件渲染的Dom根元素\n  */\nfunction getComponentRootDom(comp, props){\n  const vm = new Vue({\n    render: h => h(comp, {props})\n  })\n  vm.$mount();\n  return vm.$el;\n}\n```\n\n\n\n# 扩展vue实例\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203172154.jpg\" alt=\"扩展vue实例\" style=\"zoom:33%;\" />\n\n# ref\n\n```html\n<template>\n\t<div>\n    <p ref=\"para\">some paragraph</p>\n    <ChildComp ref=\"comp\" />\n    <button @click=\"handleClick\">查看所有引用</button>\n  </div>\n</template>\n\n<script>\n  import ChildComp from \"./ChildComp\"\n\texport default {\n    components:{\n      ChildComp\n    },\n    methods:{\n      handleClick(){\n        // 获取持有的所有引用\n        console.log(this.$refs);\n        /*\n        {\n        \tpara: p元素（原生DOM）,\n        \tcomp: ChildComp的组件实例\n        }\n        */\n      }\n    }\n  }\n</script>\n```\n\n\n\n> 通过`ref`可以直接操作`dom`元素，甚至可能直接改动子组件，这些都不符合`vue`的设计理念。\n>\n> 除非迫不得已，否则不要使用`ref`\n\n","slug":"弹出消息","published":1,"updated":"2022-01-01T06:11:04.935Z","_id":"ckxvf7cm2000cccax6bj6f2tb","layout":"post","photos":[],"link":"","content":"<h1 id=\"使用css-module\"><a href=\"#使用css-module\" class=\"headerlink\" title=\"使用css module\"></a>使用css module</h1><p>需要将样式文件命名为<code>xxx.module.ooo</code></p>\n<p><code>xxx</code>为文件名</p>\n<p><code>ooo</code>为样式文件后缀名，可以是<code>css</code>、<code>less</code></p>\n<h1 id=\"得到组件渲染的Dom\"><a href=\"#得到组件渲染的Dom\" class=\"headerlink\" title=\"得到组件渲染的Dom\"></a>得到组件渲染的Dom</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    获取某个组件渲染的Dom根元素</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponentRootDom</span>(<span class=\"params\">comp, props</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(comp, &#123;props&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  vm.$mount();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm.$el;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"扩展vue实例\"><a href=\"#扩展vue实例\" class=\"headerlink\" title=\"扩展vue实例\"></a>扩展vue实例</h1><img src=\"http://mdrs.yuanjin.tech/img/20201203172154.jpg\" alt=\"扩展vue实例\" style=\"zoom:33%;\" />\n\n<h1 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;para&quot;</span>&gt;</span>some paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>查看所有引用<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> ChildComp <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ChildComp&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      ChildComp</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">handleClick</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 获取持有的所有引用</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        &#123;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        \tpara: p元素（原生DOM）,</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        \tcomp: ChildComp的组件实例</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>通过<code>ref</code>可以直接操作<code>dom</code>元素，甚至可能直接改动子组件，这些都不符合<code>vue</code>的设计理念。</p>\n<p>除非迫不得已，否则不要使用<code>ref</code></p>\n</blockquote>\n","site":{"data":{}},"length":836,"excerpt":"","more":"<h1 id=\"使用css-module\"><a href=\"#使用css-module\" class=\"headerlink\" title=\"使用css module\"></a>使用css module</h1><p>需要将样式文件命名为<code>xxx.module.ooo</code></p>\n<p><code>xxx</code>为文件名</p>\n<p><code>ooo</code>为样式文件后缀名，可以是<code>css</code>、<code>less</code></p>\n<h1 id=\"得到组件渲染的Dom\"><a href=\"#得到组件渲染的Dom\" class=\"headerlink\" title=\"得到组件渲染的Dom\"></a>得到组件渲染的Dom</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    获取某个组件渲染的Dom根元素</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponentRootDom</span>(<span class=\"params\">comp, props</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(comp, &#123;props&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  vm.$mount();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm.$el;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"扩展vue实例\"><a href=\"#扩展vue实例\" class=\"headerlink\" title=\"扩展vue实例\"></a>扩展vue实例</h1><img src=\"http://mdrs.yuanjin.tech/img/20201203172154.jpg\" alt=\"扩展vue实例\" style=\"zoom:33%;\" />\n\n<h1 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;para&quot;</span>&gt;</span>some paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>查看所有引用<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> ChildComp <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ChildComp&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      ChildComp</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">handleClick</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 获取持有的所有引用</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        &#123;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        \tpara: p元素（原生DOM）,</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        \tcomp: ChildComp的组件实例</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>通过<code>ref</code>可以直接操作<code>dom</code>元素，甚至可能直接改动子组件，这些都不符合<code>vue</code>的设计理念。</p>\n<p>除非迫不得已，否则不要使用<code>ref</code></p>\n</blockquote>\n"},{"title":"分析打包的结果","date":"2022-01-01T06:32:47.000Z","description":"分析使用vue-cli打包后的文件，进行优化","comments":1,"toc":true,"_content":"\n# 分析打包结果\n\n由于`vue-cli`是利用`webpack`进行打包，我们仅需加入一个`webpack`插件`webpack-bundle-analyzer`即可分析打包结果\n\n为了避免在开发环境中启动`webpack-bundle-analyzer`，我们仅需使用以下代码即可\n\n```js\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\")\n    .BundleAnalyzerPlugin;\n// vue.config.js\nmodule.exports = {\n  // 通过 configureWebpack 选项，可对 webpack 进行额外的配置\n  // 该配置最终会和 vue-cli 的默认配置进行合并（webpack-merge）\n  configureWebpack: {\n    plugins: [new BundleAnalyzerPlugin()]\n  },\n};\n```\n\n# 优化公共库打包体积\n\n## 使用CDN\n\nCDN全称为Content Delivery Network，称之为内容分发网络\n\n它的基本原理是：架设多台服务器，这些服务器定期从源站拿取资源保存本地，到让不同地域的用户能够通过访问最近的服务器获得资源\n\n![img](http://mdrs.yuanjin.tech/img/20210203133956.png)\n\n我们可以把项目中的所有静态资源都放到CDN上（收费），也可以利用现成免费的CDN获取公共库的资源\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210203140030.png\" alt=\"image-20210203140029967\" style=\"zoom:50%;\" />\n\n首先，我们需要告诉`webpack`不要对公共库进行打包\n\n```js\n// vue.config.js\nmodule.exports = {\n  configureWebpack: {\n    externals: {\n      vue: \"Vue\",\n      vuex: \"Vuex\",\n      \"vue-router\": \"VueRouter\",\n    }\n  },\n};\n```\n\n然后，在页面中手动加入`cdn`链接，这里使用[bootcn](https://www.bootcdn.cn/)\n\n```html\n<body>\n  <div id=\"app\"></div>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js\"></script>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/vuex/3.5.1/vuex.min.js\"></script>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.4.7/vue-router.min.js\"></script>\n  <!-- built files will be auto injected -->\n</body>\n```\n\n对于`vuex`和`vue-router`，使用这种传统的方式引入的话会自动成为`Vue`的插件，因此需要去掉`Vue.use(xxx)`\n\n我们可以使用下面的代码来进行兼容\n\n```js\n// store.js\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nif(!window.Vuex){\n  // 没有使用传统的方式引入Vuex\n  Vue.use(Vuex);\n}\n\n// router.js\nimport VueRouter from \"vue-router\";\nimport Vue from \"vue\";\n\nif(!window.VueRouter){\n  // 没有使用传统的方式引入VueRouter\n  Vue.use(VueRouter);\n}\n```\n\n\n\n## 启用现代模式\n\n为了兼容各种浏览器，`vue-cli`在内部使用了`@babel/present-env`对代码进行降级，你可以通过`.browserlistrc`配置来设置需要兼容的目标浏览器\n\n这是一种比较*偷懒*的办法，因为对于那些使用现代浏览器的用户，它们也*被迫*使用了降级之后的代码，而降低的代码中包含了大量的`polyfill`，从而提升了包的体积\n\n因此，我们希望提供两种打包结果：\n\n1. 降级后的包（大），提供给旧浏览器用户使用\n2. 未降级的包（小），提供给现代浏览器用户使用\n\n除了应用`webpack`进行多次打包外，还可以利用`vue-cli`给我们提供的命令：\n\n```shell\nvue-cli-service build --modern\n```\n\n\n\n# 优化项目包体积\n\n这里的项目包是指`src`目录中的打包结果\n\n## 页面分包\n\n默认情况下，`vue-cli`会利用`webpack`将`src`目录中的所有代码打包成一个`bundle`\n\n这样就导致访问一个页面时，需要加载所有页面的`js`代码\n\n我们可以利用`webpack`对`动态import`的支持，从而达到把不同页面的代码打包到不同文件中\n\n```js\n// routes\nexport default [\n  {\n    name: \"Home\",\n    path: \"/\",\n    component: () => import(/* webpackChunkName: \"home\" */ \"@/views/Home\"),\n  },\n  {\n    name: \"About\",\n    path: \"/about\",\n    component: () => import(/* webpackChunkName: \"about\" */\"@/views/About\"),\n  }\n];\n```\n\n# 优化首屏响应\n\n> 首页白屏受很多因素的影响\n\n`vue`页面需要通过`js`构建，因此在`js`下载到本地之前，页面上什么也没有\n\n一个非常简单有效的办法，即在页面中先渲染一个小的加载中效果，等到`js`下载到本地并运行后，即会自动替换\n\n```html\n<div id=\"app\">\n  <img src=\"loading.gif\" />\n</div>\n```\n\n","source":"_posts/打包优化.md","raw":"---\ntitle: 分析打包的结果\ndate: 2022-01-01 14:32:47\ndescription: 分析使用vue-cli打包后的文件，进行优化\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n---\n\n# 分析打包结果\n\n由于`vue-cli`是利用`webpack`进行打包，我们仅需加入一个`webpack`插件`webpack-bundle-analyzer`即可分析打包结果\n\n为了避免在开发环境中启动`webpack-bundle-analyzer`，我们仅需使用以下代码即可\n\n```js\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\")\n    .BundleAnalyzerPlugin;\n// vue.config.js\nmodule.exports = {\n  // 通过 configureWebpack 选项，可对 webpack 进行额外的配置\n  // 该配置最终会和 vue-cli 的默认配置进行合并（webpack-merge）\n  configureWebpack: {\n    plugins: [new BundleAnalyzerPlugin()]\n  },\n};\n```\n\n# 优化公共库打包体积\n\n## 使用CDN\n\nCDN全称为Content Delivery Network，称之为内容分发网络\n\n它的基本原理是：架设多台服务器，这些服务器定期从源站拿取资源保存本地，到让不同地域的用户能够通过访问最近的服务器获得资源\n\n![img](http://mdrs.yuanjin.tech/img/20210203133956.png)\n\n我们可以把项目中的所有静态资源都放到CDN上（收费），也可以利用现成免费的CDN获取公共库的资源\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210203140030.png\" alt=\"image-20210203140029967\" style=\"zoom:50%;\" />\n\n首先，我们需要告诉`webpack`不要对公共库进行打包\n\n```js\n// vue.config.js\nmodule.exports = {\n  configureWebpack: {\n    externals: {\n      vue: \"Vue\",\n      vuex: \"Vuex\",\n      \"vue-router\": \"VueRouter\",\n    }\n  },\n};\n```\n\n然后，在页面中手动加入`cdn`链接，这里使用[bootcn](https://www.bootcdn.cn/)\n\n```html\n<body>\n  <div id=\"app\"></div>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js\"></script>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/vuex/3.5.1/vuex.min.js\"></script>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.4.7/vue-router.min.js\"></script>\n  <!-- built files will be auto injected -->\n</body>\n```\n\n对于`vuex`和`vue-router`，使用这种传统的方式引入的话会自动成为`Vue`的插件，因此需要去掉`Vue.use(xxx)`\n\n我们可以使用下面的代码来进行兼容\n\n```js\n// store.js\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nif(!window.Vuex){\n  // 没有使用传统的方式引入Vuex\n  Vue.use(Vuex);\n}\n\n// router.js\nimport VueRouter from \"vue-router\";\nimport Vue from \"vue\";\n\nif(!window.VueRouter){\n  // 没有使用传统的方式引入VueRouter\n  Vue.use(VueRouter);\n}\n```\n\n\n\n## 启用现代模式\n\n为了兼容各种浏览器，`vue-cli`在内部使用了`@babel/present-env`对代码进行降级，你可以通过`.browserlistrc`配置来设置需要兼容的目标浏览器\n\n这是一种比较*偷懒*的办法，因为对于那些使用现代浏览器的用户，它们也*被迫*使用了降级之后的代码，而降低的代码中包含了大量的`polyfill`，从而提升了包的体积\n\n因此，我们希望提供两种打包结果：\n\n1. 降级后的包（大），提供给旧浏览器用户使用\n2. 未降级的包（小），提供给现代浏览器用户使用\n\n除了应用`webpack`进行多次打包外，还可以利用`vue-cli`给我们提供的命令：\n\n```shell\nvue-cli-service build --modern\n```\n\n\n\n# 优化项目包体积\n\n这里的项目包是指`src`目录中的打包结果\n\n## 页面分包\n\n默认情况下，`vue-cli`会利用`webpack`将`src`目录中的所有代码打包成一个`bundle`\n\n这样就导致访问一个页面时，需要加载所有页面的`js`代码\n\n我们可以利用`webpack`对`动态import`的支持，从而达到把不同页面的代码打包到不同文件中\n\n```js\n// routes\nexport default [\n  {\n    name: \"Home\",\n    path: \"/\",\n    component: () => import(/* webpackChunkName: \"home\" */ \"@/views/Home\"),\n  },\n  {\n    name: \"About\",\n    path: \"/about\",\n    component: () => import(/* webpackChunkName: \"about\" */\"@/views/About\"),\n  }\n];\n```\n\n# 优化首屏响应\n\n> 首页白屏受很多因素的影响\n\n`vue`页面需要通过`js`构建，因此在`js`下载到本地之前，页面上什么也没有\n\n一个非常简单有效的办法，即在页面中先渲染一个小的加载中效果，等到`js`下载到本地并运行后，即会自动替换\n\n```html\n<div id=\"app\">\n  <img src=\"loading.gif\" />\n</div>\n```\n\n","slug":"打包优化","published":1,"updated":"2022-01-01T06:23:55.950Z","_id":"ckxvf7cm3000eccaxe0cs3aqh","layout":"post","photos":[],"link":"","content":"<h1 id=\"分析打包结果\"><a href=\"#分析打包结果\" class=\"headerlink\" title=\"分析打包结果\"></a>分析打包结果</h1><p>由于<code>vue-cli</code>是利用<code>webpack</code>进行打包，我们仅需加入一个<code>webpack</code>插件<code>webpack-bundle-analyzer</code>即可分析打包结果</p>\n<p>为了避免在开发环境中启动<code>webpack-bundle-analyzer</code>，我们仅需使用以下代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BundleAnalyzerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>)</span><br><span class=\"line\">    .BundleAnalyzerPlugin;</span><br><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过 configureWebpack 选项，可对 webpack 进行额外的配置</span></span><br><span class=\"line\">  <span class=\"comment\">// 该配置最终会和 vue-cli 的默认配置进行合并（webpack-merge）</span></span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> BundleAnalyzerPlugin()]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"优化公共库打包体积\"><a href=\"#优化公共库打包体积\" class=\"headerlink\" title=\"优化公共库打包体积\"></a>优化公共库打包体积</h1><h2 id=\"使用CDN\"><a href=\"#使用CDN\" class=\"headerlink\" title=\"使用CDN\"></a>使用CDN</h2><p>CDN全称为Content Delivery Network，称之为内容分发网络</p>\n<p>它的基本原理是：架设多台服务器，这些服务器定期从源站拿取资源保存本地，到让不同地域的用户能够通过访问最近的服务器获得资源</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210203133956.png\" alt=\"img\"></p>\n<p>我们可以把项目中的所有静态资源都放到CDN上（收费），也可以利用现成免费的CDN获取公共库的资源</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210203140030.png\" alt=\"image-20210203140029967\" style=\"zoom:50%;\" />\n\n<p>首先，我们需要告诉<code>webpack</code>不要对公共库进行打包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">vuex</span>: <span class=\"string\">&quot;Vuex&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在页面中手动加入<code>cdn</code>链接，这里使用<a href=\"https://www.bootcdn.cn/\">bootcn</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vuex/3.5.1/vuex.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.4.7/vue-router.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于<code>vuex</code>和<code>vue-router</code>，使用这种传统的方式引入的话会自动成为<code>Vue</code>的插件，因此需要去掉<code>Vue.use(xxx)</code></p>\n<p>我们可以使用下面的代码来进行兼容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.Vuex)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 没有使用传统的方式引入Vuex</span></span><br><span class=\"line\">  Vue.use(Vuex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.VueRouter)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 没有使用传统的方式引入VueRouter</span></span><br><span class=\"line\">  Vue.use(VueRouter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启用现代模式\"><a href=\"#启用现代模式\" class=\"headerlink\" title=\"启用现代模式\"></a>启用现代模式</h2><p>为了兼容各种浏览器，<code>vue-cli</code>在内部使用了<code>@babel/present-env</code>对代码进行降级，你可以通过<code>.browserlistrc</code>配置来设置需要兼容的目标浏览器</p>\n<p>这是一种比较<em>偷懒</em>的办法，因为对于那些使用现代浏览器的用户，它们也<em>被迫</em>使用了降级之后的代码，而降低的代码中包含了大量的<code>polyfill</code>，从而提升了包的体积</p>\n<p>因此，我们希望提供两种打包结果：</p>\n<ol>\n<li>降级后的包（大），提供给旧浏览器用户使用</li>\n<li>未降级的包（小），提供给现代浏览器用户使用</li>\n</ol>\n<p>除了应用<code>webpack</code>进行多次打包外，还可以利用<code>vue-cli</code>给我们提供的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue-cli-service build --modern</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"优化项目包体积\"><a href=\"#优化项目包体积\" class=\"headerlink\" title=\"优化项目包体积\"></a>优化项目包体积</h1><p>这里的项目包是指<code>src</code>目录中的打包结果</p>\n<h2 id=\"页面分包\"><a href=\"#页面分包\" class=\"headerlink\" title=\"页面分包\"></a>页面分包</h2><p>默认情况下，<code>vue-cli</code>会利用<code>webpack</code>将<code>src</code>目录中的所有代码打包成一个<code>bundle</code></p>\n<p>这样就导致访问一个页面时，需要加载所有页面的<code>js</code>代码</p>\n<p>我们可以利用<code>webpack</code>对<code>动态import</code>的支持，从而达到把不同页面的代码打包到不同文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routes</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Home&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;home&quot; */</span> <span class=\"string\">&quot;@/views/Home&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;About&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;about&quot; */</span><span class=\"string\">&quot;@/views/About&quot;</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"优化首屏响应\"><a href=\"#优化首屏响应\" class=\"headerlink\" title=\"优化首屏响应\"></a>优化首屏响应</h1><blockquote>\n<p>首页白屏受很多因素的影响</p>\n</blockquote>\n<p><code>vue</code>页面需要通过<code>js</code>构建，因此在<code>js</code>下载到本地之前，页面上什么也没有</p>\n<p>一个非常简单有效的办法，即在页面中先渲染一个小的加载中效果，等到<code>js</code>下载到本地并运行后，即会自动替换</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;loading.gif&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":2592,"excerpt":"","more":"<h1 id=\"分析打包结果\"><a href=\"#分析打包结果\" class=\"headerlink\" title=\"分析打包结果\"></a>分析打包结果</h1><p>由于<code>vue-cli</code>是利用<code>webpack</code>进行打包，我们仅需加入一个<code>webpack</code>插件<code>webpack-bundle-analyzer</code>即可分析打包结果</p>\n<p>为了避免在开发环境中启动<code>webpack-bundle-analyzer</code>，我们仅需使用以下代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BundleAnalyzerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>)</span><br><span class=\"line\">    .BundleAnalyzerPlugin;</span><br><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过 configureWebpack 选项，可对 webpack 进行额外的配置</span></span><br><span class=\"line\">  <span class=\"comment\">// 该配置最终会和 vue-cli 的默认配置进行合并（webpack-merge）</span></span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> BundleAnalyzerPlugin()]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"优化公共库打包体积\"><a href=\"#优化公共库打包体积\" class=\"headerlink\" title=\"优化公共库打包体积\"></a>优化公共库打包体积</h1><h2 id=\"使用CDN\"><a href=\"#使用CDN\" class=\"headerlink\" title=\"使用CDN\"></a>使用CDN</h2><p>CDN全称为Content Delivery Network，称之为内容分发网络</p>\n<p>它的基本原理是：架设多台服务器，这些服务器定期从源站拿取资源保存本地，到让不同地域的用户能够通过访问最近的服务器获得资源</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210203133956.png\" alt=\"img\"></p>\n<p>我们可以把项目中的所有静态资源都放到CDN上（收费），也可以利用现成免费的CDN获取公共库的资源</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210203140030.png\" alt=\"image-20210203140029967\" style=\"zoom:50%;\" />\n\n<p>首先，我们需要告诉<code>webpack</code>不要对公共库进行打包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">vuex</span>: <span class=\"string\">&quot;Vuex&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在页面中手动加入<code>cdn</code>链接，这里使用<a href=\"https://www.bootcdn.cn/\">bootcn</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vuex/3.5.1/vuex.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.4.7/vue-router.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于<code>vuex</code>和<code>vue-router</code>，使用这种传统的方式引入的话会自动成为<code>Vue</code>的插件，因此需要去掉<code>Vue.use(xxx)</code></p>\n<p>我们可以使用下面的代码来进行兼容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.Vuex)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 没有使用传统的方式引入Vuex</span></span><br><span class=\"line\">  Vue.use(Vuex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.VueRouter)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 没有使用传统的方式引入VueRouter</span></span><br><span class=\"line\">  Vue.use(VueRouter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启用现代模式\"><a href=\"#启用现代模式\" class=\"headerlink\" title=\"启用现代模式\"></a>启用现代模式</h2><p>为了兼容各种浏览器，<code>vue-cli</code>在内部使用了<code>@babel/present-env</code>对代码进行降级，你可以通过<code>.browserlistrc</code>配置来设置需要兼容的目标浏览器</p>\n<p>这是一种比较<em>偷懒</em>的办法，因为对于那些使用现代浏览器的用户，它们也<em>被迫</em>使用了降级之后的代码，而降低的代码中包含了大量的<code>polyfill</code>，从而提升了包的体积</p>\n<p>因此，我们希望提供两种打包结果：</p>\n<ol>\n<li>降级后的包（大），提供给旧浏览器用户使用</li>\n<li>未降级的包（小），提供给现代浏览器用户使用</li>\n</ol>\n<p>除了应用<code>webpack</code>进行多次打包外，还可以利用<code>vue-cli</code>给我们提供的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue-cli-service build --modern</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"优化项目包体积\"><a href=\"#优化项目包体积\" class=\"headerlink\" title=\"优化项目包体积\"></a>优化项目包体积</h1><p>这里的项目包是指<code>src</code>目录中的打包结果</p>\n<h2 id=\"页面分包\"><a href=\"#页面分包\" class=\"headerlink\" title=\"页面分包\"></a>页面分包</h2><p>默认情况下，<code>vue-cli</code>会利用<code>webpack</code>将<code>src</code>目录中的所有代码打包成一个<code>bundle</code></p>\n<p>这样就导致访问一个页面时，需要加载所有页面的<code>js</code>代码</p>\n<p>我们可以利用<code>webpack</code>对<code>动态import</code>的支持，从而达到把不同页面的代码打包到不同文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routes</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Home&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;home&quot; */</span> <span class=\"string\">&quot;@/views/Home&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;About&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;about&quot; */</span><span class=\"string\">&quot;@/views/About&quot;</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"优化首屏响应\"><a href=\"#优化首屏响应\" class=\"headerlink\" title=\"优化首屏响应\"></a>优化首屏响应</h1><blockquote>\n<p>首页白屏受很多因素的影响</p>\n</blockquote>\n<p><code>vue</code>页面需要通过<code>js</code>构建，因此在<code>js</code>下载到本地之前，页面上什么也没有</p>\n<p>一个非常简单有效的办法，即在页面中先渲染一个小的加载中效果，等到<code>js</code>下载到本地并运行后，即会自动替换</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;loading.gif&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue2搭建工程","date":"2022-01-01T06:02:47.000Z","description":"vue2使用脚手架搭建工程的步骤","comments":1,"toc":true,"_content":"\n\n\nvue-cli: https://cli.vuejs.org/zh/\n\n# vue-cli\n\n`vue-cli`是一个脚手架工具，用于搭建`vue`工程\n\n它内部使用了`webpack`，并预置了诸多插件（`plugin`）和加载器（`loader`），以达到开箱即用的效果\n\n除了基本的插件和加载器外，`vue-cli`还预置了：\n\n- babel\n- webpack-dev-server\n- eslint\n- postcss\n- less-loader\n\n# SFC\n\n单文件组件，Single File Component，即一个文件就包含了一个组件所需的全部代码\n\n```html\n<template>\n\t<!-- 组件模板代码 -->\n</template>\n\n<script>\nexport default {\n  // 组件配置\n}\n</script>\n\n<style>\n\t/* 组件样式 */\n</style>\n```\n\n\n\n# 预编译\n\n当`vue-cli`进行**打包**时，会直接把组件中的模板转换为`render`函数，这叫做模板预编译\n\n这样做的好处在于：\n\n1. 运行时就不再需要编译模板了，提高了运行效率\n2. 打包结果中不再需要vue的编译代码，减少了打包体积\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201111155613.png\" alt=\"image-20201111155613940\" style=\"zoom:50%;\" />\n\n","source":"_posts/搭建工程.md","raw":"---\ntitle: vue2搭建工程\ndate: 2022-01-01 14:02:47\ndescription: vue2使用脚手架搭建工程的步骤\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n\t- 前端学习笔记 \n\t- vue\ntags:   #标签\n\t- vue2\n\t- 前端\n---\n\n\n\nvue-cli: https://cli.vuejs.org/zh/\n\n# vue-cli\n\n`vue-cli`是一个脚手架工具，用于搭建`vue`工程\n\n它内部使用了`webpack`，并预置了诸多插件（`plugin`）和加载器（`loader`），以达到开箱即用的效果\n\n除了基本的插件和加载器外，`vue-cli`还预置了：\n\n- babel\n- webpack-dev-server\n- eslint\n- postcss\n- less-loader\n\n# SFC\n\n单文件组件，Single File Component，即一个文件就包含了一个组件所需的全部代码\n\n```html\n<template>\n\t<!-- 组件模板代码 -->\n</template>\n\n<script>\nexport default {\n  // 组件配置\n}\n</script>\n\n<style>\n\t/* 组件样式 */\n</style>\n```\n\n\n\n# 预编译\n\n当`vue-cli`进行**打包**时，会直接把组件中的模板转换为`render`函数，这叫做模板预编译\n\n这样做的好处在于：\n\n1. 运行时就不再需要编译模板了，提高了运行效率\n2. 打包结果中不再需要vue的编译代码，减少了打包体积\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201111155613.png\" alt=\"image-20201111155613940\" style=\"zoom:50%;\" />\n\n","slug":"搭建工程","published":1,"updated":"2022-01-01T06:11:50.590Z","_id":"ckxvf7cm6000iccax0x3k08vz","layout":"post","photos":[],"link":"","content":"<p>vue-cli: <a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<h1 id=\"vue-cli\"><a href=\"#vue-cli\" class=\"headerlink\" title=\"vue-cli\"></a>vue-cli</h1><p><code>vue-cli</code>是一个脚手架工具，用于搭建<code>vue</code>工程</p>\n<p>它内部使用了<code>webpack</code>，并预置了诸多插件（<code>plugin</code>）和加载器（<code>loader</code>），以达到开箱即用的效果</p>\n<p>除了基本的插件和加载器外，<code>vue-cli</code>还预置了：</p>\n<ul>\n<li>babel</li>\n<li>webpack-dev-server</li>\n<li>eslint</li>\n<li>postcss</li>\n<li>less-loader</li>\n</ul>\n<h1 id=\"SFC\"><a href=\"#SFC\" class=\"headerlink\" title=\"SFC\"></a>SFC</h1><p>单文件组件，Single File Component，即一个文件就包含了一个组件所需的全部代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 组件模板代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 组件配置</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"comment\">/* 组件样式 */</span></span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><p>当<code>vue-cli</code>进行<strong>打包</strong>时，会直接把组件中的模板转换为<code>render</code>函数，这叫做模板预编译</p>\n<p>这样做的好处在于：</p>\n<ol>\n<li>运行时就不再需要编译模板了，提高了运行效率</li>\n<li>打包结果中不再需要vue的编译代码，减少了打包体积</li>\n</ol>\n<img src=\"http://mdrs.yuanjin.tech/img/20201111155613.png\" alt=\"image-20201111155613940\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"length":505,"excerpt":"","more":"<p>vue-cli: <a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<h1 id=\"vue-cli\"><a href=\"#vue-cli\" class=\"headerlink\" title=\"vue-cli\"></a>vue-cli</h1><p><code>vue-cli</code>是一个脚手架工具，用于搭建<code>vue</code>工程</p>\n<p>它内部使用了<code>webpack</code>，并预置了诸多插件（<code>plugin</code>）和加载器（<code>loader</code>），以达到开箱即用的效果</p>\n<p>除了基本的插件和加载器外，<code>vue-cli</code>还预置了：</p>\n<ul>\n<li>babel</li>\n<li>webpack-dev-server</li>\n<li>eslint</li>\n<li>postcss</li>\n<li>less-loader</li>\n</ul>\n<h1 id=\"SFC\"><a href=\"#SFC\" class=\"headerlink\" title=\"SFC\"></a>SFC</h1><p>单文件组件，Single File Component，即一个文件就包含了一个组件所需的全部代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 组件模板代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 组件配置</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"comment\">/* 组件样式 */</span></span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><p>当<code>vue-cli</code>进行<strong>打包</strong>时，会直接把组件中的模板转换为<code>render</code>函数，这叫做模板预编译</p>\n<p>这样做的好处在于：</p>\n<ol>\n<li>运行时就不再需要编译模板了，提高了运行效率</li>\n<li>打包结果中不再需要vue的编译代码，减少了打包体积</li>\n</ol>\n<img src=\"http://mdrs.yuanjin.tech/img/20201111155613.png\" alt=\"image-20201111155613940\" style=\"zoom:50%;\" />\n\n"},{"title":"vue2中的数据共享","date":"2022-01-01T06:20:47.000Z","description":"vue2数据共享的必要和创建独立的仓库","comments":1,"toc":true,"_content":"\n\n![image-20210126132906004](http://mdrs.yuanjin.tech/img/20210126132906.png)\n\n在`vue`中遇到**共享数据**，会带来下面的多个问题：\n\n- 如何保证数据的唯一性？\n  - 如果数据不唯一，则会浪费大量的内存资源，降低运行效率\n  - 如果数据不唯一，就可能出现不统一的数据，难以维护\n- 某个组件改动数据后，如何让其他用到该数据的组件知道数据变化了？\n  - 事件总线貌似可以解决该问题，但需要在组件中手动的维护监听，极其不方便，而且事件总线的目的在于「通知」，而不是「共享数据」\n\n一种比较容易想到的方案，就是把所有的共享数据**全部**提升到根组件，然后通过属性不断下发，当某个组件需要修改数据时，又不断向上抛出事件，直到根组件完成对数据的修改。\n\n![image-20210126133905451](http://mdrs.yuanjin.tech/img/20210126133905.png)\n\n这种方案的缺陷也非常明显：\n\n- 需要编写大量的代码层层下发数据，很多组件被迫拥有了自己根本不需要的数据\n- 需要编写大量的代码层层上抛事件，很多组件被迫注册了自己根本处理不了的事件\n\n\n\n基于上面的问题，我们可以简单的设置一个**独立的数据仓库**。\n\n![image-20210126140353891](http://mdrs.yuanjin.tech/img/20210126140353.png)\n\n- 组件需要什么共享数据，可以自由的从仓库中获取，需要什么拿什么。\n\n- 组件可以自由的改变仓库中的数据，仓库的数据变化后，会自动通知用到对应数据的组件更新\n\n要实现这一切，可以选择`vuex`\n\n# 创建仓库\n\n安装`vuex`后，可以通过下面的代码创建一个数据仓库，在大部分情况下，一个工程仅需创建一个数据仓库\n\n```js\nimport Vuex from \"vue\";\nimport Vue from \"vue\";\nVue.use(Vuex); // 应用vuex插件\nconst store = new Vuex.Store({\n  // 仓库的配置\n  state: { // 仓库的初始状态（数据）\n    count: 0\n  }\n})\n\nexport default store;\n```\n\n仓库创建好后，你可以使用`store.state`来访问仓库中的数据\n\n如果希望在`vue`中方便的使用仓库数据，需要将`vuex`作为插件安装\n\n```js\n// store.js\nimport Vuex from \"vue\";\nimport Vue from \"vue\";\nVue.use(Vuex); // 安装Vuex插件\nconst store = new Vuex({\n  // 仓库的配置\n  state: { // 仓库的初始状态（数据）\n    count: 0\n  }\n})\n\nexport default store;\n\n// main.js\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport store from \"./store.js\";\nnew Vue({\n  store, // 向vue中注入仓库\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\n之后，在`vue`组件中，可以通过实例的`$store`属性访问到仓库\n\n`Vuex`会自动将配置的状态数据设置为响应式数据，当数据变化时，依赖该数据的组件会自动渲染。\n\n# 数据的变更\n\n尽管可以利用数据响应式的特点直接变更数据，但这样的做法在大型项目中会遇到问题\n\n> 如果有一天，你发现某个共享数据是错误的，而有一百多个组件都有可能变更过这块数据，你该如何知道是哪一步数据变更出现了问题？\n\n为了能够更好的跟踪数据的变化，`vuex`强烈建议使用`mutation`来更改数据\n\n```js\nconst store = new Vuex({\n  // 仓库的配置\n  state: { // 仓库的初始状态（数据）\n    count: 0\n  },\n  mutations: {\n    /**\n     * 每个mutation是一个方法，它描述了数据在某种场景下的变化\n     * increase mutation描述了数据在增加时应该发生的变化\n     * 参数state为当前的仓库数据\n     */\n    increase(state){\n      state.count++;\n    },\n    decrease(state){\n      state.count--;\n    },\n    /**\n     * 求n次幂\n     * 该mutation需要一个额外的参数来提供指数\n     * 我们把让数据产生变化时的附加信息称之为负荷（负载） payload\n     * payload可以是任何类型，数字、字符串、对象均可\n     * 在该mutation中，我们约定payload为一个数字，表示指数\n     */\n    power(state, payload){\n      state.count **= payload;\n    }\n  }\n})\n```\n\n当我们有了`mutation`后，就不应该直接去改动仓库的数据了\n\n而是通过`store.commit`方法提交一个`mutation`，具体做法是\n\n```js\nstore.commit(\"mutation的名字\", payload);\n```\n\n现在，我们可以通过`vue devtools`观测到数据的变化了\n\n**特别注意： **\n\n1. `mutation`中不得出现异步操作\n\n   > 在实际开发的规范中，甚至要求不得有副作用操作\n   >\n   > 副作用操作包括：\n   >\n   > - 异步\n   > - 更改或读取外部环境的信息，例如`localStorage、location、DOM`等\n\n2. 提交`mutation`是数据改变的**唯一原因**\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210129151639.png\" alt=\"image-20210129151639301\" style=\"zoom: 50%;\" />\n\n# 异步处理\n\n如果在`vuex`中要进行异步操作，需要使用`action`\n\n```js\nconst store = new Vuex({\n  state: { \n    count: 0\n  },\n  mutations: {\n    increase(state){\n      state.count++;\n    },\n    decrease(state){\n      state.count--;\n    },\n    power(state, payload){\n      state.count **= payload;\n    }\n  },\n  actions: {\n    /**\n     * ctx: 类似于store的对象\n     * payload: 本次异步操作的额外信息\n     */\n    asyncPower(ctx, payload){\n      setTimeout(function(){\n        ctx.commit(\"power\", payload)\n      }, 1000)\n    }\n  }\n})\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210129160320.png\" alt=\"image-20210129160320025\" style=\"zoom:50%;\" />","source":"_posts/数据共享vuex.md","raw":"---\ntitle: vue2中的数据共享\ndate: 2022-01-01 14:20:47\ndescription: vue2数据共享的必要和创建独立的仓库\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n\n![image-20210126132906004](http://mdrs.yuanjin.tech/img/20210126132906.png)\n\n在`vue`中遇到**共享数据**，会带来下面的多个问题：\n\n- 如何保证数据的唯一性？\n  - 如果数据不唯一，则会浪费大量的内存资源，降低运行效率\n  - 如果数据不唯一，就可能出现不统一的数据，难以维护\n- 某个组件改动数据后，如何让其他用到该数据的组件知道数据变化了？\n  - 事件总线貌似可以解决该问题，但需要在组件中手动的维护监听，极其不方便，而且事件总线的目的在于「通知」，而不是「共享数据」\n\n一种比较容易想到的方案，就是把所有的共享数据**全部**提升到根组件，然后通过属性不断下发，当某个组件需要修改数据时，又不断向上抛出事件，直到根组件完成对数据的修改。\n\n![image-20210126133905451](http://mdrs.yuanjin.tech/img/20210126133905.png)\n\n这种方案的缺陷也非常明显：\n\n- 需要编写大量的代码层层下发数据，很多组件被迫拥有了自己根本不需要的数据\n- 需要编写大量的代码层层上抛事件，很多组件被迫注册了自己根本处理不了的事件\n\n\n\n基于上面的问题，我们可以简单的设置一个**独立的数据仓库**。\n\n![image-20210126140353891](http://mdrs.yuanjin.tech/img/20210126140353.png)\n\n- 组件需要什么共享数据，可以自由的从仓库中获取，需要什么拿什么。\n\n- 组件可以自由的改变仓库中的数据，仓库的数据变化后，会自动通知用到对应数据的组件更新\n\n要实现这一切，可以选择`vuex`\n\n# 创建仓库\n\n安装`vuex`后，可以通过下面的代码创建一个数据仓库，在大部分情况下，一个工程仅需创建一个数据仓库\n\n```js\nimport Vuex from \"vue\";\nimport Vue from \"vue\";\nVue.use(Vuex); // 应用vuex插件\nconst store = new Vuex.Store({\n  // 仓库的配置\n  state: { // 仓库的初始状态（数据）\n    count: 0\n  }\n})\n\nexport default store;\n```\n\n仓库创建好后，你可以使用`store.state`来访问仓库中的数据\n\n如果希望在`vue`中方便的使用仓库数据，需要将`vuex`作为插件安装\n\n```js\n// store.js\nimport Vuex from \"vue\";\nimport Vue from \"vue\";\nVue.use(Vuex); // 安装Vuex插件\nconst store = new Vuex({\n  // 仓库的配置\n  state: { // 仓库的初始状态（数据）\n    count: 0\n  }\n})\n\nexport default store;\n\n// main.js\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport store from \"./store.js\";\nnew Vue({\n  store, // 向vue中注入仓库\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\n之后，在`vue`组件中，可以通过实例的`$store`属性访问到仓库\n\n`Vuex`会自动将配置的状态数据设置为响应式数据，当数据变化时，依赖该数据的组件会自动渲染。\n\n# 数据的变更\n\n尽管可以利用数据响应式的特点直接变更数据，但这样的做法在大型项目中会遇到问题\n\n> 如果有一天，你发现某个共享数据是错误的，而有一百多个组件都有可能变更过这块数据，你该如何知道是哪一步数据变更出现了问题？\n\n为了能够更好的跟踪数据的变化，`vuex`强烈建议使用`mutation`来更改数据\n\n```js\nconst store = new Vuex({\n  // 仓库的配置\n  state: { // 仓库的初始状态（数据）\n    count: 0\n  },\n  mutations: {\n    /**\n     * 每个mutation是一个方法，它描述了数据在某种场景下的变化\n     * increase mutation描述了数据在增加时应该发生的变化\n     * 参数state为当前的仓库数据\n     */\n    increase(state){\n      state.count++;\n    },\n    decrease(state){\n      state.count--;\n    },\n    /**\n     * 求n次幂\n     * 该mutation需要一个额外的参数来提供指数\n     * 我们把让数据产生变化时的附加信息称之为负荷（负载） payload\n     * payload可以是任何类型，数字、字符串、对象均可\n     * 在该mutation中，我们约定payload为一个数字，表示指数\n     */\n    power(state, payload){\n      state.count **= payload;\n    }\n  }\n})\n```\n\n当我们有了`mutation`后，就不应该直接去改动仓库的数据了\n\n而是通过`store.commit`方法提交一个`mutation`，具体做法是\n\n```js\nstore.commit(\"mutation的名字\", payload);\n```\n\n现在，我们可以通过`vue devtools`观测到数据的变化了\n\n**特别注意： **\n\n1. `mutation`中不得出现异步操作\n\n   > 在实际开发的规范中，甚至要求不得有副作用操作\n   >\n   > 副作用操作包括：\n   >\n   > - 异步\n   > - 更改或读取外部环境的信息，例如`localStorage、location、DOM`等\n\n2. 提交`mutation`是数据改变的**唯一原因**\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210129151639.png\" alt=\"image-20210129151639301\" style=\"zoom: 50%;\" />\n\n# 异步处理\n\n如果在`vuex`中要进行异步操作，需要使用`action`\n\n```js\nconst store = new Vuex({\n  state: { \n    count: 0\n  },\n  mutations: {\n    increase(state){\n      state.count++;\n    },\n    decrease(state){\n      state.count--;\n    },\n    power(state, payload){\n      state.count **= payload;\n    }\n  },\n  actions: {\n    /**\n     * ctx: 类似于store的对象\n     * payload: 本次异步操作的额外信息\n     */\n    asyncPower(ctx, payload){\n      setTimeout(function(){\n        ctx.commit(\"power\", payload)\n      }, 1000)\n    }\n  }\n})\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210129160320.png\" alt=\"image-20210129160320025\" style=\"zoom:50%;\" />","slug":"数据共享vuex","published":1,"updated":"2022-01-01T06:20:01.951Z","_id":"ckxvf7cme000kccaxbui1b2u6","layout":"post","photos":[],"link":"","content":"<p><img src=\"http://mdrs.yuanjin.tech/img/20210126132906.png\" alt=\"image-20210126132906004\"></p>\n<p>在<code>vue</code>中遇到<strong>共享数据</strong>，会带来下面的多个问题：</p>\n<ul>\n<li>如何保证数据的唯一性？<ul>\n<li>如果数据不唯一，则会浪费大量的内存资源，降低运行效率</li>\n<li>如果数据不唯一，就可能出现不统一的数据，难以维护</li>\n</ul>\n</li>\n<li>某个组件改动数据后，如何让其他用到该数据的组件知道数据变化了？<ul>\n<li>事件总线貌似可以解决该问题，但需要在组件中手动的维护监听，极其不方便，而且事件总线的目的在于「通知」，而不是「共享数据」</li>\n</ul>\n</li>\n</ul>\n<p>一种比较容易想到的方案，就是把所有的共享数据<strong>全部</strong>提升到根组件，然后通过属性不断下发，当某个组件需要修改数据时，又不断向上抛出事件，直到根组件完成对数据的修改。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210126133905.png\" alt=\"image-20210126133905451\"></p>\n<p>这种方案的缺陷也非常明显：</p>\n<ul>\n<li>需要编写大量的代码层层下发数据，很多组件被迫拥有了自己根本不需要的数据</li>\n<li>需要编写大量的代码层层上抛事件，很多组件被迫注册了自己根本处理不了的事件</li>\n</ul>\n<p>基于上面的问题，我们可以简单的设置一个<strong>独立的数据仓库</strong>。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210126140353.png\" alt=\"image-20210126140353891\"></p>\n<ul>\n<li><p>组件需要什么共享数据，可以自由的从仓库中获取，需要什么拿什么。</p>\n</li>\n<li><p>组件可以自由的改变仓库中的数据，仓库的数据变化后，会自动通知用到对应数据的组件更新</p>\n</li>\n</ul>\n<p>要实现这一切，可以选择<code>vuex</code></p>\n<h1 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h1><p>安装<code>vuex</code>后，可以通过下面的代码创建一个数据仓库，在大部分情况下，一个工程仅需创建一个数据仓库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">Vue.use(Vuex); <span class=\"comment\">// 应用vuex插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仓库的配置</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"comment\">// 仓库的初始状态（数据）</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n\n<p>仓库创建好后，你可以使用<code>store.state</code>来访问仓库中的数据</p>\n<p>如果希望在<code>vue</code>中方便的使用仓库数据，需要将<code>vuex</code>作为插件安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">Vue.use(Vuex); <span class=\"comment\">// 安装Vuex插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仓库的配置</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"comment\">// 仓库的初始状态（数据）</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  store, <span class=\"comment\">// 向vue中注入仓库</span></span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后，在<code>vue</code>组件中，可以通过实例的<code>$store</code>属性访问到仓库</p>\n<p><code>Vuex</code>会自动将配置的状态数据设置为响应式数据，当数据变化时，依赖该数据的组件会自动渲染。</p>\n<h1 id=\"数据的变更\"><a href=\"#数据的变更\" class=\"headerlink\" title=\"数据的变更\"></a>数据的变更</h1><p>尽管可以利用数据响应式的特点直接变更数据，但这样的做法在大型项目中会遇到问题</p>\n<blockquote>\n<p>如果有一天，你发现某个共享数据是错误的，而有一百多个组件都有可能变更过这块数据，你该如何知道是哪一步数据变更出现了问题？</p>\n</blockquote>\n<p>为了能够更好的跟踪数据的变化，<code>vuex</code>强烈建议使用<code>mutation</code>来更改数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仓库的配置</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"comment\">// 仓库的初始状态（数据）</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个mutation是一个方法，它描述了数据在某种场景下的变化</span></span><br><span class=\"line\"><span class=\"comment\">     * increase mutation描述了数据在增加时应该发生的变化</span></span><br><span class=\"line\"><span class=\"comment\">     * 参数state为当前的仓库数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increase</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">decrease</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count--;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 求n次幂</span></span><br><span class=\"line\"><span class=\"comment\">     * 该mutation需要一个额外的参数来提供指数</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们把让数据产生变化时的附加信息称之为负荷（负载） payload</span></span><br><span class=\"line\"><span class=\"comment\">     * payload可以是任何类型，数字、字符串、对象均可</span></span><br><span class=\"line\"><span class=\"comment\">     * 在该mutation中，我们约定payload为一个数字，表示指数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">power</span>(<span class=\"params\">state, payload</span>)</span>&#123;</span><br><span class=\"line\">      state.count **= payload;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当我们有了<code>mutation</code>后，就不应该直接去改动仓库的数据了</p>\n<p>而是通过<code>store.commit</code>方法提交一个<code>mutation</code>，具体做法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">&quot;mutation的名字&quot;</span>, payload);</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们可以通过<code>vue devtools</code>观测到数据的变化了</p>\n<p>**特别注意： **</p>\n<ol>\n<li><p><code>mutation</code>中不得出现异步操作</p>\n<blockquote>\n<p>在实际开发的规范中，甚至要求不得有副作用操作</p>\n<p>副作用操作包括：</p>\n<ul>\n<li>异步</li>\n<li>更改或读取外部环境的信息，例如<code>localStorage、location、DOM</code>等</li>\n</ul>\n</blockquote>\n</li>\n<li><p>提交<code>mutation</code>是数据改变的<strong>唯一原因</strong></p>\n</li>\n</ol>\n<img src=\"http://mdrs.yuanjin.tech/img/20210129151639.png\" alt=\"image-20210129151639301\" style=\"zoom: 50%;\" />\n\n<h1 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h1><p>如果在<code>vuex</code>中要进行异步操作，需要使用<code>action</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increase</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">decrease</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count--;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">power</span>(<span class=\"params\">state, payload</span>)</span>&#123;</span><br><span class=\"line\">      state.count **= payload;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ctx: 类似于store的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * payload: 本次异步操作的额外信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">asyncPower</span>(<span class=\"params\">ctx, payload</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        ctx.commit(<span class=\"string\">&quot;power&quot;</span>, payload)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210129160320.png\" alt=\"image-20210129160320025\" style=\"zoom:50%;\" />","site":{"data":{}},"length":2626,"excerpt":"","more":"<p><img src=\"http://mdrs.yuanjin.tech/img/20210126132906.png\" alt=\"image-20210126132906004\"></p>\n<p>在<code>vue</code>中遇到<strong>共享数据</strong>，会带来下面的多个问题：</p>\n<ul>\n<li>如何保证数据的唯一性？<ul>\n<li>如果数据不唯一，则会浪费大量的内存资源，降低运行效率</li>\n<li>如果数据不唯一，就可能出现不统一的数据，难以维护</li>\n</ul>\n</li>\n<li>某个组件改动数据后，如何让其他用到该数据的组件知道数据变化了？<ul>\n<li>事件总线貌似可以解决该问题，但需要在组件中手动的维护监听，极其不方便，而且事件总线的目的在于「通知」，而不是「共享数据」</li>\n</ul>\n</li>\n</ul>\n<p>一种比较容易想到的方案，就是把所有的共享数据<strong>全部</strong>提升到根组件，然后通过属性不断下发，当某个组件需要修改数据时，又不断向上抛出事件，直到根组件完成对数据的修改。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210126133905.png\" alt=\"image-20210126133905451\"></p>\n<p>这种方案的缺陷也非常明显：</p>\n<ul>\n<li>需要编写大量的代码层层下发数据，很多组件被迫拥有了自己根本不需要的数据</li>\n<li>需要编写大量的代码层层上抛事件，很多组件被迫注册了自己根本处理不了的事件</li>\n</ul>\n<p>基于上面的问题，我们可以简单的设置一个<strong>独立的数据仓库</strong>。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210126140353.png\" alt=\"image-20210126140353891\"></p>\n<ul>\n<li><p>组件需要什么共享数据，可以自由的从仓库中获取，需要什么拿什么。</p>\n</li>\n<li><p>组件可以自由的改变仓库中的数据，仓库的数据变化后，会自动通知用到对应数据的组件更新</p>\n</li>\n</ul>\n<p>要实现这一切，可以选择<code>vuex</code></p>\n<h1 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h1><p>安装<code>vuex</code>后，可以通过下面的代码创建一个数据仓库，在大部分情况下，一个工程仅需创建一个数据仓库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">Vue.use(Vuex); <span class=\"comment\">// 应用vuex插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仓库的配置</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"comment\">// 仓库的初始状态（数据）</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n\n<p>仓库创建好后，你可以使用<code>store.state</code>来访问仓库中的数据</p>\n<p>如果希望在<code>vue</code>中方便的使用仓库数据，需要将<code>vuex</code>作为插件安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">Vue.use(Vuex); <span class=\"comment\">// 安装Vuex插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仓库的配置</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"comment\">// 仓库的初始状态（数据）</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  store, <span class=\"comment\">// 向vue中注入仓库</span></span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后，在<code>vue</code>组件中，可以通过实例的<code>$store</code>属性访问到仓库</p>\n<p><code>Vuex</code>会自动将配置的状态数据设置为响应式数据，当数据变化时，依赖该数据的组件会自动渲染。</p>\n<h1 id=\"数据的变更\"><a href=\"#数据的变更\" class=\"headerlink\" title=\"数据的变更\"></a>数据的变更</h1><p>尽管可以利用数据响应式的特点直接变更数据，但这样的做法在大型项目中会遇到问题</p>\n<blockquote>\n<p>如果有一天，你发现某个共享数据是错误的，而有一百多个组件都有可能变更过这块数据，你该如何知道是哪一步数据变更出现了问题？</p>\n</blockquote>\n<p>为了能够更好的跟踪数据的变化，<code>vuex</code>强烈建议使用<code>mutation</code>来更改数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仓库的配置</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"comment\">// 仓库的初始状态（数据）</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个mutation是一个方法，它描述了数据在某种场景下的变化</span></span><br><span class=\"line\"><span class=\"comment\">     * increase mutation描述了数据在增加时应该发生的变化</span></span><br><span class=\"line\"><span class=\"comment\">     * 参数state为当前的仓库数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increase</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">decrease</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count--;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 求n次幂</span></span><br><span class=\"line\"><span class=\"comment\">     * 该mutation需要一个额外的参数来提供指数</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们把让数据产生变化时的附加信息称之为负荷（负载） payload</span></span><br><span class=\"line\"><span class=\"comment\">     * payload可以是任何类型，数字、字符串、对象均可</span></span><br><span class=\"line\"><span class=\"comment\">     * 在该mutation中，我们约定payload为一个数字，表示指数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">power</span>(<span class=\"params\">state, payload</span>)</span>&#123;</span><br><span class=\"line\">      state.count **= payload;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当我们有了<code>mutation</code>后，就不应该直接去改动仓库的数据了</p>\n<p>而是通过<code>store.commit</code>方法提交一个<code>mutation</code>，具体做法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">&quot;mutation的名字&quot;</span>, payload);</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们可以通过<code>vue devtools</code>观测到数据的变化了</p>\n<p>**特别注意： **</p>\n<ol>\n<li><p><code>mutation</code>中不得出现异步操作</p>\n<blockquote>\n<p>在实际开发的规范中，甚至要求不得有副作用操作</p>\n<p>副作用操作包括：</p>\n<ul>\n<li>异步</li>\n<li>更改或读取外部环境的信息，例如<code>localStorage、location、DOM</code>等</li>\n</ul>\n</blockquote>\n</li>\n<li><p>提交<code>mutation</code>是数据改变的<strong>唯一原因</strong></p>\n</li>\n</ol>\n<img src=\"http://mdrs.yuanjin.tech/img/20210129151639.png\" alt=\"image-20210129151639301\" style=\"zoom: 50%;\" />\n\n<h1 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h1><p>如果在<code>vuex</code>中要进行异步操作，需要使用<code>action</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increase</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">decrease</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">      state.count--;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">power</span>(<span class=\"params\">state, payload</span>)</span>&#123;</span><br><span class=\"line\">      state.count **= payload;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ctx: 类似于store的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * payload: 本次异步操作的额外信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">asyncPower</span>(<span class=\"params\">ctx, payload</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        ctx.commit(<span class=\"string\">&quot;power&quot;</span>, payload)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210129160320.png\" alt=\"image-20210129160320025\" style=\"zoom:50%;\" />"},{"title":"vue2中混入和组件递归","date":"2022-01-01T06:02:47.000Z","description":"可以定义一些常用的公共组件","comments":1,"toc":true,"_content":"\n\n## 混入\n有的时候，许多组件有着类似的功能，这些功能代码分散在组件不同的配置中。\n\n![image-20210105161811637](http://mdrs.yuanjin.tech/img/20210105161811.png)\n\n于是，我们可以把这些配置代码抽离出来，利用**混入**融合到组件中。\n\n![image-20210105162109015](http://mdrs.yuanjin.tech/img/20210105162109.png)\n\n具体的做法非常简单：\n\n```js\n// 抽离的公共代码\nconst common = {\n  data(){\n    return {\n      a: 1,\n      b: 2\n    }\n  },\n  created(){\n    console.log(\"common created\");\n  },\n  computed:{\n    sum(){\n      return this.a + this.b;\n    }\n  }\n}\n\n/**\n * 使用comp1，将会得到：\n * common created\n * comp1 created 1 2 3\n */\nconst comp1 = {\n  mixins: [common] // 之所以是数组，是因为可以混入多个配置代码\n  created(){\n    console.log(\"comp1 created\", this.a, this.b, this.sum);\n  }\n}\n```\n\n[官网](https://cn.vuejs.org/v2/guide/mixins.html)\n\n## 组件递归\n\n递归：在组建内部使用自己\n可以使用name来配置组件的名字，配置完成就可以使用了\n\n","source":"_posts/混入和组件递归.md","raw":"---\ntitle: vue2中混入和组件递归\ndate: 2022-01-01 14:02:47\ndescription: 可以定义一些常用的公共组件\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n\n## 混入\n有的时候，许多组件有着类似的功能，这些功能代码分散在组件不同的配置中。\n\n![image-20210105161811637](http://mdrs.yuanjin.tech/img/20210105161811.png)\n\n于是，我们可以把这些配置代码抽离出来，利用**混入**融合到组件中。\n\n![image-20210105162109015](http://mdrs.yuanjin.tech/img/20210105162109.png)\n\n具体的做法非常简单：\n\n```js\n// 抽离的公共代码\nconst common = {\n  data(){\n    return {\n      a: 1,\n      b: 2\n    }\n  },\n  created(){\n    console.log(\"common created\");\n  },\n  computed:{\n    sum(){\n      return this.a + this.b;\n    }\n  }\n}\n\n/**\n * 使用comp1，将会得到：\n * common created\n * comp1 created 1 2 3\n */\nconst comp1 = {\n  mixins: [common] // 之所以是数组，是因为可以混入多个配置代码\n  created(){\n    console.log(\"comp1 created\", this.a, this.b, this.sum);\n  }\n}\n```\n\n[官网](https://cn.vuejs.org/v2/guide/mixins.html)\n\n## 组件递归\n\n递归：在组建内部使用自己\n可以使用name来配置组件的名字，配置完成就可以使用了\n\n","slug":"混入和组件递归","published":1,"updated":"2022-01-01T06:16:43.292Z","_id":"ckxvf7cmi000lccax1tvr1t1m","layout":"post","photos":[],"link":"","content":"<h2 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h2><p>有的时候，许多组件有着类似的功能，这些功能代码分散在组件不同的配置中。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210105161811.png\" alt=\"image-20210105161811637\"></p>\n<p>于是，我们可以把这些配置代码抽离出来，利用<strong>混入</strong>融合到组件中。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210105162109.png\" alt=\"image-20210105162109015\"></p>\n<p>具体的做法非常简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽离的公共代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> common = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;common created&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a + <span class=\"built_in\">this</span>.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用comp1，将会得到：</span></span><br><span class=\"line\"><span class=\"comment\"> * common created</span></span><br><span class=\"line\"><span class=\"comment\"> * comp1 created 1 2 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comp1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mixins</span>: [common] <span class=\"comment\">// 之所以是数组，是因为可以混入多个配置代码</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;comp1 created&quot;</span>, <span class=\"built_in\">this</span>.a, <span class=\"built_in\">this</span>.b, <span class=\"built_in\">this</span>.sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://cn.vuejs.org/v2/guide/mixins.html\">官网</a></p>\n<h2 id=\"组件递归\"><a href=\"#组件递归\" class=\"headerlink\" title=\"组件递归\"></a>组件递归</h2><p>递归：在组建内部使用自己<br>可以使用name来配置组件的名字，配置完成就可以使用了</p>\n","site":{"data":{}},"length":558,"excerpt":"","more":"<h2 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h2><p>有的时候，许多组件有着类似的功能，这些功能代码分散在组件不同的配置中。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210105161811.png\" alt=\"image-20210105161811637\"></p>\n<p>于是，我们可以把这些配置代码抽离出来，利用<strong>混入</strong>融合到组件中。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210105162109.png\" alt=\"image-20210105162109015\"></p>\n<p>具体的做法非常简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽离的公共代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> common = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;common created&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a + <span class=\"built_in\">this</span>.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用comp1，将会得到：</span></span><br><span class=\"line\"><span class=\"comment\"> * common created</span></span><br><span class=\"line\"><span class=\"comment\"> * comp1 created 1 2 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comp1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mixins</span>: [common] <span class=\"comment\">// 之所以是数组，是因为可以混入多个配置代码</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;comp1 created&quot;</span>, <span class=\"built_in\">this</span>.a, <span class=\"built_in\">this</span>.b, <span class=\"built_in\">this</span>.sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://cn.vuejs.org/v2/guide/mixins.html\">官网</a></p>\n<h2 id=\"组件递归\"><a href=\"#组件递归\" class=\"headerlink\" title=\"组件递归\"></a>组件递归</h2><p>递归：在组建内部使用自己<br>可以使用name来配置组件的名字，配置完成就可以使用了</p>\n"},{"title":"vue2中响应式原理","date":"2022-01-01T06:04:47.000Z","description":"vue2中响应式原理","comments":1,"toc":true,"_content":"\n> 面试题：请阐述`vue2`响应式原理\n\n> vue官方阐述：https://cn.vuejs.org/v2/guide/reactivity.html\n\n**响应式数据的最终目标**，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是render函数。\n\n在具体实现上，vue用到了**几个核心部件**：\n\n1. Observer\n2. Dep\n3. Watcher\n4. Scheduler\n\n# Observer\n\nObserver要实现的目标非常简单，就是把一个普通的对象转换为响应式的对象\n\n为了实现这一点，Observer把对象的每个属性通过`Object.defineProperty`转换为带有`getter`和`setter`的属性，这样一来，当访问或设置属性时，`vue`就有机会做一些别的事情。\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226153448.png\" alt=\"image-20210226153448807\" style=\"zoom:50%;\" />\n\nObserver是vue内部的构造器，我们可以通过Vue提供的静态方法`Vue.observable( object )`间接的使用该功能。\n\n在组件生命周期中，这件事发生在`beforeCreate`之后，`created`之前。\n\n具体实现上，它会递归遍历对象的所有属性，以完成深度的属性转换。\n\n由于遍历时只能遍历到对象的当前属性，因此无法监测到将来动态增加或删除的属性，因此`vue`提供了`$set`和`$delete`两个实例方法，让开发者通过这两个实例方法对已有响应式对象添加或删除属性。\n\n对于数组，`vue`会更改它的隐式原型，之所以这样做，是因为vue需要监听那些可能改变数组内容的方法\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226154624.png\" alt=\"image-20210226154624015\" style=\"zoom:50%;\" />\n\n总之，Observer的目标，就是要让一个对象，它属性的读取、赋值，内部数组的变化都要能够被vue感知到。\n\n# Dep\n\n这里有两个问题没解决，就是读取属性时要做什么事，而属性变化时要做什么事，这个问题需要依靠Dep来解决。\n\nDep的含义是`Dependency`，表示依赖的意思。\n\n`Vue`会为响应式对象中的每个属性、对象本身、数组本身创建一个`Dep`实例，每个`Dep`实例都有能力做以下两件事：\n\n- 记录依赖：是谁在用我\n- 派发更新：我变了，我要通知那些用到我的人\n\n当读取响应式对象的某个属性时，它会进行依赖收集：有人用到了我\n\n当改变某个属性时，它会派发更新：那些用我的人听好了，我变了\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226155852.png\" alt=\"image-20210226155852964\" style=\"zoom:50%;\" />\n\n# Watcher\n\n这里又出现一个问题，就是Dep如何知道是谁在用我？\n\n要解决这个问题，需要依靠另一个东西，就是Watcher。\n\n当某个函数执行的过程中，用到了响应式数据，响应式数据是无法知道是哪个函数在用自己的\n\n因此，vue通过一种巧妙的办法来解决这个问题\n\n我们不要直接执行函数，而是把函数交给一个叫做watcher的东西去执行，watcher是一个对象，每个这样的函数执行时都应该创建一个watcher，通过watcher去执行\n\nwatcher会设置一个全局变量，让全局变量记录当前负责执行的watcher等于自己，然后再去执行函数，在函数的执行过程中，如果发生了依赖记录`dep.depend()`，那么`Dep`就会把这个全局变量记录下来，表示：有一个watcher用到了我这个属性\n\n当Dep进行派发更新时，它会通知之前记录的所有watcher：我变了\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226161404.png\" alt=\"image-20210226161404327\" style=\"zoom:50%;\" />\n\n每一个`vue`组件实例，都至少对应一个`watcher`，该`watcher`中记录了该组件的`render`函数。\n\n`watcher`首先会把`render`函数运行一次以收集依赖，于是那些在render中用到的响应式数据就会记录这个watcher。\n\n当数据变化时，dep就会通知该watcher，而watcher将重新运行render函数，从而让界面重新渲染同时重新记录当前的依赖。\n\n# Scheduler\n\n现在还剩下最后一个问题，就是Dep通知watcher之后，如果watcher执行重运行对应的函数，就有可能导致函数频繁运行，从而导致效率低下\n\n试想，如果一个交给watcher的函数，它里面用到了属性a、b、c、d，那么a、b、c、d属性都会记录依赖，于是下面的代码将触发4次更新：\n\n```js\nstate.a = \"new data\";\nstate.b = \"new data\";\nstate.c = \"new data\";\nstate.d = \"new data\";\n```\n\n这样显然是不合适的，因此，watcher收到派发更新的通知后，实际上不是立即执行对应函数，而是把自己交给一个叫调度器的东西\n\n调度器维护一个执行队列，该队列同一个watcher仅会存在一次，队列中的watcher不是立即执行，它会通过一个叫做`nextTick`的工具方法，把这些需要执行的watcher放入到事件循环的微队列中，nextTick的具体做法是通过`Promise`完成的\n\n> nextTick 通过 `this.$nextTick` 暴露给开发者\n>\n> nextTick 的具体处理方式见：https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97\n\n也就是说，当响应式数据变化时，`render`函数的执行是异步的，并且在微队列中\n\n# 总体流程\n\n![image-20210226163936839](http://mdrs.yuanjin.tech/img/20210226163936.png)\n\n","source":"_posts/数据响应.md","raw":"---\ntitle: vue2中响应式原理\ndate: 2022-01-01 14:04:47\ndescription: vue2中响应式原理\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n\t- 前端学习笔记 \n\t- vue\ntags:   #标签\n\t- vue2\n\t- 前端\n\t- 面试题\n---\n\n> 面试题：请阐述`vue2`响应式原理\n\n> vue官方阐述：https://cn.vuejs.org/v2/guide/reactivity.html\n\n**响应式数据的最终目标**，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是render函数。\n\n在具体实现上，vue用到了**几个核心部件**：\n\n1. Observer\n2. Dep\n3. Watcher\n4. Scheduler\n\n# Observer\n\nObserver要实现的目标非常简单，就是把一个普通的对象转换为响应式的对象\n\n为了实现这一点，Observer把对象的每个属性通过`Object.defineProperty`转换为带有`getter`和`setter`的属性，这样一来，当访问或设置属性时，`vue`就有机会做一些别的事情。\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226153448.png\" alt=\"image-20210226153448807\" style=\"zoom:50%;\" />\n\nObserver是vue内部的构造器，我们可以通过Vue提供的静态方法`Vue.observable( object )`间接的使用该功能。\n\n在组件生命周期中，这件事发生在`beforeCreate`之后，`created`之前。\n\n具体实现上，它会递归遍历对象的所有属性，以完成深度的属性转换。\n\n由于遍历时只能遍历到对象的当前属性，因此无法监测到将来动态增加或删除的属性，因此`vue`提供了`$set`和`$delete`两个实例方法，让开发者通过这两个实例方法对已有响应式对象添加或删除属性。\n\n对于数组，`vue`会更改它的隐式原型，之所以这样做，是因为vue需要监听那些可能改变数组内容的方法\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226154624.png\" alt=\"image-20210226154624015\" style=\"zoom:50%;\" />\n\n总之，Observer的目标，就是要让一个对象，它属性的读取、赋值，内部数组的变化都要能够被vue感知到。\n\n# Dep\n\n这里有两个问题没解决，就是读取属性时要做什么事，而属性变化时要做什么事，这个问题需要依靠Dep来解决。\n\nDep的含义是`Dependency`，表示依赖的意思。\n\n`Vue`会为响应式对象中的每个属性、对象本身、数组本身创建一个`Dep`实例，每个`Dep`实例都有能力做以下两件事：\n\n- 记录依赖：是谁在用我\n- 派发更新：我变了，我要通知那些用到我的人\n\n当读取响应式对象的某个属性时，它会进行依赖收集：有人用到了我\n\n当改变某个属性时，它会派发更新：那些用我的人听好了，我变了\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226155852.png\" alt=\"image-20210226155852964\" style=\"zoom:50%;\" />\n\n# Watcher\n\n这里又出现一个问题，就是Dep如何知道是谁在用我？\n\n要解决这个问题，需要依靠另一个东西，就是Watcher。\n\n当某个函数执行的过程中，用到了响应式数据，响应式数据是无法知道是哪个函数在用自己的\n\n因此，vue通过一种巧妙的办法来解决这个问题\n\n我们不要直接执行函数，而是把函数交给一个叫做watcher的东西去执行，watcher是一个对象，每个这样的函数执行时都应该创建一个watcher，通过watcher去执行\n\nwatcher会设置一个全局变量，让全局变量记录当前负责执行的watcher等于自己，然后再去执行函数，在函数的执行过程中，如果发生了依赖记录`dep.depend()`，那么`Dep`就会把这个全局变量记录下来，表示：有一个watcher用到了我这个属性\n\n当Dep进行派发更新时，它会通知之前记录的所有watcher：我变了\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210226161404.png\" alt=\"image-20210226161404327\" style=\"zoom:50%;\" />\n\n每一个`vue`组件实例，都至少对应一个`watcher`，该`watcher`中记录了该组件的`render`函数。\n\n`watcher`首先会把`render`函数运行一次以收集依赖，于是那些在render中用到的响应式数据就会记录这个watcher。\n\n当数据变化时，dep就会通知该watcher，而watcher将重新运行render函数，从而让界面重新渲染同时重新记录当前的依赖。\n\n# Scheduler\n\n现在还剩下最后一个问题，就是Dep通知watcher之后，如果watcher执行重运行对应的函数，就有可能导致函数频繁运行，从而导致效率低下\n\n试想，如果一个交给watcher的函数，它里面用到了属性a、b、c、d，那么a、b、c、d属性都会记录依赖，于是下面的代码将触发4次更新：\n\n```js\nstate.a = \"new data\";\nstate.b = \"new data\";\nstate.c = \"new data\";\nstate.d = \"new data\";\n```\n\n这样显然是不合适的，因此，watcher收到派发更新的通知后，实际上不是立即执行对应函数，而是把自己交给一个叫调度器的东西\n\n调度器维护一个执行队列，该队列同一个watcher仅会存在一次，队列中的watcher不是立即执行，它会通过一个叫做`nextTick`的工具方法，把这些需要执行的watcher放入到事件循环的微队列中，nextTick的具体做法是通过`Promise`完成的\n\n> nextTick 通过 `this.$nextTick` 暴露给开发者\n>\n> nextTick 的具体处理方式见：https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97\n\n也就是说，当响应式数据变化时，`render`函数的执行是异步的，并且在微队列中\n\n# 总体流程\n\n![image-20210226163936839](http://mdrs.yuanjin.tech/img/20210226163936.png)\n\n","slug":"数据响应","published":1,"updated":"2022-01-01T06:09:07.971Z","_id":"ckxvf7cmj000mccaxacmc8swx","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>面试题：请阐述<code>vue2</code>响应式原理</p>\n</blockquote>\n<blockquote>\n<p>vue官方阐述：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\">https://cn.vuejs.org/v2/guide/reactivity.html</a></p>\n</blockquote>\n<p><strong>响应式数据的最终目标</strong>，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是render函数。</p>\n<p>在具体实现上，vue用到了<strong>几个核心部件</strong>：</p>\n<ol>\n<li>Observer</li>\n<li>Dep</li>\n<li>Watcher</li>\n<li>Scheduler</li>\n</ol>\n<h1 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h1><p>Observer要实现的目标非常简单，就是把一个普通的对象转换为响应式的对象</p>\n<p>为了实现这一点，Observer把对象的每个属性通过<code>Object.defineProperty</code>转换为带有<code>getter</code>和<code>setter</code>的属性，这样一来，当访问或设置属性时，<code>vue</code>就有机会做一些别的事情。</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226153448.png\" alt=\"image-20210226153448807\" style=\"zoom:50%;\" />\n\n<p>Observer是vue内部的构造器，我们可以通过Vue提供的静态方法<code>Vue.observable( object )</code>间接的使用该功能。</p>\n<p>在组件生命周期中，这件事发生在<code>beforeCreate</code>之后，<code>created</code>之前。</p>\n<p>具体实现上，它会递归遍历对象的所有属性，以完成深度的属性转换。</p>\n<p>由于遍历时只能遍历到对象的当前属性，因此无法监测到将来动态增加或删除的属性，因此<code>vue</code>提供了<code>$set</code>和<code>$delete</code>两个实例方法，让开发者通过这两个实例方法对已有响应式对象添加或删除属性。</p>\n<p>对于数组，<code>vue</code>会更改它的隐式原型，之所以这样做，是因为vue需要监听那些可能改变数组内容的方法</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226154624.png\" alt=\"image-20210226154624015\" style=\"zoom:50%;\" />\n\n<p>总之，Observer的目标，就是要让一个对象，它属性的读取、赋值，内部数组的变化都要能够被vue感知到。</p>\n<h1 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h1><p>这里有两个问题没解决，就是读取属性时要做什么事，而属性变化时要做什么事，这个问题需要依靠Dep来解决。</p>\n<p>Dep的含义是<code>Dependency</code>，表示依赖的意思。</p>\n<p><code>Vue</code>会为响应式对象中的每个属性、对象本身、数组本身创建一个<code>Dep</code>实例，每个<code>Dep</code>实例都有能力做以下两件事：</p>\n<ul>\n<li>记录依赖：是谁在用我</li>\n<li>派发更新：我变了，我要通知那些用到我的人</li>\n</ul>\n<p>当读取响应式对象的某个属性时，它会进行依赖收集：有人用到了我</p>\n<p>当改变某个属性时，它会派发更新：那些用我的人听好了，我变了</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226155852.png\" alt=\"image-20210226155852964\" style=\"zoom:50%;\" />\n\n<h1 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h1><p>这里又出现一个问题，就是Dep如何知道是谁在用我？</p>\n<p>要解决这个问题，需要依靠另一个东西，就是Watcher。</p>\n<p>当某个函数执行的过程中，用到了响应式数据，响应式数据是无法知道是哪个函数在用自己的</p>\n<p>因此，vue通过一种巧妙的办法来解决这个问题</p>\n<p>我们不要直接执行函数，而是把函数交给一个叫做watcher的东西去执行，watcher是一个对象，每个这样的函数执行时都应该创建一个watcher，通过watcher去执行</p>\n<p>watcher会设置一个全局变量，让全局变量记录当前负责执行的watcher等于自己，然后再去执行函数，在函数的执行过程中，如果发生了依赖记录<code>dep.depend()</code>，那么<code>Dep</code>就会把这个全局变量记录下来，表示：有一个watcher用到了我这个属性</p>\n<p>当Dep进行派发更新时，它会通知之前记录的所有watcher：我变了</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226161404.png\" alt=\"image-20210226161404327\" style=\"zoom:50%;\" />\n\n<p>每一个<code>vue</code>组件实例，都至少对应一个<code>watcher</code>，该<code>watcher</code>中记录了该组件的<code>render</code>函数。</p>\n<p><code>watcher</code>首先会把<code>render</code>函数运行一次以收集依赖，于是那些在render中用到的响应式数据就会记录这个watcher。</p>\n<p>当数据变化时，dep就会通知该watcher，而watcher将重新运行render函数，从而让界面重新渲染同时重新记录当前的依赖。</p>\n<h1 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h1><p>现在还剩下最后一个问题，就是Dep通知watcher之后，如果watcher执行重运行对应的函数，就有可能导致函数频繁运行，从而导致效率低下</p>\n<p>试想，如果一个交给watcher的函数，它里面用到了属性a、b、c、d，那么a、b、c、d属性都会记录依赖，于是下面的代码将触发4次更新：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.a = <span class=\"string\">&quot;new data&quot;</span>;</span><br><span class=\"line\">state.b = <span class=\"string\">&quot;new data&quot;</span>;</span><br><span class=\"line\">state.c = <span class=\"string\">&quot;new data&quot;</span>;</span><br><span class=\"line\">state.d = <span class=\"string\">&quot;new data&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样显然是不合适的，因此，watcher收到派发更新的通知后，实际上不是立即执行对应函数，而是把自己交给一个叫调度器的东西</p>\n<p>调度器维护一个执行队列，该队列同一个watcher仅会存在一次，队列中的watcher不是立即执行，它会通过一个叫做<code>nextTick</code>的工具方法，把这些需要执行的watcher放入到事件循环的微队列中，nextTick的具体做法是通过<code>Promise</code>完成的</p>\n<blockquote>\n<p>nextTick 通过 <code>this.$nextTick</code> 暴露给开发者</p>\n<p>nextTick 的具体处理方式见：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97\">https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97</a></p>\n</blockquote>\n<p>也就是说，当响应式数据变化时，<code>render</code>函数的执行是异步的，并且在微队列中</p>\n<h1 id=\"总体流程\"><a href=\"#总体流程\" class=\"headerlink\" title=\"总体流程\"></a>总体流程</h1><p><img src=\"http://mdrs.yuanjin.tech/img/20210226163936.png\" alt=\"image-20210226163936839\"></p>\n","site":{"data":{}},"length":2055,"excerpt":"","more":"<blockquote>\n<p>面试题：请阐述<code>vue2</code>响应式原理</p>\n</blockquote>\n<blockquote>\n<p>vue官方阐述：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\">https://cn.vuejs.org/v2/guide/reactivity.html</a></p>\n</blockquote>\n<p><strong>响应式数据的最终目标</strong>，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是render函数。</p>\n<p>在具体实现上，vue用到了<strong>几个核心部件</strong>：</p>\n<ol>\n<li>Observer</li>\n<li>Dep</li>\n<li>Watcher</li>\n<li>Scheduler</li>\n</ol>\n<h1 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h1><p>Observer要实现的目标非常简单，就是把一个普通的对象转换为响应式的对象</p>\n<p>为了实现这一点，Observer把对象的每个属性通过<code>Object.defineProperty</code>转换为带有<code>getter</code>和<code>setter</code>的属性，这样一来，当访问或设置属性时，<code>vue</code>就有机会做一些别的事情。</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226153448.png\" alt=\"image-20210226153448807\" style=\"zoom:50%;\" />\n\n<p>Observer是vue内部的构造器，我们可以通过Vue提供的静态方法<code>Vue.observable( object )</code>间接的使用该功能。</p>\n<p>在组件生命周期中，这件事发生在<code>beforeCreate</code>之后，<code>created</code>之前。</p>\n<p>具体实现上，它会递归遍历对象的所有属性，以完成深度的属性转换。</p>\n<p>由于遍历时只能遍历到对象的当前属性，因此无法监测到将来动态增加或删除的属性，因此<code>vue</code>提供了<code>$set</code>和<code>$delete</code>两个实例方法，让开发者通过这两个实例方法对已有响应式对象添加或删除属性。</p>\n<p>对于数组，<code>vue</code>会更改它的隐式原型，之所以这样做，是因为vue需要监听那些可能改变数组内容的方法</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226154624.png\" alt=\"image-20210226154624015\" style=\"zoom:50%;\" />\n\n<p>总之，Observer的目标，就是要让一个对象，它属性的读取、赋值，内部数组的变化都要能够被vue感知到。</p>\n<h1 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h1><p>这里有两个问题没解决，就是读取属性时要做什么事，而属性变化时要做什么事，这个问题需要依靠Dep来解决。</p>\n<p>Dep的含义是<code>Dependency</code>，表示依赖的意思。</p>\n<p><code>Vue</code>会为响应式对象中的每个属性、对象本身、数组本身创建一个<code>Dep</code>实例，每个<code>Dep</code>实例都有能力做以下两件事：</p>\n<ul>\n<li>记录依赖：是谁在用我</li>\n<li>派发更新：我变了，我要通知那些用到我的人</li>\n</ul>\n<p>当读取响应式对象的某个属性时，它会进行依赖收集：有人用到了我</p>\n<p>当改变某个属性时，它会派发更新：那些用我的人听好了，我变了</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226155852.png\" alt=\"image-20210226155852964\" style=\"zoom:50%;\" />\n\n<h1 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h1><p>这里又出现一个问题，就是Dep如何知道是谁在用我？</p>\n<p>要解决这个问题，需要依靠另一个东西，就是Watcher。</p>\n<p>当某个函数执行的过程中，用到了响应式数据，响应式数据是无法知道是哪个函数在用自己的</p>\n<p>因此，vue通过一种巧妙的办法来解决这个问题</p>\n<p>我们不要直接执行函数，而是把函数交给一个叫做watcher的东西去执行，watcher是一个对象，每个这样的函数执行时都应该创建一个watcher，通过watcher去执行</p>\n<p>watcher会设置一个全局变量，让全局变量记录当前负责执行的watcher等于自己，然后再去执行函数，在函数的执行过程中，如果发生了依赖记录<code>dep.depend()</code>，那么<code>Dep</code>就会把这个全局变量记录下来，表示：有一个watcher用到了我这个属性</p>\n<p>当Dep进行派发更新时，它会通知之前记录的所有watcher：我变了</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210226161404.png\" alt=\"image-20210226161404327\" style=\"zoom:50%;\" />\n\n<p>每一个<code>vue</code>组件实例，都至少对应一个<code>watcher</code>，该<code>watcher</code>中记录了该组件的<code>render</code>函数。</p>\n<p><code>watcher</code>首先会把<code>render</code>函数运行一次以收集依赖，于是那些在render中用到的响应式数据就会记录这个watcher。</p>\n<p>当数据变化时，dep就会通知该watcher，而watcher将重新运行render函数，从而让界面重新渲染同时重新记录当前的依赖。</p>\n<h1 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h1><p>现在还剩下最后一个问题，就是Dep通知watcher之后，如果watcher执行重运行对应的函数，就有可能导致函数频繁运行，从而导致效率低下</p>\n<p>试想，如果一个交给watcher的函数，它里面用到了属性a、b、c、d，那么a、b、c、d属性都会记录依赖，于是下面的代码将触发4次更新：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.a = <span class=\"string\">&quot;new data&quot;</span>;</span><br><span class=\"line\">state.b = <span class=\"string\">&quot;new data&quot;</span>;</span><br><span class=\"line\">state.c = <span class=\"string\">&quot;new data&quot;</span>;</span><br><span class=\"line\">state.d = <span class=\"string\">&quot;new data&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样显然是不合适的，因此，watcher收到派发更新的通知后，实际上不是立即执行对应函数，而是把自己交给一个叫调度器的东西</p>\n<p>调度器维护一个执行队列，该队列同一个watcher仅会存在一次，队列中的watcher不是立即执行，它会通过一个叫做<code>nextTick</code>的工具方法，把这些需要执行的watcher放入到事件循环的微队列中，nextTick的具体做法是通过<code>Promise</code>完成的</p>\n<blockquote>\n<p>nextTick 通过 <code>this.$nextTick</code> 暴露给开发者</p>\n<p>nextTick 的具体处理方式见：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97\">https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97</a></p>\n</blockquote>\n<p>也就是说，当响应式数据变化时，<code>render</code>函数的执行是异步的，并且在微队列中</p>\n<h1 id=\"总体流程\"><a href=\"#总体流程\" class=\"headerlink\" title=\"总体流程\"></a>总体流程</h1><p><img src=\"http://mdrs.yuanjin.tech/img/20210226163936.png\" alt=\"image-20210226163936839\"></p>\n"},{"title":"vue2组件","date":"2022-01-01T06:02:47.000Z","description":"vue2中组件的介绍，使用和定义","comments":1,"toc":true,"_content":"\n\n# 组件\n组件的出现是为了实现以下两个目标：\n\n1. 降低整体复杂度，提升代码的可读性和可维护性\n2. 提升局部代码的可复用性\n\n绝大部分情况下，一个组件就是页面中某个区域，组件包含该区域的：\n\n- 功能（JS代码）\n\n- 内容（模板代码）\n\n- 样式（CSS代码）\n\n  > 要在组件中包含样式，需要构建工具的支撑\n\n## 组件开发\n\n### 创建组件\n\n组件是根据一个普通的配置对象创建的，所以要开发一个组件，只需要写一个配置对象即可\n\n该配置对象和vue实例的配置是**几乎一样**的\n\n```js\n//组件配置对象\nvar myComp = {\n  data(){\n    return {\n      // ...\n    }\n  },\n  template: `....`\n}\n```\n\n值得注意的是，组件配置对象和vue实例有以下几点差异：\n\n- 无`el`\n- `data`必须是一个函数，该函数返回的对象作为数据\n- 由于没有`el`配置，组件的虚拟DOM树必须定义在`template`或`render`中\n\n\n\n### 注册组件\n\n注册组件分为两种方式，一种是**全局注册**，一种是**局部注册**\n\n#### 全局注册\n\n一旦全局注册了一个组件，整个应用中任何地方都可以使用该组件\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-24-44.png\" style=\"zoom:50%;\" />\n\n全局注册的方式是：\n\n```js\n// 参数1：组件名称，将来在模板中使用组件时，会使用该名称\n// 参数2：组件配置对象\n// 该代码运行后，即可在模板中使用组件\nVue.component('my-comp', myComp)\n```\n\n在模板中，可以使用组件了\n\n```html\n<my-comp />\n<!-- 或 -->\n<my-comp></my-comp>\n```\n\n\n> 但在一些工程化的大型项目中，很多组件都不需要全局使用。\n> 比如一个登录组件，只有在登录的相关页面中使用，如果全局注册，将导致构建工具无法优化打包\n> **因此，除非组件特别通用，否则不建议使用全局注册**\n\n\n\n#### 局部注册\n\n局部注册就是哪里要用到组件，就在哪里注册\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-28-45.png\" style=\"zoom:50%;\" />\n\n局部注册的方式是，在要使用组件的组件或实例中加入一个配置：\n\n```js\n// 这是另一个要使用my-comp的组件\nvar otherComp = {\n  components:{\n    // 属性名为组件名称，模板中将使用该名称\n    // 属性值为组件配置对象\n    \"my-comp\": myComp\n  },\n  template: `\n    <div>\n      <!-- 该组件的其他内容 -->\n      <my-comp></my-comp>\n    </div>\n  `;\n}\n```\n\n## 应用组件\n\n在模板中使用组件特别简单，把组件名当作HTML元素名使用即可。\n\n但要注意以下几点：\n\n1. **组件必须有结束**\n\n组件可以自结束，也可以用结束标记结束，但必须要有结束\n\n下面的组件使用是错误的：\n\n```html\n<my-comp>\n```\n\n2. **组件的命名**\n\n无论你使用哪种方式注册组件，组件的命名需要遵循规范。\n\n组件可以使用`kebab-case 短横线命名法`，也可以使用`PascalCase 大驼峰命名法`\n\n下面两种命名均是可以的\n\n```js\nvar otherComp = {\n  components:{\n    \"my-comp\": myComp,  // 方式1\n    MyComp: myComp //方式2\n  }\n}\n```\n\n> 实际上，使用`小驼峰命名法 camelCase`也是可以识别的，只不过不符合官方要求的规范\n\n使用`PascalCase`方式命名还有一个额外的好处，即可以在模板中使用两种组件名\n\n```js\nvar otherComp = {\n  components:{\n    MyComp: myComp\n  }\n}\n```\n\n模板中：\n\n```html\n<!-- 可用 -->\n<my-comp />\n<MyComp />\n```\n\n因此，在使用组件时，为了方便，往往使用以下代码：\n\n```js\nvar MyComp = {\n  //组件配置\n}\n\nvar OtherComp = {\n  components:{\n    MyComp // ES6速写属性\n  }\n}\n```\n\n\n\n## 组件树\n\n一个组件创建好后，往往会在各种地方使用它。它可能多次出现在vue实例中，也可能出现在其他组件中。\n\n于是就形成了一个组件树\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-00-58.png\" style=\"zoom:50%;\" />\n\n## 向组件传递数据\n\n大部分组件要完成自身的功能，都需要一些额外的信息\n\n比如一个头像组件，需要告诉它头像的地址，这就需要在使用组件时向组件传递数据\n\n传递数据的方式有很多种，最常见的一种是使用**组件属性 component props**\n\n首先在组件中申明可以接收哪些属性:\n\n```js\nvar MyComp = {\n  props:[\"p1\", \"p2\", \"p3\"],\n  // 和vue实例一样，使用组件时也会创建组件的实例\n  // 而组件的属性会被提取到组件实例中，因此可以在模板中使用\n  template: `\n    <div>\n      {{p1}}, {{p2}}, {{p3}}\n    </div>\n  `\n}\n```\n\n在使用组件时，向其传递属性：\n\n```js\nvar OtherComp = {\n  components: {\n    MyComp\n  },\n  data(){\n    return {\n      a:1\n    }\n  },\n  template: `\n    <my-comp :p1=\"a\" :p2=\"2\" p3=\"3\"/>\n  `\n}\n```\n\n**注意：在组件中，属性是只读的，绝不可以更改，这叫做单向数据流**\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-13-19.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/组件.md","raw":"---\ntitle: vue2组件\ndate: 2022-01-01 14:02:47\ndescription: vue2中组件的介绍，使用和定义\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n\n# 组件\n组件的出现是为了实现以下两个目标：\n\n1. 降低整体复杂度，提升代码的可读性和可维护性\n2. 提升局部代码的可复用性\n\n绝大部分情况下，一个组件就是页面中某个区域，组件包含该区域的：\n\n- 功能（JS代码）\n\n- 内容（模板代码）\n\n- 样式（CSS代码）\n\n  > 要在组件中包含样式，需要构建工具的支撑\n\n## 组件开发\n\n### 创建组件\n\n组件是根据一个普通的配置对象创建的，所以要开发一个组件，只需要写一个配置对象即可\n\n该配置对象和vue实例的配置是**几乎一样**的\n\n```js\n//组件配置对象\nvar myComp = {\n  data(){\n    return {\n      // ...\n    }\n  },\n  template: `....`\n}\n```\n\n值得注意的是，组件配置对象和vue实例有以下几点差异：\n\n- 无`el`\n- `data`必须是一个函数，该函数返回的对象作为数据\n- 由于没有`el`配置，组件的虚拟DOM树必须定义在`template`或`render`中\n\n\n\n### 注册组件\n\n注册组件分为两种方式，一种是**全局注册**，一种是**局部注册**\n\n#### 全局注册\n\n一旦全局注册了一个组件，整个应用中任何地方都可以使用该组件\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-24-44.png\" style=\"zoom:50%;\" />\n\n全局注册的方式是：\n\n```js\n// 参数1：组件名称，将来在模板中使用组件时，会使用该名称\n// 参数2：组件配置对象\n// 该代码运行后，即可在模板中使用组件\nVue.component('my-comp', myComp)\n```\n\n在模板中，可以使用组件了\n\n```html\n<my-comp />\n<!-- 或 -->\n<my-comp></my-comp>\n```\n\n\n> 但在一些工程化的大型项目中，很多组件都不需要全局使用。\n> 比如一个登录组件，只有在登录的相关页面中使用，如果全局注册，将导致构建工具无法优化打包\n> **因此，除非组件特别通用，否则不建议使用全局注册**\n\n\n\n#### 局部注册\n\n局部注册就是哪里要用到组件，就在哪里注册\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-28-45.png\" style=\"zoom:50%;\" />\n\n局部注册的方式是，在要使用组件的组件或实例中加入一个配置：\n\n```js\n// 这是另一个要使用my-comp的组件\nvar otherComp = {\n  components:{\n    // 属性名为组件名称，模板中将使用该名称\n    // 属性值为组件配置对象\n    \"my-comp\": myComp\n  },\n  template: `\n    <div>\n      <!-- 该组件的其他内容 -->\n      <my-comp></my-comp>\n    </div>\n  `;\n}\n```\n\n## 应用组件\n\n在模板中使用组件特别简单，把组件名当作HTML元素名使用即可。\n\n但要注意以下几点：\n\n1. **组件必须有结束**\n\n组件可以自结束，也可以用结束标记结束，但必须要有结束\n\n下面的组件使用是错误的：\n\n```html\n<my-comp>\n```\n\n2. **组件的命名**\n\n无论你使用哪种方式注册组件，组件的命名需要遵循规范。\n\n组件可以使用`kebab-case 短横线命名法`，也可以使用`PascalCase 大驼峰命名法`\n\n下面两种命名均是可以的\n\n```js\nvar otherComp = {\n  components:{\n    \"my-comp\": myComp,  // 方式1\n    MyComp: myComp //方式2\n  }\n}\n```\n\n> 实际上，使用`小驼峰命名法 camelCase`也是可以识别的，只不过不符合官方要求的规范\n\n使用`PascalCase`方式命名还有一个额外的好处，即可以在模板中使用两种组件名\n\n```js\nvar otherComp = {\n  components:{\n    MyComp: myComp\n  }\n}\n```\n\n模板中：\n\n```html\n<!-- 可用 -->\n<my-comp />\n<MyComp />\n```\n\n因此，在使用组件时，为了方便，往往使用以下代码：\n\n```js\nvar MyComp = {\n  //组件配置\n}\n\nvar OtherComp = {\n  components:{\n    MyComp // ES6速写属性\n  }\n}\n```\n\n\n\n## 组件树\n\n一个组件创建好后，往往会在各种地方使用它。它可能多次出现在vue实例中，也可能出现在其他组件中。\n\n于是就形成了一个组件树\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-00-58.png\" style=\"zoom:50%;\" />\n\n## 向组件传递数据\n\n大部分组件要完成自身的功能，都需要一些额外的信息\n\n比如一个头像组件，需要告诉它头像的地址，这就需要在使用组件时向组件传递数据\n\n传递数据的方式有很多种，最常见的一种是使用**组件属性 component props**\n\n首先在组件中申明可以接收哪些属性:\n\n```js\nvar MyComp = {\n  props:[\"p1\", \"p2\", \"p3\"],\n  // 和vue实例一样，使用组件时也会创建组件的实例\n  // 而组件的属性会被提取到组件实例中，因此可以在模板中使用\n  template: `\n    <div>\n      {{p1}}, {{p2}}, {{p3}}\n    </div>\n  `\n}\n```\n\n在使用组件时，向其传递属性：\n\n```js\nvar OtherComp = {\n  components: {\n    MyComp\n  },\n  data(){\n    return {\n      a:1\n    }\n  },\n  template: `\n    <my-comp :p1=\"a\" :p2=\"2\" p3=\"3\"/>\n  `\n}\n```\n\n**注意：在组件中，属性是只读的，绝不可以更改，这叫做单向数据流**\n\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-13-19.png\" style=\"zoom:50%;\" />\n\n","slug":"组件","published":1,"updated":"2022-01-01T06:09:52.914Z","_id":"ckxvf7cmk000nccaxg4cffzz9","layout":"post","photos":[],"link":"","content":"<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><p>组件的出现是为了实现以下两个目标：</p>\n<ol>\n<li>降低整体复杂度，提升代码的可读性和可维护性</li>\n<li>提升局部代码的可复用性</li>\n</ol>\n<p>绝大部分情况下，一个组件就是页面中某个区域，组件包含该区域的：</p>\n<ul>\n<li><p>功能（JS代码）</p>\n</li>\n<li><p>内容（模板代码）</p>\n</li>\n<li><p>样式（CSS代码）</p>\n<blockquote>\n<p>要在组件中包含样式，需要构建工具的支撑</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"组件开发\"><a href=\"#组件开发\" class=\"headerlink\" title=\"组件开发\"></a>组件开发</h2><h3 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h3><p>组件是根据一个普通的配置对象创建的，所以要开发一个组件，只需要写一个配置对象即可</p>\n<p>该配置对象和vue实例的配置是<strong>几乎一样</strong>的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件配置对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myComp = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`....`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，组件配置对象和vue实例有以下几点差异：</p>\n<ul>\n<li>无<code>el</code></li>\n<li><code>data</code>必须是一个函数，该函数返回的对象作为数据</li>\n<li>由于没有<code>el</code>配置，组件的虚拟DOM树必须定义在<code>template</code>或<code>render</code>中</li>\n</ul>\n<h3 id=\"注册组件\"><a href=\"#注册组件\" class=\"headerlink\" title=\"注册组件\"></a>注册组件</h3><p>注册组件分为两种方式，一种是<strong>全局注册</strong>，一种是<strong>局部注册</strong></p>\n<h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>一旦全局注册了一个组件，整个应用中任何地方都可以使用该组件</p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-24-44.png\" style=\"zoom:50%;\" />\n\n<p>全局注册的方式是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数1：组件名称，将来在模板中使用组件时，会使用该名称</span></span><br><span class=\"line\"><span class=\"comment\">// 参数2：组件配置对象</span></span><br><span class=\"line\"><span class=\"comment\">// 该代码运行后，即可在模板中使用组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-comp&#x27;</span>, myComp)</span><br></pre></td></tr></table></figure>\n\n<p>在模板中，可以使用组件了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>但在一些工程化的大型项目中，很多组件都不需要全局使用。<br>比如一个登录组件，只有在登录的相关页面中使用，如果全局注册，将导致构建工具无法优化打包<br><strong>因此，除非组件特别通用，否则不建议使用全局注册</strong></p>\n</blockquote>\n<h4 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h4><p>局部注册就是哪里要用到组件，就在哪里注册</p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-28-45.png\" style=\"zoom:50%;\" />\n\n<p>局部注册的方式是，在要使用组件的组件或实例中加入一个配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是另一个要使用my-comp的组件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性名为组件名称，模板中将使用该名称</span></span><br><span class=\"line\">    <span class=\"comment\">// 属性值为组件配置对象</span></span><br><span class=\"line\">    <span class=\"string\">&quot;my-comp&quot;</span>: myComp</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 该组件的其他内容 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;my-comp&gt;&lt;/my-comp&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用组件\"><a href=\"#应用组件\" class=\"headerlink\" title=\"应用组件\"></a>应用组件</h2><p>在模板中使用组件特别简单，把组件名当作HTML元素名使用即可。</p>\n<p>但要注意以下几点：</p>\n<ol>\n<li><strong>组件必须有结束</strong></li>\n</ol>\n<p>组件可以自结束，也可以用结束标记结束，但必须要有结束</p>\n<p>下面的组件使用是错误的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>组件的命名</strong></li>\n</ol>\n<p>无论你使用哪种方式注册组件，组件的命名需要遵循规范。</p>\n<p>组件可以使用<code>kebab-case 短横线命名法</code>，也可以使用<code>PascalCase 大驼峰命名法</code></p>\n<p>下面两种命名均是可以的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> otherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my-comp&quot;</span>: myComp,  <span class=\"comment\">// 方式1</span></span><br><span class=\"line\">    <span class=\"attr\">MyComp</span>: myComp <span class=\"comment\">//方式2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际上，使用<code>小驼峰命名法 camelCase</code>也是可以识别的，只不过不符合官方要求的规范</p>\n</blockquote>\n<p>使用<code>PascalCase</code>方式命名还有一个额外的好处，即可以在模板中使用两种组件名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> otherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">MyComp</span>: myComp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 可用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComp</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，在使用组件时，为了方便，往往使用以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyComp = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//组件配置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> OtherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    MyComp <span class=\"comment\">// ES6速写属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"组件树\"><a href=\"#组件树\" class=\"headerlink\" title=\"组件树\"></a>组件树</h2><p>一个组件创建好后，往往会在各种地方使用它。它可能多次出现在vue实例中，也可能出现在其他组件中。</p>\n<p>于是就形成了一个组件树</p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-00-58.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"向组件传递数据\"><a href=\"#向组件传递数据\" class=\"headerlink\" title=\"向组件传递数据\"></a>向组件传递数据</h2><p>大部分组件要完成自身的功能，都需要一些额外的信息</p>\n<p>比如一个头像组件，需要告诉它头像的地址，这就需要在使用组件时向组件传递数据</p>\n<p>传递数据的方式有很多种，最常见的一种是使用<strong>组件属性 component props</strong></p>\n<p>首先在组件中申明可以接收哪些属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">props</span>:[<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\">  <span class=\"comment\">// 和vue实例一样，使用组件时也会创建组件的实例</span></span><br><span class=\"line\">  <span class=\"comment\">// 而组件的属性会被提取到组件实例中，因此可以在模板中使用</span></span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123;p1&#125;&#125;, &#123;&#123;p2&#125;&#125;, &#123;&#123;p3&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用组件时，向其传递属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> OtherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    MyComp</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-comp :p1=&quot;a&quot; :p2=&quot;2&quot; p3=&quot;3&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：在组件中，属性是只读的，绝不可以更改，这叫做单向数据流</strong></p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-13-19.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"length":2308,"excerpt":"","more":"<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><p>组件的出现是为了实现以下两个目标：</p>\n<ol>\n<li>降低整体复杂度，提升代码的可读性和可维护性</li>\n<li>提升局部代码的可复用性</li>\n</ol>\n<p>绝大部分情况下，一个组件就是页面中某个区域，组件包含该区域的：</p>\n<ul>\n<li><p>功能（JS代码）</p>\n</li>\n<li><p>内容（模板代码）</p>\n</li>\n<li><p>样式（CSS代码）</p>\n<blockquote>\n<p>要在组件中包含样式，需要构建工具的支撑</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"组件开发\"><a href=\"#组件开发\" class=\"headerlink\" title=\"组件开发\"></a>组件开发</h2><h3 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h3><p>组件是根据一个普通的配置对象创建的，所以要开发一个组件，只需要写一个配置对象即可</p>\n<p>该配置对象和vue实例的配置是<strong>几乎一样</strong>的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件配置对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myComp = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`....`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，组件配置对象和vue实例有以下几点差异：</p>\n<ul>\n<li>无<code>el</code></li>\n<li><code>data</code>必须是一个函数，该函数返回的对象作为数据</li>\n<li>由于没有<code>el</code>配置，组件的虚拟DOM树必须定义在<code>template</code>或<code>render</code>中</li>\n</ul>\n<h3 id=\"注册组件\"><a href=\"#注册组件\" class=\"headerlink\" title=\"注册组件\"></a>注册组件</h3><p>注册组件分为两种方式，一种是<strong>全局注册</strong>，一种是<strong>局部注册</strong></p>\n<h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>一旦全局注册了一个组件，整个应用中任何地方都可以使用该组件</p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-24-44.png\" style=\"zoom:50%;\" />\n\n<p>全局注册的方式是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数1：组件名称，将来在模板中使用组件时，会使用该名称</span></span><br><span class=\"line\"><span class=\"comment\">// 参数2：组件配置对象</span></span><br><span class=\"line\"><span class=\"comment\">// 该代码运行后，即可在模板中使用组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-comp&#x27;</span>, myComp)</span><br></pre></td></tr></table></figure>\n\n<p>在模板中，可以使用组件了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>但在一些工程化的大型项目中，很多组件都不需要全局使用。<br>比如一个登录组件，只有在登录的相关页面中使用，如果全局注册，将导致构建工具无法优化打包<br><strong>因此，除非组件特别通用，否则不建议使用全局注册</strong></p>\n</blockquote>\n<h4 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h4><p>局部注册就是哪里要用到组件，就在哪里注册</p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-10-28-45.png\" style=\"zoom:50%;\" />\n\n<p>局部注册的方式是，在要使用组件的组件或实例中加入一个配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是另一个要使用my-comp的组件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性名为组件名称，模板中将使用该名称</span></span><br><span class=\"line\">    <span class=\"comment\">// 属性值为组件配置对象</span></span><br><span class=\"line\">    <span class=\"string\">&quot;my-comp&quot;</span>: myComp</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 该组件的其他内容 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;my-comp&gt;&lt;/my-comp&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用组件\"><a href=\"#应用组件\" class=\"headerlink\" title=\"应用组件\"></a>应用组件</h2><p>在模板中使用组件特别简单，把组件名当作HTML元素名使用即可。</p>\n<p>但要注意以下几点：</p>\n<ol>\n<li><strong>组件必须有结束</strong></li>\n</ol>\n<p>组件可以自结束，也可以用结束标记结束，但必须要有结束</p>\n<p>下面的组件使用是错误的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>组件的命名</strong></li>\n</ol>\n<p>无论你使用哪种方式注册组件，组件的命名需要遵循规范。</p>\n<p>组件可以使用<code>kebab-case 短横线命名法</code>，也可以使用<code>PascalCase 大驼峰命名法</code></p>\n<p>下面两种命名均是可以的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> otherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my-comp&quot;</span>: myComp,  <span class=\"comment\">// 方式1</span></span><br><span class=\"line\">    <span class=\"attr\">MyComp</span>: myComp <span class=\"comment\">//方式2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际上，使用<code>小驼峰命名法 camelCase</code>也是可以识别的，只不过不符合官方要求的规范</p>\n</blockquote>\n<p>使用<code>PascalCase</code>方式命名还有一个额外的好处，即可以在模板中使用两种组件名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> otherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">MyComp</span>: myComp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 可用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComp</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，在使用组件时，为了方便，往往使用以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyComp = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//组件配置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> OtherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">    MyComp <span class=\"comment\">// ES6速写属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"组件树\"><a href=\"#组件树\" class=\"headerlink\" title=\"组件树\"></a>组件树</h2><p>一个组件创建好后，往往会在各种地方使用它。它可能多次出现在vue实例中，也可能出现在其他组件中。</p>\n<p>于是就形成了一个组件树</p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-00-58.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"向组件传递数据\"><a href=\"#向组件传递数据\" class=\"headerlink\" title=\"向组件传递数据\"></a>向组件传递数据</h2><p>大部分组件要完成自身的功能，都需要一些额外的信息</p>\n<p>比如一个头像组件，需要告诉它头像的地址，这就需要在使用组件时向组件传递数据</p>\n<p>传递数据的方式有很多种，最常见的一种是使用<strong>组件属性 component props</strong></p>\n<p>首先在组件中申明可以接收哪些属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">props</span>:[<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\">  <span class=\"comment\">// 和vue实例一样，使用组件时也会创建组件的实例</span></span><br><span class=\"line\">  <span class=\"comment\">// 而组件的属性会被提取到组件实例中，因此可以在模板中使用</span></span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123;p1&#125;&#125;, &#123;&#123;p2&#125;&#125;, &#123;&#123;p3&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用组件时，向其传递属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> OtherComp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    MyComp</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-comp :p1=&quot;a&quot; :p2=&quot;2&quot; p3=&quot;3&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：在组件中，属性是只读的，绝不可以更改，这叫做单向数据流</strong></p>\n<img src=\"http://mdrs.yuanjin.tech/img/2020-02-18-11-13-19.png\" style=\"zoom:50%;\" />\n\n"},{"title":"用户登录的逻辑","date":"2022-01-01T06:02:47.000Z","description":"用户登录应该怎样实现，路由守卫、导航守卫","comments":1,"toc":true,"_content":"\n\n# 用户模块逻辑示意图\n\n路由总体示意图\n\n![image-20210130141625925](http://mdrs.yuanjin.tech/img/20210130141626.png)\n\n鉴权守卫逻辑示意图\n\n![image-20210130144001709](http://mdrs.yuanjin.tech/img/20210130144001.png)\n\n# 参考资料\n\n## vue\n\n[watch配置](https://cn.vuejs.org/v2/api/#watch)\n\n[Vue.prototype.$watch](https://cn.vuejs.org/v2/api/#vm-watch)\n\n## vuex\n\n[mapState](https://vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0)\n\n[getters](https://vuex.vuejs.org/zh/guide/getters.html)\n\n[mapGetters](https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0)\n\n[modules](https://vuex.vuejs.org/zh/guide/modules.html)\n\n[watch](https://vuex.vuejs.org/zh/api/#watch)\n\n## router\n\n[exact-path](https://router.vuejs.org/api/#exact-path)\n\n[导航守卫](https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB)\n\n","source":"_posts/登录方面的知识.md","raw":"---\ntitle: 用户登录的逻辑\ndate: 2022-01-01 14:02:47\ndescription: 用户登录应该怎样实现，路由守卫、导航守卫\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n---\n\n\n# 用户模块逻辑示意图\n\n路由总体示意图\n\n![image-20210130141625925](http://mdrs.yuanjin.tech/img/20210130141626.png)\n\n鉴权守卫逻辑示意图\n\n![image-20210130144001709](http://mdrs.yuanjin.tech/img/20210130144001.png)\n\n# 参考资料\n\n## vue\n\n[watch配置](https://cn.vuejs.org/v2/api/#watch)\n\n[Vue.prototype.$watch](https://cn.vuejs.org/v2/api/#vm-watch)\n\n## vuex\n\n[mapState](https://vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0)\n\n[getters](https://vuex.vuejs.org/zh/guide/getters.html)\n\n[mapGetters](https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0)\n\n[modules](https://vuex.vuejs.org/zh/guide/modules.html)\n\n[watch](https://vuex.vuejs.org/zh/api/#watch)\n\n## router\n\n[exact-path](https://router.vuejs.org/api/#exact-path)\n\n[导航守卫](https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB)\n\n","slug":"登录方面的知识","published":1,"updated":"2022-01-01T06:22:57.284Z","_id":"ckxvf7cml000occax9s5u1m2l","layout":"post","photos":[],"link":"","content":"<h1 id=\"用户模块逻辑示意图\"><a href=\"#用户模块逻辑示意图\" class=\"headerlink\" title=\"用户模块逻辑示意图\"></a>用户模块逻辑示意图</h1><p>路由总体示意图</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210130141626.png\" alt=\"image-20210130141625925\"></p>\n<p>鉴权守卫逻辑示意图</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210130144001.png\" alt=\"image-20210130144001709\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h2><p><a href=\"https://cn.vuejs.org/v2/api/#watch\">watch配置</a></p>\n<p><a href=\"https://cn.vuejs.org/v2/api/#vm-watch\">Vue.prototype.$watch</a></p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><p><a href=\"https://vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\">mapState</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/getters.html\">getters</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\">mapGetters</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/modules.html\">modules</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/api/#watch\">watch</a></p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p><a href=\"https://router.vuejs.org/api/#exact-path\">exact-path</a></p>\n<p><a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB\">导航守卫</a></p>\n","site":{"data":{}},"length":120,"excerpt":"","more":"<h1 id=\"用户模块逻辑示意图\"><a href=\"#用户模块逻辑示意图\" class=\"headerlink\" title=\"用户模块逻辑示意图\"></a>用户模块逻辑示意图</h1><p>路由总体示意图</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210130141626.png\" alt=\"image-20210130141625925\"></p>\n<p>鉴权守卫逻辑示意图</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20210130144001.png\" alt=\"image-20210130144001709\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h2><p><a href=\"https://cn.vuejs.org/v2/api/#watch\">watch配置</a></p>\n<p><a href=\"https://cn.vuejs.org/v2/api/#vm-watch\">Vue.prototype.$watch</a></p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><p><a href=\"https://vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\">mapState</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/getters.html\">getters</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\">mapGetters</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/modules.html\">modules</a></p>\n<p><a href=\"https://vuex.vuejs.org/zh/api/#watch\">watch</a></p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p><a href=\"https://router.vuejs.org/api/#exact-path\">exact-path</a></p>\n<p><a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB\">导航守卫</a></p>\n"},{"title":"vue2中的组件事件","date":"2022-01-01T06:02:47.000Z","description":"vue2中的组件事件&v-if 和 v-show的区别与联系","comments":1,"toc":true,"_content":"\n\n\n\n\n在样式中可以用 '\\~@'定位到src目录\n在script中用'@'可定位到src目录\n\n\n1. **全局样式**\n\n2. **v-if 和 v-show**\n\n   ![image-20201113133827438](http://mdrs.yuanjin.tech/img/20201113133827.png)\n\n   -------\n\n   ![image-20201113134051281](http://mdrs.yuanjin.tech/img/20201113134051.png)\n\n   **面试题：v-if 和 v-show 有什么区别？**\n\n   ```\n   v-if能够控制是否生成vnode，也就间接控制了是否生成对应的dom。当v-if为true时，会生成对应的vnode，并生成对应的dom元素；当其为false时，不会生成对应的vnode，自然不会生成任何的dom元素。\n   v-show始终会生成vnode，也就间接导致了始终生成dom。它只是控制dom的display属性，当v-show为true时，不做任何处理；当其为false时，生成的dom的display属性为none。\n   使用v-if可以有效的减少树的节点和渲染量，但也会导致树的不稳定；而使用v-show可以保持树的稳定，但不能减少树的节点和渲染量。\n   因此，在实际开发中，显示状态变化频繁的情况下应该使用v-show，以保持树的稳定；显示状态变化较少时应该使用v-if，以减少树的节点和渲染量。\n   ```\n\n   \n\n3. **组件事件**\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201113134557.png\" alt=\"image-20201113134557175\" style=\"zoom:40%;\" />\n\n抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理\n\n事件参数：子组件抛出事件时，传递给父组件的数据\n\n注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理\n\n[事件](https://vuejs.bootcss.com/guide/components-custom-events.html)\n\n","source":"_posts/组件事件.md","raw":"---\ntitle: vue2中的组件事件\ndate: 2022-01-01 14:02:47\ndescription: vue2中的组件事件&v-if 和 v-show的区别与联系\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n---\n\n\n\n\n\n在样式中可以用 '\\~@'定位到src目录\n在script中用'@'可定位到src目录\n\n\n1. **全局样式**\n\n2. **v-if 和 v-show**\n\n   ![image-20201113133827438](http://mdrs.yuanjin.tech/img/20201113133827.png)\n\n   -------\n\n   ![image-20201113134051281](http://mdrs.yuanjin.tech/img/20201113134051.png)\n\n   **面试题：v-if 和 v-show 有什么区别？**\n\n   ```\n   v-if能够控制是否生成vnode，也就间接控制了是否生成对应的dom。当v-if为true时，会生成对应的vnode，并生成对应的dom元素；当其为false时，不会生成对应的vnode，自然不会生成任何的dom元素。\n   v-show始终会生成vnode，也就间接导致了始终生成dom。它只是控制dom的display属性，当v-show为true时，不做任何处理；当其为false时，生成的dom的display属性为none。\n   使用v-if可以有效的减少树的节点和渲染量，但也会导致树的不稳定；而使用v-show可以保持树的稳定，但不能减少树的节点和渲染量。\n   因此，在实际开发中，显示状态变化频繁的情况下应该使用v-show，以保持树的稳定；显示状态变化较少时应该使用v-if，以减少树的节点和渲染量。\n   ```\n\n   \n\n3. **组件事件**\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201113134557.png\" alt=\"image-20201113134557175\" style=\"zoom:40%;\" />\n\n抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理\n\n事件参数：子组件抛出事件时，传递给父组件的数据\n\n注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理\n\n[事件](https://vuejs.bootcss.com/guide/components-custom-events.html)\n\n","slug":"组件事件","published":1,"updated":"2022-01-01T06:21:18.334Z","_id":"ckxvf7cmm000pccax6pmo6vku","layout":"post","photos":[],"link":"","content":"<p>在样式中可以用 ‘~@’定位到src目录<br>在script中用‘@’可定位到src目录</p>\n<ol>\n<li><p><strong>全局样式</strong></p>\n</li>\n<li><p><strong>v-if 和 v-show</strong></p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201113133827.png\" alt=\"image-20201113133827438\"></p>\n<hr>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201113134051.png\" alt=\"image-20201113134051281\"></p>\n<p><strong>面试题：v-if 和 v-show 有什么区别？</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-if能够控制是否生成vnode，也就间接控制了是否生成对应的dom。当v-if为true时，会生成对应的vnode，并生成对应的dom元素；当其为false时，不会生成对应的vnode，自然不会生成任何的dom元素。</span><br><span class=\"line\">v-show始终会生成vnode，也就间接导致了始终生成dom。它只是控制dom的display属性，当v-show为true时，不做任何处理；当其为false时，生成的dom的display属性为none。</span><br><span class=\"line\">使用v-if可以有效的减少树的节点和渲染量，但也会导致树的不稳定；而使用v-show可以保持树的稳定，但不能减少树的节点和渲染量。</span><br><span class=\"line\">因此，在实际开发中，显示状态变化频繁的情况下应该使用v-show，以保持树的稳定；显示状态变化较少时应该使用v-if，以减少树的节点和渲染量。</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>组件事件</strong></p>\n</li>\n</ol>\n<img src=\"http://mdrs.yuanjin.tech/img/20201113134557.png\" alt=\"image-20201113134557175\" style=\"zoom:40%;\" />\n\n<p>抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理</p>\n<p>事件参数：子组件抛出事件时，传递给父组件的数据</p>\n<p>注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理</p>\n<p><a href=\"https://vuejs.bootcss.com/guide/components-custom-events.html\">事件</a></p>\n","site":{"data":{}},"length":536,"excerpt":"","more":"<p>在样式中可以用 ‘~@’定位到src目录<br>在script中用‘@’可定位到src目录</p>\n<ol>\n<li><p><strong>全局样式</strong></p>\n</li>\n<li><p><strong>v-if 和 v-show</strong></p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201113133827.png\" alt=\"image-20201113133827438\"></p>\n<hr>\n<p><img src=\"http://mdrs.yuanjin.tech/img/20201113134051.png\" alt=\"image-20201113134051281\"></p>\n<p><strong>面试题：v-if 和 v-show 有什么区别？</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-if能够控制是否生成vnode，也就间接控制了是否生成对应的dom。当v-if为true时，会生成对应的vnode，并生成对应的dom元素；当其为false时，不会生成对应的vnode，自然不会生成任何的dom元素。</span><br><span class=\"line\">v-show始终会生成vnode，也就间接导致了始终生成dom。它只是控制dom的display属性，当v-show为true时，不做任何处理；当其为false时，生成的dom的display属性为none。</span><br><span class=\"line\">使用v-if可以有效的减少树的节点和渲染量，但也会导致树的不稳定；而使用v-show可以保持树的稳定，但不能减少树的节点和渲染量。</span><br><span class=\"line\">因此，在实际开发中，显示状态变化频繁的情况下应该使用v-show，以保持树的稳定；显示状态变化较少时应该使用v-if，以减少树的节点和渲染量。</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>组件事件</strong></p>\n</li>\n</ol>\n<img src=\"http://mdrs.yuanjin.tech/img/20201113134557.png\" alt=\"image-20201113134557175\" style=\"zoom:40%;\" />\n\n<p>抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理</p>\n<p>事件参数：子组件抛出事件时，传递给父组件的数据</p>\n<p>注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理</p>\n<p><a href=\"https://vuejs.bootcss.com/guide/components-custom-events.html\">事件</a></p>\n"},{"title":"vue2中的组件声明周期","date":"2022-01-01T06:13:47.000Z","description":"vue2钩子函数的使用","comments":1,"toc":true,"_content":"\n# 组件生命周期\n\n<img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201206132819.png\" alt=\"image-20201206132819263\" style=\"zoom:50%;\" />\n\n# 常见应用\n\n> 不要死记硬背，要根据具体情况灵活处理\n\n## 加载远程数据\n\n```js\nexport default {\n  data(){\n    return {\n      news: []\n    }\n  },\n  async created(){\n    this.news = await getNews();\n  }\n}\n```\n\n## 直接操作DOM\n\n```js\nexport default {\n  data(){\n    return {\n      containerWidth:0,\n    \tcontainerHeight:0\n    }\n  },\n  mounted(){\n    this.containerWidth = this.$refs.container.clientWidth;\n    this.containerHeight = this.$refs.container.containerHeight;\n  }\n}\n```\n\n## 启动和清除计时器\n\n```js\nexport default {\n  data(){\n    return {\n      timer: null\n    }\n  },\n  created(){\n    this.timer = setInterval(()=>{\n     ... \n    }, 1000)\n  },\n  destroyed(){\n    clearInterval(this.timer);               \n  }\n}\n```\n\n","source":"_posts/组件生存周期.md","raw":"---\ntitle: vue2中的组件声明周期\ndate: 2022-01-01 14:13:47\ndescription: vue2钩子函数的使用\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n# 组件生命周期\n\n<img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201206132819.png\" alt=\"image-20201206132819263\" style=\"zoom:50%;\" />\n\n# 常见应用\n\n> 不要死记硬背，要根据具体情况灵活处理\n\n## 加载远程数据\n\n```js\nexport default {\n  data(){\n    return {\n      news: []\n    }\n  },\n  async created(){\n    this.news = await getNews();\n  }\n}\n```\n\n## 直接操作DOM\n\n```js\nexport default {\n  data(){\n    return {\n      containerWidth:0,\n    \tcontainerHeight:0\n    }\n  },\n  mounted(){\n    this.containerWidth = this.$refs.container.clientWidth;\n    this.containerHeight = this.$refs.container.containerHeight;\n  }\n}\n```\n\n## 启动和清除计时器\n\n```js\nexport default {\n  data(){\n    return {\n      timer: null\n    }\n  },\n  created(){\n    this.timer = setInterval(()=>{\n     ... \n    }, 1000)\n  },\n  destroyed(){\n    clearInterval(this.timer);               \n  }\n}\n```\n\n","slug":"组件生存周期","published":1,"updated":"2022-01-01T06:16:00.060Z","_id":"ckxvf7cmp000qccaxfp380c3f","layout":"post","photos":[],"link":"","content":"<h1 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h1><img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201206132819.png\" alt=\"image-20201206132819263\" style=\"zoom:50%;\" />\n\n<h1 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h1><blockquote>\n<p>不要死记硬背，要根据具体情况灵活处理</p>\n</blockquote>\n<h2 id=\"加载远程数据\"><a href=\"#加载远程数据\" class=\"headerlink\" title=\"加载远程数据\"></a>加载远程数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">news</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.news = <span class=\"keyword\">await</span> getNews();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接操作DOM\"><a href=\"#直接操作DOM\" class=\"headerlink\" title=\"直接操作DOM\"></a>直接操作DOM</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">containerWidth</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    \t<span class=\"attr\">containerHeight</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.containerWidth = <span class=\"built_in\">this</span>.$refs.container.clientWidth;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.containerHeight = <span class=\"built_in\">this</span>.$refs.container.containerHeight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动和清除计时器\"><a href=\"#启动和清除计时器\" class=\"headerlink\" title=\"启动和清除计时器\"></a>启动和清除计时器</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">timer</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     ... </span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">destroyed</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.timer);               </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":638,"excerpt":"","more":"<h1 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h1><img src=\"http://mdrs.yuanjin.tech/img/20200908051939.png\" alt=\"image-20200908051939745\" style=\"zoom:50%;\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201206132819.png\" alt=\"image-20201206132819263\" style=\"zoom:50%;\" />\n\n<h1 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h1><blockquote>\n<p>不要死记硬背，要根据具体情况灵活处理</p>\n</blockquote>\n<h2 id=\"加载远程数据\"><a href=\"#加载远程数据\" class=\"headerlink\" title=\"加载远程数据\"></a>加载远程数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">news</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.news = <span class=\"keyword\">await</span> getNews();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接操作DOM\"><a href=\"#直接操作DOM\" class=\"headerlink\" title=\"直接操作DOM\"></a>直接操作DOM</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">containerWidth</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    \t<span class=\"attr\">containerHeight</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.containerWidth = <span class=\"built_in\">this</span>.$refs.container.clientWidth;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.containerHeight = <span class=\"built_in\">this</span>.$refs.container.containerHeight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动和清除计时器\"><a href=\"#启动和清除计时器\" class=\"headerlink\" title=\"启动和清除计时器\"></a>启动和清除计时器</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">timer</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     ... </span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">destroyed</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.timer);               </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue2中的组件通信","date":"2022-01-01T06:02:47.000Z","description":"vue2中的组件通信","comments":1,"toc":true,"_content":"\n面试题：vue组件之间有哪些通信方式？\n\n# 父子组件通信\n\n> 绝大部分`vue`本身提供的通信方式，都是父子组件通信\n\n## `prop`\n\n最常见的组件通信方式之一，由父组件传递到子组件\n\n## `event`\n\n最常见的组件通信方式之一，当子组件发生了某些事，可以通过`event`通知父组件\n\n## `style`和`class`\n\n父组件可以向子组件传递`style`和`class`，它们会合并到子组件的根元素中\n\n**示例**\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <HelloWorld\n      style=\"color:red\"\n      class=\"hello\"\n      msg=\"Welcome to Your Vue.js App\"\n    />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\n\nexport default {\n  components: {\n    HelloWorld,\n  },\n};\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div class=\"world\" style=\"text-align:center\">\n    <h1>{{msg}}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String,\n  },\n};\n</script>\n```\n\n渲染结果：\n\n```html\n<div id=\"app\">\n  <div class=\"hello world\" style=\"color:red; text-aling:center\">\n    <h1>Welcome to Your Vue.js App</h1>\n  </div>\n</div>\n```\n\n\n\n## `attribute`\n\n如果父组件传递了一些属性到子组件，但子组件并没有声明这些属性，则它们称之为`attribute`，这些属性会直接附着在子组件的根元素上\n\n> 不包括`style`和`class`，它们会被特殊处理\n\n**示例**\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <!-- 除 msg 外，其他均为 attribute -->\n    <HelloWorld\n      data-a=\"1\"\n      data-b=\"2\"\n      msg=\"Welcome to Your Vue.js App\"\n    />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\n\nexport default {\n  components: {\n    HelloWorld,\n  },\n};\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div>\n    <h1>{{msg}}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String,\n  },\n  created() {\n    console.log(this.$attrs); // 得到： { \"data-a\": \"1\", \"data-b\": \"2\" }\n  },\n};\n</script>\n```\n\n渲染结果：\n\n```html\n<div id=\"app\">\n  <div data-a=\"1\" data-b=\"2\">\n    <h1>Welcome to Your Vue.js App</h1>\n  </div>\n</div>\n```\n\n子组件可以通过`inheritAttrs: false`配置，禁止将`attribute`附着在子组件的根元素上，但不影响通过`$attrs`获取\n\n## `natvie`修饰符\n\n在注册事件时，父组件可以使用`native`修饰符，将事件注册到子组件的根元素上\n\n**示例**\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <HelloWorld @click.native=\"handleClick\" />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\n\nexport default {\n  components: {\n    HelloWorld,\n  },\n  methods: {\n    handleClick() {\n      console.log(1);\n    },\n  },\n};\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div>\n    <h1>Hello World</h1>\n  </div>\n</template>\n```\n\n渲染结果\n\n```html\n<div id=\"app\">\n  <!-- 点击该 div，会输出 1 -->\n  <div>\n    <h1>Hello World</h1>\n  </div>\n</div>\n```\n\n## `$listeners`\n\n子组件可以通过`$listeners`获取父组件传递过来的所有事件处理函数\n\n## `v-model`\n\n后续章节讲解\n\n## `sync`修饰符\n\n和`v-model`的作用类似，用于双向绑定，不同点在于`v-model`只能针对一个数据进行双向绑定，而`sync`修饰符没有限制\n\n示例\n\n子组件\n\n```vue\n<template>\n  <div>\n    <p>\n      <button @click=\"$emit(`update:num1`, num1 - 1)\">-</button>\n      {{ num1 }}\n      <button @click=\"$emit(`update:num1`, num1 + 1)\">+</button>\n    </p>\n    <p>\n      <button @click=\"$emit(`update:num2`, num2 - 1)\">-</button>\n      {{ num2 }}\n      <button @click=\"$emit(`update:num2`, num2 + 1)\">+</button>\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\"num1\", \"num2\"],\n};\n</script>\n```\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <Numbers :num1.sync=\"n1\" :num2.sync=\"n2\" />\n    <!-- 等同于 -->\n    <Numbers\n      :num1=\"n1\"\n      @update:num1=\"n1 = $event\"\n      :num2=\"n2\"\n      @update:num2=\"n2 = $event\"\n    />\n  </div>\n</template>\n\n<script>\nimport Numbers from \"./components/Numbers.vue\";\n\nexport default {\n  components: {\n    Numbers,\n  },\n  data() {\n    return {\n      n1: 0,\n      n2: 0,\n    };\n  },\n};\n</script>\n```\n\n## `$parent`和`$children`\n\n在组件内部，可以通过`$parent`和`$children`属性，分别得到当前组件的父组件和子组件实例\n\n## `$slots`和`$scopedSlots`\n\n后续章节讲解\n\n## `ref`\n\n父组件可以通过`ref`获取到子组件的实例\n\n# 跨组件通信\n\n## `Provide`和`Inject`\n\n示例\n\n```js\n// 父级组件提供 'foo'\nvar Provider = {\n  provide: {\n    foo: 'bar'\n  },\n  // ...\n}\n\n// 组件注入 'foo'\nvar Child = {\n  inject: ['foo'],\n  created () {\n    console.log(this.foo) // => \"bar\"\n  }\n  // ...\n}\n```\n\n详见：https://cn.vuejs.org/v2/api/?#provide-inject\n\n## `router`\n\n如果一个组件改变了地址栏，所有监听地址栏的组件都会做出相应反应\n\n最常见的场景就是通过点击`router-link`组件改变了地址，`router-view`组件就渲染其他内容\n\n## `vuex`\n\n适用于大型项目的数据仓库\n\n## `store`模式\n\n适用于中小型项目的数据仓库\n\n```js\n// store.js\nconst store = {\n  loginUser: ...,\n  setting: ...\n}\n\n// compA\nconst compA = {\n  data(){\n    return {\n      loginUser: store.loginUser\n    }\n  }\n}\n\n// compB\nconst compB = {\n  data(){\n    return {\n      setting: store.setting,\n      loginUser: store.loginUser\n    }\n  }\n}\n```\n\n\n\n## `eventbus`\n\n组件通知事件总线发生了某件事，事件总线通知其他监听该事件的所有组件运行某个函数\n\n","source":"_posts/组件通信.md","raw":"---\ntitle: vue2中的组件通信\ndate: 2022-01-01 14:02:47\ndescription: vue2中的组件通信\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n   - 面试题\n---\n\n面试题：vue组件之间有哪些通信方式？\n\n# 父子组件通信\n\n> 绝大部分`vue`本身提供的通信方式，都是父子组件通信\n\n## `prop`\n\n最常见的组件通信方式之一，由父组件传递到子组件\n\n## `event`\n\n最常见的组件通信方式之一，当子组件发生了某些事，可以通过`event`通知父组件\n\n## `style`和`class`\n\n父组件可以向子组件传递`style`和`class`，它们会合并到子组件的根元素中\n\n**示例**\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <HelloWorld\n      style=\"color:red\"\n      class=\"hello\"\n      msg=\"Welcome to Your Vue.js App\"\n    />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\n\nexport default {\n  components: {\n    HelloWorld,\n  },\n};\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div class=\"world\" style=\"text-align:center\">\n    <h1>{{msg}}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String,\n  },\n};\n</script>\n```\n\n渲染结果：\n\n```html\n<div id=\"app\">\n  <div class=\"hello world\" style=\"color:red; text-aling:center\">\n    <h1>Welcome to Your Vue.js App</h1>\n  </div>\n</div>\n```\n\n\n\n## `attribute`\n\n如果父组件传递了一些属性到子组件，但子组件并没有声明这些属性，则它们称之为`attribute`，这些属性会直接附着在子组件的根元素上\n\n> 不包括`style`和`class`，它们会被特殊处理\n\n**示例**\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <!-- 除 msg 外，其他均为 attribute -->\n    <HelloWorld\n      data-a=\"1\"\n      data-b=\"2\"\n      msg=\"Welcome to Your Vue.js App\"\n    />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\n\nexport default {\n  components: {\n    HelloWorld,\n  },\n};\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div>\n    <h1>{{msg}}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String,\n  },\n  created() {\n    console.log(this.$attrs); // 得到： { \"data-a\": \"1\", \"data-b\": \"2\" }\n  },\n};\n</script>\n```\n\n渲染结果：\n\n```html\n<div id=\"app\">\n  <div data-a=\"1\" data-b=\"2\">\n    <h1>Welcome to Your Vue.js App</h1>\n  </div>\n</div>\n```\n\n子组件可以通过`inheritAttrs: false`配置，禁止将`attribute`附着在子组件的根元素上，但不影响通过`$attrs`获取\n\n## `natvie`修饰符\n\n在注册事件时，父组件可以使用`native`修饰符，将事件注册到子组件的根元素上\n\n**示例**\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <HelloWorld @click.native=\"handleClick\" />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\n\nexport default {\n  components: {\n    HelloWorld,\n  },\n  methods: {\n    handleClick() {\n      console.log(1);\n    },\n  },\n};\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div>\n    <h1>Hello World</h1>\n  </div>\n</template>\n```\n\n渲染结果\n\n```html\n<div id=\"app\">\n  <!-- 点击该 div，会输出 1 -->\n  <div>\n    <h1>Hello World</h1>\n  </div>\n</div>\n```\n\n## `$listeners`\n\n子组件可以通过`$listeners`获取父组件传递过来的所有事件处理函数\n\n## `v-model`\n\n后续章节讲解\n\n## `sync`修饰符\n\n和`v-model`的作用类似，用于双向绑定，不同点在于`v-model`只能针对一个数据进行双向绑定，而`sync`修饰符没有限制\n\n示例\n\n子组件\n\n```vue\n<template>\n  <div>\n    <p>\n      <button @click=\"$emit(`update:num1`, num1 - 1)\">-</button>\n      {{ num1 }}\n      <button @click=\"$emit(`update:num1`, num1 + 1)\">+</button>\n    </p>\n    <p>\n      <button @click=\"$emit(`update:num2`, num2 - 1)\">-</button>\n      {{ num2 }}\n      <button @click=\"$emit(`update:num2`, num2 + 1)\">+</button>\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\"num1\", \"num2\"],\n};\n</script>\n```\n\n父组件\n\n```vue\n<template>\n  <div id=\"app\">\n    <Numbers :num1.sync=\"n1\" :num2.sync=\"n2\" />\n    <!-- 等同于 -->\n    <Numbers\n      :num1=\"n1\"\n      @update:num1=\"n1 = $event\"\n      :num2=\"n2\"\n      @update:num2=\"n2 = $event\"\n    />\n  </div>\n</template>\n\n<script>\nimport Numbers from \"./components/Numbers.vue\";\n\nexport default {\n  components: {\n    Numbers,\n  },\n  data() {\n    return {\n      n1: 0,\n      n2: 0,\n    };\n  },\n};\n</script>\n```\n\n## `$parent`和`$children`\n\n在组件内部，可以通过`$parent`和`$children`属性，分别得到当前组件的父组件和子组件实例\n\n## `$slots`和`$scopedSlots`\n\n后续章节讲解\n\n## `ref`\n\n父组件可以通过`ref`获取到子组件的实例\n\n# 跨组件通信\n\n## `Provide`和`Inject`\n\n示例\n\n```js\n// 父级组件提供 'foo'\nvar Provider = {\n  provide: {\n    foo: 'bar'\n  },\n  // ...\n}\n\n// 组件注入 'foo'\nvar Child = {\n  inject: ['foo'],\n  created () {\n    console.log(this.foo) // => \"bar\"\n  }\n  // ...\n}\n```\n\n详见：https://cn.vuejs.org/v2/api/?#provide-inject\n\n## `router`\n\n如果一个组件改变了地址栏，所有监听地址栏的组件都会做出相应反应\n\n最常见的场景就是通过点击`router-link`组件改变了地址，`router-view`组件就渲染其他内容\n\n## `vuex`\n\n适用于大型项目的数据仓库\n\n## `store`模式\n\n适用于中小型项目的数据仓库\n\n```js\n// store.js\nconst store = {\n  loginUser: ...,\n  setting: ...\n}\n\n// compA\nconst compA = {\n  data(){\n    return {\n      loginUser: store.loginUser\n    }\n  }\n}\n\n// compB\nconst compB = {\n  data(){\n    return {\n      setting: store.setting,\n      loginUser: store.loginUser\n    }\n  }\n}\n```\n\n\n\n## `eventbus`\n\n组件通知事件总线发生了某件事，事件总线通知其他监听该事件的所有组件运行某个函数\n\n","slug":"组件通信","published":1,"updated":"2022-01-01T06:25:02.952Z","_id":"ckxvf7cmr000rccax4pwpcvjm","layout":"post","photos":[],"link":"","content":"<p>面试题：vue组件之间有哪些通信方式？</p>\n<h1 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h1><blockquote>\n<p>绝大部分<code>vue</code>本身提供的通信方式，都是父子组件通信</p>\n</blockquote>\n<h2 id=\"prop\"><a href=\"#prop\" class=\"headerlink\" title=\"prop\"></a><code>prop</code></h2><p>最常见的组件通信方式之一，由父组件传递到子组件</p>\n<h2 id=\"event\"><a href=\"#event\" class=\"headerlink\" title=\"event\"></a><code>event</code></h2><p>最常见的组件通信方式之一，当子组件发生了某些事，可以通过<code>event</code>通知父组件</p>\n<h2 id=\"style和class\"><a href=\"#style和class\" class=\"headerlink\" title=\"style和class\"></a><code>style</code>和<code>class</code></h2><p>父组件可以向子组件传递<code>style</code>和<code>class</code>，它们会合并到子组件的根元素中</p>\n<p><strong>示例</strong></p>\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;HelloWorld</span><br><span class=\"line\">      style=&quot;color:red&quot;</span><br><span class=\"line\">      class=&quot;hello&quot;</span><br><span class=\"line\">      msg=&quot;Welcome to Your Vue.js App&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;world&quot; style=&quot;text-align:center&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello world&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:red; text-aling:center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to Your Vue.js App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a><code>attribute</code></h2><p>如果父组件传递了一些属性到子组件，但子组件并没有声明这些属性，则它们称之为<code>attribute</code>，这些属性会直接附着在子组件的根元素上</p>\n<blockquote>\n<p>不包括<code>style</code>和<code>class</code>，它们会被特殊处理</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 除 msg 外，其他均为 attribute --&gt;</span><br><span class=\"line\">    &lt;HelloWorld</span><br><span class=\"line\">      data-a=&quot;1&quot;</span><br><span class=\"line\">      data-b=&quot;2&quot;</span><br><span class=\"line\">      msg=&quot;Welcome to Your Vue.js App&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(this.$attrs); // 得到： &#123; &quot;data-a&quot;: &quot;1&quot;, &quot;data-b&quot;: &quot;2&quot; &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-a</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">data-b</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to Your Vue.js App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件可以通过<code>inheritAttrs: false</code>配置，禁止将<code>attribute</code>附着在子组件的根元素上，但不影响通过<code>$attrs</code>获取</p>\n<h2 id=\"natvie修饰符\"><a href=\"#natvie修饰符\" class=\"headerlink\" title=\"natvie修饰符\"></a><code>natvie</code>修饰符</h2><p>在注册事件时，父组件可以使用<code>native</code>修饰符，将事件注册到子组件的根元素上</p>\n<p><strong>示例</strong></p>\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;HelloWorld @click.native=&quot;handleClick&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleClick() &#123;</span><br><span class=\"line\">      console.log(1);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 点击该 div，会输出 1 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"listeners\"><a href=\"#listeners\" class=\"headerlink\" title=\"$listeners\"></a><code>$listeners</code></h2><p>子组件可以通过<code>$listeners</code>获取父组件传递过来的所有事件处理函数</p>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a><code>v-model</code></h2><p>后续章节讲解</p>\n<h2 id=\"sync修饰符\"><a href=\"#sync修饰符\" class=\"headerlink\" title=\"sync修饰符\"></a><code>sync</code>修饰符</h2><p>和<code>v-model</code>的作用类似，用于双向绑定，不同点在于<code>v-model</code>只能针对一个数据进行双向绑定，而<code>sync</code>修饰符没有限制</p>\n<p>示例</p>\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num1`, num1 - 1)&quot;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &#123;&#123; num1 &#125;&#125;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num1`, num1 + 1)&quot;&gt;+&lt;/button&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num2`, num2 - 1)&quot;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &#123;&#123; num2 &#125;&#125;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num2`, num2 + 1)&quot;&gt;+&lt;/button&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: [&quot;num1&quot;, &quot;num2&quot;],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;Numbers :num1.sync=&quot;n1&quot; :num2.sync=&quot;n2&quot; /&gt;</span><br><span class=\"line\">    &lt;!-- 等同于 --&gt;</span><br><span class=\"line\">    &lt;Numbers</span><br><span class=\"line\">      :num1=&quot;n1&quot;</span><br><span class=\"line\">      @update:num1=&quot;n1 = $event&quot;</span><br><span class=\"line\">      :num2=&quot;n2&quot;</span><br><span class=\"line\">      @update:num2=&quot;n2 = $event&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Numbers from &quot;./components/Numbers.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Numbers,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      n1: 0,</span><br><span class=\"line\">      n2: 0,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"parent和-children\"><a href=\"#parent和-children\" class=\"headerlink\" title=\"$parent和$children\"></a><code>$parent</code>和<code>$children</code></h2><p>在组件内部，可以通过<code>$parent</code>和<code>$children</code>属性，分别得到当前组件的父组件和子组件实例</p>\n<h2 id=\"slots和-scopedSlots\"><a href=\"#slots和-scopedSlots\" class=\"headerlink\" title=\"$slots和$scopedSlots\"></a><code>$slots</code>和<code>$scopedSlots</code></h2><p>后续章节讲解</p>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><code>ref</code></h2><p>父组件可以通过<code>ref</code>获取到子组件的实例</p>\n<h1 id=\"跨组件通信\"><a href=\"#跨组件通信\" class=\"headerlink\" title=\"跨组件通信\"></a>跨组件通信</h1><h2 id=\"Provide和Inject\"><a href=\"#Provide和Inject\" class=\"headerlink\" title=\"Provide和Inject\"></a><code>Provide</code>和<code>Inject</code></h2><p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父级组件提供 &#x27;foo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Provider = &#123;</span><br><span class=\"line\">  <span class=\"attr\">provide</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件注入 &#x27;foo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">&#x27;foo&#x27;</span>],</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.foo) <span class=\"comment\">// =&gt; &quot;bar&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详见：<a href=\"https://cn.vuejs.org/v2/api/#provide-inject\">https://cn.vuejs.org/v2/api/?#provide-inject</a></p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a><code>router</code></h2><p>如果一个组件改变了地址栏，所有监听地址栏的组件都会做出相应反应</p>\n<p>最常见的场景就是通过点击<code>router-link</code>组件改变了地址，<code>router-view</code>组件就渲染其他内容</p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a><code>vuex</code></h2><p>适用于大型项目的数据仓库</p>\n<h2 id=\"store模式\"><a href=\"#store模式\" class=\"headerlink\" title=\"store模式\"></a><code>store</code>模式</h2><p>适用于中小型项目的数据仓库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">  <span class=\"attr\">loginUser</span>: ...,</span><br><span class=\"line\">  <span class=\"attr\">setting</span>: ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compA</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compA = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">loginUser</span>: store.loginUser</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compB</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compB = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">setting</span>: store.setting,</span><br><span class=\"line\">      <span class=\"attr\">loginUser</span>: store.loginUser</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"eventbus\"><a href=\"#eventbus\" class=\"headerlink\" title=\"eventbus\"></a><code>eventbus</code></h2><p>组件通知事件总线发生了某件事，事件总线通知其他监听该事件的所有组件运行某个函数</p>\n","site":{"data":{}},"length":4886,"excerpt":"","more":"<p>面试题：vue组件之间有哪些通信方式？</p>\n<h1 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h1><blockquote>\n<p>绝大部分<code>vue</code>本身提供的通信方式，都是父子组件通信</p>\n</blockquote>\n<h2 id=\"prop\"><a href=\"#prop\" class=\"headerlink\" title=\"prop\"></a><code>prop</code></h2><p>最常见的组件通信方式之一，由父组件传递到子组件</p>\n<h2 id=\"event\"><a href=\"#event\" class=\"headerlink\" title=\"event\"></a><code>event</code></h2><p>最常见的组件通信方式之一，当子组件发生了某些事，可以通过<code>event</code>通知父组件</p>\n<h2 id=\"style和class\"><a href=\"#style和class\" class=\"headerlink\" title=\"style和class\"></a><code>style</code>和<code>class</code></h2><p>父组件可以向子组件传递<code>style</code>和<code>class</code>，它们会合并到子组件的根元素中</p>\n<p><strong>示例</strong></p>\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;HelloWorld</span><br><span class=\"line\">      style=&quot;color:red&quot;</span><br><span class=\"line\">      class=&quot;hello&quot;</span><br><span class=\"line\">      msg=&quot;Welcome to Your Vue.js App&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;world&quot; style=&quot;text-align:center&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello world&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:red; text-aling:center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to Your Vue.js App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a><code>attribute</code></h2><p>如果父组件传递了一些属性到子组件，但子组件并没有声明这些属性，则它们称之为<code>attribute</code>，这些属性会直接附着在子组件的根元素上</p>\n<blockquote>\n<p>不包括<code>style</code>和<code>class</code>，它们会被特殊处理</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 除 msg 外，其他均为 attribute --&gt;</span><br><span class=\"line\">    &lt;HelloWorld</span><br><span class=\"line\">      data-a=&quot;1&quot;</span><br><span class=\"line\">      data-b=&quot;2&quot;</span><br><span class=\"line\">      msg=&quot;Welcome to Your Vue.js App&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(this.$attrs); // 得到： &#123; &quot;data-a&quot;: &quot;1&quot;, &quot;data-b&quot;: &quot;2&quot; &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-a</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">data-b</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to Your Vue.js App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件可以通过<code>inheritAttrs: false</code>配置，禁止将<code>attribute</code>附着在子组件的根元素上，但不影响通过<code>$attrs</code>获取</p>\n<h2 id=\"natvie修饰符\"><a href=\"#natvie修饰符\" class=\"headerlink\" title=\"natvie修饰符\"></a><code>natvie</code>修饰符</h2><p>在注册事件时，父组件可以使用<code>native</code>修饰符，将事件注册到子组件的根元素上</p>\n<p><strong>示例</strong></p>\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;HelloWorld @click.native=&quot;handleClick&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleClick() &#123;</span><br><span class=\"line\">      console.log(1);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 点击该 div，会输出 1 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"listeners\"><a href=\"#listeners\" class=\"headerlink\" title=\"$listeners\"></a><code>$listeners</code></h2><p>子组件可以通过<code>$listeners</code>获取父组件传递过来的所有事件处理函数</p>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a><code>v-model</code></h2><p>后续章节讲解</p>\n<h2 id=\"sync修饰符\"><a href=\"#sync修饰符\" class=\"headerlink\" title=\"sync修饰符\"></a><code>sync</code>修饰符</h2><p>和<code>v-model</code>的作用类似，用于双向绑定，不同点在于<code>v-model</code>只能针对一个数据进行双向绑定，而<code>sync</code>修饰符没有限制</p>\n<p>示例</p>\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num1`, num1 - 1)&quot;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &#123;&#123; num1 &#125;&#125;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num1`, num1 + 1)&quot;&gt;+&lt;/button&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num2`, num2 - 1)&quot;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &#123;&#123; num2 &#125;&#125;</span><br><span class=\"line\">      &lt;button @click=&quot;$emit(`update:num2`, num2 + 1)&quot;&gt;+&lt;/button&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: [&quot;num1&quot;, &quot;num2&quot;],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;Numbers :num1.sync=&quot;n1&quot; :num2.sync=&quot;n2&quot; /&gt;</span><br><span class=\"line\">    &lt;!-- 等同于 --&gt;</span><br><span class=\"line\">    &lt;Numbers</span><br><span class=\"line\">      :num1=&quot;n1&quot;</span><br><span class=\"line\">      @update:num1=&quot;n1 = $event&quot;</span><br><span class=\"line\">      :num2=&quot;n2&quot;</span><br><span class=\"line\">      @update:num2=&quot;n2 = $event&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Numbers from &quot;./components/Numbers.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Numbers,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      n1: 0,</span><br><span class=\"line\">      n2: 0,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"parent和-children\"><a href=\"#parent和-children\" class=\"headerlink\" title=\"$parent和$children\"></a><code>$parent</code>和<code>$children</code></h2><p>在组件内部，可以通过<code>$parent</code>和<code>$children</code>属性，分别得到当前组件的父组件和子组件实例</p>\n<h2 id=\"slots和-scopedSlots\"><a href=\"#slots和-scopedSlots\" class=\"headerlink\" title=\"$slots和$scopedSlots\"></a><code>$slots</code>和<code>$scopedSlots</code></h2><p>后续章节讲解</p>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><code>ref</code></h2><p>父组件可以通过<code>ref</code>获取到子组件的实例</p>\n<h1 id=\"跨组件通信\"><a href=\"#跨组件通信\" class=\"headerlink\" title=\"跨组件通信\"></a>跨组件通信</h1><h2 id=\"Provide和Inject\"><a href=\"#Provide和Inject\" class=\"headerlink\" title=\"Provide和Inject\"></a><code>Provide</code>和<code>Inject</code></h2><p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父级组件提供 &#x27;foo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Provider = &#123;</span><br><span class=\"line\">  <span class=\"attr\">provide</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件注入 &#x27;foo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">&#x27;foo&#x27;</span>],</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.foo) <span class=\"comment\">// =&gt; &quot;bar&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详见：<a href=\"https://cn.vuejs.org/v2/api/#provide-inject\">https://cn.vuejs.org/v2/api/?#provide-inject</a></p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a><code>router</code></h2><p>如果一个组件改变了地址栏，所有监听地址栏的组件都会做出相应反应</p>\n<p>最常见的场景就是通过点击<code>router-link</code>组件改变了地址，<code>router-view</code>组件就渲染其他内容</p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a><code>vuex</code></h2><p>适用于大型项目的数据仓库</p>\n<h2 id=\"store模式\"><a href=\"#store模式\" class=\"headerlink\" title=\"store模式\"></a><code>store</code>模式</h2><p>适用于中小型项目的数据仓库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">  <span class=\"attr\">loginUser</span>: ...,</span><br><span class=\"line\">  <span class=\"attr\">setting</span>: ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compA</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compA = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">loginUser</span>: store.loginUser</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compB</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compB = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">setting</span>: store.setting,</span><br><span class=\"line\">      <span class=\"attr\">loginUser</span>: store.loginUser</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"eventbus\"><a href=\"#eventbus\" class=\"headerlink\" title=\"eventbus\"></a><code>eventbus</code></h2><p>组件通知事件总线发生了某件事，事件总线通知其他监听该事件的所有组件运行某个函数</p>\n"},{"title":"数据与跨域","date":"2022-01-01T06:02:47.000Z","description":"如何处理数据和跨域以及使用mock来模拟数据","comments":1,"toc":true,"_content":"\n\n>\n> vue cli: https://cli.vuejs.org/zh/\n>\n> axios: https://github.com/axios/axios\n>\n> mockjs：http://mockjs.com/\n\n# 远程获取数据的意义\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201204145137.png\" alt=\"image-20201204145137500\" style=\"zoom:40%;\" />\n\n# 开发环境有跨域问题\n\n```mermaid\nsequenceDiagram\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>后端测试服务器: ajax 跨域：http://test-data:3000/api/news\n后端测试服务器->>浏览器: JSON数据\nrect rgb(224,74,74)\nNote right of 浏览器: 浏览器阻止数据移交\nend\n```\n\n# 生产环境没有跨域问题\n\n```mermaid\nsequenceDiagram\n浏览器->>服务器: http://www.my-site.com/\n服务器->>浏览器: 页面\n浏览器->>服务器: ajax：http://www.my-site.com/api/news\n服务器->>浏览器: JSON数据\n```\n\n```mermaid\nsequenceDiagram\n浏览器->>静态资源服务器: http://www.my-site.com/\n静态资源服务器->>浏览器: 页面\n浏览器->>数据服务器: ajax 跨域：http://api.my-site.com/api/news\n数据服务器->>浏览器: [允许www.my-site.com]JSON数据\n```\n\n# 解决开发环境的跨域问题\n\n```mermaid\nsequenceDiagram\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>前端开发服务器: ajax：http://localhost:8080/api/news\n前端开发服务器->>后端测试服务器: 代理请求：http://test-data:3000/api/news\n后端测试服务器->>前端开发服务器: JSON数据\n前端开发服务器->>浏览器: JSON数据\n```\n\n# 为什么要Mock数据\n\n```mermaid\nsequenceDiagram\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>前端开发服务器: ajax：http://localhost:8080/api/news\n前端开发服务器->>后端测试服务器: 代理请求：http://test-data:3000/api/news\n后端测试服务器->>前端开发服务器: 404 （后端正在开发中）\n前端开发服务器->>浏览器: 404\n```\n\n```mermaid\nsequenceDiagram\nparticipant 浏览器\nparticipant MockJS\nparticipant 前端开发服务器\nactivate MockJS\nNote left of MockJS: 定义ajax拦截规则\ndeactivate MockJS\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>MockJS: ajax：http://localhost:8080/api/news\nMockJS->>浏览器: 模拟的JSON数据\n```\n\n","source":"_posts/获取数据.md","raw":"---\ntitle: 数据与跨域\ndate: 2022-01-01 14:02:47\ndescription: 如何处理数据和跨域以及使用mock来模拟数据\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n\t- 前端学习笔记 \n\t- vue\ntags:   #标签\n\t- vue2\n\t- 前端\n---\n\n\n>\n> vue cli: https://cli.vuejs.org/zh/\n>\n> axios: https://github.com/axios/axios\n>\n> mockjs：http://mockjs.com/\n\n# 远程获取数据的意义\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201204145137.png\" alt=\"image-20201204145137500\" style=\"zoom:40%;\" />\n\n# 开发环境有跨域问题\n\n```mermaid\nsequenceDiagram\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>后端测试服务器: ajax 跨域：http://test-data:3000/api/news\n后端测试服务器->>浏览器: JSON数据\nrect rgb(224,74,74)\nNote right of 浏览器: 浏览器阻止数据移交\nend\n```\n\n# 生产环境没有跨域问题\n\n```mermaid\nsequenceDiagram\n浏览器->>服务器: http://www.my-site.com/\n服务器->>浏览器: 页面\n浏览器->>服务器: ajax：http://www.my-site.com/api/news\n服务器->>浏览器: JSON数据\n```\n\n```mermaid\nsequenceDiagram\n浏览器->>静态资源服务器: http://www.my-site.com/\n静态资源服务器->>浏览器: 页面\n浏览器->>数据服务器: ajax 跨域：http://api.my-site.com/api/news\n数据服务器->>浏览器: [允许www.my-site.com]JSON数据\n```\n\n# 解决开发环境的跨域问题\n\n```mermaid\nsequenceDiagram\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>前端开发服务器: ajax：http://localhost:8080/api/news\n前端开发服务器->>后端测试服务器: 代理请求：http://test-data:3000/api/news\n后端测试服务器->>前端开发服务器: JSON数据\n前端开发服务器->>浏览器: JSON数据\n```\n\n# 为什么要Mock数据\n\n```mermaid\nsequenceDiagram\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>前端开发服务器: ajax：http://localhost:8080/api/news\n前端开发服务器->>后端测试服务器: 代理请求：http://test-data:3000/api/news\n后端测试服务器->>前端开发服务器: 404 （后端正在开发中）\n前端开发服务器->>浏览器: 404\n```\n\n```mermaid\nsequenceDiagram\nparticipant 浏览器\nparticipant MockJS\nparticipant 前端开发服务器\nactivate MockJS\nNote left of MockJS: 定义ajax拦截规则\ndeactivate MockJS\n浏览器->>前端开发服务器: http://localhost:8080/\n前端开发服务器->>浏览器: 页面\n浏览器->>MockJS: ajax：http://localhost:8080/api/news\nMockJS->>浏览器: 模拟的JSON数据\n```\n\n","slug":"获取数据","published":1,"updated":"2022-01-01T06:12:54.797Z","_id":"ckxvf7cmt000sccax7c8s0cq9","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>vue cli: <a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<p>axios: <a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></p>\n<p>mockjs：<a href=\"http://mockjs.com/\">http://mockjs.com/</a></p>\n</blockquote>\n<h1 id=\"远程获取数据的意义\"><a href=\"#远程获取数据的意义\" class=\"headerlink\" title=\"远程获取数据的意义\"></a>远程获取数据的意义</h1><img src=\"http://mdrs.yuanjin.tech/img/20201204145137.png\" alt=\"image-20201204145137500\" style=\"zoom:40%;\" />\n\n<h1 id=\"开发环境有跨域问题\"><a href=\"#开发环境有跨域问题\" class=\"headerlink\" title=\"开发环境有跨域问题\"></a>开发环境有跨域问题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;后端测试服务器: ajax 跨域：http://test-data:3000/api/news</span><br><span class=\"line\">后端测试服务器-&gt;&gt;浏览器: JSON数据</span><br><span class=\"line\">rect rgb(224,74,74)</span><br><span class=\"line\">Note right of 浏览器: 浏览器阻止数据移交</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"生产环境没有跨域问题\"><a href=\"#生产环境没有跨域问题\" class=\"headerlink\" title=\"生产环境没有跨域问题\"></a>生产环境没有跨域问题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;服务器: http://www.my-site.com/</span><br><span class=\"line\">服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;服务器: ajax：http://www.my-site.com/api/news</span><br><span class=\"line\">服务器-&gt;&gt;浏览器: JSON数据</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;静态资源服务器: http://www.my-site.com/</span><br><span class=\"line\">静态资源服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;数据服务器: ajax 跨域：http://api.my-site.com/api/news</span><br><span class=\"line\">数据服务器-&gt;&gt;浏览器: [允许www.my-site.com]JSON数据</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决开发环境的跨域问题\"><a href=\"#解决开发环境的跨域问题\" class=\"headerlink\" title=\"解决开发环境的跨域问题\"></a>解决开发环境的跨域问题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: ajax：http://localhost:8080/api/news</span><br><span class=\"line\">前端开发服务器-&gt;&gt;后端测试服务器: 代理请求：http://test-data:3000/api/news</span><br><span class=\"line\">后端测试服务器-&gt;&gt;前端开发服务器: JSON数据</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: JSON数据</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"为什么要Mock数据\"><a href=\"#为什么要Mock数据\" class=\"headerlink\" title=\"为什么要Mock数据\"></a>为什么要Mock数据</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: ajax：http://localhost:8080/api/news</span><br><span class=\"line\">前端开发服务器-&gt;&gt;后端测试服务器: 代理请求：http://test-data:3000/api/news</span><br><span class=\"line\">后端测试服务器-&gt;&gt;前端开发服务器: 404 （后端正在开发中）</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 404</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">participant 浏览器</span><br><span class=\"line\">participant MockJS</span><br><span class=\"line\">participant 前端开发服务器</span><br><span class=\"line\">activate MockJS</span><br><span class=\"line\">Note left of MockJS: 定义ajax拦截规则</span><br><span class=\"line\">deactivate MockJS</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;MockJS: ajax：http://localhost:8080/api/news</span><br><span class=\"line\">MockJS-&gt;&gt;浏览器: 模拟的JSON数据</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1487,"excerpt":"","more":"<blockquote>\n<p>vue cli: <a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<p>axios: <a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></p>\n<p>mockjs：<a href=\"http://mockjs.com/\">http://mockjs.com/</a></p>\n</blockquote>\n<h1 id=\"远程获取数据的意义\"><a href=\"#远程获取数据的意义\" class=\"headerlink\" title=\"远程获取数据的意义\"></a>远程获取数据的意义</h1><img src=\"http://mdrs.yuanjin.tech/img/20201204145137.png\" alt=\"image-20201204145137500\" style=\"zoom:40%;\" />\n\n<h1 id=\"开发环境有跨域问题\"><a href=\"#开发环境有跨域问题\" class=\"headerlink\" title=\"开发环境有跨域问题\"></a>开发环境有跨域问题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;后端测试服务器: ajax 跨域：http://test-data:3000/api/news</span><br><span class=\"line\">后端测试服务器-&gt;&gt;浏览器: JSON数据</span><br><span class=\"line\">rect rgb(224,74,74)</span><br><span class=\"line\">Note right of 浏览器: 浏览器阻止数据移交</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"生产环境没有跨域问题\"><a href=\"#生产环境没有跨域问题\" class=\"headerlink\" title=\"生产环境没有跨域问题\"></a>生产环境没有跨域问题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;服务器: http://www.my-site.com/</span><br><span class=\"line\">服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;服务器: ajax：http://www.my-site.com/api/news</span><br><span class=\"line\">服务器-&gt;&gt;浏览器: JSON数据</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;静态资源服务器: http://www.my-site.com/</span><br><span class=\"line\">静态资源服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;数据服务器: ajax 跨域：http://api.my-site.com/api/news</span><br><span class=\"line\">数据服务器-&gt;&gt;浏览器: [允许www.my-site.com]JSON数据</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决开发环境的跨域问题\"><a href=\"#解决开发环境的跨域问题\" class=\"headerlink\" title=\"解决开发环境的跨域问题\"></a>解决开发环境的跨域问题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: ajax：http://localhost:8080/api/news</span><br><span class=\"line\">前端开发服务器-&gt;&gt;后端测试服务器: 代理请求：http://test-data:3000/api/news</span><br><span class=\"line\">后端测试服务器-&gt;&gt;前端开发服务器: JSON数据</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: JSON数据</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"为什么要Mock数据\"><a href=\"#为什么要Mock数据\" class=\"headerlink\" title=\"为什么要Mock数据\"></a>为什么要Mock数据</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: ajax：http://localhost:8080/api/news</span><br><span class=\"line\">前端开发服务器-&gt;&gt;后端测试服务器: 代理请求：http://test-data:3000/api/news</span><br><span class=\"line\">后端测试服务器-&gt;&gt;前端开发服务器: 404 （后端正在开发中）</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 404</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">participant 浏览器</span><br><span class=\"line\">participant MockJS</span><br><span class=\"line\">participant 前端开发服务器</span><br><span class=\"line\">activate MockJS</span><br><span class=\"line\">Note left of MockJS: 定义ajax拦截规则</span><br><span class=\"line\">deactivate MockJS</span><br><span class=\"line\">浏览器-&gt;&gt;前端开发服务器: http://localhost:8080/</span><br><span class=\"line\">前端开发服务器-&gt;&gt;浏览器: 页面</span><br><span class=\"line\">浏览器-&gt;&gt;MockJS: ajax：http://localhost:8080/api/news</span><br><span class=\"line\">MockJS-&gt;&gt;浏览器: 模拟的JSON数据</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue2中虚拟节点","date":"2022-01-01T06:02:47.000Z","description":"vue2中的虚拟dom的概念和使用原因","comments":1,"toc":true,"_content":"\n面试题：请你阐述一下对vue虚拟dom的理解\n\n1. 什么是虚拟dom？\n\n   虚拟dom本质上就是一个普通的JS对象，用于描述视图的界面结构\n\n   在vue中，每个组件都有一个`render`函数，每个`render`函数都会返回一个虚拟dom树，这也就意味着每个组件都对应一棵虚拟DOM树\n\n   <img src=\"http://mdrs.yuanjin.tech/img/20210225140726.png\" alt=\"image-20210225140726003\" style=\"zoom:30%;\" align=\"left\" />\n\n2. 为什么需要虚拟dom？\n\n   在`vue`中，渲染视图会调用`render`函数，这种渲染不仅发生在组件创建时，同时发生在视图依赖的数据更新时。如果在渲染时，直接使用真实`DOM`，由于真实`DOM`的创建、更新、插入等操作会带来大量的性能损耗，从而就会极大的降低渲染效率。\n\n   因此，`vue`在渲染时，使用虚拟dom来替代真实dom，主要为解决渲染效率的问题。\n\n3. 虚拟dom是如何转换为真实dom的？\n\n   在一个组件实例首次被渲染时，它先生成虚拟dom树，然后根据虚拟dom树创建真实dom，并把真实dom挂载到页面中合适的位置，此时，每个虚拟dom便会对应一个真实的dom。\n\n   如果一个组件受响应式数据变化的影响，需要重新渲染时，它仍然会重新调用render函数，创建出一个新的虚拟dom树，用新树和旧树对比，通过对比，vue会找到最小更新量，然后更新必要的虚拟dom节点，最后，这些更新过的虚拟节点，会去修改它们对应的真实dom\n\n   这样一来，就保证了对真实dom达到最小的改动。\n\n   <img src=\"http://mdrs.yuanjin.tech/img/20210225144108.png\" alt=\"image-20210225144108143\" style=\"zoom:33%;\" align=\"left\" />\n\n4. 模板和虚拟dom的关系\n\n   vue框架中有一个`compile`模块，它主要负责将模板转换为`render`函数，而`render`函数调用后将得到虚拟dom。\n\n   编译的过程分两步：\n\n   1. 将模板字符串转换成为`AST`\n   2. 将`AST`转换为`render`函数\n\n   如果使用传统的引入方式，则编译时间发生在组件第一次加载时，这称之为运行时编译。\n\n   如果是在`vue-cli`的默认配置下，编译发生在打包时，这称之为模板预编译。\n\n   编译是一个极其耗费性能的操作，预编译可以有效的提高运行时的性能，而且，由于运行的时候已不需要编译，`vue-cli`在打包时会排除掉`vue`中的`compile`模块，以减少打包体积\n\n   模板的存在，仅仅是为了让开发人员更加方便的书写界面代码\n\n   **vue最终运行的时候，最终需要的是render函数，而不是模板，因此，模板中的各种语法，在虚拟dom中都是不存在的，它们都会变成虚拟dom的配置**\n\n","source":"_posts/虚拟节点.md","raw":"---\ntitle: vue2中虚拟节点\ndate: 2022-01-01 14:02:47\ndescription: vue2中的虚拟dom的概念和使用原因\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n   - 面试题\n---\n\n面试题：请你阐述一下对vue虚拟dom的理解\n\n1. 什么是虚拟dom？\n\n   虚拟dom本质上就是一个普通的JS对象，用于描述视图的界面结构\n\n   在vue中，每个组件都有一个`render`函数，每个`render`函数都会返回一个虚拟dom树，这也就意味着每个组件都对应一棵虚拟DOM树\n\n   <img src=\"http://mdrs.yuanjin.tech/img/20210225140726.png\" alt=\"image-20210225140726003\" style=\"zoom:30%;\" align=\"left\" />\n\n2. 为什么需要虚拟dom？\n\n   在`vue`中，渲染视图会调用`render`函数，这种渲染不仅发生在组件创建时，同时发生在视图依赖的数据更新时。如果在渲染时，直接使用真实`DOM`，由于真实`DOM`的创建、更新、插入等操作会带来大量的性能损耗，从而就会极大的降低渲染效率。\n\n   因此，`vue`在渲染时，使用虚拟dom来替代真实dom，主要为解决渲染效率的问题。\n\n3. 虚拟dom是如何转换为真实dom的？\n\n   在一个组件实例首次被渲染时，它先生成虚拟dom树，然后根据虚拟dom树创建真实dom，并把真实dom挂载到页面中合适的位置，此时，每个虚拟dom便会对应一个真实的dom。\n\n   如果一个组件受响应式数据变化的影响，需要重新渲染时，它仍然会重新调用render函数，创建出一个新的虚拟dom树，用新树和旧树对比，通过对比，vue会找到最小更新量，然后更新必要的虚拟dom节点，最后，这些更新过的虚拟节点，会去修改它们对应的真实dom\n\n   这样一来，就保证了对真实dom达到最小的改动。\n\n   <img src=\"http://mdrs.yuanjin.tech/img/20210225144108.png\" alt=\"image-20210225144108143\" style=\"zoom:33%;\" align=\"left\" />\n\n4. 模板和虚拟dom的关系\n\n   vue框架中有一个`compile`模块，它主要负责将模板转换为`render`函数，而`render`函数调用后将得到虚拟dom。\n\n   编译的过程分两步：\n\n   1. 将模板字符串转换成为`AST`\n   2. 将`AST`转换为`render`函数\n\n   如果使用传统的引入方式，则编译时间发生在组件第一次加载时，这称之为运行时编译。\n\n   如果是在`vue-cli`的默认配置下，编译发生在打包时，这称之为模板预编译。\n\n   编译是一个极其耗费性能的操作，预编译可以有效的提高运行时的性能，而且，由于运行的时候已不需要编译，`vue-cli`在打包时会排除掉`vue`中的`compile`模块，以减少打包体积\n\n   模板的存在，仅仅是为了让开发人员更加方便的书写界面代码\n\n   **vue最终运行的时候，最终需要的是render函数，而不是模板，因此，模板中的各种语法，在虚拟dom中都是不存在的，它们都会变成虚拟dom的配置**\n\n","slug":"虚拟节点","published":1,"updated":"2022-01-01T06:28:27.657Z","_id":"ckxvf7cmu000tccaxg9qr6fl6","layout":"post","photos":[],"link":"","content":"<p>面试题：请你阐述一下对vue虚拟dom的理解</p>\n<ol>\n<li><p>什么是虚拟dom？</p>\n<p>虚拟dom本质上就是一个普通的JS对象，用于描述视图的界面结构</p>\n<p>在vue中，每个组件都有一个<code>render</code>函数，每个<code>render</code>函数都会返回一个虚拟dom树，这也就意味着每个组件都对应一棵虚拟DOM树</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210225140726.png\" alt=\"image-20210225140726003\" style=\"zoom:30%;\" align=\"left\" /></li>\n<li><p>为什么需要虚拟dom？</p>\n<p>在<code>vue</code>中，渲染视图会调用<code>render</code>函数，这种渲染不仅发生在组件创建时，同时发生在视图依赖的数据更新时。如果在渲染时，直接使用真实<code>DOM</code>，由于真实<code>DOM</code>的创建、更新、插入等操作会带来大量的性能损耗，从而就会极大的降低渲染效率。</p>\n<p>因此，<code>vue</code>在渲染时，使用虚拟dom来替代真实dom，主要为解决渲染效率的问题。</p>\n</li>\n<li><p>虚拟dom是如何转换为真实dom的？</p>\n<p>在一个组件实例首次被渲染时，它先生成虚拟dom树，然后根据虚拟dom树创建真实dom，并把真实dom挂载到页面中合适的位置，此时，每个虚拟dom便会对应一个真实的dom。</p>\n<p>如果一个组件受响应式数据变化的影响，需要重新渲染时，它仍然会重新调用render函数，创建出一个新的虚拟dom树，用新树和旧树对比，通过对比，vue会找到最小更新量，然后更新必要的虚拟dom节点，最后，这些更新过的虚拟节点，会去修改它们对应的真实dom</p>\n<p>这样一来，就保证了对真实dom达到最小的改动。</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210225144108.png\" alt=\"image-20210225144108143\" style=\"zoom:33%;\" align=\"left\" /></li>\n<li><p>模板和虚拟dom的关系</p>\n<p>vue框架中有一个<code>compile</code>模块，它主要负责将模板转换为<code>render</code>函数，而<code>render</code>函数调用后将得到虚拟dom。</p>\n<p>编译的过程分两步：</p>\n<ol>\n<li>将模板字符串转换成为<code>AST</code></li>\n<li>将<code>AST</code>转换为<code>render</code>函数</li>\n</ol>\n<p>如果使用传统的引入方式，则编译时间发生在组件第一次加载时，这称之为运行时编译。</p>\n<p>如果是在<code>vue-cli</code>的默认配置下，编译发生在打包时，这称之为模板预编译。</p>\n<p>编译是一个极其耗费性能的操作，预编译可以有效的提高运行时的性能，而且，由于运行的时候已不需要编译，<code>vue-cli</code>在打包时会排除掉<code>vue</code>中的<code>compile</code>模块，以减少打包体积</p>\n<p>模板的存在，仅仅是为了让开发人员更加方便的书写界面代码</p>\n<p><strong>vue最终运行的时候，最终需要的是render函数，而不是模板，因此，模板中的各种语法，在虚拟dom中都是不存在的，它们都会变成虚拟dom的配置</strong></p>\n</li>\n</ol>\n","site":{"data":{}},"length":915,"excerpt":"","more":"<p>面试题：请你阐述一下对vue虚拟dom的理解</p>\n<ol>\n<li><p>什么是虚拟dom？</p>\n<p>虚拟dom本质上就是一个普通的JS对象，用于描述视图的界面结构</p>\n<p>在vue中，每个组件都有一个<code>render</code>函数，每个<code>render</code>函数都会返回一个虚拟dom树，这也就意味着每个组件都对应一棵虚拟DOM树</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210225140726.png\" alt=\"image-20210225140726003\" style=\"zoom:30%;\" align=\"left\" /></li>\n<li><p>为什么需要虚拟dom？</p>\n<p>在<code>vue</code>中，渲染视图会调用<code>render</code>函数，这种渲染不仅发生在组件创建时，同时发生在视图依赖的数据更新时。如果在渲染时，直接使用真实<code>DOM</code>，由于真实<code>DOM</code>的创建、更新、插入等操作会带来大量的性能损耗，从而就会极大的降低渲染效率。</p>\n<p>因此，<code>vue</code>在渲染时，使用虚拟dom来替代真实dom，主要为解决渲染效率的问题。</p>\n</li>\n<li><p>虚拟dom是如何转换为真实dom的？</p>\n<p>在一个组件实例首次被渲染时，它先生成虚拟dom树，然后根据虚拟dom树创建真实dom，并把真实dom挂载到页面中合适的位置，此时，每个虚拟dom便会对应一个真实的dom。</p>\n<p>如果一个组件受响应式数据变化的影响，需要重新渲染时，它仍然会重新调用render函数，创建出一个新的虚拟dom树，用新树和旧树对比，通过对比，vue会找到最小更新量，然后更新必要的虚拟dom节点，最后，这些更新过的虚拟节点，会去修改它们对应的真实dom</p>\n<p>这样一来，就保证了对真实dom达到最小的改动。</p>\n<img src=\"http://mdrs.yuanjin.tech/img/20210225144108.png\" alt=\"image-20210225144108143\" style=\"zoom:33%;\" align=\"left\" /></li>\n<li><p>模板和虚拟dom的关系</p>\n<p>vue框架中有一个<code>compile</code>模块，它主要负责将模板转换为<code>render</code>函数，而<code>render</code>函数调用后将得到虚拟dom。</p>\n<p>编译的过程分两步：</p>\n<ol>\n<li>将模板字符串转换成为<code>AST</code></li>\n<li>将<code>AST</code>转换为<code>render</code>函数</li>\n</ol>\n<p>如果使用传统的引入方式，则编译时间发生在组件第一次加载时，这称之为运行时编译。</p>\n<p>如果是在<code>vue-cli</code>的默认配置下，编译发生在打包时，这称之为模板预编译。</p>\n<p>编译是一个极其耗费性能的操作，预编译可以有效的提高运行时的性能，而且，由于运行的时候已不需要编译，<code>vue-cli</code>在打包时会排除掉<code>vue</code>中的<code>compile</code>模块，以减少打包体积</p>\n<p>模板的存在，仅仅是为了让开发人员更加方便的书写界面代码</p>\n<p><strong>vue最终运行的时候，最终需要的是render函数，而不是模板，因此，模板中的各种语法，在虚拟dom中都是不存在的，它们都会变成虚拟dom的配置</strong></p>\n</li>\n</ol>\n"},{"title":"vue2中计算属性和方法的区别","date":"2022-01-01T06:20:47.000Z","description":"vue2中计算属性和方法的区别","comments":1,"toc":true,"_content":"\n\n面试题：计算属性和方法有什么区别？\n\n```\n计算属性本质上是包含getter和setter的方法\n当获取计算属性时，实际上是在调用计算属性的getter方法。vue会收集计算属性的依赖，并缓存计算属性的返回结果。只有当依赖变化后才会重新进行计算。\n方法没有缓存，每次调用方法都会导致重新执行。\n计算属性的getter和setter参数固定，getter没有参数，setter只有一个参数。而方法的参数不限。\n由于有以上的这些区别，因此计算属性通常是根据已有数据得到其他数据，并在得到数据的过程中不建议使用异步、当前时间、随机数等副作用操作。\n实际上，他们最重要的区别是含义上的区别。计算属性含义上也是一个数据，可以读取也可以赋值；方法含义上是一个操作，用于处理一些事情。\n```\n\n\n\n完整的计算属性书写：\n\n```js\ncomputed: {\n  propName: {\n    get(){\n      // getter\n    },\n    set(val){\n      // setter\n    }\n  }\n}\n```\n\n只包含getter的计算属性简写：\n\n```js\ncomputed: {\n  propName(){\n    // getter\n  }\n}\n```\n\n\n\n父组件为影响子组件的最外层结构\n\n![](./assets/作用域样式对子组件根元素的影响.jpg)\n\n","source":"_posts/计算属性.md","raw":"---\ntitle: vue2中计算属性和方法的区别\ndate: 2022-01-01 14:20:47\ndescription: vue2中计算属性和方法的区别\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n  - 面试题\n---\n\n\n面试题：计算属性和方法有什么区别？\n\n```\n计算属性本质上是包含getter和setter的方法\n当获取计算属性时，实际上是在调用计算属性的getter方法。vue会收集计算属性的依赖，并缓存计算属性的返回结果。只有当依赖变化后才会重新进行计算。\n方法没有缓存，每次调用方法都会导致重新执行。\n计算属性的getter和setter参数固定，getter没有参数，setter只有一个参数。而方法的参数不限。\n由于有以上的这些区别，因此计算属性通常是根据已有数据得到其他数据，并在得到数据的过程中不建议使用异步、当前时间、随机数等副作用操作。\n实际上，他们最重要的区别是含义上的区别。计算属性含义上也是一个数据，可以读取也可以赋值；方法含义上是一个操作，用于处理一些事情。\n```\n\n\n\n完整的计算属性书写：\n\n```js\ncomputed: {\n  propName: {\n    get(){\n      // getter\n    },\n    set(val){\n      // setter\n    }\n  }\n}\n```\n\n只包含getter的计算属性简写：\n\n```js\ncomputed: {\n  propName(){\n    // getter\n  }\n}\n```\n\n\n\n父组件为影响子组件的最外层结构\n\n![](./assets/作用域样式对子组件根元素的影响.jpg)\n\n","slug":"计算属性","published":1,"updated":"2022-01-01T06:14:37.078Z","_id":"ckxvf7cmv000uccaxgbps631k","layout":"post","photos":[],"link":"","content":"<p>面试题：计算属性和方法有什么区别？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算属性本质上是包含getter和setter的方法</span><br><span class=\"line\">当获取计算属性时，实际上是在调用计算属性的getter方法。vue会收集计算属性的依赖，并缓存计算属性的返回结果。只有当依赖变化后才会重新进行计算。</span><br><span class=\"line\">方法没有缓存，每次调用方法都会导致重新执行。</span><br><span class=\"line\">计算属性的getter和setter参数固定，getter没有参数，setter只有一个参数。而方法的参数不限。</span><br><span class=\"line\">由于有以上的这些区别，因此计算属性通常是根据已有数据得到其他数据，并在得到数据的过程中不建议使用异步、当前时间、随机数等副作用操作。</span><br><span class=\"line\">实际上，他们最重要的区别是含义上的区别。计算属性含义上也是一个数据，可以读取也可以赋值；方法含义上是一个操作，用于处理一些事情。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>完整的计算属性书写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">propName</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// getter</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// setter</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只包含getter的计算属性简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">propName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>父组件为影响子组件的最外层结构</p>\n<p><img src=\"./assets/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A0%B7%E5%BC%8F%E5%AF%B9%E5%AD%90%E7%BB%84%E4%BB%B6%E6%A0%B9%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D.jpg\"></p>\n","site":{"data":{}},"length":536,"excerpt":"","more":"<p>面试题：计算属性和方法有什么区别？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算属性本质上是包含getter和setter的方法</span><br><span class=\"line\">当获取计算属性时，实际上是在调用计算属性的getter方法。vue会收集计算属性的依赖，并缓存计算属性的返回结果。只有当依赖变化后才会重新进行计算。</span><br><span class=\"line\">方法没有缓存，每次调用方法都会导致重新执行。</span><br><span class=\"line\">计算属性的getter和setter参数固定，getter没有参数，setter只有一个参数。而方法的参数不限。</span><br><span class=\"line\">由于有以上的这些区别，因此计算属性通常是根据已有数据得到其他数据，并在得到数据的过程中不建议使用异步、当前时间、随机数等副作用操作。</span><br><span class=\"line\">实际上，他们最重要的区别是含义上的区别。计算属性含义上也是一个数据，可以读取也可以赋值；方法含义上是一个操作，用于处理一些事情。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>完整的计算属性书写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">propName</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// getter</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// setter</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只包含getter的计算属性简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">propName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>父组件为影响子组件的最外层结构</p>\n<p><img src=\"./assets/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A0%B7%E5%BC%8F%E5%AF%B9%E5%AD%90%E7%BB%84%E4%BB%B6%E6%A0%B9%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D.jpg\"></p>\n"},{"title":"定义指令","date":"2022-01-01T06:03:47.000Z","description":"vue2中的自定义指令","comments":1,"toc":true,"_content":"\n\n# 定义指令\n\n## 全局定义\n\n```js\n// 指令名称为：mydirec1\nVue.directive('mydirec1', {\n  // 指令配置\n})\n\n// 指令名称为：mydirec2\nVue.directive('mydirec2', {\n  // 指令配置\n})\n```\n\n之后，所有的组件均可以使用`mydirec1`和`mydirec2`指令\n\n```vue\n<template>\n  <!-- 某个组件代码 -->\n  <div>\n    <MyComp v-mydirec1=\"js表达式\" />\n    <div v-mydirec2=\"js表达式\">\n      ...\n    </div>\n    <img v-mydirec1=\"js表达式\" />\n  </div>\n</template>\n```\n\n## 局部定义\n\n局部定义是指在某个组件中定义指令，和局部注册组件类似。\n\n定义的指令仅在该组件中有效。\n\n```vue\n<template>\n  <!-- 某个组件代码 -->\n  <div>\n    <MyComp v-mydirec1=\"js表达式\" />\n    <div v-mydirec2=\"js表达式\">\n      ...\n    </div>\n    <img v-mydirec1=\"js表达式\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  // 定义指令\n  directives: {\n    // 指令名称：mydirec1\n    mydirec1: {\n      // 指令配置\n    },\n    // 指令名称：mydirec2\n    mydirec2: {\n      // 指令配置\n    }\n  }\n}\n</script>\n```\n\n和全局注册组件一样，为了让指令更加通用，通常我们会把指令的配置提取到其他模块。\n\n```vue\n<template>\n  <!-- 某个组件代码 -->\n  <div>\n    <MyComp v-mydirec1=\"js表达式\" />\n    <div v-mydirec2=\"js表达式\">\n      ...\n    </div>\n    <img v-mydirec1=\"js表达式\" />\n  </div>\n</template>\n\n<script>\n  // 导入当前组件需要用到的指令配置对象\n  import mydirec1 from \"@/directives/mydirec1\";\n  import mydirec2 from \"@/directives/mydirec2\";\n\texport default {\n    // 定义指令\n    directives: {\n      mydirec1,\n      mydirec2\n    }\n  }\n</script>\n```\n\n# 指令配置对象\n\n没有配置的指令，就像没有配置的组件一样，毫无意义\n\n`vue`支持在指令中配置一些**钩子函数**，在适当的时机，`vue`会调用这些钩子函数并传入适当的参数，以便开发者完成自己想做的事情。\n\n常用的钩子函数：\n\n```js\n// 指令配置对象\n{\n  bind(){\n    // 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n  },\n  inserted(){\n    // 被绑定元素插入父节点时调用。\n  },\n  update(){\n    // 所在组件的 VNode 更新时调用\n  }\n}\n```\n\n>  [查看更多的钩子函数](https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0)\n\n每个钩子函数在调用时，`vue`都会向其传递一些参数，其中最重要的是前两个参数\n\n```js\n// 指令配置对象\n{\n  bind(el, binding){\n    // el 是被绑定元素对应的真实DOM\n    // binding 是一个对象，描述了指令中提供的信息\n  }\n}\n```\n\n## bingding 对象\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210104174229.png\" alt=\"image-20210104174229660\" style=\"zoom:50%;\" />\n\n> [查看更多bingding对象的属性](https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0)\n\n# 配置简化\n\n比较多的时候，在配置自定义指令时，我们都会配置两个钩子函数\n\n```js\n{\n  bind(el, bingding){\n    \n  },\n  update(el, bingding){\n    \n  }\n}\n```\n\n这样，在元素绑定和更新时，都能运行到钩子函数\n\n如果这两个钩子函数实现的功能相同，可以直接把指令配置简化为一个单独的函数：\n\n```js\nfunction(el, bingding){\n  // 该函数会被同时设置到bind和update中\n}\n```\n\n\n\n> 利用上述知识，可满足大部分自定义指令的需求\n>\n> 更多的自定义指令用法见[官网](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n","source":"_posts/自定义组件.md","raw":"---\ntitle: 定义指令\ndate: 2022-01-01 14:03:47\ndescription: vue2中的自定义指令\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n  - 前端学习笔记 \n  - vue\ntags:   #标签\n  - vue2\n  - 前端\n---\n\n\n# 定义指令\n\n## 全局定义\n\n```js\n// 指令名称为：mydirec1\nVue.directive('mydirec1', {\n  // 指令配置\n})\n\n// 指令名称为：mydirec2\nVue.directive('mydirec2', {\n  // 指令配置\n})\n```\n\n之后，所有的组件均可以使用`mydirec1`和`mydirec2`指令\n\n```vue\n<template>\n  <!-- 某个组件代码 -->\n  <div>\n    <MyComp v-mydirec1=\"js表达式\" />\n    <div v-mydirec2=\"js表达式\">\n      ...\n    </div>\n    <img v-mydirec1=\"js表达式\" />\n  </div>\n</template>\n```\n\n## 局部定义\n\n局部定义是指在某个组件中定义指令，和局部注册组件类似。\n\n定义的指令仅在该组件中有效。\n\n```vue\n<template>\n  <!-- 某个组件代码 -->\n  <div>\n    <MyComp v-mydirec1=\"js表达式\" />\n    <div v-mydirec2=\"js表达式\">\n      ...\n    </div>\n    <img v-mydirec1=\"js表达式\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  // 定义指令\n  directives: {\n    // 指令名称：mydirec1\n    mydirec1: {\n      // 指令配置\n    },\n    // 指令名称：mydirec2\n    mydirec2: {\n      // 指令配置\n    }\n  }\n}\n</script>\n```\n\n和全局注册组件一样，为了让指令更加通用，通常我们会把指令的配置提取到其他模块。\n\n```vue\n<template>\n  <!-- 某个组件代码 -->\n  <div>\n    <MyComp v-mydirec1=\"js表达式\" />\n    <div v-mydirec2=\"js表达式\">\n      ...\n    </div>\n    <img v-mydirec1=\"js表达式\" />\n  </div>\n</template>\n\n<script>\n  // 导入当前组件需要用到的指令配置对象\n  import mydirec1 from \"@/directives/mydirec1\";\n  import mydirec2 from \"@/directives/mydirec2\";\n\texport default {\n    // 定义指令\n    directives: {\n      mydirec1,\n      mydirec2\n    }\n  }\n</script>\n```\n\n# 指令配置对象\n\n没有配置的指令，就像没有配置的组件一样，毫无意义\n\n`vue`支持在指令中配置一些**钩子函数**，在适当的时机，`vue`会调用这些钩子函数并传入适当的参数，以便开发者完成自己想做的事情。\n\n常用的钩子函数：\n\n```js\n// 指令配置对象\n{\n  bind(){\n    // 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n  },\n  inserted(){\n    // 被绑定元素插入父节点时调用。\n  },\n  update(){\n    // 所在组件的 VNode 更新时调用\n  }\n}\n```\n\n>  [查看更多的钩子函数](https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0)\n\n每个钩子函数在调用时，`vue`都会向其传递一些参数，其中最重要的是前两个参数\n\n```js\n// 指令配置对象\n{\n  bind(el, binding){\n    // el 是被绑定元素对应的真实DOM\n    // binding 是一个对象，描述了指令中提供的信息\n  }\n}\n```\n\n## bingding 对象\n\n<img src=\"http://mdrs.yuanjin.tech/img/20210104174229.png\" alt=\"image-20210104174229660\" style=\"zoom:50%;\" />\n\n> [查看更多bingding对象的属性](https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0)\n\n# 配置简化\n\n比较多的时候，在配置自定义指令时，我们都会配置两个钩子函数\n\n```js\n{\n  bind(el, bingding){\n    \n  },\n  update(el, bingding){\n    \n  }\n}\n```\n\n这样，在元素绑定和更新时，都能运行到钩子函数\n\n如果这两个钩子函数实现的功能相同，可以直接把指令配置简化为一个单独的函数：\n\n```js\nfunction(el, bingding){\n  // 该函数会被同时设置到bind和update中\n}\n```\n\n\n\n> 利用上述知识，可满足大部分自定义指令的需求\n>\n> 更多的自定义指令用法见[官网](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n","slug":"自定义组件","published":1,"updated":"2022-01-01T06:07:50.509Z","_id":"ckxvf7cmv000vccax51yb51ny","layout":"post","photos":[],"link":"","content":"<h1 id=\"定义指令\"><a href=\"#定义指令\" class=\"headerlink\" title=\"定义指令\"></a>定义指令</h1><h2 id=\"全局定义\"><a href=\"#全局定义\" class=\"headerlink\" title=\"全局定义\"></a>全局定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令名称为：mydirec1</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;mydirec1&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指令配置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指令名称为：mydirec2</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;mydirec2&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指令配置</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>之后，所有的组件均可以使用<code>mydirec1</code>和<code>mydirec2</code>指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 某个组件代码 --&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"局部定义\"><a href=\"#局部定义\" class=\"headerlink\" title=\"局部定义\"></a>局部定义</h2><p>局部定义是指在某个组件中定义指令，和局部注册组件类似。</p>\n<p>定义的指令仅在该组件中有效。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 某个组件代码 --&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  // 定义指令</span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\">    // 指令名称：mydirec1</span><br><span class=\"line\">    mydirec1: &#123;</span><br><span class=\"line\">      // 指令配置</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 指令名称：mydirec2</span><br><span class=\"line\">    mydirec2: &#123;</span><br><span class=\"line\">      // 指令配置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>和全局注册组件一样，为了让指令更加通用，通常我们会把指令的配置提取到其他模块。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 某个组件代码 --&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 导入当前组件需要用到的指令配置对象</span><br><span class=\"line\">  import mydirec1 from &quot;@/directives/mydirec1&quot;;</span><br><span class=\"line\">  import mydirec2 from &quot;@/directives/mydirec2&quot;;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">    // 定义指令</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">      mydirec1,</span><br><span class=\"line\">      mydirec2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指令配置对象\"><a href=\"#指令配置对象\" class=\"headerlink\" title=\"指令配置对象\"></a>指令配置对象</h1><p>没有配置的指令，就像没有配置的组件一样，毫无意义</p>\n<p><code>vue</code>支持在指令中配置一些<strong>钩子函数</strong>，在适当的时机，<code>vue</code>会调用这些钩子函数并传入适当的参数，以便开发者完成自己想做的事情。</p>\n<p>常用的钩子函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令配置对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">inserted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 被绑定元素插入父节点时调用。</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所在组件的 VNode 更新时调用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\">查看更多的钩子函数</a></p>\n</blockquote>\n<p>每个钩子函数在调用时，<code>vue</code>都会向其传递一些参数，其中最重要的是前两个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令配置对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">el, binding</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// el 是被绑定元素对应的真实DOM</span></span><br><span class=\"line\">    <span class=\"comment\">// binding 是一个对象，描述了指令中提供的信息</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bingding-对象\"><a href=\"#bingding-对象\" class=\"headerlink\" title=\"bingding 对象\"></a>bingding 对象</h2><img src=\"http://mdrs.yuanjin.tech/img/20210104174229.png\" alt=\"image-20210104174229660\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\">查看更多bingding对象的属性</a></p>\n</blockquote>\n<h1 id=\"配置简化\"><a href=\"#配置简化\" class=\"headerlink\" title=\"配置简化\"></a>配置简化</h1><p>比较多的时候，在配置自定义指令时，我们都会配置两个钩子函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">el, bingding</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">el, bingding</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，在元素绑定和更新时，都能运行到钩子函数</p>\n<p>如果这两个钩子函数实现的功能相同，可以直接把指令配置简化为一个单独的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, bingding</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 该函数会被同时设置到bind和update中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>利用上述知识，可满足大部分自定义指令的需求</p>\n<p>更多的自定义指令用法见<a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">官网</a></p>\n</blockquote>\n","site":{"data":{}},"length":2098,"excerpt":"","more":"<h1 id=\"定义指令\"><a href=\"#定义指令\" class=\"headerlink\" title=\"定义指令\"></a>定义指令</h1><h2 id=\"全局定义\"><a href=\"#全局定义\" class=\"headerlink\" title=\"全局定义\"></a>全局定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令名称为：mydirec1</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;mydirec1&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指令配置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指令名称为：mydirec2</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;mydirec2&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指令配置</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>之后，所有的组件均可以使用<code>mydirec1</code>和<code>mydirec2</code>指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 某个组件代码 --&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"局部定义\"><a href=\"#局部定义\" class=\"headerlink\" title=\"局部定义\"></a>局部定义</h2><p>局部定义是指在某个组件中定义指令，和局部注册组件类似。</p>\n<p>定义的指令仅在该组件中有效。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 某个组件代码 --&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  // 定义指令</span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\">    // 指令名称：mydirec1</span><br><span class=\"line\">    mydirec1: &#123;</span><br><span class=\"line\">      // 指令配置</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 指令名称：mydirec2</span><br><span class=\"line\">    mydirec2: &#123;</span><br><span class=\"line\">      // 指令配置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>和全局注册组件一样，为了让指令更加通用，通常我们会把指令的配置提取到其他模块。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 某个组件代码 --&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 导入当前组件需要用到的指令配置对象</span><br><span class=\"line\">  import mydirec1 from &quot;@/directives/mydirec1&quot;;</span><br><span class=\"line\">  import mydirec2 from &quot;@/directives/mydirec2&quot;;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">    // 定义指令</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">      mydirec1,</span><br><span class=\"line\">      mydirec2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指令配置对象\"><a href=\"#指令配置对象\" class=\"headerlink\" title=\"指令配置对象\"></a>指令配置对象</h1><p>没有配置的指令，就像没有配置的组件一样，毫无意义</p>\n<p><code>vue</code>支持在指令中配置一些<strong>钩子函数</strong>，在适当的时机，<code>vue</code>会调用这些钩子函数并传入适当的参数，以便开发者完成自己想做的事情。</p>\n<p>常用的钩子函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令配置对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">inserted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 被绑定元素插入父节点时调用。</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所在组件的 VNode 更新时调用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\">查看更多的钩子函数</a></p>\n</blockquote>\n<p>每个钩子函数在调用时，<code>vue</code>都会向其传递一些参数，其中最重要的是前两个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令配置对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">el, binding</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// el 是被绑定元素对应的真实DOM</span></span><br><span class=\"line\">    <span class=\"comment\">// binding 是一个对象，描述了指令中提供的信息</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bingding-对象\"><a href=\"#bingding-对象\" class=\"headerlink\" title=\"bingding 对象\"></a>bingding 对象</h2><img src=\"http://mdrs.yuanjin.tech/img/20210104174229.png\" alt=\"image-20210104174229660\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\">查看更多bingding对象的属性</a></p>\n</blockquote>\n<h1 id=\"配置简化\"><a href=\"#配置简化\" class=\"headerlink\" title=\"配置简化\"></a>配置简化</h1><p>比较多的时候，在配置自定义指令时，我们都会配置两个钩子函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">el, bingding</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">el, bingding</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，在元素绑定和更新时，都能运行到钩子函数</p>\n<p>如果这两个钩子函数实现的功能相同，可以直接把指令配置简化为一个单独的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, bingding</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 该函数会被同时设置到bind和update中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>利用上述知识，可满足大部分自定义指令的需求</p>\n<p>更多的自定义指令用法见<a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">官网</a></p>\n</blockquote>\n"},{"title":"vue2中的路由","date":"2022-01-01T06:02:47.000Z","description":"vue2中的路由","comments":1,"toc":true,"_content":"\nvue-router官网：https://router.vuejs.org/zh/\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202170037.png\" alt=\"image-20201202170037391\" style=\"zoom:50%;\" />\n\n1. **如何根据地址中的路径选择不同的组件？**\n\n2. **把选择的组件放到哪个位置？**\n\n3. **如何无刷新的切换组件？**\n\n   \n\n\n\n# 路由插件\n\n```shell\nnpm i vue-router\n```\n\n路由插件的使用\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter); // Vue.use(插件)  在Vue中使用插件\n\nconst router = new VueRouter({\n  // 路由配置\n})\nnew Vue({\n  ...,\n  router\n})\n```\n\n# 基本使用\n\n```js\n// 路由配置\nconst router = new VueRouter({\n  routes: [ // 路由规则\n    // 当匹配到路径 /foo 时，渲染 Foo 组件\n    { path: '/foo', component: Foo },\n    // 当匹配到路径 /bar 时，渲染 Bar 组件\n  \t{ path: '/bar', component: Bar }\n  ]\n})\n```\n\n\n\n```html\n<!-- App.vue -->\n<div class=\"container\">\n  <div>\n    <!-- 公共区域 -->\n  </div>\n  <div>\n    <!-- 页面区域 -->\n    <!-- vue-router 匹配到的组件会渲染到这里 -->\n    <RouterView />\n  </div>\n</div>\n```\n\n\n\n# 路由模式\n\n路由模式决定了：\n\n1. 路由从哪里获取访问路径\n2. 路由如何改变访问路径\n\n`vue-router`提供了三种路由模式：\n\n1. hash：默认值。路由从浏览器地址栏中的hash部分获取路径，改变路径也是改变的hash部分。该模式兼容性最好。\n\n   ```\n   http://localhost:8081/#/blog  -->  /blog\n   http://localhost:8081/about#/blog  --> /blog\n   ```\n\n2. history：路由从浏览器地址栏的`location.pathname`中获取路径，改变路径使用的H5的`history api`。该模式可以让地址栏最友好，但是需要浏览器支持`history api`\n\n   ```\n   http://localhost:8081/#/blog  -->  /\n   http://localhost:8081/about#/blog  --> /about\n   http://localhost:8081/blog  --> /blog\n   ```\n\n3. abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。\n\n   ```shell\n   内存： /\t\t\t-->   /\n   内存： /about\t--> /about\n   内存： /blog\t  --> /blog\n   ```\n\n# 导航\n\n`vue-router`提供了全局的组件`RouterLink`，它的渲染结果是一个`a`元素\n\n```html\n<RouterLink to=\"/blog\">文章</RouterLink>\n<!-- mode:hash 生成 -->\n<a href=\"#/blog\">文章</a>\n<!-- mode:history 生成 -->\n<!-- 为了避免刷新页面，vue-router实际上为它添加了点击事件，并阻止了默认行为，在事件内部使用hitory api更改路径 -->\n<a href=\"/blog\">文章</a>\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150453.png\" alt=\"image-20201203150453332\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150918.png\" alt=\"image-20201203150918219\" style=\"zoom:50%;\" />\n\n## 激活状态\n\n默认情况下，`vue-router`会用 **当前路径** 匹配 **导航路径** ：\n\n- 如果当前路径是以导航路径开头，则算作匹配，会为导航的a元素添加类名`router-link-active`\n- 如果当前路径完全等于导航路径，则算作精确匹配，会为导航的a元素添加类名`router-link-exact-active`\n\n\n\n例如，当前访问的路径是`/blog`，则：\n\n| 导航路径 | 类名                                          |\n| -------- | --------------------------------------------- |\n| /        | router-link-active                            |\n| /blog    | router-link-active   router-link-exact-active |\n| /about   | 无                                            |\n| /message | 无                                            |\n\n\n\n可以为组件`RouterLink`添加bool属性`exact`，将匹配规则改为：必须要精确匹配才能添加匹配类名`router-link-active`\n\n\n\n例如，当前访问的路径是`/blog`，则：\n\n| 导航路径 | exact | 类名                                          |\n| -------- | ----- | --------------------------------------------- |\n| /        | true  | 无                                            |\n| /blog    | false | router-link-active   router-link-exact-active |\n| /about   | true  | 无                                            |\n| /message | true  | 无                                            |\n\n例如，当前访问的路径是`/blog/detail/123`，则：\n\n| 导航路径 | exact | 类名               |\n| -------- | ----- | ------------------ |\n| /        | true  | 无                 |\n| /blog    | false | router-link-active |\n| /about   | true  | 无                 |\n| /message | true  | 无                 |\n\n\n\n另外，可以通过`active-class`属性更改匹配的类名，通过`exact-active-class`更改精确匹配的类名\n\n\n\n# 命名路由\n\n使用命名路由可以解除系统与路径之间的耦合\n\n```js\n// 路由配置\nconst router = new VueRouter({\n  routes: [ // 路由规则\n    // 当匹配到路径 /foo 时，渲染 Foo 组件\n    { name:\"foo\", path: '/foo', component: Foo },\n    // 当匹配到路径 /bar 时，渲染 Bar 组件\n  \t{ name:\"bar\", path: '/bar', component: Bar }\n  ]\n})\n\n```\n\n```html\n<!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 -->\n<RouterLink :to=\"{ name:'foo' }\">go to foo</RouterLink>\n```\n\n","source":"_posts/路由.md","raw":"---\ntitle: vue2中的路由\ndate: 2022-01-01 14:02:47\ndescription: vue2中的路由\ncomments: true #是否可评论\ntoc: true #是否显示文章目录\ncategories: \n   - 前端学习笔记 \n   - vue\ntags:   #标签\n   - vue2\n   - 前端\n---\n\nvue-router官网：https://router.vuejs.org/zh/\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201202170037.png\" alt=\"image-20201202170037391\" style=\"zoom:50%;\" />\n\n1. **如何根据地址中的路径选择不同的组件？**\n\n2. **把选择的组件放到哪个位置？**\n\n3. **如何无刷新的切换组件？**\n\n   \n\n\n\n# 路由插件\n\n```shell\nnpm i vue-router\n```\n\n路由插件的使用\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter); // Vue.use(插件)  在Vue中使用插件\n\nconst router = new VueRouter({\n  // 路由配置\n})\nnew Vue({\n  ...,\n  router\n})\n```\n\n# 基本使用\n\n```js\n// 路由配置\nconst router = new VueRouter({\n  routes: [ // 路由规则\n    // 当匹配到路径 /foo 时，渲染 Foo 组件\n    { path: '/foo', component: Foo },\n    // 当匹配到路径 /bar 时，渲染 Bar 组件\n  \t{ path: '/bar', component: Bar }\n  ]\n})\n```\n\n\n\n```html\n<!-- App.vue -->\n<div class=\"container\">\n  <div>\n    <!-- 公共区域 -->\n  </div>\n  <div>\n    <!-- 页面区域 -->\n    <!-- vue-router 匹配到的组件会渲染到这里 -->\n    <RouterView />\n  </div>\n</div>\n```\n\n\n\n# 路由模式\n\n路由模式决定了：\n\n1. 路由从哪里获取访问路径\n2. 路由如何改变访问路径\n\n`vue-router`提供了三种路由模式：\n\n1. hash：默认值。路由从浏览器地址栏中的hash部分获取路径，改变路径也是改变的hash部分。该模式兼容性最好。\n\n   ```\n   http://localhost:8081/#/blog  -->  /blog\n   http://localhost:8081/about#/blog  --> /blog\n   ```\n\n2. history：路由从浏览器地址栏的`location.pathname`中获取路径，改变路径使用的H5的`history api`。该模式可以让地址栏最友好，但是需要浏览器支持`history api`\n\n   ```\n   http://localhost:8081/#/blog  -->  /\n   http://localhost:8081/about#/blog  --> /about\n   http://localhost:8081/blog  --> /blog\n   ```\n\n3. abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。\n\n   ```shell\n   内存： /\t\t\t-->   /\n   内存： /about\t--> /about\n   内存： /blog\t  --> /blog\n   ```\n\n# 导航\n\n`vue-router`提供了全局的组件`RouterLink`，它的渲染结果是一个`a`元素\n\n```html\n<RouterLink to=\"/blog\">文章</RouterLink>\n<!-- mode:hash 生成 -->\n<a href=\"#/blog\">文章</a>\n<!-- mode:history 生成 -->\n<!-- 为了避免刷新页面，vue-router实际上为它添加了点击事件，并阻止了默认行为，在事件内部使用hitory api更改路径 -->\n<a href=\"/blog\">文章</a>\n```\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150453.png\" alt=\"image-20201203150453332\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150918.png\" alt=\"image-20201203150918219\" style=\"zoom:50%;\" />\n\n## 激活状态\n\n默认情况下，`vue-router`会用 **当前路径** 匹配 **导航路径** ：\n\n- 如果当前路径是以导航路径开头，则算作匹配，会为导航的a元素添加类名`router-link-active`\n- 如果当前路径完全等于导航路径，则算作精确匹配，会为导航的a元素添加类名`router-link-exact-active`\n\n\n\n例如，当前访问的路径是`/blog`，则：\n\n| 导航路径 | 类名                                          |\n| -------- | --------------------------------------------- |\n| /        | router-link-active                            |\n| /blog    | router-link-active   router-link-exact-active |\n| /about   | 无                                            |\n| /message | 无                                            |\n\n\n\n可以为组件`RouterLink`添加bool属性`exact`，将匹配规则改为：必须要精确匹配才能添加匹配类名`router-link-active`\n\n\n\n例如，当前访问的路径是`/blog`，则：\n\n| 导航路径 | exact | 类名                                          |\n| -------- | ----- | --------------------------------------------- |\n| /        | true  | 无                                            |\n| /blog    | false | router-link-active   router-link-exact-active |\n| /about   | true  | 无                                            |\n| /message | true  | 无                                            |\n\n例如，当前访问的路径是`/blog/detail/123`，则：\n\n| 导航路径 | exact | 类名               |\n| -------- | ----- | ------------------ |\n| /        | true  | 无                 |\n| /blog    | false | router-link-active |\n| /about   | true  | 无                 |\n| /message | true  | 无                 |\n\n\n\n另外，可以通过`active-class`属性更改匹配的类名，通过`exact-active-class`更改精确匹配的类名\n\n\n\n# 命名路由\n\n使用命名路由可以解除系统与路径之间的耦合\n\n```js\n// 路由配置\nconst router = new VueRouter({\n  routes: [ // 路由规则\n    // 当匹配到路径 /foo 时，渲染 Foo 组件\n    { name:\"foo\", path: '/foo', component: Foo },\n    // 当匹配到路径 /bar 时，渲染 Bar 组件\n  \t{ name:\"bar\", path: '/bar', component: Bar }\n  ]\n})\n\n```\n\n```html\n<!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 -->\n<RouterLink :to=\"{ name:'foo' }\">go to foo</RouterLink>\n```\n\n","slug":"路由","published":1,"updated":"2022-01-01T06:27:06.596Z","_id":"ckxvf7cmw000wccaxh6uo94rl","layout":"post","photos":[],"link":"","content":"<p>vue-router官网：<a href=\"https://router.vuejs.org/zh/\">https://router.vuejs.org/zh/</a></p>\n<img src=\"http://mdrs.yuanjin.tech/img/20201202170037.png\" alt=\"image-20201202170037391\" style=\"zoom:50%;\" />\n\n<ol>\n<li><p><strong>如何根据地址中的路径选择不同的组件？</strong></p>\n</li>\n<li><p><strong>把选择的组件放到哪个位置？</strong></p>\n</li>\n<li><p><strong>如何无刷新的切换组件？</strong></p>\n</li>\n</ol>\n<h1 id=\"路由插件\"><a href=\"#路由插件\" class=\"headerlink\" title=\"路由插件\"></a>路由插件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue-router</span><br></pre></td></tr></table></figure>\n\n<p>路由插件的使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter); <span class=\"comment\">// Vue.use(插件)  在Vue中使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  router</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [ <span class=\"comment\">// 路由规则</span></span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /foo 时，渲染 Foo 组件</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>, <span class=\"attr\">component</span>: Foo &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /bar 时，渲染 Bar 组件</span></span><br><span class=\"line\">  \t&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/bar&#x27;</span>, <span class=\"attr\">component</span>: Bar &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 公共区域 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 页面区域 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- vue-router 匹配到的组件会渲染到这里 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RouterView</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h1><p>路由模式决定了：</p>\n<ol>\n<li>路由从哪里获取访问路径</li>\n<li>路由如何改变访问路径</li>\n</ol>\n<p><code>vue-router</code>提供了三种路由模式：</p>\n<ol>\n<li><p>hash：默认值。路由从浏览器地址栏中的hash部分获取路径，改变路径也是改变的hash部分。该模式兼容性最好。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8081/#/blog  --&gt;  /blog</span><br><span class=\"line\">http://localhost:8081/about#/blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li>\n<li><p>history：路由从浏览器地址栏的<code>location.pathname</code>中获取路径，改变路径使用的H5的<code>history api</code>。该模式可以让地址栏最友好，但是需要浏览器支持<code>history api</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8081/#/blog  --&gt;  /</span><br><span class=\"line\">http://localhost:8081/about#/blog  --&gt; /about</span><br><span class=\"line\">http://localhost:8081/blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li>\n<li><p>abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存： /\t\t\t--&gt;   /</span><br><span class=\"line\">内存： /about\t--&gt; /about</span><br><span class=\"line\">内存： /blog\t  --&gt; /blog</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><p><code>vue-router</code>提供了全局的组件<code>RouterLink</code>，它的渲染结果是一个<code>a</code>元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RouterLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/blog&quot;</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">RouterLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mode:hash 生成 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#/blog&quot;</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mode:history 生成 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 为了避免刷新页面，vue-router实际上为它添加了点击事件，并阻止了默认行为，在事件内部使用hitory api更改路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/blog&quot;</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150453.png\" alt=\"image-20201203150453332\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150918.png\" alt=\"image-20201203150918219\" style=\"zoom:50%;\" />\n\n<h2 id=\"激活状态\"><a href=\"#激活状态\" class=\"headerlink\" title=\"激活状态\"></a>激活状态</h2><p>默认情况下，<code>vue-router</code>会用 <strong>当前路径</strong> 匹配 <strong>导航路径</strong> ：</p>\n<ul>\n<li>如果当前路径是以导航路径开头，则算作匹配，会为导航的a元素添加类名<code>router-link-active</code></li>\n<li>如果当前路径完全等于导航路径，则算作精确匹配，会为导航的a元素添加类名<code>router-link-exact-active</code></li>\n</ul>\n<p>例如，当前访问的路径是<code>/blog</code>，则：</p>\n<table>\n<thead>\n<tr>\n<th>导航路径</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>router-link-active</td>\n</tr>\n<tr>\n<td>/blog</td>\n<td>router-link-active   router-link-exact-active</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/message</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>可以为组件<code>RouterLink</code>添加bool属性<code>exact</code>，将匹配规则改为：必须要精确匹配才能添加匹配类名<code>router-link-active</code></p>\n<p>例如，当前访问的路径是<code>/blog</code>，则：</p>\n<table>\n<thead>\n<tr>\n<th>导航路径</th>\n<th>exact</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/blog</td>\n<td>false</td>\n<td>router-link-active   router-link-exact-active</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/message</td>\n<td>true</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>例如，当前访问的路径是<code>/blog/detail/123</code>，则：</p>\n<table>\n<thead>\n<tr>\n<th>导航路径</th>\n<th>exact</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/blog</td>\n<td>false</td>\n<td>router-link-active</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/message</td>\n<td>true</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>另外，可以通过<code>active-class</code>属性更改匹配的类名，通过<code>exact-active-class</code>更改精确匹配的类名</p>\n<h1 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h1><p>使用命名路由可以解除系统与路径之间的耦合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [ <span class=\"comment\">// 路由规则</span></span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /foo 时，渲染 Foo 组件</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;foo&quot;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>, <span class=\"attr\">component</span>: Foo &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /bar 时，渲染 Bar 组件</span></span><br><span class=\"line\">  \t&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;bar&quot;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/bar&#x27;</span>, <span class=\"attr\">component</span>: Bar &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RouterLink</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name:&#x27;foo&#x27; &#125;&quot;</span>&gt;</span>go to foo<span class=\"tag\">&lt;/<span class=\"name\">RouterLink</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":2582,"excerpt":"","more":"<p>vue-router官网：<a href=\"https://router.vuejs.org/zh/\">https://router.vuejs.org/zh/</a></p>\n<img src=\"http://mdrs.yuanjin.tech/img/20201202170037.png\" alt=\"image-20201202170037391\" style=\"zoom:50%;\" />\n\n<ol>\n<li><p><strong>如何根据地址中的路径选择不同的组件？</strong></p>\n</li>\n<li><p><strong>把选择的组件放到哪个位置？</strong></p>\n</li>\n<li><p><strong>如何无刷新的切换组件？</strong></p>\n</li>\n</ol>\n<h1 id=\"路由插件\"><a href=\"#路由插件\" class=\"headerlink\" title=\"路由插件\"></a>路由插件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue-router</span><br></pre></td></tr></table></figure>\n\n<p>路由插件的使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter); <span class=\"comment\">// Vue.use(插件)  在Vue中使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  router</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [ <span class=\"comment\">// 路由规则</span></span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /foo 时，渲染 Foo 组件</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>, <span class=\"attr\">component</span>: Foo &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /bar 时，渲染 Bar 组件</span></span><br><span class=\"line\">  \t&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/bar&#x27;</span>, <span class=\"attr\">component</span>: Bar &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 公共区域 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 页面区域 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- vue-router 匹配到的组件会渲染到这里 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RouterView</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h1><p>路由模式决定了：</p>\n<ol>\n<li>路由从哪里获取访问路径</li>\n<li>路由如何改变访问路径</li>\n</ol>\n<p><code>vue-router</code>提供了三种路由模式：</p>\n<ol>\n<li><p>hash：默认值。路由从浏览器地址栏中的hash部分获取路径，改变路径也是改变的hash部分。该模式兼容性最好。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8081/#/blog  --&gt;  /blog</span><br><span class=\"line\">http://localhost:8081/about#/blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li>\n<li><p>history：路由从浏览器地址栏的<code>location.pathname</code>中获取路径，改变路径使用的H5的<code>history api</code>。该模式可以让地址栏最友好，但是需要浏览器支持<code>history api</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8081/#/blog  --&gt;  /</span><br><span class=\"line\">http://localhost:8081/about#/blog  --&gt; /about</span><br><span class=\"line\">http://localhost:8081/blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li>\n<li><p>abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存： /\t\t\t--&gt;   /</span><br><span class=\"line\">内存： /about\t--&gt; /about</span><br><span class=\"line\">内存： /blog\t  --&gt; /blog</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><p><code>vue-router</code>提供了全局的组件<code>RouterLink</code>，它的渲染结果是一个<code>a</code>元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RouterLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/blog&quot;</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">RouterLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mode:hash 生成 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#/blog&quot;</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mode:history 生成 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 为了避免刷新页面，vue-router实际上为它添加了点击事件，并阻止了默认行为，在事件内部使用hitory api更改路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/blog&quot;</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150453.png\" alt=\"image-20201203150453332\" />\n\n<img src=\"http://mdrs.yuanjin.tech/img/20201203150918.png\" alt=\"image-20201203150918219\" style=\"zoom:50%;\" />\n\n<h2 id=\"激活状态\"><a href=\"#激活状态\" class=\"headerlink\" title=\"激活状态\"></a>激活状态</h2><p>默认情况下，<code>vue-router</code>会用 <strong>当前路径</strong> 匹配 <strong>导航路径</strong> ：</p>\n<ul>\n<li>如果当前路径是以导航路径开头，则算作匹配，会为导航的a元素添加类名<code>router-link-active</code></li>\n<li>如果当前路径完全等于导航路径，则算作精确匹配，会为导航的a元素添加类名<code>router-link-exact-active</code></li>\n</ul>\n<p>例如，当前访问的路径是<code>/blog</code>，则：</p>\n<table>\n<thead>\n<tr>\n<th>导航路径</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>router-link-active</td>\n</tr>\n<tr>\n<td>/blog</td>\n<td>router-link-active   router-link-exact-active</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/message</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>可以为组件<code>RouterLink</code>添加bool属性<code>exact</code>，将匹配规则改为：必须要精确匹配才能添加匹配类名<code>router-link-active</code></p>\n<p>例如，当前访问的路径是<code>/blog</code>，则：</p>\n<table>\n<thead>\n<tr>\n<th>导航路径</th>\n<th>exact</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/blog</td>\n<td>false</td>\n<td>router-link-active   router-link-exact-active</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/message</td>\n<td>true</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>例如，当前访问的路径是<code>/blog/detail/123</code>，则：</p>\n<table>\n<thead>\n<tr>\n<th>导航路径</th>\n<th>exact</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/blog</td>\n<td>false</td>\n<td>router-link-active</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>true</td>\n<td>无</td>\n</tr>\n<tr>\n<td>/message</td>\n<td>true</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>另外，可以通过<code>active-class</code>属性更改匹配的类名，通过<code>exact-active-class</code>更改精确匹配的类名</p>\n<h1 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h1><p>使用命名路由可以解除系统与路径之间的耦合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [ <span class=\"comment\">// 路由规则</span></span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /foo 时，渲染 Foo 组件</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;foo&quot;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>, <span class=\"attr\">component</span>: Foo &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当匹配到路径 /bar 时，渲染 Bar 组件</span></span><br><span class=\"line\">  \t&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;bar&quot;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/bar&#x27;</span>, <span class=\"attr\">component</span>: Bar &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RouterLink</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name:&#x27;foo&#x27; &#125;&quot;</span>&gt;</span>go to foo<span class=\"tag\">&lt;/<span class=\"name\">RouterLink</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxt3o5hm0009isax3lp3afrg","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hu000hisax5z63c9lx"},{"post_id":"ckxt3o5h80001isax3gqdboov","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hw000lisax4so98ess"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hx000nisax7flm0r88"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5hz000risaxa19h0qpc"},{"post_id":"ckxt3o5he0003isaxck8cazr7","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i0000uisax0bjqdto9"},{"post_id":"ckxt3o5hs000gisax91ya17rl","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i2000yisaxcsyv9e3z"},{"post_id":"ckxt3o5hv000kisax4djg4if4","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i30011isaxedy1dar0"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i50015isax1aaq81tv"},{"post_id":"ckxt3o5hw000misax38lv49tf","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i60018isax4aqafjal"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i7001cisaxa14dazlc"},{"post_id":"ckxt3o5i0000tisax74y7ehep","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5i9001fisax93ag11bu"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ib001jisax93gk3dl5"},{"post_id":"ckxt3o5i20010isaxffiq19uw","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ic001misax86js1qzv"},{"post_id":"ckxt3o5i40014isax5txgcn2p","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ie001qisaxe3id066e"},{"post_id":"ckxt3o5i50017isaxcznv8s09","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5if001tisax66o51b4p"},{"post_id":"ckxt3o5i7001bisax450dhuqf","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ig001xisaxein3284s"},{"post_id":"ckxt3o5i8001eisax57c05f60","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ii0020isax3o4h36u9"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ij0024isax8c8v976g"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5im0027isaxgomz0udk"},{"post_id":"ckxt3o5id001pisaxfltpbw66","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ip002bisax3cs24o3l"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iq002eisaxdihsdqoi"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5is002iisax54tpdj1u"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5it002lisax6gdd2o7j"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iv002pisax9fxehtx4"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iw002sisax7ka1dfxj"},{"post_id":"ckxt3o5io002aisax4fdz66em","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iy002wisax5qga7ckz"},{"post_id":"ckxt3o5ip002disax6gi96cgq","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5iz002zisax6bmpfbmn"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j20032isax7h3h3pj1"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j30035isaxci2aciyf"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j70038isax1u104zij"},{"post_id":"ckxt3o5iv002risax39kv2jy8","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5j9003bisax07fd68e6"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ja003eisaxa1um98pt"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jc003hisax8plhd938"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jd003kisaxeuka3dy5"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5je003nisax1f0y5bgl"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jf003qisax4qw8dzjj"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jg003tisaxabac01mq"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jh003yisaxaupgbyx2"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ji0040isax51xd8zue"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5ji0044isax658xbtwx"},{"post_id":"ckxt3o5jd003misax35a27iwf","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxt3o5jj0046isaxcdsb6ve7"},{"post_id":"ckxt3o5je003pisaxhgwlhx2s","category_id":"ckxt3o5jg003uisax4vieahs0","_id":"ckxt3o5jj0048isax4ixwdke9"},{"post_id":"ckxt3o5jf003sisaxfa6yc5xl","category_id":"ckxt3o5ji0042isaxffouey6s","_id":"ckxt3o5jk004disax19u060l8"},{"post_id":"ckxt3o5jh003xisax0a8pg2ux","category_id":"ckxt3o5jj0049isaxf3t47yxn","_id":"ckxt3o5jk004hisaxg7dm86b0"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxu4r7t20003kwax5vs5dtkv"},{"post_id":"ckxu6dni4000510ax28ovhbh1","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnib000b10ax13ad56zl"},{"post_id":"ckxu6dnhg000010ax62b4f3gs","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnie000f10ax1b3031ng"},{"post_id":"ckxu6dni6000610axch5o3217","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnig000i10ax5cmu6wrd"},{"post_id":"ckxu6dnhl000110ax6u5s3f5p","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnii000m10axhludaawb"},{"post_id":"ckxu6dnib000a10ax37zmho53","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnij000p10ax0xazdxcw"},{"post_id":"ckxu6dnid000e10ax7cr86kyw","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnil000t10axetl4d94d"},{"post_id":"ckxu6dni3000410ax2or8bqso","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnim000w10axbqhv2pnz"},{"post_id":"ckxu6dnif000h10ax7to6bliq","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnin001010ax691g1at8"},{"post_id":"ckxu6dnih000l10axhsad1u3s","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dniq001310ax3i1p1ajd"},{"post_id":"ckxu6dnii000o10axe8v0251c","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnis001710axecoh39kt"},{"post_id":"ckxu6dnik000s10ax8p8h22l3","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dniv001a10axcuds2cgn"},{"post_id":"ckxu6dnil000v10ax920ifj1s","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnix001d10ax3rr5fv37"},{"post_id":"ckxu6dnim000z10axhykichu4","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dniz001h10ax3qg04cqc"},{"post_id":"ckxu6dnip001210ax04en63oh","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj1001k10axbydtaxbl"},{"post_id":"ckxu6dnir001610axg1gu8lw3","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj3001o10axarkt224u"},{"post_id":"ckxu6dnit001910axbyjl0cc0","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj4001r10axdrx24f4p"},{"post_id":"ckxu6dniv001c10axe6z7a9i7","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj5001v10axabow7hil"},{"post_id":"ckxu6dniy001g10axc6mngupi","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj6001y10ax5dcqfps8"},{"post_id":"ckxu6dnj0001j10ax2gkkep3c","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj7002110ax4r1yd3j7"},{"post_id":"ckxu6dnj2001n10ax8gokdeur","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj8002310axax0aaqkz"},{"post_id":"ckxu6dnj5001u10ax97yefntz","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj8002610ax6gjqdnoa"},{"post_id":"ckxu6dnj6001x10axeqr41q7l","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu6dnj8002810ax0hbb1515"},{"post_id":"ckxu6dnj3001q10axhpnldvw7","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxu756mz0002fgax39a250su"},{"post_id":"ckxvf7clb0001ccax2zkd8t4o","category_id":"ckxt3o5hh0004isax51b78un5","_id":"ckxvf7cm00008ccaxgi9f7xhc"},{"post_id":"ckxvf7cle0002ccaxb60heplu","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvf7cm5000hccax9ho59i28"},{"post_id":"ckxvf7cle0002ccaxb60heplu","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvf7cma000jccax1mhn0ml5"},{"post_id":"ckxvf7cl60000ccax2n0ccxl9","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn4j0002iwax472z4u61"},{"post_id":"ckxvf7cl60000ccax2n0ccxl9","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn4l0003iwax6jordi5x"},{"post_id":"ckxu6dnhg000010ax62b4f3gs","category_id":"ckxvgbn4j0001iwaxbrg7a3e7","_id":"ckxvgbn4p0007iwaxaw9kflsi"},{"post_id":"ckxu6dnhl000110ax6u5s3f5p","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn4u0009iwaxh3k5cg4a"},{"post_id":"ckxu6dni4000510ax28ovhbh1","category_id":"ckxvgbn4p0008iwaxedasdj91","_id":"ckxvgbn4y000diwax50q4bvxg"},{"post_id":"ckxu6dni6000610axch5o3217","category_id":"ckxvgbn4u000biwax1nyd1clt","_id":"ckxvgbn52000giwaxczdq6sob"},{"post_id":"ckxu6dnil000v10ax920ifj1s","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn54000hiwaxcosn78cj"},{"post_id":"ckxu6dni3000410ax2or8bqso","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn55000jiwaxbtvb3ugq"},{"post_id":"ckxu6dnit001910axbyjl0cc0","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn57000liwaxfjypdx6g"},{"post_id":"ckxu6dnid000e10ax7cr86kyw","category_id":"ckxvgbn4p0008iwaxedasdj91","_id":"ckxvgbn58000oiwax1osr4ytu"},{"post_id":"ckxvf7clg0004ccax0nl2amzr","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn59000piwaxcr3t4ynr"},{"post_id":"ckxvf7clg0004ccax0nl2amzr","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5b000riwaxg7fxfv5t"},{"post_id":"ckxu6dnii000o10axe8v0251c","category_id":"ckxvgbn4u000biwax1nyd1clt","_id":"ckxvgbn5d000tiwaxdl71hiq9"},{"post_id":"ckxu6dnip001210ax04en63oh","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn5e000viwaxg3v2evx0"},{"post_id":"ckxu6dnif000h10ax7to6bliq","category_id":"ckxvgbn4u000biwax1nyd1clt","_id":"ckxvgbn5f000yiwax0wd62cpt"},{"post_id":"ckxvf7cm2000cccax6bj6f2tb","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5g0010iwax1e98h1zh"},{"post_id":"ckxvf7cm2000cccax6bj6f2tb","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5i0013iwaxgti43gqn"},{"post_id":"ckxvf7cm3000eccaxe0cs3aqh","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5i0015iwaxhgpc5nst"},{"post_id":"ckxvf7cm3000eccaxe0cs3aqh","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5m0018iwax0hqf4viu"},{"post_id":"ckxvf7cli0006ccaxeq725fzz","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5n001biwax3s2n0wms"},{"post_id":"ckxvf7cli0006ccaxeq725fzz","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5p001eiwax82tsb3wm"},{"post_id":"ckxu6dnik000s10ax8p8h22l3","category_id":"ckxvgbn5a000qiwaxfjl06ahk","_id":"ckxvgbn5q001giwaxe7g70lal"},{"post_id":"ckxvf7cm1000accax9tfpghc2","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5r001iiwax3m672o9h"},{"post_id":"ckxvf7cm1000accax9tfpghc2","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5t001kiwaxdobg8osk"},{"post_id":"ckxvf7cm6000iccax0x3k08vz","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5u001miwaxb3ixekht"},{"post_id":"ckxvf7cm6000iccax0x3k08vz","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5v001oiwax69sm0ay4"},{"post_id":"ckxu6dnih000l10axhsad1u3s","category_id":"ckxvgbn5e000wiwaxhmx2e2rv","_id":"ckxvgbn5w001qiwax18wt0ajs"},{"post_id":"ckxvf7cme000kccaxbui1b2u6","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn5x001siwax6qc4fszk"},{"post_id":"ckxvf7cme000kccaxbui1b2u6","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn5y001viwaxan6vbz5a"},{"post_id":"ckxu6dniv001c10axe6z7a9i7","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn5z001xiwax63a936g1"},{"post_id":"ckxu6dnib000a10ax37zmho53","category_id":"ckxvgbn5g0011iwax3vt2hgvh","_id":"ckxvgbn5z001ziwax58pub48u"},{"post_id":"ckxvf7cmj000mccaxacmc8swx","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn610021iwax8xhhcxcm"},{"post_id":"ckxvf7cmj000mccaxacmc8swx","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn620023iwax2roa3rob"},{"post_id":"ckxvf7cml000occax9s5u1m2l","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn630025iwaxh3eqejeq"},{"post_id":"ckxvf7cml000occax9s5u1m2l","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn640027iwaxbc7l80xu"},{"post_id":"ckxu6dnir001610axg1gu8lw3","category_id":"ckxvgbn5j0017iwaxa7jifafy","_id":"ckxvgbn640029iwaxeix6ezlc"},{"post_id":"ckxvf7cmi000lccax1tvr1t1m","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn65002biwaxeskdcn3o"},{"post_id":"ckxvf7cmi000lccax1tvr1t1m","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn65002diwax517t5ld9"},{"post_id":"ckxvf7cmk000nccaxg4cffzz9","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn65002fiwaxgfd387vx"},{"post_id":"ckxvf7cmk000nccaxg4cffzz9","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn65002hiwaxdl8rgfe1"},{"post_id":"ckxvf7cmm000pccax6pmo6vku","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn66002jiwax5cs44mi8"},{"post_id":"ckxvf7cmm000pccax6pmo6vku","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn66002liwaxbm84a9hc"},{"post_id":"ckxu6dnim000z10axhykichu4","category_id":"ckxvgbn5o001diwax8u4sfb9n","_id":"ckxvgbn66002niwaxh9o593m6"},{"post_id":"ckxvf7cmp000qccaxfp380c3f","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn66002piwaxfgsrgf9w"},{"post_id":"ckxvf7cmp000qccaxfp380c3f","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn66002riwaxgzfoalz6"},{"post_id":"ckxu6dniy001g10axc6mngupi","category_id":"ckxvgbn4u000biwax1nyd1clt","_id":"ckxvgbn66002tiwaxed0xdu1i"},{"post_id":"ckxvf7cmr000rccax4pwpcvjm","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn66002viwax6mwfa02x"},{"post_id":"ckxvf7cmr000rccax4pwpcvjm","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn66002xiwaxb5v293he"},{"post_id":"ckxvf7cmv000vccax51yb51ny","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn67002ziwax0vez5xqf"},{"post_id":"ckxvf7cmv000vccax51yb51ny","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn670031iwax5jddhlz4"},{"post_id":"ckxvf7cmt000sccax7c8s0cq9","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn670033iwaxc44i5rau"},{"post_id":"ckxvf7cmt000sccax7c8s0cq9","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn670035iwax9ee89rrk"},{"post_id":"ckxvf7cmu000tccaxg9qr6fl6","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn680036iwax3w5p1ssn"},{"post_id":"ckxvf7cmu000tccaxg9qr6fl6","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn680037iwaxffqk5gyl"},{"post_id":"ckxu6dnj0001j10ax2gkkep3c","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn680038iwaxbdi1bt78"},{"post_id":"ckxu6dnj2001n10ax8gokdeur","category_id":"ckxvgbn5x001uiwaxcwpo19g3","_id":"ckxvgbn690039iwax0i706slg"},{"post_id":"ckxvf7cmv000uccaxgbps631k","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn69003aiwaxcr5h4j2a"},{"post_id":"ckxvf7cmv000uccaxgbps631k","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn69003biwaxenppdufa"},{"post_id":"ckxvf7cmw000wccaxh6uo94rl","category_id":"ckxu6dnho000210axe77jhel4","_id":"ckxvgbn69003ciwaxaln7hiii"},{"post_id":"ckxvf7cmw000wccaxh6uo94rl","category_id":"ckxvf7clj0007ccax0i9nb0i9","_id":"ckxvgbn69003diwax595u0qfb"},{"post_id":"ckxu6dnj5001u10ax97yefntz","category_id":"ckxvgbn4u000biwax1nyd1clt","_id":"ckxvgbn69003eiwax26rif8v6"},{"post_id":"ckxu6dnj6001x10axeqr41q7l","category_id":"ckxvgbn5o001diwax8u4sfb9n","_id":"ckxvgbn69003fiwax8fb2chtg"},{"post_id":"ckxu6dnj3001q10axhpnldvw7","category_id":"ckxvgbn4m0005iwaxdi728lo3","_id":"ckxvgbn69003giwax5ccddq6m"}],"PostTag":[{"post_id":"ckxt3o5hv000kisax4djg4if4","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5hy000pisaxeaute8uj"},{"post_id":"ckxt3o5hv000kisax4djg4if4","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5i0000sisax0iesh79b"},{"post_id":"ckxt3o5hv000kisax4djg4if4","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5i1000wisax6q72135f"},{"post_id":"ckxt3o5h80001isax3gqdboov","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5i2000zisax8aec8jll"},{"post_id":"ckxt3o5h80001isax3gqdboov","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5i40013isaxdqefhlij"},{"post_id":"ckxt3o5h80001isax3gqdboov","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5i50016isax51jshqsv"},{"post_id":"ckxt3o5hw000misax38lv49tf","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5i6001aisax21wrdog9"},{"post_id":"ckxt3o5hw000misax38lv49tf","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5i8001disax6zur79yv"},{"post_id":"ckxt3o5hw000misax38lv49tf","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5i9001hisaxbqj48uxc"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ib001kisax1kx23l89"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5id001oisaxd1f72rli"},{"post_id":"ckxt3o5hy000qisaxg7due5dd","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ie001risaxa177cxb1"},{"post_id":"ckxt3o5i0000tisax74y7ehep","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5if001visaxhxka8qez"},{"post_id":"ckxt3o5i0000tisax74y7ehep","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5ih001yisax8wi5bota"},{"post_id":"ckxt3o5i0000tisax74y7ehep","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ii0022isaxgpeg9ffd"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ij0025isax1n9a7oj3"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5in0029isaxh5m09llb"},{"post_id":"ckxt3o5i1000xisax3kpe7d4x","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ip002cisaxaolxemhu"},{"post_id":"ckxt3o5i20010isaxffiq19uw","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ir002gisaxe0cb1s5n"},{"post_id":"ckxt3o5i20010isaxffiq19uw","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5is002jisax5gw56eeg"},{"post_id":"ckxt3o5i20010isaxffiq19uw","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5iu002nisaxc0si7usk"},{"post_id":"ckxt3o5i40014isax5txgcn2p","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5iv002qisaxffb8di99"},{"post_id":"ckxt3o5i40014isax5txgcn2p","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5ix002uisax4yun1jd1"},{"post_id":"ckxt3o5i40014isax5txgcn2p","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5iy002xisaxgo700672"},{"post_id":"ckxt3o5he0003isaxck8cazr7","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5j10030isax23xuad4a"},{"post_id":"ckxt3o5he0003isaxck8cazr7","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5j20033isaxcwgzd1nu"},{"post_id":"ckxt3o5he0003isaxck8cazr7","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5j50036isaxa4z17qmm"},{"post_id":"ckxt3o5i50017isaxcznv8s09","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5j80039isax5ro8aib4"},{"post_id":"ckxt3o5i50017isaxcznv8s09","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5ja003cisaxclrm2bt5"},{"post_id":"ckxt3o5i50017isaxcznv8s09","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jb003fisax4m4f5lku"},{"post_id":"ckxt3o5i7001bisax450dhuqf","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jc003iisax40eb5kxk"},{"post_id":"ckxt3o5i7001bisax450dhuqf","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jd003lisax6l0kagxj"},{"post_id":"ckxt3o5i7001bisax450dhuqf","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5je003oisaxge1j6m4s"},{"post_id":"ckxt3o5i8001eisax57c05f60","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jf003risaxea5x7yne"},{"post_id":"ckxt3o5i8001eisax57c05f60","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jh003wisax5c17br4f"},{"post_id":"ckxt3o5i8001eisax57c05f60","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5ji003zisaxbn3t4xp4"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5ji0041isaxh1tb3nxa"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jj0045isaxhlzu48x4"},{"post_id":"ckxt3o5ia001iisax9idr3ryi","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jj0047isax7nxk12xx"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jk004bisax0psq4j7h"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jk004cisax7fmy7g0l"},{"post_id":"ckxt3o5ib001lisax9w00d5yr","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jk004fisax4jjjf4xf"},{"post_id":"ckxt3o5id001pisaxfltpbw66","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jk004gisaxgero6h4o"},{"post_id":"ckxt3o5id001pisaxfltpbw66","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jl004jisax7wx18u5n"},{"post_id":"ckxt3o5id001pisaxfltpbw66","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jl004kisax6s10g6bn"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jl004misaxe33g1lua"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004nisax99ndcgnk"},{"post_id":"ckxt3o5hk0007isax44lr5vf2","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004oisax6nh353zv"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004pisax7uf91dxr"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004qisaxeqdm8lnz"},{"post_id":"ckxt3o5ie001sisax25hv7tpc","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004risaxfgd600fs"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004sisaxbsnhbzdg"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004tisaxa4a226bd"},{"post_id":"ckxt3o5ig001wisaxfqkhc66a","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004uisaxgmgvg700"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004visax82xf3cr0"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004wisaxcomr7che"},{"post_id":"ckxt3o5ih001zisaxdnufacc3","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jm004xisaxhel94agu"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jm004yisaxe549gb44"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jm004zisaxbflths3v"},{"post_id":"ckxt3o5ii0023isaxejv15yj8","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0050isax0mep2gmv"},{"post_id":"ckxt3o5hm0009isax3lp3afrg","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn0051isax9w8n155j"},{"post_id":"ckxt3o5hm0009isax3lp3afrg","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn0052isaxdws07j4r"},{"post_id":"ckxt3o5hm0009isax3lp3afrg","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0053isax6mrt7mpd"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn0054isax6fmc45l4"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn0055isax9tz2cp51"},{"post_id":"ckxt3o5ij0026isax56q1gyxb","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0056isaxai8c3hwa"},{"post_id":"ckxt3o5io002aisax4fdz66em","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn0057isax5cg2hepf"},{"post_id":"ckxt3o5io002aisax4fdz66em","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn0058isaxd0scgkwh"},{"post_id":"ckxt3o5io002aisax4fdz66em","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn0059isax574bcruk"},{"post_id":"ckxt3o5ip002disax6gi96cgq","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jn005aisaxfi2jh0gd"},{"post_id":"ckxt3o5ip002disax6gi96cgq","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jn005bisax03i1b94u"},{"post_id":"ckxt3o5ip002disax6gi96cgq","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jn005cisaxftbf4kzb"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005disaxa7sa3s3s"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005eisax0qi0fvj2"},{"post_id":"ckxt3o5ir002hisax7hkbcffm","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005fisaxbbnobsrl"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005gisaxdaxw3yrq"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005hisax3gdsgtg0"},{"post_id":"ckxt3o5hn000bisax4aw8h0x2","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005iisax5yks6nlw"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005jisax8d7bc0zw"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005kisaxd7vf5pah"},{"post_id":"ckxt3o5is002kisaxf79p0z1b","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005lisax0r3m1ral"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jo005misax8gm34f2p"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jo005nisax98s220a5"},{"post_id":"ckxt3o5iu002oisaxexre1qb0","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jo005oisaxa9eigay0"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005pisaxg8xr9soj"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005qisaxew755jz5"},{"post_id":"ckxt3o5hq000fisaxh53g2spu","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jp005risaxg69cdt31"},{"post_id":"ckxt3o5iv002risax39kv2jy8","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005sisax7y0lcp60"},{"post_id":"ckxt3o5iv002risax39kv2jy8","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005tisax4ixy87mk"},{"post_id":"ckxt3o5iv002risax39kv2jy8","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jp005uisax6ob4hel9"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005visaxdnudgce5"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005wisax240k7x35"},{"post_id":"ckxt3o5ix002visaxgj4j3flu","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jp005xisax2s37fgxu"},{"post_id":"ckxt3o5hs000gisax91ya17rl","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jp005yisax8bpodmmm"},{"post_id":"ckxt3o5hs000gisax91ya17rl","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jp005zisax9sfd30bk"},{"post_id":"ckxt3o5hs000gisax91ya17rl","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0060isax0oeu7xjc"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq0061isaxe4uc2vnu"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq0062isaxa4dqfj0o"},{"post_id":"ckxt3o5iy002yisax7dbr0vrz","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0063isaxbzfj6m16"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq0064isax0cj4hd49"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq0065isax83nb2x0v"},{"post_id":"ckxt3o5j10031isaxc2qpcj1f","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0066isax2d3yaj7w"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq0067isaxhw1phcq4"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq0068isax4l1d34ux"},{"post_id":"ckxt3o5j30034isax4mlmbtk7","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jq0069isax136bclbd"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jq006aisax3zlu73p0"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jq006bisaxfl0a8som"},{"post_id":"ckxt3o5j60037isaxhdjh2jny","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006cisax1qsie3gy"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006disax3c61fnss"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006eisaxf6ux6f36"},{"post_id":"ckxt3o5j8003aisax4z32fpx7","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006fisax0d8l6ten"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006gisaxcv698vr0"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006hisaxb06t5nsb"},{"post_id":"ckxt3o5ja003disaxbo3k7xfl","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006iisax0c6d2vv9"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006jisaxhpqqeeo4"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006kisax4e302hr0"},{"post_id":"ckxt3o5jb003gisaxh35wcajz","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006lisaxejhtavc2"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006misax066iece4"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006nisax38h51fe0"},{"post_id":"ckxt3o5jc003jisax1z7nfofv","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5jr006oisax46gtcsgi"},{"post_id":"ckxt3o5jd003misax35a27iwf","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxt3o5jr006pisaxdkry2h3d"},{"post_id":"ckxt3o5jd003misax35a27iwf","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxt3o5jr006qisaxbwle1wxr"},{"post_id":"ckxt3o5jd003misax35a27iwf","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxt3o5js006risax35lf0m1j"},{"post_id":"ckxt3o5je003pisaxhgwlhx2s","tag_id":"ckxt3o5jg003visax7l728zff","_id":"ckxt3o5js006sisax9wdn38jq"},{"post_id":"ckxt3o5je003pisaxhgwlhx2s","tag_id":"ckxt3o5ji0043isaxcuelf9p4","_id":"ckxt3o5js006tisaxbueq6vcl"},{"post_id":"ckxt3o5jf003sisaxfa6yc5xl","tag_id":"ckxt3o5ji0043isaxcuelf9p4","_id":"ckxt3o5js006uisax4av28fnq"},{"post_id":"ckxt3o5jf003sisaxfa6yc5xl","tag_id":"ckxt3o5jk004eisaxd6xm4ldg","_id":"ckxt3o5js006visax239c0rio"},{"post_id":"ckxt3o5jh003xisax0a8pg2ux","tag_id":"ckxt3o5ji0043isaxcuelf9p4","_id":"ckxt3o5js006wisaxd09n3rxq"},{"post_id":"ckxt3o5jh003xisax0a8pg2ux","tag_id":"ckxt3o5jl004lisax7ij2ehzk","_id":"ckxt3o5js006xisax189ahxo3"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu4r7t20001kwax9iph3cla"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxu4r7t20002kwaxbjsnea89"},{"post_id":"ckxu4r7sw0000kwaxh64j4n32","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxu4r7t20004kwax9ckedegs"},{"post_id":"ckxu6dnhg000010ax62b4f3gs","tag_id":"ckxu6dni2000310axgdl91zyp","_id":"ckxu6dnie000g10ax2ikh4lqz"},{"post_id":"ckxu6dnhg000010ax62b4f3gs","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnig000j10axhir4bfm6"},{"post_id":"ckxu6dnif000h10ax7to6bliq","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu6dnii000n10ax4rmkaz8z"},{"post_id":"ckxu6dnif000h10ax7to6bliq","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnik000r10ax4nx4ckhd"},{"post_id":"ckxu6dnhl000110ax6u5s3f5p","tag_id":"ckxu6dnic000d10ax5sn72wz4","_id":"ckxu6dnil000u10ax8vhc33au"},{"post_id":"ckxu6dnhl000110ax6u5s3f5p","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnim000x10axctcqatov"},{"post_id":"ckxu6dnil000v10ax920ifj1s","tag_id":"ckxu6dnij000q10ax6k59e80f","_id":"ckxu6dnip001110ax66l393du"},{"post_id":"ckxu6dnil000v10ax920ifj1s","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dniq001410axhpwscsoz"},{"post_id":"ckxu6dni3000410ax2or8bqso","tag_id":"ckxu6dnij000q10ax6k59e80f","_id":"ckxu6dnit001810ax92613zmp"},{"post_id":"ckxu6dni3000410ax2or8bqso","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dniv001b10axhtc48i9t"},{"post_id":"ckxu6dnip001210ax04en63oh","tag_id":"ckxu6dnij000q10ax6k59e80f","_id":"ckxu6dniy001f10ax8xi95spd"},{"post_id":"ckxu6dnip001210ax04en63oh","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnj0001i10axcs37gwox"},{"post_id":"ckxu6dnit001910axbyjl0cc0","tag_id":"ckxu6dnij000q10ax6k59e80f","_id":"ckxu6dnj2001m10axeppx13z5"},{"post_id":"ckxu6dnit001910axbyjl0cc0","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnj3001p10axcaf678bl"},{"post_id":"ckxu6dniv001c10axe6z7a9i7","tag_id":"ckxu6dni2000310axgdl91zyp","_id":"ckxu6dnj5001t10axem65cc5p"},{"post_id":"ckxu6dniv001c10axe6z7a9i7","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnj5001w10ax8eupc53t"},{"post_id":"ckxu6dniy001g10axc6mngupi","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu6dnj7002010ax09pv4nu8"},{"post_id":"ckxu6dniy001g10axc6mngupi","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnj8002210ax73geg6l2"},{"post_id":"ckxu6dni4000510ax28ovhbh1","tag_id":"ckxu6dniq001510ax1qv9bp1a","_id":"ckxu6dnj8002510axe71q7mtv"},{"post_id":"ckxu6dni4000510ax28ovhbh1","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnj8002710ax91787lw1"},{"post_id":"ckxu6dnj0001j10ax2gkkep3c","tag_id":"ckxu6dnij000q10ax6k59e80f","_id":"ckxu6dnj8002910ax1vtw6vvv"},{"post_id":"ckxu6dnj0001j10ax2gkkep3c","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnj9002b10ax054rapc5"},{"post_id":"ckxu6dnj5001u10ax97yefntz","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu6dnj9002c10axgvqo0rhh"},{"post_id":"ckxu6dnj5001u10ax97yefntz","tag_id":"ckxu6dnj1001l10axhk6f4yst","_id":"ckxu6dnja002e10ax38mx6072"},{"post_id":"ckxu6dnj5001u10ax97yefntz","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnja002f10ax0z4jey81"},{"post_id":"ckxu6dni6000610axch5o3217","tag_id":"ckxu6dnj1001l10axhk6f4yst","_id":"ckxu6dnjb002h10ax9lwif4zr"},{"post_id":"ckxu6dni6000610axch5o3217","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu6dnjb002i10ax8bose1c6"},{"post_id":"ckxu6dni6000610axch5o3217","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjb002k10ax4s1df6bw"},{"post_id":"ckxu6dnib000a10ax37zmho53","tag_id":"ckxu6dnj6001z10ax5oc39f4c","_id":"ckxu6dnjb002l10ax84my3diz"},{"post_id":"ckxu6dnib000a10ax37zmho53","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjc002n10ax5xqv4jj5"},{"post_id":"ckxu6dnib000a10ax37zmho53","tag_id":"ckxu6dnj8002410ax4ruxelym","_id":"ckxu6dnjc002o10axbqzp3uib"},{"post_id":"ckxu6dnid000e10ax7cr86kyw","tag_id":"ckxu6dniq001510ax1qv9bp1a","_id":"ckxu6dnjc002p10ax3tqjga0a"},{"post_id":"ckxu6dnid000e10ax7cr86kyw","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjf002r10ax369z9xzh"},{"post_id":"ckxu6dnih000l10axhsad1u3s","tag_id":"ckxu6dnj9002d10ax8goeh85k","_id":"ckxu6dnjf002s10axcenh195q"},{"post_id":"ckxu6dnih000l10axhsad1u3s","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjg002u10ax6r2x9uio"},{"post_id":"ckxu6dnii000o10axe8v0251c","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxu6dnjg002v10ax7q8phx28"},{"post_id":"ckxu6dnii000o10axe8v0251c","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjg002x10ax00k3f029"},{"post_id":"ckxu6dnii000o10axe8v0251c","tag_id":"ckxu6dnja002g10ax3zzygfh4","_id":"ckxu6dnjg002y10axee9a4nwz"},{"post_id":"ckxu6dnik000s10ax8p8h22l3","tag_id":"ckxu6dnjb002j10axfod29gjx","_id":"ckxu6dnjh002z10ax920t96iq"},{"post_id":"ckxu6dnik000s10ax8p8h22l3","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjh003010axhsht67r1"},{"post_id":"ckxu6dnim000z10axhykichu4","tag_id":"ckxu6dnjc002m10axb6o38l1b","_id":"ckxu6dnjh003110ax2c1q928l"},{"post_id":"ckxu6dnim000z10axhykichu4","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjh003210axc8lebhs9"},{"post_id":"ckxu6dnir001610axg1gu8lw3","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjh003310ax0wbxanro"},{"post_id":"ckxu6dnir001610axg1gu8lw3","tag_id":"ckxu6dnjc002q10axfkjj5966","_id":"ckxu6dnjh003410axaapyf9pf"},{"post_id":"ckxu6dnj2001n10ax8gokdeur","tag_id":"ckxu6dnjf002t10ax4obg36hn","_id":"ckxu6dnjh003510ax20vogf8h"},{"post_id":"ckxu6dnj2001n10ax8gokdeur","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjh003610axg8vffms8"},{"post_id":"ckxu6dnj6001x10axeqr41q7l","tag_id":"ckxu6dnjc002m10axb6o38l1b","_id":"ckxu6dnjh003710ax51tcff9j"},{"post_id":"ckxu6dnj6001x10axeqr41q7l","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu6dnjh003810axe5wrhh8r"},{"post_id":"ckxu6dnj3001q10axhpnldvw7","tag_id":"ckxu6dnij000q10ax6k59e80f","_id":"ckxu756mx0000fgax9wxqe5ud"},{"post_id":"ckxu6dnj3001q10axhpnldvw7","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxu756mz0001fgax991420nq"},{"post_id":"ckxvf7clb0001ccax2zkd8t4o","tag_id":"ckxt3o5hi0005isaxbatfdhlk","_id":"ckxvf7clg0003ccaxajwagj8g"},{"post_id":"ckxvf7clb0001ccax2zkd8t4o","tag_id":"ckxt3o5ho000disaxfce4bn15","_id":"ckxvf7cli0005ccax9iz219lv"},{"post_id":"ckxvf7clb0001ccax2zkd8t4o","tag_id":"ckxt3o5hv000jisaxgningmx2","_id":"ckxvf7cm10009ccax9k0w4cw2"},{"post_id":"ckxvf7cl60000ccax2n0ccxl9","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn4l0004iwaxat8e9irn"},{"post_id":"ckxvf7cl60000ccax2n0ccxl9","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn4n0006iwaxd2ycgsrk"},{"post_id":"ckxvf7cle0002ccaxb60heplu","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn4u000aiwax4kcgb2g7"},{"post_id":"ckxvf7cle0002ccaxb60heplu","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn4x000ciwax1fzdd0se"},{"post_id":"ckxvf7clg0004ccax0nl2amzr","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn55000kiwaxafr53vh0"},{"post_id":"ckxvf7clg0004ccax0nl2amzr","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn57000miwax9qhfagu8"},{"post_id":"ckxvf7cm2000cccax6bj6f2tb","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5b000siwax1dqg390b"},{"post_id":"ckxvf7cm2000cccax6bj6f2tb","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5d000uiwaxh5g992o2"},{"post_id":"ckxvf7cm3000eccaxe0cs3aqh","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5e000xiwax7y0ieig8"},{"post_id":"ckxvf7cm3000eccaxe0cs3aqh","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5f000ziwax4gvx34q8"},{"post_id":"ckxvf7cli0006ccaxeq725fzz","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5h0012iwax4ahz11rk"},{"post_id":"ckxvf7cli0006ccaxeq725fzz","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5i0014iwaxe15h664y"},{"post_id":"ckxvf7cm1000accax9tfpghc2","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5j0016iwax2bzz0idg"},{"post_id":"ckxvf7cm1000accax9tfpghc2","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5m001aiwaxfpl5dnjn"},{"post_id":"ckxvf7cm6000iccax0x3k08vz","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5n001ciwaxdmhl76p7"},{"post_id":"ckxvf7cm6000iccax0x3k08vz","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5p001fiwaxesb04ht3"},{"post_id":"ckxvf7cme000kccaxbui1b2u6","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5r001hiwaxe5lvadyx"},{"post_id":"ckxvf7cme000kccaxbui1b2u6","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5s001jiwaxeza51wrv"},{"post_id":"ckxvf7cml000occax9s5u1m2l","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5t001liwax3iaecjb7"},{"post_id":"ckxvf7cml000occax9s5u1m2l","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5u001niwax95s1b1o1"},{"post_id":"ckxvf7cmi000lccax1tvr1t1m","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5v001piwaxc27b48py"},{"post_id":"ckxvf7cmi000lccax1tvr1t1m","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5w001riwax2tfkfhe2"},{"post_id":"ckxvf7cmk000nccaxg4cffzz9","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5x001tiwaxgkjb7623"},{"post_id":"ckxvf7cmk000nccaxg4cffzz9","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn5y001wiwaxdmyy7m3j"},{"post_id":"ckxvf7cmj000mccaxacmc8swx","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn5z001yiwax6p729m5i"},{"post_id":"ckxvf7cmj000mccaxacmc8swx","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn600020iwaxf27b8xm5"},{"post_id":"ckxvf7cmj000mccaxacmc8swx","tag_id":"ckxvgbn5m0019iwaxbou990c6","_id":"ckxvgbn610022iwax64g250yr"},{"post_id":"ckxvf7cmm000pccax6pmo6vku","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn620024iwax3l19hzhx"},{"post_id":"ckxvf7cmm000pccax6pmo6vku","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn630026iwax9sl31vcv"},{"post_id":"ckxvf7cmp000qccaxfp380c3f","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn640028iwax7onccuk1"},{"post_id":"ckxvf7cmp000qccaxfp380c3f","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn64002aiwaxf20l3mm4"},{"post_id":"ckxvf7cmr000rccax4pwpcvjm","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn65002ciwaxg3mz1ydm"},{"post_id":"ckxvf7cmr000rccax4pwpcvjm","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn65002eiwax6t0of731"},{"post_id":"ckxvf7cmr000rccax4pwpcvjm","tag_id":"ckxvgbn5m0019iwaxbou990c6","_id":"ckxvgbn65002giwaxc49n5sg8"},{"post_id":"ckxvf7cmv000vccax51yb51ny","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn65002iiwaxb5ecgpzd"},{"post_id":"ckxvf7cmv000vccax51yb51ny","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn66002kiwaxahj4agmh"},{"post_id":"ckxvf7cmt000sccax7c8s0cq9","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn66002miwaxbgl3gwgn"},{"post_id":"ckxvf7cmt000sccax7c8s0cq9","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn66002oiwax1s62fa30"},{"post_id":"ckxvf7cmu000tccaxg9qr6fl6","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn66002qiwax2omr34mk"},{"post_id":"ckxvf7cmu000tccaxg9qr6fl6","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn66002siwax11e7h7ed"},{"post_id":"ckxvf7cmu000tccaxg9qr6fl6","tag_id":"ckxvgbn5m0019iwaxbou990c6","_id":"ckxvgbn66002uiwaxem3o1f4u"},{"post_id":"ckxvf7cmv000uccaxgbps631k","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn66002wiwaxa5ql0sut"},{"post_id":"ckxvf7cmv000uccaxgbps631k","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn67002yiwaxay7zg554"},{"post_id":"ckxvf7cmv000uccaxgbps631k","tag_id":"ckxvgbn5m0019iwaxbou990c6","_id":"ckxvgbn670030iwax3m4jcywq"},{"post_id":"ckxvf7cmw000wccaxh6uo94rl","tag_id":"ckxvgbn3z0000iwax49j94o4a","_id":"ckxvgbn670032iwax16r9b220"},{"post_id":"ckxvf7cmw000wccaxh6uo94rl","tag_id":"ckxu6dni7000810ax1zqb3gu3","_id":"ckxvgbn670034iwax11vu8v67"}],"Tag":[{"name":"js","_id":"ckxt3o5hi0005isaxbatfdhlk"},{"name":"leetcode","_id":"ckxt3o5ho000disaxfce4bn15"},{"name":"算法","_id":"ckxt3o5hv000jisaxgningmx2"},{"name":"oracle","_id":"ckxt3o5jg003visax7l728zff"},{"name":"课程学习","_id":"ckxt3o5ji0043isaxcuelf9p4"},{"name":"Linux","_id":"ckxt3o5jk004eisaxd6xm4ldg"},{"name":"网络编程","_id":"ckxt3o5jl004lisax7ij2ehzk"},{"name":"bom","_id":"ckxu6dni2000310axgdl91zyp"},{"name":"前端","_id":"ckxu6dni7000810ax1zqb3gu3"},{"name":"CommonJS","_id":"ckxu6dnic000d10ax5sn72wz4"},{"name":"ES6","_id":"ckxu6dnij000q10ax6k59e80f"},{"name":"HTML","_id":"ckxu6dniq001510ax1qv9bp1a"},{"name":"DOM","_id":"ckxu6dnj1001l10axhk6f4yst"},{"name":"git","_id":"ckxu6dnj6001z10ax5oc39f4c"},{"name":"工具","_id":"ckxu6dnj8002410ax4ruxelym"},{"name":"less","_id":"ckxu6dnj9002d10ax8goeh85k"},{"name":"浏览器","_id":"ckxu6dnja002g10ax3zzygfh4"},{"name":"webpack","_id":"ckxu6dnjb002j10axfod29gjx"},{"name":"CSS","_id":"ckxu6dnjc002m10axb6o38l1b"},{"name":"bootstrap","_id":"ckxu6dnjc002q10axfkjj5966"},{"name":"网络","_id":"ckxu6dnjf002t10ax4obg36hn"},{"name":"vue2","_id":"ckxvgbn3z0000iwax49j94o4a"},{"name":"面试题","_id":"ckxvgbn5m0019iwaxbou990c6"}]}}